
freertos_AHT25_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08009db0  08009db0  00019db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a24c  0800a24c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a24c  0800a24c  0001a24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a254  0800a254  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a78  200001e0  0800a43c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  0800a43c  00024c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a515  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f8  00000000  00000000  0003a725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0003dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  0003f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004acc  00000000  00000000  00040930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193c8  00000000  00000000  000453fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c15d  00000000  00000000  0005e7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007464  00000000  00000000  000fa974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d94 	.word	0x08009d94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009d94 	.word	0x08009d94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <read_sensor_values>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float temperature, humidity;

void read_sensor_values(float *temperature, float *humidity)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t cmd = AHT25_MEASURE_CMD;
 8000f66:	23ac      	movs	r3, #172	; 0xac
 8000f68:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c1, AHT25_ADDR,&cmd, 1, HAL_MAX_DELAY);
 8000f6a:	f107 020f 	add.w	r2, r7, #15
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2170      	movs	r1, #112	; 0x70
 8000f78:	4836      	ldr	r0, [pc, #216]	; (8001054 <read_sensor_values+0xf8>)
 8000f7a:	f001 f857 	bl	800202c <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 8000f7e:	2064      	movs	r0, #100	; 0x64
 8000f80:	f000 fc86 	bl	8001890 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c1,0x71, data, 6, HAL_MAX_DELAY);
 8000f84:	f107 0210 	add.w	r2, r7, #16
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2306      	movs	r3, #6
 8000f90:	2171      	movs	r1, #113	; 0x71
 8000f92:	4830      	ldr	r0, [pc, #192]	; (8001054 <read_sensor_values+0xf8>)
 8000f94:	f001 f948 	bl	8002228 <HAL_I2C_Master_Receive>

    *humidity = ((float)((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))) / 1048576.0 * 100.0;
 8000f98:	7c7b      	ldrb	r3, [r7, #17]
 8000f9a:	031a      	lsls	r2, r3, #12
 8000f9c:	7cbb      	ldrb	r3, [r7, #18]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	7cfa      	ldrb	r2, [r7, #19]
 8000fa4:	0912      	lsrs	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb2:	ee17 0a90 	vmov	r0, s15
 8000fb6:	f7ff facf 	bl	8000558 <__aeabi_f2d>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <read_sensor_values+0xfc>)
 8000fc0:	f7ff fc4c 	bl	800085c <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <read_sensor_values+0x100>)
 8000fd2:	f7ff fb19 	bl	8000608 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fdeb 	bl	8000bb8 <__aeabi_d2f>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	601a      	str	r2, [r3, #0]
    *temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0 * 200.0 - 50.0;
 8000fe8:	7cfb      	ldrb	r3, [r7, #19]
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000ff0:	7d3b      	ldrb	r3, [r7, #20]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	7d7a      	ldrb	r2, [r7, #21]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	ee17 0a90 	vmov	r0, s15
 8001006:	f7ff faa7 	bl	8000558 <__aeabi_f2d>
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <read_sensor_values+0xfc>)
 8001010:	f7ff fc24 	bl	800085c <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <read_sensor_values+0x104>)
 8001022:	f7ff faf1 	bl	8000608 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <read_sensor_values+0x108>)
 8001034:	f7ff f930 	bl	8000298 <__aeabi_dsub>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fdba 	bl	8000bb8 <__aeabi_d2f>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]


}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001fc 	.word	0x200001fc
 8001058:	41300000 	.word	0x41300000
 800105c:	40590000 	.word	0x40590000
 8001060:	40690000 	.word	0x40690000
 8001064:	40490000 	.word	0x40490000

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fbce 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f834 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 f8f4 	bl	8001260 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001078:	f000 f8c8 	bl	800120c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800107c:	f000 f898 	bl	80011b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001080:	f003 f976 	bl	8004370 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <main+0x54>)
 8001086:	2102      	movs	r1, #2
 8001088:	2010      	movs	r0, #16
 800108a:	f003 fa68 	bl	800455e <osMessageQueueNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <main+0x58>)
 8001092:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <main+0x5c>)
 8001096:	2100      	movs	r1, #0
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <main+0x60>)
 800109a:	f003 f9b3 	bl	8004404 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <main+0x64>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <main+0x68>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <main+0x6c>)
 80010aa:	f003 f9ab 	bl	8004404 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <main+0x70>)
 80010b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010b4:	f003 f980 	bl	80043b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <main+0x50>
 80010ba:	bf00      	nop
 80010bc:	08009e44 	.word	0x08009e44
 80010c0:	2000029c 	.word	0x2000029c
 80010c4:	08009dfc 	.word	0x08009dfc
 80010c8:	080012b1 	.word	0x080012b1
 80010cc:	20000294 	.word	0x20000294
 80010d0:	08009e20 	.word	0x08009e20
 80010d4:	080012d5 	.word	0x080012d5
 80010d8:	20000298 	.word	0x20000298

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	; 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0320 	add.w	r3, r7, #32
 80010e6:	2230      	movs	r2, #48	; 0x30
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 ff76 	bl	8006fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <SystemClock_Config+0xcc>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <SystemClock_Config+0xcc>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemClock_Config+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <SystemClock_Config+0xd0>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800114c:	2310      	movs	r3, #16
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001150:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001156:	2304      	movs	r3, #4
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115a:	2304      	movs	r3, #4
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fdb4 	bl	8002cd0 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800116e:	f000 f8ed 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2102      	movs	r1, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f002 f816 	bl	80031c0 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800119a:	f000 f8d7 	bl	800134c <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_I2C1_Init+0x50>)
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <MX_I2C1_Init+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_I2C1_Init+0x50>)
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_I2C1_Init+0x58>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_I2C1_Init+0x50>)
 80011ee:	f000 fdd9 	bl	8001da4 <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f000 f8a8 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001fc 	.word	0x200001fc
 8001204:	40005400 	.word	0x40005400
 8001208:	000186a0 	.word	0x000186a0

0800120c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART2_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001244:	f002 fc8e 	bl	8003b64 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f87d 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000250 	.word	0x20000250
 800125c:	40004400 	.word	0x40004400

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_GPIO_Init+0x4c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <MX_GPIO_Init+0x4c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <MX_GPIO_Init+0x4c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_GPIO_Init+0x4c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <MX_GPIO_Init+0x4c>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_GPIO_Init+0x4c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  read_sensor_values(&temperature, &humidity);
 80012b8:	4904      	ldr	r1, [pc, #16]	; (80012cc <StartTask1+0x1c>)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <StartTask1+0x20>)
 80012bc:	f7ff fe4e 	bl	8000f5c <read_sensor_values>
      osDelay(1000);
 80012c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c4:	f003 f930 	bl	8004528 <osDelay>
	  read_sensor_values(&temperature, &humidity);
 80012c8:	e7f6      	b.n	80012b8 <StartTask1+0x8>
 80012ca:	bf00      	nop
 80012cc:	200002a4 	.word	0x200002a4
 80012d0:	200002a0 	.word	0x200002a0

080012d4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b09c      	sub	sp, #112	; 0x70
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  char buffer[100];
	  sprintf(buffer, "Temperature: %.2f°C\r", temperature);
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <StartTask2+0x48>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f939 	bl	8000558 <__aeabi_f2d>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	f107 000c 	add.w	r0, r7, #12
 80012ee:	490c      	ldr	r1, [pc, #48]	; (8001320 <StartTask2+0x4c>)
 80012f0:	f006 fae6 	bl	80078c0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7fe ff71 	bl	80001e0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f107 010c 	add.w	r1, r7, #12
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <StartTask2+0x50>)
 800130c:	f002 fc77 	bl	8003bfe <HAL_UART_Transmit>
      osDelay(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f003 f908 	bl	8004528 <osDelay>
  {
 8001318:	e7e0      	b.n	80012dc <StartTask2+0x8>
 800131a:	bf00      	nop
 800131c:	200002a0 	.word	0x200002a0
 8001320:	08009dcc 	.word	0x08009dcc
 8001324:	20000250 	.word	0x20000250

08001328 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d101      	bne.n	800133e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133a:	f000 fa89 	bl	8001850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40000800 	.word	0x40000800

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_MspInit+0x54>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_MspInit+0x54>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x54>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_MspInit+0x54>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_MspInit+0x54>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_MspInit+0x54>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	210f      	movs	r1, #15
 800139a:	f06f 0001 	mvn.w	r0, #1
 800139e:	f000 fb53 	bl	8001a48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_I2C_MspInit+0x84>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12c      	bne.n	800142c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_I2C_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_I2C_MspInit+0x88>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_I2C_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f4:	2312      	movs	r3, #18
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001400:	2304      	movs	r3, #4
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <HAL_I2C_MspInit+0x8c>)
 800140c:	f000 fb46 	bl	8001a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_I2C_MspInit+0x88>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_I2C_MspInit+0x88>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_I2C_MspInit+0x88>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005400 	.word	0x40005400
 8001438:	40023800 	.word	0x40023800
 800143c:	40020400 	.word	0x40020400

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x88>)
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800149a:	230c      	movs	r3, #12
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014aa:	2307      	movs	r3, #7
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0x8c>)
 80014b6:	f000 faf1 	bl	8001a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40004400 	.word	0x40004400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014dc:	2300      	movs	r3, #0
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_InitTick+0xe4>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <HAL_InitTick+0xe4>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_InitTick+0xe4>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014fc:	f107 0210 	add.w	r2, r7, #16
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f002 f87a 	bl	8003600 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001516:	f002 f84b 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 800151a:	6378      	str	r0, [r7, #52]	; 0x34
 800151c:	e004      	b.n	8001528 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800151e:	f002 f847 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8001522:	4603      	mov	r3, r0
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152a:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_InitTick+0xe8>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	3b01      	subs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_InitTick+0xec>)
 8001538:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <HAL_InitTick+0xf0>)
 800153a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_InitTick+0xec>)
 800153e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001542:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_InitTick+0xec>)
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_InitTick+0xec>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_InitTick+0xec>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_InitTick+0xec>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800155c:	4817      	ldr	r0, [pc, #92]	; (80015bc <HAL_InitTick+0xec>)
 800155e:	f002 f881 	bl	8003664 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001568:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800156c:	2b00      	cmp	r3, #0
 800156e:	d11b      	bne.n	80015a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001570:	4812      	ldr	r0, [pc, #72]	; (80015bc <HAL_InitTick+0xec>)
 8001572:	f002 f8d1 	bl	8003718 <HAL_TIM_Base_Start_IT>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800157c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001584:	201e      	movs	r0, #30
 8001586:	f000 fa7b 	bl	8001a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d808      	bhi.n	80015a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	201e      	movs	r0, #30
 8001596:	f000 fa57 	bl	8001a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_InitTick+0xf4>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e002      	b.n	80015a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	200002a8 	.word	0x200002a8
 80015c0:	40000800 	.word	0x40000800
 80015c4:	20000004 	.word	0x20000004

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM4_IRQHandler+0x10>)
 80015fa:	f002 f8ef 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200002a8 	.word	0x200002a8

08001608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return 1;
 800160c:	2301      	movs	r3, #1
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_kill>:

int _kill(int pid, int sig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001622:	f005 fca3 	bl	8006f6c <__errno>
 8001626:	4603      	mov	r3, r0
 8001628:	2216      	movs	r2, #22
 800162a:	601a      	str	r2, [r3, #0]
  return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_exit>:

void _exit (int status)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffe7 	bl	8001618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800164a:	e7fe      	b.n	800164a <_exit+0x12>

0800164c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e00a      	b.n	8001674 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165e:	f3af 8000 	nop.w
 8001662:	4601      	mov	r1, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf0      	blt.n	800165e <_read+0x12>
  }

  return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e009      	b.n	80016ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf1      	blt.n	8001698 <_write+0x12>
  }
  return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_close>:

int _close(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	605a      	str	r2, [r3, #4]
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_isatty>:

int _isatty(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001758:	f005 fc08 	bl	8006f6c <__errno>
 800175c:	4603      	mov	r3, r0
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001766:	e009      	b.n	800177c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20020000 	.word	0x20020000
 8001788:	00000400 	.word	0x00000400
 800178c:	200002f0 	.word	0x200002f0
 8001790:	20004c58 	.word	0x20004c58

08001794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <SystemInit+0x20>)
 800179a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <SystemInit+0x20>)
 80017a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017be:	490e      	ldr	r1, [pc, #56]	; (80017f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d4:	4c0b      	ldr	r4, [pc, #44]	; (8001804 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e2:	f7ff ffd7 	bl	8001794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f005 fbc7 	bl	8006f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7ff fc3d 	bl	8001068 <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017fc:	0800a25c 	.word	0x0800a25c
  ldr r2, =_sbss
 8001800:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001804:	20004c58 	.word	0x20004c58

08001808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_Init+0x40>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_Init+0x40>)
 8001822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x40>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f8fc 	bl	8001a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f7ff fe48 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fd8a 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00

08001850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	200002f4 	.word	0x200002f4

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	200002f4 	.word	0x200002f4

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff ffee 	bl	8001878 <HAL_GetTick>
 800189c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_Delay+0x44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b6:	bf00      	nop
 80018b8:	f7ff ffde 	bl	8001878 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff4c 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5a:	f7ff ff61 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	6978      	ldr	r0, [r7, #20]
 8001a66:	f7ff ffb1 	bl	80019cc <NVIC_EncodePriority>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff80 	bl	8001978 <__NVIC_SetPriority>
}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff54 	bl	800193c <__NVIC_EnableIRQ>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e159      	b.n	8001d6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8148 	bne.w	8001d66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d005      	beq.n	8001aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d130      	bne.n	8001b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	69b9      	ldr	r1, [r7, #24]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a2 	beq.w	8001d66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_GPIO_Init+0x2e8>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3e:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a49      	ldr	r2, [pc, #292]	; (8001d8c <HAL_GPIO_Init+0x2f0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x202>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a48      	ldr	r2, [pc, #288]	; (8001d90 <HAL_GPIO_Init+0x2f4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x1fe>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_GPIO_Init+0x2f8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x1fa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a46      	ldr	r2, [pc, #280]	; (8001d98 <HAL_GPIO_Init+0x2fc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x1f6>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <HAL_GPIO_Init+0x300>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x1f2>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x204>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x2ec>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d36:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d60:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <HAL_GPIO_Init+0x304>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f aea2 	bls.w	8001ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e12b      	b.n	800200e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff faf0 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e08:	f001 fbd2 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a81      	ldr	r2, [pc, #516]	; (8002018 <HAL_I2C_Init+0x274>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d807      	bhi.n	8001e28 <HAL_I2C_Init+0x84>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a80      	ldr	r2, [pc, #512]	; (800201c <HAL_I2C_Init+0x278>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e006      	b.n	8001e36 <HAL_I2C_Init+0x92>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a7d      	ldr	r2, [pc, #500]	; (8002020 <HAL_I2C_Init+0x27c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0e7      	b.n	800200e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a78      	ldr	r2, [pc, #480]	; (8002024 <HAL_I2C_Init+0x280>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0c9b      	lsrs	r3, r3, #18
 8001e48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a6a      	ldr	r2, [pc, #424]	; (8002018 <HAL_I2C_Init+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d802      	bhi.n	8001e78 <HAL_I2C_Init+0xd4>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	e009      	b.n	8001e8c <HAL_I2C_Init+0xe8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_I2C_Init+0x284>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	099b      	lsrs	r3, r3, #6
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	495c      	ldr	r1, [pc, #368]	; (8002018 <HAL_I2C_Init+0x274>)
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d819      	bhi.n	8001ee0 <HAL_I2C_Init+0x13c>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e59      	subs	r1, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_I2C_Init+0x138>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e59      	subs	r1, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eda:	e051      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e04f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d111      	bne.n	8001f0c <HAL_I2C_Init+0x168>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e012      	b.n	8001f32 <HAL_I2C_Init+0x18e>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e58      	subs	r0, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	0099      	lsls	r1, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Init+0x196>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e022      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10e      	bne.n	8001f60 <HAL_I2C_Init+0x1bc>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1e58      	subs	r0, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6859      	ldr	r1, [r3, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	440b      	add	r3, r1
 8001f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f54:	3301      	adds	r3, #1
 8001f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	e00f      	b.n	8001f80 <HAL_I2C_Init+0x1dc>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0099      	lsls	r1, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	6809      	ldr	r1, [r1, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6911      	ldr	r1, [r2, #16]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68d2      	ldr	r2, [r2, #12]
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	000186a0 	.word	0x000186a0
 800201c:	001e847f 	.word	0x001e847f
 8002020:	003d08ff 	.word	0x003d08ff
 8002024:	431bde83 	.word	0x431bde83
 8002028:	10624dd3 	.word	0x10624dd3

0800202c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	817b      	strh	r3, [r7, #10]
 800203c:	4613      	mov	r3, r2
 800203e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff fc1a 	bl	8001878 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 80e0 	bne.w	8002214 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	4970      	ldr	r1, [pc, #448]	; (8002220 <HAL_I2C_Master_Transmit+0x1f4>)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fc58 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	e0d3      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2C_Master_Transmit+0x50>
 8002078:	2302      	movs	r3, #2
 800207a:	e0cc      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d007      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2221      	movs	r2, #33	; 0x21
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2210      	movs	r2, #16
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	893a      	ldrh	r2, [r7, #8]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a50      	ldr	r2, [pc, #320]	; (8002224 <HAL_I2C_Master_Transmit+0x1f8>)
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020e4:	8979      	ldrh	r1, [r7, #10]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 fac2 	bl	8002674 <I2C_MasterRequestWrite>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e08d      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002110:	e066      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fcd2 	bl	8002ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d017      	beq.n	80021b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	6a39      	ldr	r1, [r7, #32]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fcc2 	bl	8002b42 <I2C_WaitOnBTFFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d107      	bne.n	80021dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e01a      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d194      	bne.n	8002112 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002214:	2302      	movs	r3, #2
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	00100002 	.word	0x00100002
 8002224:	ffff0000 	.word	0xffff0000

08002228 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fb1c 	bl	8001878 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	f040 820b 	bne.w	8002666 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2319      	movs	r3, #25
 8002256:	2201      	movs	r2, #1
 8002258:	497c      	ldr	r1, [pc, #496]	; (800244c <HAL_I2C_Master_Receive+0x224>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fb5a 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	e1fe      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_I2C_Master_Receive+0x50>
 8002274:	2302      	movs	r3, #2
 8002276:	e1f7      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d007      	beq.n	800229e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2222      	movs	r2, #34	; 0x22
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2210      	movs	r2, #16
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	893a      	ldrh	r2, [r7, #8]
 80022ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a5c      	ldr	r2, [pc, #368]	; (8002450 <HAL_I2C_Master_Receive+0x228>)
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fa46 	bl	8002778 <I2C_MasterRequestRead>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1b8      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d113      	bne.n	8002326 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e18c      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	2b01      	cmp	r3, #1
 800232c:	d11b      	bne.n	8002366 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e16c      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	2b02      	cmp	r3, #2
 800236c:	d11b      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	e14c      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023cc:	e138      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	f200 80f1 	bhi.w	80025ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d123      	bne.n	8002428 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fbed 	bl	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e139      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002426:	e10b      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	2b02      	cmp	r3, #2
 800242e:	d14e      	bne.n	80024ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	2200      	movs	r2, #0
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <HAL_I2C_Master_Receive+0x22c>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fa6a 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e10e      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000
 8002454:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024cc:	e0b8      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	2200      	movs	r2, #0
 80024d6:	4966      	ldr	r1, [pc, #408]	; (8002670 <HAL_I2C_Master_Receive+0x448>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fa1b 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0bf      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	2200      	movs	r2, #0
 8002532:	494f      	ldr	r1, [pc, #316]	; (8002670 <HAL_I2C_Master_Receive+0x448>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f9ed 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e091      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b8:	e042      	b.n	8002640 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fb00 	bl	8002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e04c      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d118      	bne.n	8002640 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f aec2 	bne.w	80023ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	00010004 	.word	0x00010004

08002674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d006      	beq.n	800269e <I2C_MasterRequestWrite+0x2a>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d003      	beq.n	800269e <I2C_MasterRequestWrite+0x2a>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800269c:	d108      	bne.n	80026b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e00b      	b.n	80026c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	2b12      	cmp	r3, #18
 80026b6:	d107      	bne.n	80026c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 f91d 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ee:	d103      	bne.n	80026f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e035      	b.n	8002768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002704:	d108      	bne.n	8002718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	e01b      	b.n	8002750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002718:	897b      	ldrh	r3, [r7, #10]
 800271a:	11db      	asrs	r3, r3, #7
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0306 	and.w	r3, r3, #6
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f063 030f 	orn	r3, r3, #15
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <I2C_MasterRequestWrite+0xfc>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f943 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e010      	b.n	8002768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4907      	ldr	r1, [pc, #28]	; (8002774 <I2C_MasterRequestWrite+0x100>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f933 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	00010008 	.word	0x00010008
 8002774:	00010002 	.word	0x00010002

08002778 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d006      	beq.n	80027b2 <I2C_MasterRequestRead+0x3a>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d003      	beq.n	80027b2 <I2C_MasterRequestRead+0x3a>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027b0:	d108      	bne.n	80027c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e00b      	b.n	80027dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	2b11      	cmp	r3, #17
 80027ca:	d107      	bne.n	80027dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f893 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002802:	d103      	bne.n	800280c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e079      	b.n	8002904 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002818:	d108      	bne.n	800282c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	e05f      	b.n	80028ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800282c:	897b      	ldrh	r3, [r7, #10]
 800282e:	11db      	asrs	r3, r3, #7
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f003 0306 	and.w	r3, r3, #6
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f063 030f 	orn	r3, r3, #15
 800283c:	b2da      	uxtb	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	4930      	ldr	r1, [pc, #192]	; (800290c <I2C_MasterRequestRead+0x194>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f8b9 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e054      	b.n	8002904 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800285a:	897b      	ldrh	r3, [r7, #10]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4929      	ldr	r1, [pc, #164]	; (8002910 <I2C_MasterRequestRead+0x198>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f8a9 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e044      	b.n	8002904 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f831 	bl	8002914 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	d103      	bne.n	80028d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e017      	b.n	8002904 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	11db      	asrs	r3, r3, #7
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0306 	and.w	r3, r3, #6
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f063 030e 	orn	r3, r3, #14
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <I2C_MasterRequestRead+0x198>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f865 	bl	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	00010008 	.word	0x00010008
 8002910:	00010002 	.word	0x00010002

08002914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002924:	e025      	b.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292c:	d021      	beq.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7fe ffa3 	bl	8001878 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d116      	bne.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f043 0220 	orr.w	r2, r3, #32
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e023      	b.n	80029ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10d      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0x84>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	43da      	mvns	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	e00c      	b.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d0b6      	beq.n	8002926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d0:	e051      	b.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e0:	d123      	bne.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f043 0204 	orr.w	r2, r3, #4
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e046      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d021      	beq.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe ff21 	bl	8001878 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d116      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e020      	b.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf14      	ite	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	2300      	moveq	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	e00b      	b.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d18d      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002acc:	e02d      	b.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f8ce 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e02d      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae4:	d021      	beq.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe fec7 	bl	8001878 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d116      	bne.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0220 	orr.w	r2, r3, #32
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e007      	b.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d1ca      	bne.n	8002ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b4e:	e02d      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f88d 	bl	8002c70 <I2C_IsAcknowledgeFailed>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02d      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b66:	d021      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe fe86 	bl	8001878 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d1ca      	bne.n	8002b50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd0:	e042      	b.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d119      	bne.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0210 	mvn.w	r2, #16
 8002be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e029      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c14:	f7fe fe30 	bl	8001878 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d1b5      	bne.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d11b      	bne.n	8002cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e267      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d075      	beq.n	8002dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cee:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cfa:	4b85      	ldr	r3, [pc, #532]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d112      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d06:	4b82      	ldr	r3, [pc, #520]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	4b7e      	ldr	r3, [pc, #504]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d05b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x108>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d157      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e242      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d106      	bne.n	8002d44 <HAL_RCC_OscConfig+0x74>
 8002d36:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a75      	ldr	r2, [pc, #468]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e01d      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x98>
 8002d4e:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6f      	ldr	r2, [pc, #444]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6c      	ldr	r2, [pc, #432]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0xb0>
 8002d68:	4b69      	ldr	r3, [pc, #420]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a68      	ldr	r2, [pc, #416]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a65      	ldr	r2, [pc, #404]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe fd76 	bl	8001878 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fd72 	bl	8001878 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e207      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0xc0>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fd62 	bl	8001878 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fd5e 	bl	8001878 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1f3      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dca:	4b51      	ldr	r3, [pc, #324]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0xe8>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dfe:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e1c7      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4937      	ldr	r1, [pc, #220]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e40:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fd17 	bl	8001878 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fd13 	bl	8001878 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e1a8      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4925      	ldr	r1, [pc, #148]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCC_OscConfig+0x244>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fcf6 	bl	8001878 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe fcf2 	bl	8001878 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e187      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d036      	beq.n	8002f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fcd6 	bl	8001878 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fcd2 	bl	8001878 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e167      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x200>
 8002eee:	e01b      	b.n	8002f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_OscConfig+0x248>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fcbf 	bl	8001878 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	e00e      	b.n	8002f1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efe:	f7fe fcbb 	bl	8001878 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d907      	bls.n	8002f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e150      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b88      	ldr	r3, [pc, #544]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ea      	bne.n	8002efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 8097 	beq.w	8003064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b81      	ldr	r3, [pc, #516]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b7a      	ldr	r3, [pc, #488]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f66:	4b77      	ldr	r3, [pc, #476]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d118      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f72:	4b74      	ldr	r3, [pc, #464]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a73      	ldr	r2, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fc7b 	bl	8001878 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f86:	f7fe fc77 	bl	8001878 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e10c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x474>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x2ea>
 8002fac:	4b64      	ldr	r3, [pc, #400]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a63      	ldr	r2, [pc, #396]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	e01c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x30c>
 8002fc2:	4b5f      	ldr	r3, [pc, #380]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a5e      	ldr	r2, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x324>
 8002fdc:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a57      	ldr	r2, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	4b55      	ldr	r3, [pc, #340]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a54      	ldr	r2, [pc, #336]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fc3c 	bl	8001878 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fc38 	bl	8001878 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0cb      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCC_OscConfig+0x334>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe fc26 	bl	8001878 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe fc22 	bl	8001878 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0b5      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ee      	bne.n	8003030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003058:	4b39      	ldr	r3, [pc, #228]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 800305e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a1 	beq.w	80031b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800306e:	4b34      	ldr	r3, [pc, #208]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b08      	cmp	r3, #8
 8003078:	d05c      	beq.n	8003134 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d141      	bne.n	8003106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RCC_OscConfig+0x478>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fbf6 	bl	8001878 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fe fbf2 	bl	8001878 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e087      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	491b      	ldr	r1, [pc, #108]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x478>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7fe fbcb 	bl	8001878 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e6:	f7fe fbc7 	bl	8001878 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e05c      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x416>
 8003104:	e054      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x478>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe fbb4 	bl	8001878 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fbb0 	bl	8001878 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e045      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_OscConfig+0x470>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x444>
 8003132:	e03d      	b.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e038      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
 8003140:	40023800 	.word	0x40023800
 8003144:	40007000 	.word	0x40007000
 8003148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_RCC_OscConfig+0x4ec>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d028      	beq.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d121      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11a      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800317c:	4013      	ands	r3, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	4293      	cmp	r3, r2
 8003186:	d111      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	3b01      	subs	r3, #1
 8003196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0cc      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d4:	4b68      	ldr	r3, [pc, #416]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d90c      	bls.n	80031fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b65      	ldr	r3, [pc, #404]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b63      	ldr	r3, [pc, #396]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003214:	4b59      	ldr	r3, [pc, #356]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800321e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800322c:	4b53      	ldr	r3, [pc, #332]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a52      	ldr	r2, [pc, #328]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	494d      	ldr	r1, [pc, #308]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d044      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d119      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d003      	beq.n	800327e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	2b03      	cmp	r3, #3
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b3f      	ldr	r3, [pc, #252]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e06f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e067      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329e:	4b37      	ldr	r3, [pc, #220]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 0203 	bic.w	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4934      	ldr	r1, [pc, #208]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fae2 	bl	8001878 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b8:	f7fe fade 	bl	8001878 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e04f      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 020c 	and.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1eb      	bne.n	80032b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d20c      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e032      	b.n	800336e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4916      	ldr	r1, [pc, #88]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	490e      	ldr	r1, [pc, #56]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003346:	f000 f821 	bl	800338c <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490a      	ldr	r1, [pc, #40]	; (8003380 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	4a09      	ldr	r2, [pc, #36]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe f8b2 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023c00 	.word	0x40023c00
 800337c:	40023800 	.word	0x40023800
 8003380:	08009e5c 	.word	0x08009e5c
 8003384:	20000000 	.word	0x20000000
 8003388:	20000004 	.word	0x20000004

0800338c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b094      	sub	sp, #80	; 0x50
 8003392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	647b      	str	r3, [r7, #68]	; 0x44
 8003398:	2300      	movs	r3, #0
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	2300      	movs	r3, #0
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a4:	4b79      	ldr	r3, [pc, #484]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d00d      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x40>
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	f200 80e1 	bhi.w	8003578 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d003      	beq.n	80033c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033be:	e0db      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_GetSysClockFreq+0x204>)
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033c4:	e0db      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c6:	4b73      	ldr	r3, [pc, #460]	; (8003594 <HAL_RCC_GetSysClockFreq+0x208>)
 80033c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ca:	e0d8      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d6:	4b6d      	ldr	r3, [pc, #436]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d063      	beq.n	80034aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e2:	4b6a      	ldr	r3, [pc, #424]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	099b      	lsrs	r3, r3, #6
 80033e8:	2200      	movs	r2, #0
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
 80033fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033fe:	4622      	mov	r2, r4
 8003400:	462b      	mov	r3, r5
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003410:	0150      	lsls	r0, r2, #5
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4621      	mov	r1, r4
 8003418:	1a51      	subs	r1, r2, r1
 800341a:	6139      	str	r1, [r7, #16]
 800341c:	4629      	mov	r1, r5
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003430:	4659      	mov	r1, fp
 8003432:	018b      	lsls	r3, r1, #6
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800343a:	4651      	mov	r1, sl
 800343c:	018a      	lsls	r2, r1, #6
 800343e:	4651      	mov	r1, sl
 8003440:	ebb2 0801 	subs.w	r8, r2, r1
 8003444:	4659      	mov	r1, fp
 8003446:	eb63 0901 	sbc.w	r9, r3, r1
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800345a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345e:	4690      	mov	r8, r2
 8003460:	4699      	mov	r9, r3
 8003462:	4623      	mov	r3, r4
 8003464:	eb18 0303 	adds.w	r3, r8, r3
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	462b      	mov	r3, r5
 800346c:	eb49 0303 	adc.w	r3, r9, r3
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800347e:	4629      	mov	r1, r5
 8003480:	024b      	lsls	r3, r1, #9
 8003482:	4621      	mov	r1, r4
 8003484:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003488:	4621      	mov	r1, r4
 800348a:	024a      	lsls	r2, r1, #9
 800348c:	4610      	mov	r0, r2
 800348e:	4619      	mov	r1, r3
 8003490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003492:	2200      	movs	r2, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
 8003496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800349c:	f7fd fbdc 	bl	8000c58 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4613      	mov	r3, r2
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	e058      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034aa:	4b38      	ldr	r3, [pc, #224]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	099b      	lsrs	r3, r3, #6
 80034b0:	2200      	movs	r2, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	4611      	mov	r1, r2
 80034b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	f04f 0000 	mov.w	r0, #0
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	0159      	lsls	r1, r3, #5
 80034d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d6:	0150      	lsls	r0, r2, #5
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4641      	mov	r1, r8
 80034de:	ebb2 0a01 	subs.w	sl, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003500:	eb63 050b 	sbc.w	r5, r3, fp
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	00eb      	lsls	r3, r5, #3
 800350e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003512:	00e2      	lsls	r2, r4, #3
 8003514:	4614      	mov	r4, r2
 8003516:	461d      	mov	r5, r3
 8003518:	4643      	mov	r3, r8
 800351a:	18e3      	adds	r3, r4, r3
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	464b      	mov	r3, r9
 8003520:	eb45 0303 	adc.w	r3, r5, r3
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003532:	4629      	mov	r1, r5
 8003534:	028b      	lsls	r3, r1, #10
 8003536:	4621      	mov	r1, r4
 8003538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800353c:	4621      	mov	r1, r4
 800353e:	028a      	lsls	r2, r1, #10
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003546:	2200      	movs	r2, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	61fa      	str	r2, [r7, #28]
 800354c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003550:	f7fd fb82 	bl	8000c58 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4613      	mov	r3, r2
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_GetSysClockFreq+0x200>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	3301      	adds	r3, #1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800356c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800356e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003576:	e002      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_GetSysClockFreq+0x204>)
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800357c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003580:	4618      	mov	r0, r3
 8003582:	3750      	adds	r7, #80	; 0x50
 8003584:	46bd      	mov	sp, r7
 8003586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	00f42400 	.word	0x00f42400
 8003594:	007a1200 	.word	0x007a1200

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035b4:	f7ff fff0 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08009e6c 	.word	0x08009e6c

080035d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035dc:	f7ff ffdc 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0b5b      	lsrs	r3, r3, #13
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	08009e6c 	.word	0x08009e6c

08003600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	220f      	movs	r2, #15
 800360e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003610:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_GetClockConfig+0x5c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	08db      	lsrs	r3, r3, #3
 800363a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <HAL_RCC_GetClockConfig+0x60>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	40023c00 	.word	0x40023c00

08003664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e041      	b.n	80036fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f839 	bl	8003702 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 f9ca 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e044      	b.n	80037ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x6c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375a:	d013      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x6c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1a      	ldr	r2, [pc, #104]	; (80037cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x6c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x6c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x6c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d111      	bne.n	80037a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b06      	cmp	r3, #6
 8003794:	d010      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	e007      	b.n	80037b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40014000 	.word	0x40014000

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8ee 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8e0 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8f1 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8c4 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8b6 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8c7 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f89a 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f88c 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f89d 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f870 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f862 	bl	80039ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f873 	bl	8003a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fce4 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8e2 	bl	8003b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f838 	bl	8003a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0220 	mvn.w	r2, #32
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8ac 	bl	8003b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a34      	ldr	r2, [pc, #208]	; (8003b20 <TIM_Base_SetConfig+0xe4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00f      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <TIM_Base_SetConfig+0xe8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a30      	ldr	r2, [pc, #192]	; (8003b28 <TIM_Base_SetConfig+0xec>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x38>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	; (8003b2c <TIM_Base_SetConfig+0xf0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <TIM_Base_SetConfig+0xe4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d017      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <TIM_Base_SetConfig+0xe8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <TIM_Base_SetConfig+0xec>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <TIM_Base_SetConfig+0xf0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <TIM_Base_SetConfig+0xf4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <TIM_Base_SetConfig+0xf8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <TIM_Base_SetConfig+0x8a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <TIM_Base_SetConfig+0xfc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d108      	bne.n	8003ad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a08      	ldr	r2, [pc, #32]	; (8003b20 <TIM_Base_SetConfig+0xe4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d103      	bne.n	8003b0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	615a      	str	r2, [r3, #20]
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800

08003b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e03f      	b.n	8003bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fc58 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f929 	bl	8003e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b08a      	sub	sp, #40	; 0x28
 8003c02:	af02      	add	r7, sp, #8
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d17c      	bne.n	8003d18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_Transmit+0x2c>
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e075      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x3e>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e06e      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2221      	movs	r2, #33	; 0x21
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c52:	f7fd fe11 	bl	8001878 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d108      	bne.n	8003c80 <HAL_UART_Transmit+0x82>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e003      	b.n	8003c88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c90:	e02a      	b.n	8003ce8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f840 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e036      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e007      	b.n	8003cda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1cf      	bne.n	8003c92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2140      	movs	r1, #64	; 0x40
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f810 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b090      	sub	sp, #64	; 0x40
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	e050      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3a:	d04c      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d42:	f7fd fd99 	bl	8001878 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d241      	bcs.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d72:	637a      	str	r2, [r7, #52]	; 0x34
 8003d74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da6:	623a      	str	r2, [r7, #32]
 8003da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	69f9      	ldr	r1, [r7, #28]
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d09f      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3740      	adds	r7, #64	; 0x40
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e04:	b0c0      	sub	sp, #256	; 0x100
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	ea40 0301 	orr.w	r3, r0, r1
 8003e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e58:	f021 010c 	bic.w	r1, r1, #12
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e66:	430b      	orrs	r3, r1
 8003e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	6999      	ldr	r1, [r3, #24]
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	ea40 0301 	orr.w	r3, r0, r1
 8003e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b8f      	ldr	r3, [pc, #572]	; (80040cc <UART_SetConfig+0x2cc>)
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d005      	beq.n	8003ea0 <UART_SetConfig+0xa0>
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b8d      	ldr	r3, [pc, #564]	; (80040d0 <UART_SetConfig+0x2d0>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d104      	bne.n	8003eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7ff fb9a 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ea8:	e003      	b.n	8003eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eaa:	f7ff fb81 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8003eae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ebc:	f040 810c 	bne.w	80040d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	1891      	adds	r1, r2, r2
 8003ed8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003eda:	415b      	adcs	r3, r3
 8003edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	eb12 0801 	adds.w	r8, r2, r1
 8003ee8:	4629      	mov	r1, r5
 8003eea:	eb43 0901 	adc.w	r9, r3, r1
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f02:	4690      	mov	r8, r2
 8003f04:	4699      	mov	r9, r3
 8003f06:	4623      	mov	r3, r4
 8003f08:	eb18 0303 	adds.w	r3, r8, r3
 8003f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f10:	462b      	mov	r3, r5
 8003f12:	eb49 0303 	adc.w	r3, r9, r3
 8003f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f2e:	460b      	mov	r3, r1
 8003f30:	18db      	adds	r3, r3, r3
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50
 8003f34:	4613      	mov	r3, r2
 8003f36:	eb42 0303 	adc.w	r3, r2, r3
 8003f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f44:	f7fc fe88 	bl	8000c58 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	011c      	lsls	r4, r3, #4
 8003f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	464b      	mov	r3, r9
 8003f6c:	1891      	adds	r1, r2, r2
 8003f6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f70:	415b      	adcs	r3, r3
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f78:	4641      	mov	r1, r8
 8003f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f7e:	4649      	mov	r1, r9
 8003f80:	eb43 0b01 	adc.w	fp, r3, r1
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f98:	4692      	mov	sl, r2
 8003f9a:	469b      	mov	fp, r3
 8003f9c:	4643      	mov	r3, r8
 8003f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003fda:	f7fc fe3d 	bl	8000c58 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2264      	movs	r2, #100	; 0x64
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	1acb      	subs	r3, r1, r3
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004008:	441c      	add	r4, r3
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004014:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	1891      	adds	r1, r2, r2
 8004022:	63b9      	str	r1, [r7, #56]	; 0x38
 8004024:	415b      	adcs	r3, r3
 8004026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800402c:	4641      	mov	r1, r8
 800402e:	1851      	adds	r1, r2, r1
 8004030:	6339      	str	r1, [r7, #48]	; 0x30
 8004032:	4649      	mov	r1, r9
 8004034:	414b      	adcs	r3, r1
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004044:	4659      	mov	r1, fp
 8004046:	00cb      	lsls	r3, r1, #3
 8004048:	4651      	mov	r1, sl
 800404a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404e:	4651      	mov	r1, sl
 8004050:	00ca      	lsls	r2, r1, #3
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	4603      	mov	r3, r0
 8004058:	4642      	mov	r2, r8
 800405a:	189b      	adds	r3, r3, r2
 800405c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004060:	464b      	mov	r3, r9
 8004062:	460a      	mov	r2, r1
 8004064:	eb42 0303 	adc.w	r3, r2, r3
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004078:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800407c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004080:	460b      	mov	r3, r1
 8004082:	18db      	adds	r3, r3, r3
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
 8004086:	4613      	mov	r3, r2
 8004088:	eb42 0303 	adc.w	r3, r2, r3
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004096:	f7fc fddf 	bl	8000c58 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <UART_SetConfig+0x2d4>)
 80040a0:	fba3 1302 	umull	r1, r3, r3, r2
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	2164      	movs	r1, #100	; 0x64
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	3332      	adds	r3, #50	; 0x32
 80040b2:	4a08      	ldr	r2, [pc, #32]	; (80040d4 <UART_SetConfig+0x2d4>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	f003 0207 	and.w	r2, r3, #7
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4422      	add	r2, r4
 80040c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040c8:	e105      	b.n	80042d6 <UART_SetConfig+0x4d6>
 80040ca:	bf00      	nop
 80040cc:	40011000 	.word	0x40011000
 80040d0:	40011400 	.word	0x40011400
 80040d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80040e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040ea:	4642      	mov	r2, r8
 80040ec:	464b      	mov	r3, r9
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	6239      	str	r1, [r7, #32]
 80040f2:	415b      	adcs	r3, r3
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
 80040f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040fa:	4641      	mov	r1, r8
 80040fc:	1854      	adds	r4, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb43 0501 	adc.w	r5, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	00eb      	lsls	r3, r5, #3
 800410e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004112:	00e2      	lsls	r2, r4, #3
 8004114:	4614      	mov	r4, r2
 8004116:	461d      	mov	r5, r3
 8004118:	4643      	mov	r3, r8
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004120:	464b      	mov	r3, r9
 8004122:	eb45 0303 	adc.w	r3, r5, r3
 8004126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004146:	4629      	mov	r1, r5
 8004148:	008b      	lsls	r3, r1, #2
 800414a:	4621      	mov	r1, r4
 800414c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004150:	4621      	mov	r1, r4
 8004152:	008a      	lsls	r2, r1, #2
 8004154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004158:	f7fc fd7e 	bl	8000c58 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b60      	ldr	r3, [pc, #384]	; (80042e4 <UART_SetConfig+0x4e4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004174:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	61b9      	str	r1, [r7, #24]
 8004184:	415b      	adcs	r3, r3
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418c:	4641      	mov	r1, r8
 800418e:	1851      	adds	r1, r2, r1
 8004190:	6139      	str	r1, [r7, #16]
 8004192:	4649      	mov	r1, r9
 8004194:	414b      	adcs	r3, r1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a4:	4659      	mov	r1, fp
 80041a6:	00cb      	lsls	r3, r1, #3
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ae:	4651      	mov	r1, sl
 80041b0:	00ca      	lsls	r2, r1, #3
 80041b2:	4610      	mov	r0, r2
 80041b4:	4619      	mov	r1, r3
 80041b6:	4603      	mov	r3, r0
 80041b8:	4642      	mov	r2, r8
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041c0:	464b      	mov	r3, r9
 80041c2:	460a      	mov	r2, r1
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80041e4:	4649      	mov	r1, r9
 80041e6:	008b      	lsls	r3, r1, #2
 80041e8:	4641      	mov	r1, r8
 80041ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ee:	4641      	mov	r1, r8
 80041f0:	008a      	lsls	r2, r1, #2
 80041f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041f6:	f7fc fd2f 	bl	8000c58 <__aeabi_uldivmod>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <UART_SetConfig+0x4e4>)
 8004200:	fba3 1302 	umull	r1, r3, r3, r2
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	2164      	movs	r1, #100	; 0x64
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	3332      	adds	r3, #50	; 0x32
 8004212:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <UART_SetConfig+0x4e4>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421e:	441c      	add	r4, r3
 8004220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004224:	2200      	movs	r2, #0
 8004226:	673b      	str	r3, [r7, #112]	; 0x70
 8004228:	677a      	str	r2, [r7, #116]	; 0x74
 800422a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800422e:	4642      	mov	r2, r8
 8004230:	464b      	mov	r3, r9
 8004232:	1891      	adds	r1, r2, r2
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	415b      	adcs	r3, r3
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800423e:	4641      	mov	r1, r8
 8004240:	1851      	adds	r1, r2, r1
 8004242:	6039      	str	r1, [r7, #0]
 8004244:	4649      	mov	r1, r9
 8004246:	414b      	adcs	r3, r1
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004256:	4659      	mov	r1, fp
 8004258:	00cb      	lsls	r3, r1, #3
 800425a:	4651      	mov	r1, sl
 800425c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004260:	4651      	mov	r1, sl
 8004262:	00ca      	lsls	r2, r1, #3
 8004264:	4610      	mov	r0, r2
 8004266:	4619      	mov	r1, r3
 8004268:	4603      	mov	r3, r0
 800426a:	4642      	mov	r2, r8
 800426c:	189b      	adds	r3, r3, r2
 800426e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004270:	464b      	mov	r3, r9
 8004272:	460a      	mov	r2, r1
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	663b      	str	r3, [r7, #96]	; 0x60
 8004284:	667a      	str	r2, [r7, #100]	; 0x64
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004292:	4649      	mov	r1, r9
 8004294:	008b      	lsls	r3, r1, #2
 8004296:	4641      	mov	r1, r8
 8004298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429c:	4641      	mov	r1, r8
 800429e:	008a      	lsls	r2, r1, #2
 80042a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042a4:	f7fc fcd8 	bl	8000c58 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <UART_SetConfig+0x4e4>)
 80042ae:	fba3 1302 	umull	r1, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2164      	movs	r1, #100	; 0x64
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <UART_SetConfig+0x4e4>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4422      	add	r2, r4
 80042d4:	609a      	str	r2, [r3, #8]
}
 80042d6:	bf00      	nop
 80042d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80042dc:	46bd      	mov	sp, r7
 80042de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e2:	bf00      	nop
 80042e4:	51eb851f 	.word	0x51eb851f

080042e8 <__NVIC_SetPriority>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	db0a      	blt.n	8004312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	490c      	ldr	r1, [pc, #48]	; (8004334 <__NVIC_SetPriority+0x4c>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	440b      	add	r3, r1
 800430c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004310:	e00a      	b.n	8004328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4908      	ldr	r1, [pc, #32]	; (8004338 <__NVIC_SetPriority+0x50>)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	3b04      	subs	r3, #4
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	440b      	add	r3, r1
 8004326:	761a      	strb	r2, [r3, #24]
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <SysTick_Handler+0x1c>)
 8004342:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004344:	f001 fdaa 	bl	8005e9c <xTaskGetSchedulerState>
 8004348:	4603      	mov	r3, r0
 800434a:	2b01      	cmp	r3, #1
 800434c:	d001      	beq.n	8004352 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800434e:	f002 fb93 	bl	8006a78 <xPortSysTickHandler>
  }
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	e000e010 	.word	0xe000e010

0800435c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004360:	2100      	movs	r1, #0
 8004362:	f06f 0004 	mvn.w	r0, #4
 8004366:	f7ff ffbf 	bl	80042e8 <__NVIC_SetPriority>
#endif
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004376:	f3ef 8305 	mrs	r3, IPSR
 800437a:	603b      	str	r3, [r7, #0]
  return(result);
 800437c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004382:	f06f 0305 	mvn.w	r3, #5
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e00c      	b.n	80043a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <osKernelInitialize+0x44>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d105      	bne.n	800439e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <osKernelInitialize+0x44>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004398:	2300      	movs	r3, #0
 800439a:	607b      	str	r3, [r7, #4]
 800439c:	e002      	b.n	80043a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043a4:	687b      	ldr	r3, [r7, #4]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	200002f8 	.word	0x200002f8

080043b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043be:	f3ef 8305 	mrs	r3, IPSR
 80043c2:	603b      	str	r3, [r7, #0]
  return(result);
 80043c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ca:	f06f 0305 	mvn.w	r3, #5
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e010      	b.n	80043f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <osKernelStart+0x48>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d109      	bne.n	80043ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043da:	f7ff ffbf 	bl	800435c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <osKernelStart+0x48>)
 80043e0:	2202      	movs	r2, #2
 80043e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043e4:	f001 f912 	bl	800560c <vTaskStartScheduler>
      stat = osOK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	e002      	b.n	80043f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043f4:	687b      	ldr	r3, [r7, #4]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200002f8 	.word	0x200002f8

08004404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b08e      	sub	sp, #56	; 0x38
 8004408:	af04      	add	r7, sp, #16
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004414:	f3ef 8305 	mrs	r3, IPSR
 8004418:	617b      	str	r3, [r7, #20]
  return(result);
 800441a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800441c:	2b00      	cmp	r3, #0
 800441e:	d17e      	bne.n	800451e <osThreadNew+0x11a>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07b      	beq.n	800451e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800442a:	2318      	movs	r3, #24
 800442c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d045      	beq.n	80044ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <osThreadNew+0x48>
        name = attr->name;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <osThreadNew+0x6e>
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b38      	cmp	r3, #56	; 0x38
 8004464:	d805      	bhi.n	8004472 <osThreadNew+0x6e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <osThreadNew+0x72>
        return (NULL);
 8004472:	2300      	movs	r3, #0
 8004474:	e054      	b.n	8004520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00e      	beq.n	80044ac <osThreadNew+0xa8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b5b      	cmp	r3, #91	; 0x5b
 8004494:	d90a      	bls.n	80044ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <osThreadNew+0xa8>
        mem = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e010      	b.n	80044ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10c      	bne.n	80044ce <osThreadNew+0xca>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <osThreadNew+0xca>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <osThreadNew+0xca>
          mem = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	e001      	b.n	80044ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d110      	bne.n	80044f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044dc:	9202      	str	r2, [sp, #8]
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	6a3a      	ldr	r2, [r7, #32]
 80044e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 feb8 	bl	8005260 <xTaskCreateStatic>
 80044f0:	4603      	mov	r3, r0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e013      	b.n	800451e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d110      	bne.n	800451e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f107 0310 	add.w	r3, r7, #16
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 ff03 	bl	800531a <xTaskCreate>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <osThreadNew+0x11a>
            hTask = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800451e:	693b      	ldr	r3, [r7, #16]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004530:	f3ef 8305 	mrs	r3, IPSR
 8004534:	60bb      	str	r3, [r7, #8]
  return(result);
 8004536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <osDelay+0x1c>
    stat = osErrorISR;
 800453c:	f06f 0305 	mvn.w	r3, #5
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e007      	b.n	8004554 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <osDelay+0x2c>
      vTaskDelay(ticks);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 f828 	bl	80055a4 <vTaskDelay>
    }
  }

  return (stat);
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800455e:	b580      	push	{r7, lr}
 8004560:	b08a      	sub	sp, #40	; 0x28
 8004562:	af02      	add	r7, sp, #8
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800456e:	f3ef 8305 	mrs	r3, IPSR
 8004572:	613b      	str	r3, [r7, #16]
  return(result);
 8004574:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004576:	2b00      	cmp	r3, #0
 8004578:	d15f      	bne.n	800463a <osMessageQueueNew+0xdc>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05c      	beq.n	800463a <osMessageQueueNew+0xdc>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d059      	beq.n	800463a <osMessageQueueNew+0xdc>
    mem = -1;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800458a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d029      	beq.n	80045e6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d012      	beq.n	80045c0 <osMessageQueueNew+0x62>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b4f      	cmp	r3, #79	; 0x4f
 80045a0:	d90e      	bls.n	80045c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <osMessageQueueNew+0x62>
        mem = 1;
 80045ba:	2301      	movs	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e014      	b.n	80045ea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d110      	bne.n	80045ea <osMessageQueueNew+0x8c>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10c      	bne.n	80045ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <osMessageQueueNew+0x8c>
          mem = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e001      	b.n	80045ea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10b      	bne.n	8004608 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2100      	movs	r1, #0
 80045fa:	9100      	str	r1, [sp, #0]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f970 	bl	80048e4 <xQueueGenericCreateStatic>
 8004604:	61f8      	str	r0, [r7, #28]
 8004606:	e008      	b.n	800461a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800460e:	2200      	movs	r2, #0
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f9de 	bl	80049d4 <xQueueGenericCreate>
 8004618:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e001      	b.n	8004632 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004632:	6979      	ldr	r1, [r7, #20]
 8004634:	69f8      	ldr	r0, [r7, #28]
 8004636:	f000 fdb5 	bl	80051a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800463a:	69fb      	ldr	r3, [r7, #28]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a07      	ldr	r2, [pc, #28]	; (8004670 <vApplicationGetIdleTaskMemory+0x2c>)
 8004654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a06      	ldr	r2, [pc, #24]	; (8004674 <vApplicationGetIdleTaskMemory+0x30>)
 800465a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	601a      	str	r2, [r3, #0]
}
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200002fc 	.word	0x200002fc
 8004674:	20000358 	.word	0x20000358

08004678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4a07      	ldr	r2, [pc, #28]	; (80046a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a06      	ldr	r2, [pc, #24]	; (80046a8 <vApplicationGetTimerTaskMemory+0x30>)
 800468e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004696:	601a      	str	r2, [r3, #0]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20000558 	.word	0x20000558
 80046a8:	200005b4 	.word	0x200005b4

080046ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f103 0208 	add.w	r2, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f103 0208 	add.w	r2, r3, #8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f103 0208 	add.w	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	601a      	str	r2, [r3, #0]
}
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004764:	d103      	bne.n	800476e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e00c      	b.n	8004788 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3308      	adds	r3, #8
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e002      	b.n	800477c <vListInsert+0x2e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d2f6      	bcs.n	8004776 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6892      	ldr	r2, [r2, #8]
 80047d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6852      	ldr	r2, [r2, #4]
 80047e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d103      	bne.n	80047f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1e5a      	subs	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800483e:	f002 f889 	bl	8006954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	3b01      	subs	r3, #1
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	441a      	add	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	22ff      	movs	r2, #255	; 0xff
 8004882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d114      	bne.n	80048be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01a      	beq.n	80048d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3310      	adds	r3, #16
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 f93d 	bl	8005b20 <xTaskRemoveFromEventList>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d012      	beq.n	80048d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <xQueueGenericReset+0xcc>)
 80048ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	e009      	b.n	80048d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3310      	adds	r3, #16
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fef2 	bl	80046ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3324      	adds	r3, #36	; 0x24
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff feed 	bl	80046ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048d2:	f002 f86f 	bl	80069b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048d6:	2301      	movs	r3, #1
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08e      	sub	sp, #56	; 0x38
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004926:	bf00      	nop
 8004928:	e7fe      	b.n	8004928 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <xQueueGenericCreateStatic+0x52>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <xQueueGenericCreateStatic+0x56>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <xQueueGenericCreateStatic+0x58>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	623b      	str	r3, [r7, #32]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <xQueueGenericCreateStatic+0x7e>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <xQueueGenericCreateStatic+0x82>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <xQueueGenericCreateStatic+0x84>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	61fb      	str	r3, [r7, #28]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004982:	2350      	movs	r3, #80	; 0x50
 8004984:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b50      	cmp	r3, #80	; 0x50
 800498a:	d00a      	beq.n	80049a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	61bb      	str	r3, [r7, #24]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f83f 	bl	8004a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3730      	adds	r7, #48	; 0x30
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	; 0x28
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	613b      	str	r3, [r7, #16]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3350      	adds	r3, #80	; 0x50
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f002 f8c3 	bl	8006b98 <pvPortMalloc>
 8004a12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3350      	adds	r3, #80	; 0x50
 8004a22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a2c:	79fa      	ldrb	r2, [r7, #7]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f805 	bl	8004a48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e002      	b.n	8004a6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a76:	2101      	movs	r1, #1
 8004a78:	69b8      	ldr	r0, [r7, #24]
 8004a7a:	f7ff fecb 	bl	8004814 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08e      	sub	sp, #56	; 0x38
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueGenericSend+0x32>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d103      	bne.n	8004ad0 <xQueueGenericSend+0x40>
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <xQueueGenericSend+0x44>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <xQueueGenericSend+0x46>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <xQueueGenericSend+0x60>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d103      	bne.n	8004afe <xQueueGenericSend+0x6e>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <xQueueGenericSend+0x72>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xQueueGenericSend+0x74>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueGenericSend+0x8e>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	623b      	str	r3, [r7, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b1e:	f001 f9bd 	bl	8005e9c <xTaskGetSchedulerState>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <xQueueGenericSend+0x9e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xQueueGenericSend+0xa2>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueGenericSend+0xa4>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xQueueGenericSend+0xbe>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	61fb      	str	r3, [r7, #28]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4e:	f001 ff01 	bl	8006954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <xQueueGenericSend+0xd4>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d129      	bne.n	8004bb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b6a:	f000 fa0b 	bl	8004f84 <prvCopyDataToQueue>
 8004b6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	3324      	adds	r3, #36	; 0x24
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ffcf 	bl	8005b20 <xTaskRemoveFromEventList>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b88:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <xQueueGenericSend+0x1f8>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	e00a      	b.n	8004bb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ba0:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <xQueueGenericSend+0x1f8>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bb0:	f001 ff00 	bl	80069b4 <vPortExitCritical>
				return pdPASS;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e063      	b.n	8004c80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bbe:	f001 fef9 	bl	80069b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e05c      	b.n	8004c80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 f809 	bl	8005be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bda:	f001 feeb 	bl	80069b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bde:	f000 fd7b 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004be2:	f001 feb7 	bl	8006954 <vPortEnterCritical>
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bec:	b25b      	sxtb	r3, r3
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf2:	d103      	bne.n	8004bfc <xQueueGenericSend+0x16c>
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c02:	b25b      	sxtb	r3, r3
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c08:	d103      	bne.n	8004c12 <xQueueGenericSend+0x182>
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c12:	f001 fecf 	bl	80069b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c16:	1d3a      	adds	r2, r7, #4
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fff8 	bl	8005c14 <xTaskCheckForTimeOut>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d124      	bne.n	8004c74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2c:	f000 faa2 	bl	8005174 <prvIsQueueFull>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d018      	beq.n	8004c68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	3310      	adds	r3, #16
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 ff1e 	bl	8005a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c46:	f000 fa2d 	bl	80050a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c4a:	f000 fd53 	bl	80056f4 <xTaskResumeAll>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f47f af7c 	bne.w	8004b4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <xQueueGenericSend+0x1f8>)
 8004c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	e772      	b.n	8004b4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6a:	f000 fa1b 	bl	80050a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c6e:	f000 fd41 	bl	80056f4 <xTaskResumeAll>
 8004c72:	e76c      	b.n	8004b4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c76:	f000 fa15 	bl	80050a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c7a:	f000 fd3b 	bl	80056f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3738      	adds	r7, #56	; 0x38
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b090      	sub	sp, #64	; 0x40
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <xQueueGenericSendFromISR+0x3c>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <xQueueGenericSendFromISR+0x40>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <xQueueGenericSendFromISR+0x42>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d103      	bne.n	8004cf6 <xQueueGenericSendFromISR+0x6a>
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <xQueueGenericSendFromISR+0x6e>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <xQueueGenericSendFromISR+0x70>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	623b      	str	r3, [r7, #32]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d16:	f001 feff 	bl	8006b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d1a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	61fa      	str	r2, [r7, #28]
 8004d30:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d32:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <xQueueGenericSendFromISR+0xbc>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d12f      	bne.n	8004da8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d5e:	f000 f911 	bl	8004f84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6a:	d112      	bne.n	8004d92 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d016      	beq.n	8004da2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	3324      	adds	r3, #36	; 0x24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fed1 	bl	8005b20 <xTaskRemoveFromEventList>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00e      	beq.n	8004da2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e007      	b.n	8004da2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d96:	3301      	adds	r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	b25a      	sxtb	r2, r3
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004da2:	2301      	movs	r3, #1
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004da6:	e001      	b.n	8004dac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004db6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3740      	adds	r7, #64	; 0x40
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10a      	bne.n	8004df4 <xQueueReceive+0x30>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	623b      	str	r3, [r7, #32]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <xQueueReceive+0x3e>
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <xQueueReceive+0x42>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <xQueueReceive+0x44>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xQueueReceive+0x5e>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	61fb      	str	r3, [r7, #28]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e22:	f001 f83b 	bl	8005e9c <xTaskGetSchedulerState>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <xQueueReceive+0x6e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <xQueueReceive+0x72>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <xQueueReceive+0x74>
 8004e36:	2300      	movs	r3, #0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xQueueReceive+0x8e>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	61bb      	str	r3, [r7, #24]
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e52:	f001 fd7f 	bl	8006954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01f      	beq.n	8004ea2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e66:	f000 f8f7 	bl	8005058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	3310      	adds	r3, #16
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fe4e 	bl	8005b20 <xTaskRemoveFromEventList>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e8a:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <xQueueReceive+0x1bc>)
 8004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e9a:	f001 fd8b 	bl	80069b4 <vPortExitCritical>
				return pdPASS;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e069      	b.n	8004f76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ea8:	f001 fd84 	bl	80069b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e062      	b.n	8004f76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eb6:	f107 0310 	add.w	r3, r7, #16
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fe94 	bl	8005be8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ec4:	f001 fd76 	bl	80069b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ec8:	f000 fc06 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ecc:	f001 fd42 	bl	8006954 <vPortEnterCritical>
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ed6:	b25b      	sxtb	r3, r3
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004edc:	d103      	bne.n	8004ee6 <xQueueReceive+0x122>
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eec:	b25b      	sxtb	r3, r3
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ef2:	d103      	bne.n	8004efc <xQueueReceive+0x138>
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004efc:	f001 fd5a 	bl	80069b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f00:	1d3a      	adds	r2, r7, #4
 8004f02:	f107 0310 	add.w	r3, r7, #16
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fe83 	bl	8005c14 <xTaskCheckForTimeOut>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d123      	bne.n	8004f5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f16:	f000 f917 	bl	8005148 <prvIsQueueEmpty>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d017      	beq.n	8004f50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	3324      	adds	r3, #36	; 0x24
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fda9 	bl	8005a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f30:	f000 f8b8 	bl	80050a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f34:	f000 fbde 	bl	80056f4 <xTaskResumeAll>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d189      	bne.n	8004e52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <xQueueReceive+0x1bc>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	e780      	b.n	8004e52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f52:	f000 f8a7 	bl	80050a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f56:	f000 fbcd 	bl	80056f4 <xTaskResumeAll>
 8004f5a:	e77a      	b.n	8004e52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5e:	f000 f8a1 	bl	80050a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f62:	f000 fbc7 	bl	80056f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f68:	f000 f8ee 	bl	8005148 <prvIsQueueEmpty>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f43f af6f 	beq.w	8004e52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3730      	adds	r7, #48	; 0x30
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d14d      	bne.n	8005046 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 ff92 	bl	8005ed8 <xTaskPriorityDisinherit>
 8004fb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	e043      	b.n	8005046 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d119      	bne.n	8004ff8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6858      	ldr	r0, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	f001 fff6 	bl	8006fc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	441a      	add	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d32b      	bcc.n	8005046 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	e026      	b.n	8005046 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68d8      	ldr	r0, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	461a      	mov	r2, r3
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	f001 ffdc 	bl	8006fc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	425b      	negs	r3, r3
 8005012:	441a      	add	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d207      	bcs.n	8005034 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	425b      	negs	r3, r3
 800502e:	441a      	add	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d105      	bne.n	8005046 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	3b01      	subs	r3, #1
 8005044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d303      	bcc.n	800508c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68d9      	ldr	r1, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	461a      	mov	r2, r3
 8005096:	6838      	ldr	r0, [r7, #0]
 8005098:	f001 ff92 	bl	8006fc0 <memcpy>
	}
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050ac:	f001 fc52 	bl	8006954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050b8:	e011      	b.n	80050de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d012      	beq.n	80050e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fd2a 	bl	8005b20 <xTaskRemoveFromEventList>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050d2:	f000 fe01 	bl	8005cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	3b01      	subs	r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dce9      	bgt.n	80050ba <prvUnlockQueue+0x16>
 80050e6:	e000      	b.n	80050ea <prvUnlockQueue+0x46>
					break;
 80050e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	22ff      	movs	r2, #255	; 0xff
 80050ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050f2:	f001 fc5f 	bl	80069b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050f6:	f001 fc2d 	bl	8006954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005100:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005102:	e011      	b.n	8005128 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d012      	beq.n	8005132 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3310      	adds	r3, #16
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fd05 	bl	8005b20 <xTaskRemoveFromEventList>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800511c:	f000 fddc 	bl	8005cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	3b01      	subs	r3, #1
 8005124:	b2db      	uxtb	r3, r3
 8005126:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512c:	2b00      	cmp	r3, #0
 800512e:	dce9      	bgt.n	8005104 <prvUnlockQueue+0x60>
 8005130:	e000      	b.n	8005134 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005132:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	22ff      	movs	r2, #255	; 0xff
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800513c:	f001 fc3a 	bl	80069b4 <vPortExitCritical>
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005150:	f001 fc00 	bl	8006954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e001      	b.n	8005166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f001 fc25 	bl	80069b4 <vPortExitCritical>

	return xReturn;
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800517c:	f001 fbea 	bl	8006954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	429a      	cmp	r2, r3
 800518a:	d102      	bne.n	8005192 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e001      	b.n	8005196 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f001 fc0d 	bl	80069b4 <vPortExitCritical>

	return xReturn;
 800519a:	68fb      	ldr	r3, [r7, #12]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e014      	b.n	80051de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051b4:	4a0f      	ldr	r2, [pc, #60]	; (80051f4 <vQueueAddToRegistry+0x50>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051c0:	490c      	ldr	r1, [pc, #48]	; (80051f4 <vQueueAddToRegistry+0x50>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <vQueueAddToRegistry+0x50>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051d6:	e006      	b.n	80051e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b07      	cmp	r3, #7
 80051e2:	d9e7      	bls.n	80051b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	200009b4 	.word	0x200009b4

080051f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005208:	f001 fba4 	bl	8006954 <vPortEnterCritical>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005212:	b25b      	sxtb	r3, r3
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005218:	d103      	bne.n	8005222 <vQueueWaitForMessageRestricted+0x2a>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005228:	b25b      	sxtb	r3, r3
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800522e:	d103      	bne.n	8005238 <vQueueWaitForMessageRestricted+0x40>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005238:	f001 fbbc 	bl	80069b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3324      	adds	r3, #36	; 0x24
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fc3b 	bl	8005ac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005252:	6978      	ldr	r0, [r7, #20]
 8005254:	f7ff ff26 	bl	80050a4 <prvUnlockQueue>
	}
 8005258:	bf00      	nop
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08e      	sub	sp, #56	; 0x38
 8005264:	af04      	add	r7, sp, #16
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	623b      	str	r3, [r7, #32]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	61fb      	str	r3, [r7, #28]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052a6:	235c      	movs	r3, #92	; 0x5c
 80052a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b5c      	cmp	r3, #92	; 0x5c
 80052ae:	d00a      	beq.n	80052c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	61bb      	str	r3, [r7, #24]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01e      	beq.n	800530c <xTaskCreateStatic+0xac>
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052e6:	2300      	movs	r3, #0
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9302      	str	r3, [sp, #8]
 80052ee:	f107 0314 	add.w	r3, r7, #20
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f850 	bl	80053a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005306:	f000 f8dd 	bl	80054c4 <prvAddNewTaskToReadyList>
 800530a:	e001      	b.n	8005310 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005310:	697b      	ldr	r3, [r7, #20]
	}
 8005312:	4618      	mov	r0, r3
 8005314:	3728      	adds	r7, #40	; 0x28
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800531a:	b580      	push	{r7, lr}
 800531c:	b08c      	sub	sp, #48	; 0x30
 800531e:	af04      	add	r7, sp, #16
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4618      	mov	r0, r3
 8005330:	f001 fc32 	bl	8006b98 <pvPortMalloc>
 8005334:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800533c:	205c      	movs	r0, #92	; 0x5c
 800533e:	f001 fc2b 	bl	8006b98 <pvPortMalloc>
 8005342:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
 8005350:	e005      	b.n	800535e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005352:	6978      	ldr	r0, [r7, #20]
 8005354:	f001 fcec 	bl	8006d30 <vPortFree>
 8005358:	e001      	b.n	800535e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	2300      	movs	r3, #0
 8005370:	9303      	str	r3, [sp, #12]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	9302      	str	r3, [sp, #8]
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f80e 	bl	80053a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005388:	69f8      	ldr	r0, [r7, #28]
 800538a:	f000 f89b 	bl	80054c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800538e:	2301      	movs	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	e002      	b.n	800539a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800539a:	69bb      	ldr	r3, [r7, #24]
	}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	21a5      	movs	r1, #165	; 0xa5
 80053be:	f001 fe0d 	bl	8006fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053cc:	3b01      	subs	r3, #1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	617b      	str	r3, [r7, #20]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01f      	beq.n	8005442 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e012      	b.n	800542e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	7819      	ldrb	r1, [r3, #0]
 8005410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	3334      	adds	r3, #52	; 0x34
 8005418:	460a      	mov	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d006      	beq.n	8005436 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	3301      	adds	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	2b0f      	cmp	r3, #15
 8005432:	d9e9      	bls.n	8005408 <prvInitialiseNewTask+0x64>
 8005434:	e000      	b.n	8005438 <prvInitialiseNewTask+0x94>
			{
				break;
 8005436:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005440:	e003      	b.n	800544a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	2b37      	cmp	r3, #55	; 0x37
 800544e:	d901      	bls.n	8005454 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005450:	2337      	movs	r3, #55	; 0x37
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	3304      	adds	r3, #4
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff f93e 	bl	80046ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	3318      	adds	r3, #24
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f939 	bl	80046ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2200      	movs	r2, #0
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	69b8      	ldr	r0, [r7, #24]
 80054a4:	f001 f928 	bl	80066f8 <pxPortInitialiseStack>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ba:	bf00      	nop
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054cc:	f001 fa42 	bl	8006954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <prvAddNewTaskToReadyList+0xc4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a2c      	ldr	r2, [pc, #176]	; (8005588 <prvAddNewTaskToReadyList+0xc4>)
 80054d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054da:	4b2c      	ldr	r3, [pc, #176]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054e2:	4a2a      	ldr	r2, [pc, #168]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054e8:	4b27      	ldr	r3, [pc, #156]	; (8005588 <prvAddNewTaskToReadyList+0xc4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d110      	bne.n	8005512 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054f0:	f000 fc16 	bl	8005d20 <prvInitialiseTaskLists>
 80054f4:	e00d      	b.n	8005512 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <prvAddNewTaskToReadyList+0xcc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	429a      	cmp	r2, r3
 800550a:	d802      	bhi.n	8005512 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005512:	4b20      	ldr	r3, [pc, #128]	; (8005594 <prvAddNewTaskToReadyList+0xd0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3301      	adds	r3, #1
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <prvAddNewTaskToReadyList+0xd0>)
 800551a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800551c:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <prvAddNewTaskToReadyList+0xd0>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <prvAddNewTaskToReadyList+0xd4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d903      	bls.n	8005538 <prvAddNewTaskToReadyList+0x74>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a18      	ldr	r2, [pc, #96]	; (8005598 <prvAddNewTaskToReadyList+0xd4>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a15      	ldr	r2, [pc, #84]	; (800559c <prvAddNewTaskToReadyList+0xd8>)
 8005546:	441a      	add	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f7ff f8d9 	bl	8004706 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005554:	f001 fa2e 	bl	80069b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <prvAddNewTaskToReadyList+0xcc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <prvAddNewTaskToReadyList+0xc8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	429a      	cmp	r2, r3
 800556c:	d207      	bcs.n	800557e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <prvAddNewTaskToReadyList+0xdc>)
 8005570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000ec8 	.word	0x20000ec8
 800558c:	200009f4 	.word	0x200009f4
 8005590:	20000ed4 	.word	0x20000ed4
 8005594:	20000ee4 	.word	0x20000ee4
 8005598:	20000ed0 	.word	0x20000ed0
 800559c:	200009f8 	.word	0x200009f8
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <vTaskDelay+0x60>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <vTaskDelay+0x30>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60bb      	str	r3, [r7, #8]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055d4:	f000 f880 	bl	80056d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fcea 	bl	8005fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055e0:	f000 f888 	bl	80056f4 <xTaskResumeAll>
 80055e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d107      	bne.n	80055fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <vTaskDelay+0x64>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000ef0 	.word	0x20000ef0
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800561a:	463a      	mov	r2, r7
 800561c:	1d39      	adds	r1, r7, #4
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff f80e 	bl	8004644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	9202      	str	r2, [sp, #8]
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	2300      	movs	r3, #0
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	460a      	mov	r2, r1
 800563a:	4921      	ldr	r1, [pc, #132]	; (80056c0 <vTaskStartScheduler+0xb4>)
 800563c:	4821      	ldr	r0, [pc, #132]	; (80056c4 <vTaskStartScheduler+0xb8>)
 800563e:	f7ff fe0f 	bl	8005260 <xTaskCreateStatic>
 8005642:	4603      	mov	r3, r0
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <vTaskStartScheduler+0xbc>)
 8005646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005648:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <vTaskStartScheduler+0xbc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e001      	b.n	800565a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d102      	bne.n	8005666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005660:	f000 fcfc 	bl	800605c <xTimerCreateTimerTask>
 8005664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d116      	bne.n	800569a <vTaskStartScheduler+0x8e>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <vTaskStartScheduler+0xc0>)
 8005682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005688:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <vTaskStartScheduler+0xc4>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <vTaskStartScheduler+0xc8>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005694:	f001 f8bc 	bl	8006810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005698:	e00e      	b.n	80056b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a0:	d10a      	bne.n	80056b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	60fb      	str	r3, [r7, #12]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <vTaskStartScheduler+0xaa>
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08009de4 	.word	0x08009de4
 80056c4:	08005cf1 	.word	0x08005cf1
 80056c8:	20000eec 	.word	0x20000eec
 80056cc:	20000ee8 	.word	0x20000ee8
 80056d0:	20000ed4 	.word	0x20000ed4
 80056d4:	20000ecc 	.word	0x20000ecc

080056d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <vTaskSuspendAll+0x18>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	4a03      	ldr	r2, [pc, #12]	; (80056f0 <vTaskSuspendAll+0x18>)
 80056e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056e6:	bf00      	nop
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000ef0 	.word	0x20000ef0

080056f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005702:	4b42      	ldr	r3, [pc, #264]	; (800580c <xTaskResumeAll+0x118>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <xTaskResumeAll+0x2c>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	603b      	str	r3, [r7, #0]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005720:	f001 f918 	bl	8006954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <xTaskResumeAll+0x118>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3b01      	subs	r3, #1
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <xTaskResumeAll+0x118>)
 800572c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <xTaskResumeAll+0x118>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d162      	bne.n	80057fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <xTaskResumeAll+0x11c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d05e      	beq.n	80057fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573e:	e02f      	b.n	80057a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005740:	4b34      	ldr	r3, [pc, #208]	; (8005814 <xTaskResumeAll+0x120>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3318      	adds	r3, #24
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff f837 	bl	80047c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff f832 	bl	80047c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <xTaskResumeAll+0x124>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d903      	bls.n	8005770 <xTaskResumeAll+0x7c>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4a2a      	ldr	r2, [pc, #168]	; (8005818 <xTaskResumeAll+0x124>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <xTaskResumeAll+0x128>)
 800577e:	441a      	add	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fe ffbd 	bl	8004706 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b23      	ldr	r3, [pc, #140]	; (8005820 <xTaskResumeAll+0x12c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800579a:	4b22      	ldr	r3, [pc, #136]	; (8005824 <xTaskResumeAll+0x130>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <xTaskResumeAll+0x120>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1cb      	bne.n	8005740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ae:	f000 fb55 	bl	8005e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057b2:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <xTaskResumeAll+0x134>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057be:	f000 f847 	bl	8005850 <xTaskIncrementTick>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <xTaskResumeAll+0x130>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f1      	bne.n	80057be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <xTaskResumeAll+0x134>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057e0:	4b10      	ldr	r3, [pc, #64]	; (8005824 <xTaskResumeAll+0x130>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057ec:	4b0f      	ldr	r3, [pc, #60]	; (800582c <xTaskResumeAll+0x138>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057fc:	f001 f8da 	bl	80069b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005800:	68bb      	ldr	r3, [r7, #8]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000ef0 	.word	0x20000ef0
 8005810:	20000ec8 	.word	0x20000ec8
 8005814:	20000e88 	.word	0x20000e88
 8005818:	20000ed0 	.word	0x20000ed0
 800581c:	200009f8 	.word	0x200009f8
 8005820:	200009f4 	.word	0x200009f4
 8005824:	20000edc 	.word	0x20000edc
 8005828:	20000ed8 	.word	0x20000ed8
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005836:	4b05      	ldr	r3, [pc, #20]	; (800584c <xTaskGetTickCount+0x1c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800583c:	687b      	ldr	r3, [r7, #4]
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000ecc 	.word	0x20000ecc

08005850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585a:	4b4f      	ldr	r3, [pc, #316]	; (8005998 <xTaskIncrementTick+0x148>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 808f 	bne.w	8005982 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005864:	4b4d      	ldr	r3, [pc, #308]	; (800599c <xTaskIncrementTick+0x14c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3301      	adds	r3, #1
 800586a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800586c:	4a4b      	ldr	r2, [pc, #300]	; (800599c <xTaskIncrementTick+0x14c>)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d120      	bne.n	80058ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005878:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <xTaskIncrementTick+0x150>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <xTaskIncrementTick+0x48>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	603b      	str	r3, [r7, #0]
}
 8005894:	bf00      	nop
 8005896:	e7fe      	b.n	8005896 <xTaskIncrementTick+0x46>
 8005898:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <xTaskIncrementTick+0x150>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	4b41      	ldr	r3, [pc, #260]	; (80059a4 <xTaskIncrementTick+0x154>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3f      	ldr	r2, [pc, #252]	; (80059a0 <xTaskIncrementTick+0x150>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4a3f      	ldr	r2, [pc, #252]	; (80059a4 <xTaskIncrementTick+0x154>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <xTaskIncrementTick+0x158>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3301      	adds	r3, #1
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <xTaskIncrementTick+0x158>)
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	f000 fad1 	bl	8005e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058ba:	4b3c      	ldr	r3, [pc, #240]	; (80059ac <xTaskIncrementTick+0x15c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d349      	bcc.n	8005958 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c4:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <xTaskIncrementTick+0x150>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ce:	4b37      	ldr	r3, [pc, #220]	; (80059ac <xTaskIncrementTick+0x15c>)
 80058d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058d4:	601a      	str	r2, [r3, #0]
					break;
 80058d6:	e03f      	b.n	8005958 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d8:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <xTaskIncrementTick+0x150>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d203      	bcs.n	80058f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058f0:	4a2e      	ldr	r2, [pc, #184]	; (80059ac <xTaskIncrementTick+0x15c>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058f6:	e02f      	b.n	8005958 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe ff5f 	bl	80047c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe ff56 	bl	80047c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <xTaskIncrementTick+0x160>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d903      	bls.n	8005928 <xTaskIncrementTick+0xd8>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <xTaskIncrementTick+0x160>)
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <xTaskIncrementTick+0x164>)
 8005936:	441a      	add	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f7fe fee1 	bl	8004706 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <xTaskIncrementTick+0x168>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	429a      	cmp	r2, r3
 8005950:	d3b8      	bcc.n	80058c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005952:	2301      	movs	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	e7b5      	b.n	80058c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005958:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <xTaskIncrementTick+0x168>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	4915      	ldr	r1, [pc, #84]	; (80059b4 <xTaskIncrementTick+0x164>)
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d901      	bls.n	8005974 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <xTaskIncrementTick+0x16c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e004      	b.n	800598c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005982:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <xTaskIncrementTick+0x170>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	4a0d      	ldr	r2, [pc, #52]	; (80059c0 <xTaskIncrementTick+0x170>)
 800598a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800598c:	697b      	ldr	r3, [r7, #20]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000ef0 	.word	0x20000ef0
 800599c:	20000ecc 	.word	0x20000ecc
 80059a0:	20000e80 	.word	0x20000e80
 80059a4:	20000e84 	.word	0x20000e84
 80059a8:	20000ee0 	.word	0x20000ee0
 80059ac:	20000ee8 	.word	0x20000ee8
 80059b0:	20000ed0 	.word	0x20000ed0
 80059b4:	200009f8 	.word	0x200009f8
 80059b8:	200009f4 	.word	0x200009f4
 80059bc:	20000edc 	.word	0x20000edc
 80059c0:	20000ed8 	.word	0x20000ed8

080059c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059ca:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <vTaskSwitchContext+0xa8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059d2:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <vTaskSwitchContext+0xac>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059d8:	e041      	b.n	8005a5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80059da:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <vTaskSwitchContext+0xac>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e0:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <vTaskSwitchContext+0xb0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e010      	b.n	8005a0a <vTaskSwitchContext+0x46>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <vTaskSwitchContext+0x40>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <vTaskSwitchContext+0x3e>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	491b      	ldr	r1, [pc, #108]	; (8005a78 <vTaskSwitchContext+0xb4>)
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	440b      	add	r3, r1
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0e4      	beq.n	80059e8 <vTaskSwitchContext+0x24>
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <vTaskSwitchContext+0xb4>)
 8005a2a:	4413      	add	r3, r2
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d104      	bne.n	8005a4e <vTaskSwitchContext+0x8a>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <vTaskSwitchContext+0xb8>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	4a06      	ldr	r2, [pc, #24]	; (8005a74 <vTaskSwitchContext+0xb0>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6013      	str	r3, [r2, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000ef0 	.word	0x20000ef0
 8005a70:	20000edc 	.word	0x20000edc
 8005a74:	20000ed0 	.word	0x20000ed0
 8005a78:	200009f8 	.word	0x200009f8
 8005a7c:	200009f4 	.word	0x200009f4

08005a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <vTaskPlaceOnEventList+0x44>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3318      	adds	r3, #24
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fe fe4d 	bl	800474e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6838      	ldr	r0, [r7, #0]
 8005ab8:	f000 fa7c 	bl	8005fb4 <prvAddCurrentTaskToDelayedList>
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	200009f4 	.word	0x200009f4

08005ac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	617b      	str	r3, [r7, #20]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <vTaskPlaceOnEventListRestricted+0x54>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3318      	adds	r3, #24
 8005af6:	4619      	mov	r1, r3
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7fe fe04 	bl	8004706 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f000 fa51 	bl	8005fb4 <prvAddCurrentTaskToDelayedList>
	}
 8005b12:	bf00      	nop
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200009f4 	.word	0x200009f4

08005b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60fb      	str	r3, [r7, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fe35 	bl	80047c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b56:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <xTaskRemoveFromEventList+0xb0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11d      	bne.n	8005b9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fe2c 	bl	80047c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <xTaskRemoveFromEventList+0xb4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d903      	bls.n	8005b7c <xTaskRemoveFromEventList+0x5c>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <xTaskRemoveFromEventList+0xb4>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <xTaskRemoveFromEventList+0xb8>)
 8005b8a:	441a      	add	r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7fe fdb7 	bl	8004706 <vListInsertEnd>
 8005b98:	e005      	b.n	8005ba6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	480e      	ldr	r0, [pc, #56]	; (8005bdc <xTaskRemoveFromEventList+0xbc>)
 8005ba2:	f7fe fdb0 	bl	8004706 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <xTaskRemoveFromEventList+0xc0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d905      	bls.n	8005bc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <xTaskRemoveFromEventList+0xc4>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e001      	b.n	8005bc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bc4:	697b      	ldr	r3, [r7, #20]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000ef0 	.word	0x20000ef0
 8005bd4:	20000ed0 	.word	0x20000ed0
 8005bd8:	200009f8 	.word	0x200009f8
 8005bdc:	20000e88 	.word	0x20000e88
 8005be0:	200009f4 	.word	0x200009f4
 8005be4:	20000edc 	.word	0x20000edc

08005be8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bf0:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <vTaskInternalSetTimeOutState+0x24>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <vTaskInternalSetTimeOutState+0x28>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	605a      	str	r2, [r3, #4]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000ee0 	.word	0x20000ee0
 8005c10:	20000ecc 	.word	0x20000ecc

08005c14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	613b      	str	r3, [r7, #16]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	60fb      	str	r3, [r7, #12]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c56:	f000 fe7d 	bl	8006954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c5a:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <xTaskCheckForTimeOut+0xbc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c72:	d102      	bne.n	8005c7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e023      	b.n	8005cc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b15      	ldr	r3, [pc, #84]	; (8005cd4 <xTaskCheckForTimeOut+0xc0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d007      	beq.n	8005c96 <xTaskCheckForTimeOut+0x82>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d302      	bcc.n	8005c96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e015      	b.n	8005cc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d20b      	bcs.n	8005cb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ff9b 	bl	8005be8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	e004      	b.n	8005cc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cc2:	f000 fe77 	bl	80069b4 <vPortExitCritical>

	return xReturn;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3720      	adds	r7, #32
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000ecc 	.word	0x20000ecc
 8005cd4:	20000ee0 	.word	0x20000ee0

08005cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <vTaskMissedYield+0x14>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000edc 	.word	0x20000edc

08005cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005cf8:	f000 f852 	bl	8005da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <prvIdleTask+0x28>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d9f9      	bls.n	8005cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <prvIdleTask+0x2c>)
 8005d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d14:	e7f0      	b.n	8005cf8 <prvIdleTask+0x8>
 8005d16:	bf00      	nop
 8005d18:	200009f8 	.word	0x200009f8
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	e00c      	b.n	8005d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a12      	ldr	r2, [pc, #72]	; (8005d80 <prvInitialiseTaskLists+0x60>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fcb6 	bl	80046ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3301      	adds	r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b37      	cmp	r3, #55	; 0x37
 8005d4a:	d9ef      	bls.n	8005d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d4c:	480d      	ldr	r0, [pc, #52]	; (8005d84 <prvInitialiseTaskLists+0x64>)
 8005d4e:	f7fe fcad 	bl	80046ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d52:	480d      	ldr	r0, [pc, #52]	; (8005d88 <prvInitialiseTaskLists+0x68>)
 8005d54:	f7fe fcaa 	bl	80046ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d58:	480c      	ldr	r0, [pc, #48]	; (8005d8c <prvInitialiseTaskLists+0x6c>)
 8005d5a:	f7fe fca7 	bl	80046ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d5e:	480c      	ldr	r0, [pc, #48]	; (8005d90 <prvInitialiseTaskLists+0x70>)
 8005d60:	f7fe fca4 	bl	80046ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d64:	480b      	ldr	r0, [pc, #44]	; (8005d94 <prvInitialiseTaskLists+0x74>)
 8005d66:	f7fe fca1 	bl	80046ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <prvInitialiseTaskLists+0x78>)
 8005d6c:	4a05      	ldr	r2, [pc, #20]	; (8005d84 <prvInitialiseTaskLists+0x64>)
 8005d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <prvInitialiseTaskLists+0x7c>)
 8005d72:	4a05      	ldr	r2, [pc, #20]	; (8005d88 <prvInitialiseTaskLists+0x68>)
 8005d74:	601a      	str	r2, [r3, #0]
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200009f8 	.word	0x200009f8
 8005d84:	20000e58 	.word	0x20000e58
 8005d88:	20000e6c 	.word	0x20000e6c
 8005d8c:	20000e88 	.word	0x20000e88
 8005d90:	20000e9c 	.word	0x20000e9c
 8005d94:	20000eb4 	.word	0x20000eb4
 8005d98:	20000e80 	.word	0x20000e80
 8005d9c:	20000e84 	.word	0x20000e84

08005da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005da6:	e019      	b.n	8005ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005da8:	f000 fdd4 	bl	8006954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dac:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <prvCheckTasksWaitingTermination+0x50>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fe fd01 	bl	80047c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	4a0b      	ldr	r2, [pc, #44]	; (8005df4 <prvCheckTasksWaitingTermination+0x54>)
 8005dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <prvCheckTasksWaitingTermination+0x58>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <prvCheckTasksWaitingTermination+0x58>)
 8005dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dd2:	f000 fdef 	bl	80069b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f810 	bl	8005dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <prvCheckTasksWaitingTermination+0x58>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e1      	bne.n	8005da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000e9c 	.word	0x20000e9c
 8005df4:	20000ec8 	.word	0x20000ec8
 8005df8:	20000eb0 	.word	0x20000eb0

08005dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 ff8c 	bl	8006d30 <vPortFree>
				vPortFree( pxTCB );
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 ff89 	bl	8006d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e1e:	e018      	b.n	8005e52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d103      	bne.n	8005e32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 ff80 	bl	8006d30 <vPortFree>
	}
 8005e30:	e00f      	b.n	8005e52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d00a      	beq.n	8005e52 <prvDeleteTCB+0x56>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <prvDeleteTCB+0x54>
	}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <prvResetNextTaskUnblockTime+0x38>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <prvResetNextTaskUnblockTime+0x3c>)
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e74:	e008      	b.n	8005e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <prvResetNextTaskUnblockTime+0x38>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <prvResetNextTaskUnblockTime+0x3c>)
 8005e86:	6013      	str	r3, [r2, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20000e80 	.word	0x20000e80
 8005e98:	20000ee8 	.word	0x20000ee8

08005e9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <xTaskGetSchedulerState+0x34>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	e008      	b.n	8005ec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <xTaskGetSchedulerState+0x38>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	e001      	b.n	8005ec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ec2:	687b      	ldr	r3, [r7, #4]
	}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000ed4 	.word	0x20000ed4
 8005ed4:	20000ef0 	.word	0x20000ef0

08005ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d056      	beq.n	8005f9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <xTaskPriorityDisinherit+0xd0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d00a      	beq.n	8005f0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	60fb      	str	r3, [r7, #12]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d02c      	beq.n	8005f9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d128      	bne.n	8005f9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fc36 	bl	80047c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <xTaskPriorityDisinherit+0xd4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d903      	bls.n	8005f7c <xTaskPriorityDisinherit+0xa4>
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <xTaskPriorityDisinherit+0xd4>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <xTaskPriorityDisinherit+0xd8>)
 8005f8a:	441a      	add	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fe fbb7 	bl	8004706 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f9c:	697b      	ldr	r3, [r7, #20]
	}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200009f4 	.word	0x200009f4
 8005fac:	20000ed0 	.word	0x20000ed0
 8005fb0:	200009f8 	.word	0x200009f8

08005fb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fbe:	4b21      	ldr	r3, [pc, #132]	; (8006044 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fc4:	4b20      	ldr	r3, [pc, #128]	; (8006048 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fbf8 	bl	80047c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd6:	d10a      	bne.n	8005fee <prvAddCurrentTaskToDelayedList+0x3a>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fde:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4819      	ldr	r0, [pc, #100]	; (800604c <prvAddCurrentTaskToDelayedList+0x98>)
 8005fe8:	f7fe fb8d 	bl	8004706 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fec:	e026      	b.n	800603c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	429a      	cmp	r2, r3
 8006004:	d209      	bcs.n	800601a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <prvAddCurrentTaskToDelayedList+0x94>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fb9b 	bl	800474e <vListInsert>
}
 8006018:	e010      	b.n	800603c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <prvAddCurrentTaskToDelayedList+0xa0>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b0a      	ldr	r3, [pc, #40]	; (8006048 <prvAddCurrentTaskToDelayedList+0x94>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe fb91 	bl	800474e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <prvAddCurrentTaskToDelayedList+0xa4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	d202      	bcs.n	800603c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006036:	4a08      	ldr	r2, [pc, #32]	; (8006058 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6013      	str	r3, [r2, #0]
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000ecc 	.word	0x20000ecc
 8006048:	200009f4 	.word	0x200009f4
 800604c:	20000eb4 	.word	0x20000eb4
 8006050:	20000e84 	.word	0x20000e84
 8006054:	20000e80 	.word	0x20000e80
 8006058:	20000ee8 	.word	0x20000ee8

0800605c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006066:	f000 fb07 	bl	8006678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800606a:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <xTimerCreateTimerTask+0x80>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d021      	beq.n	80060b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800607a:	1d3a      	adds	r2, r7, #4
 800607c:	f107 0108 	add.w	r1, r7, #8
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe faf7 	bl	8004678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	9202      	str	r2, [sp, #8]
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	2302      	movs	r3, #2
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	2300      	movs	r3, #0
 800609a:	460a      	mov	r2, r1
 800609c:	4910      	ldr	r1, [pc, #64]	; (80060e0 <xTimerCreateTimerTask+0x84>)
 800609e:	4811      	ldr	r0, [pc, #68]	; (80060e4 <xTimerCreateTimerTask+0x88>)
 80060a0:	f7ff f8de 	bl	8005260 <xTaskCreateStatic>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <xTimerCreateTimerTask+0x8c>)
 80060a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060aa:	4b0f      	ldr	r3, [pc, #60]	; (80060e8 <xTimerCreateTimerTask+0x8c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060b2:	2301      	movs	r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	613b      	str	r3, [r7, #16]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060d2:	697b      	ldr	r3, [r7, #20]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000f24 	.word	0x20000f24
 80060e0:	08009dec 	.word	0x08009dec
 80060e4:	08006221 	.word	0x08006221
 80060e8:	20000f28 	.word	0x20000f28

080060ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060fa:	2300      	movs	r3, #0
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	623b      	str	r3, [r7, #32]
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800611a:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <xTimerGenericCommand+0x98>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d02a      	beq.n	8006178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b05      	cmp	r3, #5
 8006132:	dc18      	bgt.n	8006166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006134:	f7ff feb2 	bl	8005e9c <xTaskGetSchedulerState>
 8006138:	4603      	mov	r3, r0
 800613a:	2b02      	cmp	r3, #2
 800613c:	d109      	bne.n	8006152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <xTimerGenericCommand+0x98>)
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	f107 0110 	add.w	r1, r7, #16
 8006146:	2300      	movs	r3, #0
 8006148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614a:	f7fe fca1 	bl	8004a90 <xQueueGenericSend>
 800614e:	6278      	str	r0, [r7, #36]	; 0x24
 8006150:	e012      	b.n	8006178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <xTimerGenericCommand+0x98>)
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	f107 0110 	add.w	r1, r7, #16
 800615a:	2300      	movs	r3, #0
 800615c:	2200      	movs	r2, #0
 800615e:	f7fe fc97 	bl	8004a90 <xQueueGenericSend>
 8006162:	6278      	str	r0, [r7, #36]	; 0x24
 8006164:	e008      	b.n	8006178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <xTimerGenericCommand+0x98>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f107 0110 	add.w	r1, r7, #16
 800616e:	2300      	movs	r3, #0
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	f7fe fd8b 	bl	8004c8c <xQueueGenericSendFromISR>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800617a:	4618      	mov	r0, r3
 800617c:	3728      	adds	r7, #40	; 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000f24 	.word	0x20000f24

08006188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af02      	add	r7, sp, #8
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006192:	4b22      	ldr	r3, [pc, #136]	; (800621c <prvProcessExpiredTimer+0x94>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3304      	adds	r3, #4
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fb0d 	bl	80047c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d022      	beq.n	80061fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	18d1      	adds	r1, r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	6978      	ldr	r0, [r7, #20]
 80061c2:	f000 f8d1 	bl	8006368 <prvInsertTimerInActiveList>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01f      	beq.n	800620c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061cc:	2300      	movs	r3, #0
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	2300      	movs	r3, #0
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	2100      	movs	r1, #0
 80061d6:	6978      	ldr	r0, [r7, #20]
 80061d8:	f7ff ff88 	bl	80060ec <xTimerGenericCommand>
 80061dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d113      	bne.n	800620c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60fb      	str	r3, [r7, #12]
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	b2da      	uxtb	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	6978      	ldr	r0, [r7, #20]
 8006212:	4798      	blx	r3
}
 8006214:	bf00      	nop
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000f1c 	.word	0x20000f1c

08006220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4618      	mov	r0, r3
 800622e:	f000 f857 	bl	80062e0 <prvGetNextExpireTime>
 8006232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4619      	mov	r1, r3
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f803 	bl	8006244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800623e:	f000 f8d5 	bl	80063ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006242:	e7f1      	b.n	8006228 <prvTimerTask+0x8>

08006244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800624e:	f7ff fa43 	bl	80056d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006252:	f107 0308 	add.w	r3, r7, #8
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f866 	bl	8006328 <prvSampleTimeNow>
 800625c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d130      	bne.n	80062c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <prvProcessTimerOrBlockTask+0x3c>
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	429a      	cmp	r2, r3
 8006270:	d806      	bhi.n	8006280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006272:	f7ff fa3f 	bl	80056f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006276:	68f9      	ldr	r1, [r7, #12]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ff85 	bl	8006188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800627e:	e024      	b.n	80062ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d008      	beq.n	8006298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <prvProcessTimerOrBlockTask+0x90>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <prvProcessTimerOrBlockTask+0x50>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <prvProcessTimerOrBlockTask+0x52>
 8006294:	2300      	movs	r3, #0
 8006296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <prvProcessTimerOrBlockTask+0x94>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	f7fe ffa7 	bl	80051f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062aa:	f7ff fa23 	bl	80056f4 <xTaskResumeAll>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062b4:	4b09      	ldr	r3, [pc, #36]	; (80062dc <prvProcessTimerOrBlockTask+0x98>)
 80062b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	f3bf 8f6f 	isb	sy
}
 80062c4:	e001      	b.n	80062ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062c6:	f7ff fa15 	bl	80056f4 <xTaskResumeAll>
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000f20 	.word	0x20000f20
 80062d8:	20000f24 	.word	0x20000f24
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062e8:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <prvGetNextExpireTime+0x44>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <prvGetNextExpireTime+0x16>
 80062f2:	2201      	movs	r2, #1
 80062f4:	e000      	b.n	80062f8 <prvGetNextExpireTime+0x18>
 80062f6:	2200      	movs	r2, #0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <prvGetNextExpireTime+0x44>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e001      	b.n	8006314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006314:	68fb      	ldr	r3, [r7, #12]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20000f1c 	.word	0x20000f1c

08006328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006330:	f7ff fa7e 	bl	8005830 <xTaskGetTickCount>
 8006334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <prvSampleTimeNow+0x3c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	429a      	cmp	r2, r3
 800633e:	d205      	bcs.n	800634c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006340:	f000 f936 	bl	80065b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	e002      	b.n	8006352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006352:	4a04      	ldr	r2, [pc, #16]	; (8006364 <prvSampleTimeNow+0x3c>)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006358:	68fb      	ldr	r3, [r7, #12]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000f2c 	.word	0x20000f2c

08006368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d812      	bhi.n	80063b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	1ad2      	subs	r2, r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e01b      	b.n	80063da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <prvInsertTimerInActiveList+0x7c>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	3304      	adds	r3, #4
 80063aa:	4619      	mov	r1, r3
 80063ac:	4610      	mov	r0, r2
 80063ae:	f7fe f9ce 	bl	800474e <vListInsert>
 80063b2:	e012      	b.n	80063da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d206      	bcs.n	80063ca <prvInsertTimerInActiveList+0x62>
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d302      	bcc.n	80063ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e007      	b.n	80063da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <prvInsertTimerInActiveList+0x80>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fe f9ba 	bl	800474e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063da:	697b      	ldr	r3, [r7, #20]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20000f20 	.word	0x20000f20
 80063e8:	20000f1c 	.word	0x20000f1c

080063ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08e      	sub	sp, #56	; 0x38
 80063f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063f2:	e0ca      	b.n	800658a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da18      	bge.n	800642c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063fa:	1d3b      	adds	r3, r7, #4
 80063fc:	3304      	adds	r3, #4
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	61fb      	str	r3, [r7, #28]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006422:	6850      	ldr	r0, [r2, #4]
 8006424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006426:	6892      	ldr	r2, [r2, #8]
 8006428:	4611      	mov	r1, r2
 800642a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f2c0 80aa 	blt.w	8006588 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe f9bb 	bl	80047c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800644a:	463b      	mov	r3, r7
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ff6b 	bl	8006328 <prvSampleTimeNow>
 8006452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b09      	cmp	r3, #9
 8006458:	f200 8097 	bhi.w	800658a <prvProcessReceivedCommands+0x19e>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <prvProcessReceivedCommands+0x78>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	0800648d 	.word	0x0800648d
 8006468:	0800648d 	.word	0x0800648d
 800646c:	0800648d 	.word	0x0800648d
 8006470:	08006501 	.word	0x08006501
 8006474:	08006515 	.word	0x08006515
 8006478:	0800655f 	.word	0x0800655f
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800648d 	.word	0x0800648d
 8006484:	08006501 	.word	0x08006501
 8006488:	08006515 	.word	0x08006515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	b2da      	uxtb	r2, r3
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	18d1      	adds	r1, r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ac:	f7ff ff5c 	bl	8006368 <prvInsertTimerInActiveList>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d069      	beq.n	800658a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d05e      	beq.n	800658a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	441a      	add	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	2300      	movs	r3, #0
 80064da:	2100      	movs	r1, #0
 80064dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064de:	f7ff fe05 	bl	80060ec <xTimerGenericCommand>
 80064e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d14f      	bne.n	800658a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	61bb      	str	r3, [r7, #24]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006512:	e03a      	b.n	800658a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	617b      	str	r3, [r7, #20]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	18d1      	adds	r1, r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006558:	f7ff ff06 	bl	8006368 <prvInsertTimerInActiveList>
					break;
 800655c:	e015      	b.n	800658a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800656c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656e:	f000 fbdf 	bl	8006d30 <vPortFree>
 8006572:	e00a      	b.n	800658a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006586:	e000      	b.n	800658a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800658a:	4b08      	ldr	r3, [pc, #32]	; (80065ac <prvProcessReceivedCommands+0x1c0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	1d39      	adds	r1, r7, #4
 8006590:	2200      	movs	r2, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fc16 	bl	8004dc4 <xQueueReceive>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f47f af2a 	bne.w	80063f4 <prvProcessReceivedCommands+0x8>
	}
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	3730      	adds	r7, #48	; 0x30
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000f24 	.word	0x20000f24

080065b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065b6:	e048      	b.n	800664a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065b8:	4b2d      	ldr	r3, [pc, #180]	; (8006670 <prvSwitchTimerLists+0xc0>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c2:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <prvSwitchTimerLists+0xc0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe f8f5 	bl	80047c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d02e      	beq.n	800664a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d90e      	bls.n	800661c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800660a:	4b19      	ldr	r3, [pc, #100]	; (8006670 <prvSwitchTimerLists+0xc0>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f7fe f89a 	bl	800474e <vListInsert>
 800661a:	e016      	b.n	800664a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800661c:	2300      	movs	r3, #0
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2300      	movs	r3, #0
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	2100      	movs	r1, #0
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff fd60 	bl	80060ec <xTimerGenericCommand>
 800662c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	603b      	str	r3, [r7, #0]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <prvSwitchTimerLists+0xc0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1b1      	bne.n	80065b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <prvSwitchTimerLists+0xc0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800665a:	4b06      	ldr	r3, [pc, #24]	; (8006674 <prvSwitchTimerLists+0xc4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <prvSwitchTimerLists+0xc0>)
 8006660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006662:	4a04      	ldr	r2, [pc, #16]	; (8006674 <prvSwitchTimerLists+0xc4>)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	6013      	str	r3, [r2, #0]
}
 8006668:	bf00      	nop
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000f1c 	.word	0x20000f1c
 8006674:	20000f20 	.word	0x20000f20

08006678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800667e:	f000 f969 	bl	8006954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006682:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <prvCheckForValidListAndQueue+0x60>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d120      	bne.n	80066cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800668a:	4814      	ldr	r0, [pc, #80]	; (80066dc <prvCheckForValidListAndQueue+0x64>)
 800668c:	f7fe f80e 	bl	80046ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006690:	4813      	ldr	r0, [pc, #76]	; (80066e0 <prvCheckForValidListAndQueue+0x68>)
 8006692:	f7fe f80b 	bl	80046ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <prvCheckForValidListAndQueue+0x6c>)
 8006698:	4a10      	ldr	r2, [pc, #64]	; (80066dc <prvCheckForValidListAndQueue+0x64>)
 800669a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800669c:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <prvCheckForValidListAndQueue+0x70>)
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <prvCheckForValidListAndQueue+0x68>)
 80066a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066a2:	2300      	movs	r3, #0
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	4b11      	ldr	r3, [pc, #68]	; (80066ec <prvCheckForValidListAndQueue+0x74>)
 80066a8:	4a11      	ldr	r2, [pc, #68]	; (80066f0 <prvCheckForValidListAndQueue+0x78>)
 80066aa:	2110      	movs	r1, #16
 80066ac:	200a      	movs	r0, #10
 80066ae:	f7fe f919 	bl	80048e4 <xQueueGenericCreateStatic>
 80066b2:	4603      	mov	r3, r0
 80066b4:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <prvCheckForValidListAndQueue+0x60>)
 80066b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066b8:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <prvCheckForValidListAndQueue+0x60>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066c0:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <prvCheckForValidListAndQueue+0x60>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	490b      	ldr	r1, [pc, #44]	; (80066f4 <prvCheckForValidListAndQueue+0x7c>)
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fd6c 	bl	80051a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066cc:	f000 f972 	bl	80069b4 <vPortExitCritical>
}
 80066d0:	bf00      	nop
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000f24 	.word	0x20000f24
 80066dc:	20000ef4 	.word	0x20000ef4
 80066e0:	20000f08 	.word	0x20000f08
 80066e4:	20000f1c 	.word	0x20000f1c
 80066e8:	20000f20 	.word	0x20000f20
 80066ec:	20000fd0 	.word	0x20000fd0
 80066f0:	20000f30 	.word	0x20000f30
 80066f4:	08009df4 	.word	0x08009df4

080066f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3b04      	subs	r3, #4
 8006708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3b04      	subs	r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 0201 	bic.w	r2, r3, #1
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3b04      	subs	r3, #4
 8006726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006728:	4a0c      	ldr	r2, [pc, #48]	; (800675c <pxPortInitialiseStack+0x64>)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	3b14      	subs	r3, #20
 8006732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3b04      	subs	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f06f 0202 	mvn.w	r2, #2
 8006746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3b20      	subs	r3, #32
 800674c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	08006761 	.word	0x08006761

08006760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800676a:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <prvTaskExitError+0x54>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006772:	d00a      	beq.n	800678a <prvTaskExitError+0x2a>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	60fb      	str	r3, [r7, #12]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <prvTaskExitError+0x28>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	60bb      	str	r3, [r7, #8]
}
 800679c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800679e:	bf00      	nop
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0fc      	beq.n	80067a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	2000000c 	.word	0x2000000c
	...

080067c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <pxCurrentTCBConst2>)
 80067c2:	6819      	ldr	r1, [r3, #0]
 80067c4:	6808      	ldr	r0, [r1, #0]
 80067c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	f380 8809 	msr	PSP, r0
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	4770      	bx	lr
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst2>:
 80067e0:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067e8:	4808      	ldr	r0, [pc, #32]	; (800680c <prvPortStartFirstTask+0x24>)
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f380 8808 	msr	MSP, r0
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8814 	msr	CONTROL, r0
 80067fa:	b662      	cpsie	i
 80067fc:	b661      	cpsie	f
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	df00      	svc	0
 8006808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800680a:	bf00      	nop
 800680c:	e000ed08 	.word	0xe000ed08

08006810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006816:	4b46      	ldr	r3, [pc, #280]	; (8006930 <xPortStartScheduler+0x120>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a46      	ldr	r2, [pc, #280]	; (8006934 <xPortStartScheduler+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10a      	bne.n	8006836 <xPortStartScheduler+0x26>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006836:	4b3e      	ldr	r3, [pc, #248]	; (8006930 <xPortStartScheduler+0x120>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a3f      	ldr	r2, [pc, #252]	; (8006938 <xPortStartScheduler+0x128>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d10a      	bne.n	8006856 <xPortStartScheduler+0x46>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60fb      	str	r3, [r7, #12]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006856:	4b39      	ldr	r3, [pc, #228]	; (800693c <xPortStartScheduler+0x12c>)
 8006858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006878:	b2da      	uxtb	r2, r3
 800687a:	4b31      	ldr	r3, [pc, #196]	; (8006940 <xPortStartScheduler+0x130>)
 800687c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800687e:	4b31      	ldr	r3, [pc, #196]	; (8006944 <xPortStartScheduler+0x134>)
 8006880:	2207      	movs	r2, #7
 8006882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006884:	e009      	b.n	800689a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006886:	4b2f      	ldr	r3, [pc, #188]	; (8006944 <xPortStartScheduler+0x134>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3b01      	subs	r3, #1
 800688c:	4a2d      	ldr	r2, [pc, #180]	; (8006944 <xPortStartScheduler+0x134>)
 800688e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	b2db      	uxtb	r3, r3
 8006898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	d0ef      	beq.n	8006886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068a6:	4b27      	ldr	r3, [pc, #156]	; (8006944 <xPortStartScheduler+0x134>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1c3 0307 	rsb	r3, r3, #7
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d00a      	beq.n	80068c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60bb      	str	r3, [r7, #8]
}
 80068c4:	bf00      	nop
 80068c6:	e7fe      	b.n	80068c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068c8:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <xPortStartScheduler+0x134>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <xPortStartScheduler+0x134>)
 80068d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068d2:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <xPortStartScheduler+0x134>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068da:	4a1a      	ldr	r2, [pc, #104]	; (8006944 <xPortStartScheduler+0x134>)
 80068dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068e6:	4b18      	ldr	r3, [pc, #96]	; (8006948 <xPortStartScheduler+0x138>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a17      	ldr	r2, [pc, #92]	; (8006948 <xPortStartScheduler+0x138>)
 80068ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068f2:	4b15      	ldr	r3, [pc, #84]	; (8006948 <xPortStartScheduler+0x138>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a14      	ldr	r2, [pc, #80]	; (8006948 <xPortStartScheduler+0x138>)
 80068f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068fe:	f000 f8dd 	bl	8006abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <xPortStartScheduler+0x13c>)
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006908:	f000 f8fc 	bl	8006b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800690c:	4b10      	ldr	r3, [pc, #64]	; (8006950 <xPortStartScheduler+0x140>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0f      	ldr	r2, [pc, #60]	; (8006950 <xPortStartScheduler+0x140>)
 8006912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006918:	f7ff ff66 	bl	80067e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800691c:	f7ff f852 	bl	80059c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006920:	f7ff ff1e 	bl	8006760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	e000ed00 	.word	0xe000ed00
 8006934:	410fc271 	.word	0x410fc271
 8006938:	410fc270 	.word	0x410fc270
 800693c:	e000e400 	.word	0xe000e400
 8006940:	20001020 	.word	0x20001020
 8006944:	20001024 	.word	0x20001024
 8006948:	e000ed20 	.word	0xe000ed20
 800694c:	2000000c 	.word	0x2000000c
 8006950:	e000ef34 	.word	0xe000ef34

08006954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800696e:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <vPortEnterCritical+0x58>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <vPortEnterCritical+0x58>)
 8006976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <vPortEnterCritical+0x58>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10f      	bne.n	80069a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vPortEnterCritical+0x5c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	603b      	str	r3, [r7, #0]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <vPortEnterCritical+0x4a>
	}
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	2000000c 	.word	0x2000000c
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <vPortExitCritical+0x50>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10a      	bne.n	80069d8 <vPortExitCritical+0x24>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	607b      	str	r3, [r7, #4]
}
 80069d4:	bf00      	nop
 80069d6:	e7fe      	b.n	80069d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <vPortExitCritical+0x50>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3b01      	subs	r3, #1
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <vPortExitCritical+0x50>)
 80069e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <vPortExitCritical+0x50>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <vPortExitCritical+0x42>
 80069ea:	2300      	movs	r3, #0
 80069ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	f383 8811 	msr	BASEPRI, r3
}
 80069f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	2000000c 	.word	0x2000000c
	...

08006a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a10:	f3ef 8009 	mrs	r0, PSP
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <pxCurrentTCBConst>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f01e 0f10 	tst.w	lr, #16
 8006a20:	bf08      	it	eq
 8006a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	6010      	str	r0, [r2, #0]
 8006a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a34:	f380 8811 	msr	BASEPRI, r0
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f7fe ffc0 	bl	80059c4 <vTaskSwitchContext>
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f380 8811 	msr	BASEPRI, r0
 8006a4c:	bc09      	pop	{r0, r3}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a56:	f01e 0f10 	tst.w	lr, #16
 8006a5a:	bf08      	it	eq
 8006a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a60:	f380 8809 	msr	PSP, r0
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst>:
 8006a70:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a92:	f7fe fedd 	bl	8005850 <xTaskIncrementTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <xPortSysTickHandler+0x40>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
}
 8006aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <vPortSetupTimerInterrupt+0x38>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <vPortSetupTimerInterrupt+0x3c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <vPortSetupTimerInterrupt+0x40>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <vPortSetupTimerInterrupt+0x44>)
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ade:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e010 	.word	0xe000e010
 8006af4:	e000e018 	.word	0xe000e018
 8006af8:	20000000 	.word	0x20000000
 8006afc:	10624dd3 	.word	0x10624dd3
 8006b00:	e000e014 	.word	0xe000e014

08006b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b14 <vPortEnableVFP+0x10>
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b0e:	6001      	str	r1, [r0, #0]
 8006b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b12:	bf00      	nop
 8006b14:	e000ed88 	.word	0xe000ed88

08006b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b1e:	f3ef 8305 	mrs	r3, IPSR
 8006b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	d914      	bls.n	8006b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b2a:	4a17      	ldr	r2, [pc, #92]	; (8006b88 <vPortValidateInterruptPriority+0x70>)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b34:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <vPortValidateInterruptPriority+0x74>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	7afa      	ldrb	r2, [r7, #11]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d20a      	bcs.n	8006b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b54:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <vPortValidateInterruptPriority+0x78>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b5c:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <vPortValidateInterruptPriority+0x7c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d90a      	bls.n	8006b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	603b      	str	r3, [r7, #0]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <vPortValidateInterruptPriority+0x60>
	}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	e000e3f0 	.word	0xe000e3f0
 8006b8c:	20001020 	.word	0x20001020
 8006b90:	e000ed0c 	.word	0xe000ed0c
 8006b94:	20001024 	.word	0x20001024

08006b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ba4:	f7fe fd98 	bl	80056d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ba8:	4b5b      	ldr	r3, [pc, #364]	; (8006d18 <pvPortMalloc+0x180>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb0:	f000 f920 	bl	8006df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bb4:	4b59      	ldr	r3, [pc, #356]	; (8006d1c <pvPortMalloc+0x184>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 8093 	bne.w	8006ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01d      	beq.n	8006c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bc8:	2208      	movs	r2, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d014      	beq.n	8006c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f023 0307 	bic.w	r3, r3, #7
 8006be0:	3308      	adds	r3, #8
 8006be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <pvPortMalloc+0x6c>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	617b      	str	r3, [r7, #20]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d06e      	beq.n	8006ce8 <pvPortMalloc+0x150>
 8006c0a:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <pvPortMalloc+0x188>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d869      	bhi.n	8006ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c14:	4b43      	ldr	r3, [pc, #268]	; (8006d24 <pvPortMalloc+0x18c>)
 8006c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c18:	4b42      	ldr	r3, [pc, #264]	; (8006d24 <pvPortMalloc+0x18c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c1e:	e004      	b.n	8006c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d903      	bls.n	8006c3c <pvPortMalloc+0xa4>
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f1      	bne.n	8006c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c3c:	4b36      	ldr	r3, [pc, #216]	; (8006d18 <pvPortMalloc+0x180>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d050      	beq.n	8006ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	4413      	add	r3, r2
 8006c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	2308      	movs	r3, #8
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d91f      	bls.n	8006ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <pvPortMalloc+0xf8>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	613b      	str	r3, [r7, #16]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ca2:	69b8      	ldr	r0, [r7, #24]
 8006ca4:	f000 f908 	bl	8006eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <pvPortMalloc+0x188>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <pvPortMalloc+0x188>)
 8006cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cb6:	4b1a      	ldr	r3, [pc, #104]	; (8006d20 <pvPortMalloc+0x188>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <pvPortMalloc+0x190>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d203      	bcs.n	8006cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <pvPortMalloc+0x188>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <pvPortMalloc+0x190>)
 8006cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	4b13      	ldr	r3, [pc, #76]	; (8006d1c <pvPortMalloc+0x184>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <pvPortMalloc+0x194>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <pvPortMalloc+0x194>)
 8006ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ce8:	f7fe fd04 	bl	80056f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <pvPortMalloc+0x174>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <pvPortMalloc+0x172>
	return pvReturn;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3728      	adds	r7, #40	; 0x28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20004c30 	.word	0x20004c30
 8006d1c:	20004c44 	.word	0x20004c44
 8006d20:	20004c34 	.word	0x20004c34
 8006d24:	20004c28 	.word	0x20004c28
 8006d28:	20004c38 	.word	0x20004c38
 8006d2c:	20004c3c 	.word	0x20004c3c

08006d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d04d      	beq.n	8006dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d42:	2308      	movs	r3, #8
 8006d44:	425b      	negs	r3, r3
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4413      	add	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <vPortFree+0xb8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <vPortFree+0x44>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	60fb      	str	r3, [r7, #12]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <vPortFree+0x62>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60bb      	str	r3, [r7, #8]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <vPortFree+0xb8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01e      	beq.n	8006dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11a      	bne.n	8006dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <vPortFree+0xb8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	401a      	ands	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006db8:	f7fe fc8e 	bl	80056d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <vPortFree+0xbc>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	4a09      	ldr	r2, [pc, #36]	; (8006dec <vPortFree+0xbc>)
 8006dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f000 f874 	bl	8006eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <vPortFree+0xc0>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a06      	ldr	r2, [pc, #24]	; (8006df0 <vPortFree+0xc0>)
 8006dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dda:	f7fe fc8b 	bl	80056f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dde:	bf00      	nop
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20004c44 	.word	0x20004c44
 8006dec:	20004c34 	.word	0x20004c34
 8006df0:	20004c40 	.word	0x20004c40

08006df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e00:	4b27      	ldr	r3, [pc, #156]	; (8006ea0 <prvHeapInit+0xac>)
 8006e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3307      	adds	r3, #7
 8006e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0307 	bic.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	4a1f      	ldr	r2, [pc, #124]	; (8006ea0 <prvHeapInit+0xac>)
 8006e24:	4413      	add	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ea4 <prvHeapInit+0xb0>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <prvHeapInit+0xb0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e40:	2208      	movs	r2, #8
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0307 	bic.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e56:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e5e:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2200      	movs	r2, #0
 8006e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <prvHeapInit+0xb4>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <prvHeapInit+0xb8>)
 8006e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <prvHeapInit+0xbc>)
 8006e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e8c:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <prvHeapInit+0xc0>)
 8006e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e92:	601a      	str	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20001028 	.word	0x20001028
 8006ea4:	20004c28 	.word	0x20004c28
 8006ea8:	20004c30 	.word	0x20004c30
 8006eac:	20004c38 	.word	0x20004c38
 8006eb0:	20004c34 	.word	0x20004c34
 8006eb4:	20004c44 	.word	0x20004c44

08006eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ec0:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <prvInsertBlockIntoFreeList+0xac>)
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e002      	b.n	8006ecc <prvInsertBlockIntoFreeList+0x14>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d8f7      	bhi.n	8006ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d108      	bne.n	8006efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d118      	bne.n	8006f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <prvInsertBlockIntoFreeList+0xb0>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d00d      	beq.n	8006f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	441a      	add	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e008      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f36:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <prvInsertBlockIntoFreeList+0xb0>)
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e003      	b.n	8006f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20004c28 	.word	0x20004c28
 8006f68:	20004c30 	.word	0x20004c30

08006f6c <__errno>:
 8006f6c:	4b01      	ldr	r3, [pc, #4]	; (8006f74 <__errno+0x8>)
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000010 	.word	0x20000010

08006f78 <__libc_init_array>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4d0d      	ldr	r5, [pc, #52]	; (8006fb0 <__libc_init_array+0x38>)
 8006f7c:	4c0d      	ldr	r4, [pc, #52]	; (8006fb4 <__libc_init_array+0x3c>)
 8006f7e:	1b64      	subs	r4, r4, r5
 8006f80:	10a4      	asrs	r4, r4, #2
 8006f82:	2600      	movs	r6, #0
 8006f84:	42a6      	cmp	r6, r4
 8006f86:	d109      	bne.n	8006f9c <__libc_init_array+0x24>
 8006f88:	4d0b      	ldr	r5, [pc, #44]	; (8006fb8 <__libc_init_array+0x40>)
 8006f8a:	4c0c      	ldr	r4, [pc, #48]	; (8006fbc <__libc_init_array+0x44>)
 8006f8c:	f002 ff02 	bl	8009d94 <_init>
 8006f90:	1b64      	subs	r4, r4, r5
 8006f92:	10a4      	asrs	r4, r4, #2
 8006f94:	2600      	movs	r6, #0
 8006f96:	42a6      	cmp	r6, r4
 8006f98:	d105      	bne.n	8006fa6 <__libc_init_array+0x2e>
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa0:	4798      	blx	r3
 8006fa2:	3601      	adds	r6, #1
 8006fa4:	e7ee      	b.n	8006f84 <__libc_init_array+0xc>
 8006fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006faa:	4798      	blx	r3
 8006fac:	3601      	adds	r6, #1
 8006fae:	e7f2      	b.n	8006f96 <__libc_init_array+0x1e>
 8006fb0:	0800a254 	.word	0x0800a254
 8006fb4:	0800a254 	.word	0x0800a254
 8006fb8:	0800a254 	.word	0x0800a254
 8006fbc:	0800a258 	.word	0x0800a258

08006fc0 <memcpy>:
 8006fc0:	440a      	add	r2, r1
 8006fc2:	4291      	cmp	r1, r2
 8006fc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fc8:	d100      	bne.n	8006fcc <memcpy+0xc>
 8006fca:	4770      	bx	lr
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fd6:	4291      	cmp	r1, r2
 8006fd8:	d1f9      	bne.n	8006fce <memcpy+0xe>
 8006fda:	bd10      	pop	{r4, pc}

08006fdc <memset>:
 8006fdc:	4402      	add	r2, r0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d100      	bne.n	8006fe6 <memset+0xa>
 8006fe4:	4770      	bx	lr
 8006fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fea:	e7f9      	b.n	8006fe0 <memset+0x4>

08006fec <__cvt>:
 8006fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	ec55 4b10 	vmov	r4, r5, d0
 8006ff4:	2d00      	cmp	r5, #0
 8006ff6:	460e      	mov	r6, r1
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	bfbb      	ittet	lt
 8006ffe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007002:	461d      	movlt	r5, r3
 8007004:	2300      	movge	r3, #0
 8007006:	232d      	movlt	r3, #45	; 0x2d
 8007008:	700b      	strb	r3, [r1, #0]
 800700a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800700c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007010:	4691      	mov	r9, r2
 8007012:	f023 0820 	bic.w	r8, r3, #32
 8007016:	bfbc      	itt	lt
 8007018:	4622      	movlt	r2, r4
 800701a:	4614      	movlt	r4, r2
 800701c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007020:	d005      	beq.n	800702e <__cvt+0x42>
 8007022:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007026:	d100      	bne.n	800702a <__cvt+0x3e>
 8007028:	3601      	adds	r6, #1
 800702a:	2102      	movs	r1, #2
 800702c:	e000      	b.n	8007030 <__cvt+0x44>
 800702e:	2103      	movs	r1, #3
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	ab02      	add	r3, sp, #8
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	ec45 4b10 	vmov	d0, r4, r5
 800703c:	4653      	mov	r3, sl
 800703e:	4632      	mov	r2, r6
 8007040:	f000 fcea 	bl	8007a18 <_dtoa_r>
 8007044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007048:	4607      	mov	r7, r0
 800704a:	d102      	bne.n	8007052 <__cvt+0x66>
 800704c:	f019 0f01 	tst.w	r9, #1
 8007050:	d022      	beq.n	8007098 <__cvt+0xac>
 8007052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007056:	eb07 0906 	add.w	r9, r7, r6
 800705a:	d110      	bne.n	800707e <__cvt+0x92>
 800705c:	783b      	ldrb	r3, [r7, #0]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d10a      	bne.n	8007078 <__cvt+0x8c>
 8007062:	2200      	movs	r2, #0
 8007064:	2300      	movs	r3, #0
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800706e:	b918      	cbnz	r0, 8007078 <__cvt+0x8c>
 8007070:	f1c6 0601 	rsb	r6, r6, #1
 8007074:	f8ca 6000 	str.w	r6, [sl]
 8007078:	f8da 3000 	ldr.w	r3, [sl]
 800707c:	4499      	add	r9, r3
 800707e:	2200      	movs	r2, #0
 8007080:	2300      	movs	r3, #0
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800708a:	b108      	cbz	r0, 8007090 <__cvt+0xa4>
 800708c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007090:	2230      	movs	r2, #48	; 0x30
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	454b      	cmp	r3, r9
 8007096:	d307      	bcc.n	80070a8 <__cvt+0xbc>
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800709c:	1bdb      	subs	r3, r3, r7
 800709e:	4638      	mov	r0, r7
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	b004      	add	sp, #16
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a8:	1c59      	adds	r1, r3, #1
 80070aa:	9103      	str	r1, [sp, #12]
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e7f0      	b.n	8007092 <__cvt+0xa6>

080070b0 <__exponent>:
 80070b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b2:	4603      	mov	r3, r0
 80070b4:	2900      	cmp	r1, #0
 80070b6:	bfb8      	it	lt
 80070b8:	4249      	neglt	r1, r1
 80070ba:	f803 2b02 	strb.w	r2, [r3], #2
 80070be:	bfb4      	ite	lt
 80070c0:	222d      	movlt	r2, #45	; 0x2d
 80070c2:	222b      	movge	r2, #43	; 0x2b
 80070c4:	2909      	cmp	r1, #9
 80070c6:	7042      	strb	r2, [r0, #1]
 80070c8:	dd2a      	ble.n	8007120 <__exponent+0x70>
 80070ca:	f10d 0407 	add.w	r4, sp, #7
 80070ce:	46a4      	mov	ip, r4
 80070d0:	270a      	movs	r7, #10
 80070d2:	46a6      	mov	lr, r4
 80070d4:	460a      	mov	r2, r1
 80070d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80070da:	fb07 1516 	mls	r5, r7, r6, r1
 80070de:	3530      	adds	r5, #48	; 0x30
 80070e0:	2a63      	cmp	r2, #99	; 0x63
 80070e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80070e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070ea:	4631      	mov	r1, r6
 80070ec:	dcf1      	bgt.n	80070d2 <__exponent+0x22>
 80070ee:	3130      	adds	r1, #48	; 0x30
 80070f0:	f1ae 0502 	sub.w	r5, lr, #2
 80070f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070f8:	1c44      	adds	r4, r0, #1
 80070fa:	4629      	mov	r1, r5
 80070fc:	4561      	cmp	r1, ip
 80070fe:	d30a      	bcc.n	8007116 <__exponent+0x66>
 8007100:	f10d 0209 	add.w	r2, sp, #9
 8007104:	eba2 020e 	sub.w	r2, r2, lr
 8007108:	4565      	cmp	r5, ip
 800710a:	bf88      	it	hi
 800710c:	2200      	movhi	r2, #0
 800710e:	4413      	add	r3, r2
 8007110:	1a18      	subs	r0, r3, r0
 8007112:	b003      	add	sp, #12
 8007114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800711a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800711e:	e7ed      	b.n	80070fc <__exponent+0x4c>
 8007120:	2330      	movs	r3, #48	; 0x30
 8007122:	3130      	adds	r1, #48	; 0x30
 8007124:	7083      	strb	r3, [r0, #2]
 8007126:	70c1      	strb	r1, [r0, #3]
 8007128:	1d03      	adds	r3, r0, #4
 800712a:	e7f1      	b.n	8007110 <__exponent+0x60>

0800712c <_printf_float>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	ed2d 8b02 	vpush	{d8}
 8007134:	b08d      	sub	sp, #52	; 0x34
 8007136:	460c      	mov	r4, r1
 8007138:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800713c:	4616      	mov	r6, r2
 800713e:	461f      	mov	r7, r3
 8007140:	4605      	mov	r5, r0
 8007142:	f001 fa57 	bl	80085f4 <_localeconv_r>
 8007146:	f8d0 a000 	ldr.w	sl, [r0]
 800714a:	4650      	mov	r0, sl
 800714c:	f7f9 f848 	bl	80001e0 <strlen>
 8007150:	2300      	movs	r3, #0
 8007152:	930a      	str	r3, [sp, #40]	; 0x28
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	f8d8 3000 	ldr.w	r3, [r8]
 800715c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007160:	3307      	adds	r3, #7
 8007162:	f023 0307 	bic.w	r3, r3, #7
 8007166:	f103 0208 	add.w	r2, r3, #8
 800716a:	f8c8 2000 	str.w	r2, [r8]
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007176:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800717a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	f8cd 8018 	str.w	r8, [sp, #24]
 8007184:	ee08 0a10 	vmov	s16, r0
 8007188:	4b9f      	ldr	r3, [pc, #636]	; (8007408 <_printf_float+0x2dc>)
 800718a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007192:	f7f9 fcd3 	bl	8000b3c <__aeabi_dcmpun>
 8007196:	bb88      	cbnz	r0, 80071fc <_printf_float+0xd0>
 8007198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719c:	4b9a      	ldr	r3, [pc, #616]	; (8007408 <_printf_float+0x2dc>)
 800719e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071a2:	f7f9 fcad 	bl	8000b00 <__aeabi_dcmple>
 80071a6:	bb48      	cbnz	r0, 80071fc <_printf_float+0xd0>
 80071a8:	2200      	movs	r2, #0
 80071aa:	2300      	movs	r3, #0
 80071ac:	4640      	mov	r0, r8
 80071ae:	4649      	mov	r1, r9
 80071b0:	f7f9 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80071b4:	b110      	cbz	r0, 80071bc <_printf_float+0x90>
 80071b6:	232d      	movs	r3, #45	; 0x2d
 80071b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071bc:	4b93      	ldr	r3, [pc, #588]	; (800740c <_printf_float+0x2e0>)
 80071be:	4894      	ldr	r0, [pc, #592]	; (8007410 <_printf_float+0x2e4>)
 80071c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071c4:	bf94      	ite	ls
 80071c6:	4698      	movls	r8, r3
 80071c8:	4680      	movhi	r8, r0
 80071ca:	2303      	movs	r3, #3
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	9b05      	ldr	r3, [sp, #20]
 80071d0:	f023 0204 	bic.w	r2, r3, #4
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	f04f 0900 	mov.w	r9, #0
 80071da:	9700      	str	r7, [sp, #0]
 80071dc:	4633      	mov	r3, r6
 80071de:	aa0b      	add	r2, sp, #44	; 0x2c
 80071e0:	4621      	mov	r1, r4
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 f9d8 	bl	8007598 <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	f040 8090 	bne.w	800730e <_printf_float+0x1e2>
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f2:	b00d      	add	sp, #52	; 0x34
 80071f4:	ecbd 8b02 	vpop	{d8}
 80071f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fc:	4642      	mov	r2, r8
 80071fe:	464b      	mov	r3, r9
 8007200:	4640      	mov	r0, r8
 8007202:	4649      	mov	r1, r9
 8007204:	f7f9 fc9a 	bl	8000b3c <__aeabi_dcmpun>
 8007208:	b140      	cbz	r0, 800721c <_printf_float+0xf0>
 800720a:	464b      	mov	r3, r9
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfbc      	itt	lt
 8007210:	232d      	movlt	r3, #45	; 0x2d
 8007212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007216:	487f      	ldr	r0, [pc, #508]	; (8007414 <_printf_float+0x2e8>)
 8007218:	4b7f      	ldr	r3, [pc, #508]	; (8007418 <_printf_float+0x2ec>)
 800721a:	e7d1      	b.n	80071c0 <_printf_float+0x94>
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007222:	9206      	str	r2, [sp, #24]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	d13f      	bne.n	80072a8 <_printf_float+0x17c>
 8007228:	2306      	movs	r3, #6
 800722a:	6063      	str	r3, [r4, #4]
 800722c:	9b05      	ldr	r3, [sp, #20]
 800722e:	6861      	ldr	r1, [r4, #4]
 8007230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007234:	2300      	movs	r3, #0
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	ab0a      	add	r3, sp, #40	; 0x28
 800723a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800723e:	ab09      	add	r3, sp, #36	; 0x24
 8007240:	ec49 8b10 	vmov	d0, r8, r9
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6022      	str	r2, [r4, #0]
 8007248:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800724c:	4628      	mov	r0, r5
 800724e:	f7ff fecd 	bl	8006fec <__cvt>
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007256:	2b47      	cmp	r3, #71	; 0x47
 8007258:	4680      	mov	r8, r0
 800725a:	d108      	bne.n	800726e <_printf_float+0x142>
 800725c:	1cc8      	adds	r0, r1, #3
 800725e:	db02      	blt.n	8007266 <_printf_float+0x13a>
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	4299      	cmp	r1, r3
 8007264:	dd41      	ble.n	80072ea <_printf_float+0x1be>
 8007266:	f1ab 0b02 	sub.w	fp, fp, #2
 800726a:	fa5f fb8b 	uxtb.w	fp, fp
 800726e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007272:	d820      	bhi.n	80072b6 <_printf_float+0x18a>
 8007274:	3901      	subs	r1, #1
 8007276:	465a      	mov	r2, fp
 8007278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800727c:	9109      	str	r1, [sp, #36]	; 0x24
 800727e:	f7ff ff17 	bl	80070b0 <__exponent>
 8007282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007284:	1813      	adds	r3, r2, r0
 8007286:	2a01      	cmp	r2, #1
 8007288:	4681      	mov	r9, r0
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	dc02      	bgt.n	8007294 <_printf_float+0x168>
 800728e:	6822      	ldr	r2, [r4, #0]
 8007290:	07d2      	lsls	r2, r2, #31
 8007292:	d501      	bpl.n	8007298 <_printf_float+0x16c>
 8007294:	3301      	adds	r3, #1
 8007296:	6123      	str	r3, [r4, #16]
 8007298:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800729c:	2b00      	cmp	r3, #0
 800729e:	d09c      	beq.n	80071da <_printf_float+0xae>
 80072a0:	232d      	movs	r3, #45	; 0x2d
 80072a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a6:	e798      	b.n	80071da <_printf_float+0xae>
 80072a8:	9a06      	ldr	r2, [sp, #24]
 80072aa:	2a47      	cmp	r2, #71	; 0x47
 80072ac:	d1be      	bne.n	800722c <_printf_float+0x100>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1bc      	bne.n	800722c <_printf_float+0x100>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7b9      	b.n	800722a <_printf_float+0xfe>
 80072b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072ba:	d118      	bne.n	80072ee <_printf_float+0x1c2>
 80072bc:	2900      	cmp	r1, #0
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	dd0b      	ble.n	80072da <_printf_float+0x1ae>
 80072c2:	6121      	str	r1, [r4, #16]
 80072c4:	b913      	cbnz	r3, 80072cc <_printf_float+0x1a0>
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	07d0      	lsls	r0, r2, #31
 80072ca:	d502      	bpl.n	80072d2 <_printf_float+0x1a6>
 80072cc:	3301      	adds	r3, #1
 80072ce:	440b      	add	r3, r1
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80072d4:	f04f 0900 	mov.w	r9, #0
 80072d8:	e7de      	b.n	8007298 <_printf_float+0x16c>
 80072da:	b913      	cbnz	r3, 80072e2 <_printf_float+0x1b6>
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	07d2      	lsls	r2, r2, #31
 80072e0:	d501      	bpl.n	80072e6 <_printf_float+0x1ba>
 80072e2:	3302      	adds	r3, #2
 80072e4:	e7f4      	b.n	80072d0 <_printf_float+0x1a4>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7f2      	b.n	80072d0 <_printf_float+0x1a4>
 80072ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f0:	4299      	cmp	r1, r3
 80072f2:	db05      	blt.n	8007300 <_printf_float+0x1d4>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	6121      	str	r1, [r4, #16]
 80072f8:	07d8      	lsls	r0, r3, #31
 80072fa:	d5ea      	bpl.n	80072d2 <_printf_float+0x1a6>
 80072fc:	1c4b      	adds	r3, r1, #1
 80072fe:	e7e7      	b.n	80072d0 <_printf_float+0x1a4>
 8007300:	2900      	cmp	r1, #0
 8007302:	bfd4      	ite	le
 8007304:	f1c1 0202 	rsble	r2, r1, #2
 8007308:	2201      	movgt	r2, #1
 800730a:	4413      	add	r3, r2
 800730c:	e7e0      	b.n	80072d0 <_printf_float+0x1a4>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	055a      	lsls	r2, r3, #21
 8007312:	d407      	bmi.n	8007324 <_printf_float+0x1f8>
 8007314:	6923      	ldr	r3, [r4, #16]
 8007316:	4642      	mov	r2, r8
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	d12c      	bne.n	800737c <_printf_float+0x250>
 8007322:	e764      	b.n	80071ee <_printf_float+0xc2>
 8007324:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007328:	f240 80e0 	bls.w	80074ec <_printf_float+0x3c0>
 800732c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007330:	2200      	movs	r2, #0
 8007332:	2300      	movs	r3, #0
 8007334:	f7f9 fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007338:	2800      	cmp	r0, #0
 800733a:	d034      	beq.n	80073a6 <_printf_float+0x27a>
 800733c:	4a37      	ldr	r2, [pc, #220]	; (800741c <_printf_float+0x2f0>)
 800733e:	2301      	movs	r3, #1
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f af51 	beq.w	80071ee <_printf_float+0xc2>
 800734c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007350:	429a      	cmp	r2, r3
 8007352:	db02      	blt.n	800735a <_printf_float+0x22e>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	07d8      	lsls	r0, r3, #31
 8007358:	d510      	bpl.n	800737c <_printf_float+0x250>
 800735a:	ee18 3a10 	vmov	r3, s16
 800735e:	4652      	mov	r2, sl
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f af41 	beq.w	80071ee <_printf_float+0xc2>
 800736c:	f04f 0800 	mov.w	r8, #0
 8007370:	f104 091a 	add.w	r9, r4, #26
 8007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007376:	3b01      	subs	r3, #1
 8007378:	4543      	cmp	r3, r8
 800737a:	dc09      	bgt.n	8007390 <_printf_float+0x264>
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	079b      	lsls	r3, r3, #30
 8007380:	f100 8105 	bmi.w	800758e <_printf_float+0x462>
 8007384:	68e0      	ldr	r0, [r4, #12]
 8007386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007388:	4298      	cmp	r0, r3
 800738a:	bfb8      	it	lt
 800738c:	4618      	movlt	r0, r3
 800738e:	e730      	b.n	80071f2 <_printf_float+0xc6>
 8007390:	2301      	movs	r3, #1
 8007392:	464a      	mov	r2, r9
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	f43f af27 	beq.w	80071ee <_printf_float+0xc2>
 80073a0:	f108 0801 	add.w	r8, r8, #1
 80073a4:	e7e6      	b.n	8007374 <_printf_float+0x248>
 80073a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dc39      	bgt.n	8007420 <_printf_float+0x2f4>
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <_printf_float+0x2f0>)
 80073ae:	2301      	movs	r3, #1
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f af19 	beq.w	80071ee <_printf_float+0xc2>
 80073bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073c0:	4313      	orrs	r3, r2
 80073c2:	d102      	bne.n	80073ca <_printf_float+0x29e>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	d5d8      	bpl.n	800737c <_printf_float+0x250>
 80073ca:	ee18 3a10 	vmov	r3, s16
 80073ce:	4652      	mov	r2, sl
 80073d0:	4631      	mov	r1, r6
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b8      	blx	r7
 80073d6:	3001      	adds	r0, #1
 80073d8:	f43f af09 	beq.w	80071ee <_printf_float+0xc2>
 80073dc:	f04f 0900 	mov.w	r9, #0
 80073e0:	f104 0a1a 	add.w	sl, r4, #26
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	425b      	negs	r3, r3
 80073e8:	454b      	cmp	r3, r9
 80073ea:	dc01      	bgt.n	80073f0 <_printf_float+0x2c4>
 80073ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ee:	e792      	b.n	8007316 <_printf_float+0x1ea>
 80073f0:	2301      	movs	r3, #1
 80073f2:	4652      	mov	r2, sl
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	f43f aef7 	beq.w	80071ee <_printf_float+0xc2>
 8007400:	f109 0901 	add.w	r9, r9, #1
 8007404:	e7ee      	b.n	80073e4 <_printf_float+0x2b8>
 8007406:	bf00      	nop
 8007408:	7fefffff 	.word	0x7fefffff
 800740c:	08009e78 	.word	0x08009e78
 8007410:	08009e7c 	.word	0x08009e7c
 8007414:	08009e84 	.word	0x08009e84
 8007418:	08009e80 	.word	0x08009e80
 800741c:	08009e88 	.word	0x08009e88
 8007420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007424:	429a      	cmp	r2, r3
 8007426:	bfa8      	it	ge
 8007428:	461a      	movge	r2, r3
 800742a:	2a00      	cmp	r2, #0
 800742c:	4691      	mov	r9, r2
 800742e:	dc37      	bgt.n	80074a0 <_printf_float+0x374>
 8007430:	f04f 0b00 	mov.w	fp, #0
 8007434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007438:	f104 021a 	add.w	r2, r4, #26
 800743c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800743e:	9305      	str	r3, [sp, #20]
 8007440:	eba3 0309 	sub.w	r3, r3, r9
 8007444:	455b      	cmp	r3, fp
 8007446:	dc33      	bgt.n	80074b0 <_printf_float+0x384>
 8007448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800744c:	429a      	cmp	r2, r3
 800744e:	db3b      	blt.n	80074c8 <_printf_float+0x39c>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	07da      	lsls	r2, r3, #31
 8007454:	d438      	bmi.n	80074c8 <_printf_float+0x39c>
 8007456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007458:	9a05      	ldr	r2, [sp, #20]
 800745a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800745c:	1a9a      	subs	r2, r3, r2
 800745e:	eba3 0901 	sub.w	r9, r3, r1
 8007462:	4591      	cmp	r9, r2
 8007464:	bfa8      	it	ge
 8007466:	4691      	movge	r9, r2
 8007468:	f1b9 0f00 	cmp.w	r9, #0
 800746c:	dc35      	bgt.n	80074da <_printf_float+0x3ae>
 800746e:	f04f 0800 	mov.w	r8, #0
 8007472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007476:	f104 0a1a 	add.w	sl, r4, #26
 800747a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	eba3 0309 	sub.w	r3, r3, r9
 8007484:	4543      	cmp	r3, r8
 8007486:	f77f af79 	ble.w	800737c <_printf_float+0x250>
 800748a:	2301      	movs	r3, #1
 800748c:	4652      	mov	r2, sl
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	f43f aeaa 	beq.w	80071ee <_printf_float+0xc2>
 800749a:	f108 0801 	add.w	r8, r8, #1
 800749e:	e7ec      	b.n	800747a <_printf_float+0x34e>
 80074a0:	4613      	mov	r3, r2
 80074a2:	4631      	mov	r1, r6
 80074a4:	4642      	mov	r2, r8
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	d1c0      	bne.n	8007430 <_printf_float+0x304>
 80074ae:	e69e      	b.n	80071ee <_printf_float+0xc2>
 80074b0:	2301      	movs	r3, #1
 80074b2:	4631      	mov	r1, r6
 80074b4:	4628      	mov	r0, r5
 80074b6:	9205      	str	r2, [sp, #20]
 80074b8:	47b8      	blx	r7
 80074ba:	3001      	adds	r0, #1
 80074bc:	f43f ae97 	beq.w	80071ee <_printf_float+0xc2>
 80074c0:	9a05      	ldr	r2, [sp, #20]
 80074c2:	f10b 0b01 	add.w	fp, fp, #1
 80074c6:	e7b9      	b.n	800743c <_printf_float+0x310>
 80074c8:	ee18 3a10 	vmov	r3, s16
 80074cc:	4652      	mov	r2, sl
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1be      	bne.n	8007456 <_printf_float+0x32a>
 80074d8:	e689      	b.n	80071ee <_printf_float+0xc2>
 80074da:	9a05      	ldr	r2, [sp, #20]
 80074dc:	464b      	mov	r3, r9
 80074de:	4442      	add	r2, r8
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	d1c1      	bne.n	800746e <_printf_float+0x342>
 80074ea:	e680      	b.n	80071ee <_printf_float+0xc2>
 80074ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ee:	2a01      	cmp	r2, #1
 80074f0:	dc01      	bgt.n	80074f6 <_printf_float+0x3ca>
 80074f2:	07db      	lsls	r3, r3, #31
 80074f4:	d538      	bpl.n	8007568 <_printf_float+0x43c>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4642      	mov	r2, r8
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	f43f ae74 	beq.w	80071ee <_printf_float+0xc2>
 8007506:	ee18 3a10 	vmov	r3, s16
 800750a:	4652      	mov	r2, sl
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f ae6b 	beq.w	80071ee <_printf_float+0xc2>
 8007518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	f7f9 fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8007524:	b9d8      	cbnz	r0, 800755e <_printf_float+0x432>
 8007526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007528:	f108 0201 	add.w	r2, r8, #1
 800752c:	3b01      	subs	r3, #1
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	d10e      	bne.n	8007556 <_printf_float+0x42a>
 8007538:	e659      	b.n	80071ee <_printf_float+0xc2>
 800753a:	2301      	movs	r3, #1
 800753c:	4652      	mov	r2, sl
 800753e:	4631      	mov	r1, r6
 8007540:	4628      	mov	r0, r5
 8007542:	47b8      	blx	r7
 8007544:	3001      	adds	r0, #1
 8007546:	f43f ae52 	beq.w	80071ee <_printf_float+0xc2>
 800754a:	f108 0801 	add.w	r8, r8, #1
 800754e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007550:	3b01      	subs	r3, #1
 8007552:	4543      	cmp	r3, r8
 8007554:	dcf1      	bgt.n	800753a <_printf_float+0x40e>
 8007556:	464b      	mov	r3, r9
 8007558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800755c:	e6dc      	b.n	8007318 <_printf_float+0x1ec>
 800755e:	f04f 0800 	mov.w	r8, #0
 8007562:	f104 0a1a 	add.w	sl, r4, #26
 8007566:	e7f2      	b.n	800754e <_printf_float+0x422>
 8007568:	2301      	movs	r3, #1
 800756a:	4642      	mov	r2, r8
 800756c:	e7df      	b.n	800752e <_printf_float+0x402>
 800756e:	2301      	movs	r3, #1
 8007570:	464a      	mov	r2, r9
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f ae38 	beq.w	80071ee <_printf_float+0xc2>
 800757e:	f108 0801 	add.w	r8, r8, #1
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	4543      	cmp	r3, r8
 800758a:	dcf0      	bgt.n	800756e <_printf_float+0x442>
 800758c:	e6fa      	b.n	8007384 <_printf_float+0x258>
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	f104 0919 	add.w	r9, r4, #25
 8007596:	e7f4      	b.n	8007582 <_printf_float+0x456>

08007598 <_printf_common>:
 8007598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	4616      	mov	r6, r2
 800759e:	4699      	mov	r9, r3
 80075a0:	688a      	ldr	r2, [r1, #8]
 80075a2:	690b      	ldr	r3, [r1, #16]
 80075a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bfb8      	it	lt
 80075ac:	4613      	movlt	r3, r2
 80075ae:	6033      	str	r3, [r6, #0]
 80075b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b4:	4607      	mov	r7, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	b10a      	cbz	r2, 80075be <_printf_common+0x26>
 80075ba:	3301      	adds	r3, #1
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	0699      	lsls	r1, r3, #26
 80075c2:	bf42      	ittt	mi
 80075c4:	6833      	ldrmi	r3, [r6, #0]
 80075c6:	3302      	addmi	r3, #2
 80075c8:	6033      	strmi	r3, [r6, #0]
 80075ca:	6825      	ldr	r5, [r4, #0]
 80075cc:	f015 0506 	ands.w	r5, r5, #6
 80075d0:	d106      	bne.n	80075e0 <_printf_common+0x48>
 80075d2:	f104 0a19 	add.w	sl, r4, #25
 80075d6:	68e3      	ldr	r3, [r4, #12]
 80075d8:	6832      	ldr	r2, [r6, #0]
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dc26      	bgt.n	800762e <_printf_common+0x96>
 80075e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075e4:	1e13      	subs	r3, r2, #0
 80075e6:	6822      	ldr	r2, [r4, #0]
 80075e8:	bf18      	it	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	0692      	lsls	r2, r2, #26
 80075ee:	d42b      	bmi.n	8007648 <_printf_common+0xb0>
 80075f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075f4:	4649      	mov	r1, r9
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d01e      	beq.n	800763c <_printf_common+0xa4>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	68e5      	ldr	r5, [r4, #12]
 8007602:	6832      	ldr	r2, [r6, #0]
 8007604:	f003 0306 	and.w	r3, r3, #6
 8007608:	2b04      	cmp	r3, #4
 800760a:	bf08      	it	eq
 800760c:	1aad      	subeq	r5, r5, r2
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	bf0c      	ite	eq
 8007614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007618:	2500      	movne	r5, #0
 800761a:	4293      	cmp	r3, r2
 800761c:	bfc4      	itt	gt
 800761e:	1a9b      	subgt	r3, r3, r2
 8007620:	18ed      	addgt	r5, r5, r3
 8007622:	2600      	movs	r6, #0
 8007624:	341a      	adds	r4, #26
 8007626:	42b5      	cmp	r5, r6
 8007628:	d11a      	bne.n	8007660 <_printf_common+0xc8>
 800762a:	2000      	movs	r0, #0
 800762c:	e008      	b.n	8007640 <_printf_common+0xa8>
 800762e:	2301      	movs	r3, #1
 8007630:	4652      	mov	r2, sl
 8007632:	4649      	mov	r1, r9
 8007634:	4638      	mov	r0, r7
 8007636:	47c0      	blx	r8
 8007638:	3001      	adds	r0, #1
 800763a:	d103      	bne.n	8007644 <_printf_common+0xac>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007644:	3501      	adds	r5, #1
 8007646:	e7c6      	b.n	80075d6 <_printf_common+0x3e>
 8007648:	18e1      	adds	r1, r4, r3
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	2030      	movs	r0, #48	; 0x30
 800764e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007652:	4422      	add	r2, r4
 8007654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800765c:	3302      	adds	r3, #2
 800765e:	e7c7      	b.n	80075f0 <_printf_common+0x58>
 8007660:	2301      	movs	r3, #1
 8007662:	4622      	mov	r2, r4
 8007664:	4649      	mov	r1, r9
 8007666:	4638      	mov	r0, r7
 8007668:	47c0      	blx	r8
 800766a:	3001      	adds	r0, #1
 800766c:	d0e6      	beq.n	800763c <_printf_common+0xa4>
 800766e:	3601      	adds	r6, #1
 8007670:	e7d9      	b.n	8007626 <_printf_common+0x8e>
	...

08007674 <_printf_i>:
 8007674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	7e0f      	ldrb	r7, [r1, #24]
 800767a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800767c:	2f78      	cmp	r7, #120	; 0x78
 800767e:	4691      	mov	r9, r2
 8007680:	4680      	mov	r8, r0
 8007682:	460c      	mov	r4, r1
 8007684:	469a      	mov	sl, r3
 8007686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800768a:	d807      	bhi.n	800769c <_printf_i+0x28>
 800768c:	2f62      	cmp	r7, #98	; 0x62
 800768e:	d80a      	bhi.n	80076a6 <_printf_i+0x32>
 8007690:	2f00      	cmp	r7, #0
 8007692:	f000 80d8 	beq.w	8007846 <_printf_i+0x1d2>
 8007696:	2f58      	cmp	r7, #88	; 0x58
 8007698:	f000 80a3 	beq.w	80077e2 <_printf_i+0x16e>
 800769c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076a4:	e03a      	b.n	800771c <_printf_i+0xa8>
 80076a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076aa:	2b15      	cmp	r3, #21
 80076ac:	d8f6      	bhi.n	800769c <_printf_i+0x28>
 80076ae:	a101      	add	r1, pc, #4	; (adr r1, 80076b4 <_printf_i+0x40>)
 80076b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	08007721 	.word	0x08007721
 80076bc:	0800769d 	.word	0x0800769d
 80076c0:	0800769d 	.word	0x0800769d
 80076c4:	0800769d 	.word	0x0800769d
 80076c8:	0800769d 	.word	0x0800769d
 80076cc:	08007721 	.word	0x08007721
 80076d0:	0800769d 	.word	0x0800769d
 80076d4:	0800769d 	.word	0x0800769d
 80076d8:	0800769d 	.word	0x0800769d
 80076dc:	0800769d 	.word	0x0800769d
 80076e0:	0800782d 	.word	0x0800782d
 80076e4:	08007751 	.word	0x08007751
 80076e8:	0800780f 	.word	0x0800780f
 80076ec:	0800769d 	.word	0x0800769d
 80076f0:	0800769d 	.word	0x0800769d
 80076f4:	0800784f 	.word	0x0800784f
 80076f8:	0800769d 	.word	0x0800769d
 80076fc:	08007751 	.word	0x08007751
 8007700:	0800769d 	.word	0x0800769d
 8007704:	0800769d 	.word	0x0800769d
 8007708:	08007817 	.word	0x08007817
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	602a      	str	r2, [r5, #0]
 8007714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800771c:	2301      	movs	r3, #1
 800771e:	e0a3      	b.n	8007868 <_printf_i+0x1f4>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	6829      	ldr	r1, [r5, #0]
 8007724:	0606      	lsls	r6, r0, #24
 8007726:	f101 0304 	add.w	r3, r1, #4
 800772a:	d50a      	bpl.n	8007742 <_printf_i+0xce>
 800772c:	680e      	ldr	r6, [r1, #0]
 800772e:	602b      	str	r3, [r5, #0]
 8007730:	2e00      	cmp	r6, #0
 8007732:	da03      	bge.n	800773c <_printf_i+0xc8>
 8007734:	232d      	movs	r3, #45	; 0x2d
 8007736:	4276      	negs	r6, r6
 8007738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800773c:	485e      	ldr	r0, [pc, #376]	; (80078b8 <_printf_i+0x244>)
 800773e:	230a      	movs	r3, #10
 8007740:	e019      	b.n	8007776 <_printf_i+0x102>
 8007742:	680e      	ldr	r6, [r1, #0]
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800774a:	bf18      	it	ne
 800774c:	b236      	sxthne	r6, r6
 800774e:	e7ef      	b.n	8007730 <_printf_i+0xbc>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	1d19      	adds	r1, r3, #4
 8007756:	6029      	str	r1, [r5, #0]
 8007758:	0601      	lsls	r1, r0, #24
 800775a:	d501      	bpl.n	8007760 <_printf_i+0xec>
 800775c:	681e      	ldr	r6, [r3, #0]
 800775e:	e002      	b.n	8007766 <_printf_i+0xf2>
 8007760:	0646      	lsls	r6, r0, #25
 8007762:	d5fb      	bpl.n	800775c <_printf_i+0xe8>
 8007764:	881e      	ldrh	r6, [r3, #0]
 8007766:	4854      	ldr	r0, [pc, #336]	; (80078b8 <_printf_i+0x244>)
 8007768:	2f6f      	cmp	r7, #111	; 0x6f
 800776a:	bf0c      	ite	eq
 800776c:	2308      	moveq	r3, #8
 800776e:	230a      	movne	r3, #10
 8007770:	2100      	movs	r1, #0
 8007772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007776:	6865      	ldr	r5, [r4, #4]
 8007778:	60a5      	str	r5, [r4, #8]
 800777a:	2d00      	cmp	r5, #0
 800777c:	bfa2      	ittt	ge
 800777e:	6821      	ldrge	r1, [r4, #0]
 8007780:	f021 0104 	bicge.w	r1, r1, #4
 8007784:	6021      	strge	r1, [r4, #0]
 8007786:	b90e      	cbnz	r6, 800778c <_printf_i+0x118>
 8007788:	2d00      	cmp	r5, #0
 800778a:	d04d      	beq.n	8007828 <_printf_i+0x1b4>
 800778c:	4615      	mov	r5, r2
 800778e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007792:	fb03 6711 	mls	r7, r3, r1, r6
 8007796:	5dc7      	ldrb	r7, [r0, r7]
 8007798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800779c:	4637      	mov	r7, r6
 800779e:	42bb      	cmp	r3, r7
 80077a0:	460e      	mov	r6, r1
 80077a2:	d9f4      	bls.n	800778e <_printf_i+0x11a>
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d10b      	bne.n	80077c0 <_printf_i+0x14c>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	07de      	lsls	r6, r3, #31
 80077ac:	d508      	bpl.n	80077c0 <_printf_i+0x14c>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	6861      	ldr	r1, [r4, #4]
 80077b2:	4299      	cmp	r1, r3
 80077b4:	bfde      	ittt	le
 80077b6:	2330      	movle	r3, #48	; 0x30
 80077b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077c0:	1b52      	subs	r2, r2, r5
 80077c2:	6122      	str	r2, [r4, #16]
 80077c4:	f8cd a000 	str.w	sl, [sp]
 80077c8:	464b      	mov	r3, r9
 80077ca:	aa03      	add	r2, sp, #12
 80077cc:	4621      	mov	r1, r4
 80077ce:	4640      	mov	r0, r8
 80077d0:	f7ff fee2 	bl	8007598 <_printf_common>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d14c      	bne.n	8007872 <_printf_i+0x1fe>
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077dc:	b004      	add	sp, #16
 80077de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e2:	4835      	ldr	r0, [pc, #212]	; (80078b8 <_printf_i+0x244>)
 80077e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80077e8:	6829      	ldr	r1, [r5, #0]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80077f0:	6029      	str	r1, [r5, #0]
 80077f2:	061d      	lsls	r5, r3, #24
 80077f4:	d514      	bpl.n	8007820 <_printf_i+0x1ac>
 80077f6:	07df      	lsls	r7, r3, #31
 80077f8:	bf44      	itt	mi
 80077fa:	f043 0320 	orrmi.w	r3, r3, #32
 80077fe:	6023      	strmi	r3, [r4, #0]
 8007800:	b91e      	cbnz	r6, 800780a <_printf_i+0x196>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	f023 0320 	bic.w	r3, r3, #32
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	2310      	movs	r3, #16
 800780c:	e7b0      	b.n	8007770 <_printf_i+0xfc>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	f043 0320 	orr.w	r3, r3, #32
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	2378      	movs	r3, #120	; 0x78
 8007818:	4828      	ldr	r0, [pc, #160]	; (80078bc <_printf_i+0x248>)
 800781a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800781e:	e7e3      	b.n	80077e8 <_printf_i+0x174>
 8007820:	0659      	lsls	r1, r3, #25
 8007822:	bf48      	it	mi
 8007824:	b2b6      	uxthmi	r6, r6
 8007826:	e7e6      	b.n	80077f6 <_printf_i+0x182>
 8007828:	4615      	mov	r5, r2
 800782a:	e7bb      	b.n	80077a4 <_printf_i+0x130>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	6826      	ldr	r6, [r4, #0]
 8007830:	6961      	ldr	r1, [r4, #20]
 8007832:	1d18      	adds	r0, r3, #4
 8007834:	6028      	str	r0, [r5, #0]
 8007836:	0635      	lsls	r5, r6, #24
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	d501      	bpl.n	8007840 <_printf_i+0x1cc>
 800783c:	6019      	str	r1, [r3, #0]
 800783e:	e002      	b.n	8007846 <_printf_i+0x1d2>
 8007840:	0670      	lsls	r0, r6, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0x1c8>
 8007844:	8019      	strh	r1, [r3, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	4615      	mov	r5, r2
 800784c:	e7ba      	b.n	80077c4 <_printf_i+0x150>
 800784e:	682b      	ldr	r3, [r5, #0]
 8007850:	1d1a      	adds	r2, r3, #4
 8007852:	602a      	str	r2, [r5, #0]
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	6862      	ldr	r2, [r4, #4]
 8007858:	2100      	movs	r1, #0
 800785a:	4628      	mov	r0, r5
 800785c:	f7f8 fcc8 	bl	80001f0 <memchr>
 8007860:	b108      	cbz	r0, 8007866 <_printf_i+0x1f2>
 8007862:	1b40      	subs	r0, r0, r5
 8007864:	6060      	str	r0, [r4, #4]
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	2300      	movs	r3, #0
 800786c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007870:	e7a8      	b.n	80077c4 <_printf_i+0x150>
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	462a      	mov	r2, r5
 8007876:	4649      	mov	r1, r9
 8007878:	4640      	mov	r0, r8
 800787a:	47d0      	blx	sl
 800787c:	3001      	adds	r0, #1
 800787e:	d0ab      	beq.n	80077d8 <_printf_i+0x164>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	079b      	lsls	r3, r3, #30
 8007884:	d413      	bmi.n	80078ae <_printf_i+0x23a>
 8007886:	68e0      	ldr	r0, [r4, #12]
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	4298      	cmp	r0, r3
 800788c:	bfb8      	it	lt
 800788e:	4618      	movlt	r0, r3
 8007890:	e7a4      	b.n	80077dc <_printf_i+0x168>
 8007892:	2301      	movs	r3, #1
 8007894:	4632      	mov	r2, r6
 8007896:	4649      	mov	r1, r9
 8007898:	4640      	mov	r0, r8
 800789a:	47d0      	blx	sl
 800789c:	3001      	adds	r0, #1
 800789e:	d09b      	beq.n	80077d8 <_printf_i+0x164>
 80078a0:	3501      	adds	r5, #1
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	9903      	ldr	r1, [sp, #12]
 80078a6:	1a5b      	subs	r3, r3, r1
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	dcf2      	bgt.n	8007892 <_printf_i+0x21e>
 80078ac:	e7eb      	b.n	8007886 <_printf_i+0x212>
 80078ae:	2500      	movs	r5, #0
 80078b0:	f104 0619 	add.w	r6, r4, #25
 80078b4:	e7f5      	b.n	80078a2 <_printf_i+0x22e>
 80078b6:	bf00      	nop
 80078b8:	08009e8a 	.word	0x08009e8a
 80078bc:	08009e9b 	.word	0x08009e9b

080078c0 <siprintf>:
 80078c0:	b40e      	push	{r1, r2, r3}
 80078c2:	b500      	push	{lr}
 80078c4:	b09c      	sub	sp, #112	; 0x70
 80078c6:	ab1d      	add	r3, sp, #116	; 0x74
 80078c8:	9002      	str	r0, [sp, #8]
 80078ca:	9006      	str	r0, [sp, #24]
 80078cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078d0:	4809      	ldr	r0, [pc, #36]	; (80078f8 <siprintf+0x38>)
 80078d2:	9107      	str	r1, [sp, #28]
 80078d4:	9104      	str	r1, [sp, #16]
 80078d6:	4909      	ldr	r1, [pc, #36]	; (80078fc <siprintf+0x3c>)
 80078d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078dc:	9105      	str	r1, [sp, #20]
 80078de:	6800      	ldr	r0, [r0, #0]
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	a902      	add	r1, sp, #8
 80078e4:	f001 fb68 	bl	8008fb8 <_svfiprintf_r>
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	b01c      	add	sp, #112	; 0x70
 80078f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078f4:	b003      	add	sp, #12
 80078f6:	4770      	bx	lr
 80078f8:	20000010 	.word	0x20000010
 80078fc:	ffff0208 	.word	0xffff0208

08007900 <quorem>:
 8007900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	6903      	ldr	r3, [r0, #16]
 8007906:	690c      	ldr	r4, [r1, #16]
 8007908:	42a3      	cmp	r3, r4
 800790a:	4607      	mov	r7, r0
 800790c:	f2c0 8081 	blt.w	8007a12 <quorem+0x112>
 8007910:	3c01      	subs	r4, #1
 8007912:	f101 0814 	add.w	r8, r1, #20
 8007916:	f100 0514 	add.w	r5, r0, #20
 800791a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007928:	3301      	adds	r3, #1
 800792a:	429a      	cmp	r2, r3
 800792c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007930:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007934:	fbb2 f6f3 	udiv	r6, r2, r3
 8007938:	d331      	bcc.n	800799e <quorem+0x9e>
 800793a:	f04f 0e00 	mov.w	lr, #0
 800793e:	4640      	mov	r0, r8
 8007940:	46ac      	mov	ip, r5
 8007942:	46f2      	mov	sl, lr
 8007944:	f850 2b04 	ldr.w	r2, [r0], #4
 8007948:	b293      	uxth	r3, r2
 800794a:	fb06 e303 	mla	r3, r6, r3, lr
 800794e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007952:	b29b      	uxth	r3, r3
 8007954:	ebaa 0303 	sub.w	r3, sl, r3
 8007958:	f8dc a000 	ldr.w	sl, [ip]
 800795c:	0c12      	lsrs	r2, r2, #16
 800795e:	fa13 f38a 	uxtah	r3, r3, sl
 8007962:	fb06 e202 	mla	r2, r6, r2, lr
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	9b00      	ldr	r3, [sp, #0]
 800796a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800796e:	b292      	uxth	r2, r2
 8007970:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007978:	f8bd 3000 	ldrh.w	r3, [sp]
 800797c:	4581      	cmp	r9, r0
 800797e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007982:	f84c 3b04 	str.w	r3, [ip], #4
 8007986:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800798a:	d2db      	bcs.n	8007944 <quorem+0x44>
 800798c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007990:	b92b      	cbnz	r3, 800799e <quorem+0x9e>
 8007992:	9b01      	ldr	r3, [sp, #4]
 8007994:	3b04      	subs	r3, #4
 8007996:	429d      	cmp	r5, r3
 8007998:	461a      	mov	r2, r3
 800799a:	d32e      	bcc.n	80079fa <quorem+0xfa>
 800799c:	613c      	str	r4, [r7, #16]
 800799e:	4638      	mov	r0, r7
 80079a0:	f001 f8b6 	bl	8008b10 <__mcmp>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	db24      	blt.n	80079f2 <quorem+0xf2>
 80079a8:	3601      	adds	r6, #1
 80079aa:	4628      	mov	r0, r5
 80079ac:	f04f 0c00 	mov.w	ip, #0
 80079b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80079b4:	f8d0 e000 	ldr.w	lr, [r0]
 80079b8:	b293      	uxth	r3, r2
 80079ba:	ebac 0303 	sub.w	r3, ip, r3
 80079be:	0c12      	lsrs	r2, r2, #16
 80079c0:	fa13 f38e 	uxtah	r3, r3, lr
 80079c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079d2:	45c1      	cmp	r9, r8
 80079d4:	f840 3b04 	str.w	r3, [r0], #4
 80079d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079dc:	d2e8      	bcs.n	80079b0 <quorem+0xb0>
 80079de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079e6:	b922      	cbnz	r2, 80079f2 <quorem+0xf2>
 80079e8:	3b04      	subs	r3, #4
 80079ea:	429d      	cmp	r5, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	d30a      	bcc.n	8007a06 <quorem+0x106>
 80079f0:	613c      	str	r4, [r7, #16]
 80079f2:	4630      	mov	r0, r6
 80079f4:	b003      	add	sp, #12
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	6812      	ldr	r2, [r2, #0]
 80079fc:	3b04      	subs	r3, #4
 80079fe:	2a00      	cmp	r2, #0
 8007a00:	d1cc      	bne.n	800799c <quorem+0x9c>
 8007a02:	3c01      	subs	r4, #1
 8007a04:	e7c7      	b.n	8007996 <quorem+0x96>
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d1f0      	bne.n	80079f0 <quorem+0xf0>
 8007a0e:	3c01      	subs	r4, #1
 8007a10:	e7eb      	b.n	80079ea <quorem+0xea>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e7ee      	b.n	80079f4 <quorem+0xf4>
	...

08007a18 <_dtoa_r>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	ed2d 8b04 	vpush	{d8-d9}
 8007a20:	ec57 6b10 	vmov	r6, r7, d0
 8007a24:	b093      	sub	sp, #76	; 0x4c
 8007a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a2c:	9106      	str	r1, [sp, #24]
 8007a2e:	ee10 aa10 	vmov	sl, s0
 8007a32:	4604      	mov	r4, r0
 8007a34:	9209      	str	r2, [sp, #36]	; 0x24
 8007a36:	930c      	str	r3, [sp, #48]	; 0x30
 8007a38:	46bb      	mov	fp, r7
 8007a3a:	b975      	cbnz	r5, 8007a5a <_dtoa_r+0x42>
 8007a3c:	2010      	movs	r0, #16
 8007a3e:	f000 fddd 	bl	80085fc <malloc>
 8007a42:	4602      	mov	r2, r0
 8007a44:	6260      	str	r0, [r4, #36]	; 0x24
 8007a46:	b920      	cbnz	r0, 8007a52 <_dtoa_r+0x3a>
 8007a48:	4ba7      	ldr	r3, [pc, #668]	; (8007ce8 <_dtoa_r+0x2d0>)
 8007a4a:	21ea      	movs	r1, #234	; 0xea
 8007a4c:	48a7      	ldr	r0, [pc, #668]	; (8007cec <_dtoa_r+0x2d4>)
 8007a4e:	f001 fbc3 	bl	80091d8 <__assert_func>
 8007a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a56:	6005      	str	r5, [r0, #0]
 8007a58:	60c5      	str	r5, [r0, #12]
 8007a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a5c:	6819      	ldr	r1, [r3, #0]
 8007a5e:	b151      	cbz	r1, 8007a76 <_dtoa_r+0x5e>
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	604a      	str	r2, [r1, #4]
 8007a64:	2301      	movs	r3, #1
 8007a66:	4093      	lsls	r3, r2
 8007a68:	608b      	str	r3, [r1, #8]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f000 fe0e 	bl	800868c <_Bfree>
 8007a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	1e3b      	subs	r3, r7, #0
 8007a78:	bfaa      	itet	ge
 8007a7a:	2300      	movge	r3, #0
 8007a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007a80:	f8c8 3000 	strge.w	r3, [r8]
 8007a84:	4b9a      	ldr	r3, [pc, #616]	; (8007cf0 <_dtoa_r+0x2d8>)
 8007a86:	bfbc      	itt	lt
 8007a88:	2201      	movlt	r2, #1
 8007a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8007a8e:	ea33 030b 	bics.w	r3, r3, fp
 8007a92:	d11b      	bne.n	8007acc <_dtoa_r+0xb4>
 8007a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007aa0:	4333      	orrs	r3, r6
 8007aa2:	f000 8592 	beq.w	80085ca <_dtoa_r+0xbb2>
 8007aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aa8:	b963      	cbnz	r3, 8007ac4 <_dtoa_r+0xac>
 8007aaa:	4b92      	ldr	r3, [pc, #584]	; (8007cf4 <_dtoa_r+0x2dc>)
 8007aac:	e022      	b.n	8007af4 <_dtoa_r+0xdc>
 8007aae:	4b92      	ldr	r3, [pc, #584]	; (8007cf8 <_dtoa_r+0x2e0>)
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	9801      	ldr	r0, [sp, #4]
 8007aba:	b013      	add	sp, #76	; 0x4c
 8007abc:	ecbd 8b04 	vpop	{d8-d9}
 8007ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac4:	4b8b      	ldr	r3, [pc, #556]	; (8007cf4 <_dtoa_r+0x2dc>)
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	3303      	adds	r3, #3
 8007aca:	e7f3      	b.n	8007ab4 <_dtoa_r+0x9c>
 8007acc:	2200      	movs	r2, #0
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4650      	mov	r0, sl
 8007ad2:	4659      	mov	r1, fp
 8007ad4:	f7f9 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ad8:	ec4b ab19 	vmov	d9, sl, fp
 8007adc:	4680      	mov	r8, r0
 8007ade:	b158      	cbz	r0, 8007af8 <_dtoa_r+0xe0>
 8007ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 856b 	beq.w	80085c4 <_dtoa_r+0xbac>
 8007aee:	4883      	ldr	r0, [pc, #524]	; (8007cfc <_dtoa_r+0x2e4>)
 8007af0:	6018      	str	r0, [r3, #0]
 8007af2:	1e43      	subs	r3, r0, #1
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	e7df      	b.n	8007ab8 <_dtoa_r+0xa0>
 8007af8:	ec4b ab10 	vmov	d0, sl, fp
 8007afc:	aa10      	add	r2, sp, #64	; 0x40
 8007afe:	a911      	add	r1, sp, #68	; 0x44
 8007b00:	4620      	mov	r0, r4
 8007b02:	f001 f8ab 	bl	8008c5c <__d2b>
 8007b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b0a:	ee08 0a10 	vmov	s16, r0
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	f000 8084 	beq.w	8007c1c <_dtoa_r+0x204>
 8007b14:	ee19 3a90 	vmov	r3, s19
 8007b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b20:	4656      	mov	r6, sl
 8007b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b2e:	4b74      	ldr	r3, [pc, #464]	; (8007d00 <_dtoa_r+0x2e8>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	4630      	mov	r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	f7f8 fbaf 	bl	8000298 <__aeabi_dsub>
 8007b3a:	a365      	add	r3, pc, #404	; (adr r3, 8007cd0 <_dtoa_r+0x2b8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fd62 	bl	8000608 <__aeabi_dmul>
 8007b44:	a364      	add	r3, pc, #400	; (adr r3, 8007cd8 <_dtoa_r+0x2c0>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fba7 	bl	800029c <__adddf3>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	4628      	mov	r0, r5
 8007b52:	460f      	mov	r7, r1
 8007b54:	f7f8 fcee 	bl	8000534 <__aeabi_i2d>
 8007b58:	a361      	add	r3, pc, #388	; (adr r3, 8007ce0 <_dtoa_r+0x2c8>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f7f8 fd53 	bl	8000608 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4630      	mov	r0, r6
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f7f8 fb97 	bl	800029c <__adddf3>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	f7f8 fff9 	bl	8000b68 <__aeabi_d2iz>
 8007b76:	2200      	movs	r2, #0
 8007b78:	9000      	str	r0, [sp, #0]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	f7f8 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8007b84:	b150      	cbz	r0, 8007b9c <_dtoa_r+0x184>
 8007b86:	9800      	ldr	r0, [sp, #0]
 8007b88:	f7f8 fcd4 	bl	8000534 <__aeabi_i2d>
 8007b8c:	4632      	mov	r2, r6
 8007b8e:	463b      	mov	r3, r7
 8007b90:	f7f8 ffa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b94:	b910      	cbnz	r0, 8007b9c <_dtoa_r+0x184>
 8007b96:	9b00      	ldr	r3, [sp, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	9b00      	ldr	r3, [sp, #0]
 8007b9e:	2b16      	cmp	r3, #22
 8007ba0:	d85a      	bhi.n	8007c58 <_dtoa_r+0x240>
 8007ba2:	9a00      	ldr	r2, [sp, #0]
 8007ba4:	4b57      	ldr	r3, [pc, #348]	; (8007d04 <_dtoa_r+0x2ec>)
 8007ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	ec51 0b19 	vmov	r0, r1, d9
 8007bb2:	f7f8 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d050      	beq.n	8007c5c <_dtoa_r+0x244>
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bc6:	1b5d      	subs	r5, r3, r5
 8007bc8:	1e6b      	subs	r3, r5, #1
 8007bca:	9305      	str	r3, [sp, #20]
 8007bcc:	bf45      	ittet	mi
 8007bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bd2:	9304      	strmi	r3, [sp, #16]
 8007bd4:	2300      	movpl	r3, #0
 8007bd6:	2300      	movmi	r3, #0
 8007bd8:	bf4c      	ite	mi
 8007bda:	9305      	strmi	r3, [sp, #20]
 8007bdc:	9304      	strpl	r3, [sp, #16]
 8007bde:	9b00      	ldr	r3, [sp, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	db3d      	blt.n	8007c60 <_dtoa_r+0x248>
 8007be4:	9b05      	ldr	r3, [sp, #20]
 8007be6:	9a00      	ldr	r2, [sp, #0]
 8007be8:	920a      	str	r2, [sp, #40]	; 0x28
 8007bea:	4413      	add	r3, r2
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	9307      	str	r3, [sp, #28]
 8007bf2:	9b06      	ldr	r3, [sp, #24]
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	f200 8089 	bhi.w	8007d0c <_dtoa_r+0x2f4>
 8007bfa:	2b05      	cmp	r3, #5
 8007bfc:	bfc4      	itt	gt
 8007bfe:	3b04      	subgt	r3, #4
 8007c00:	9306      	strgt	r3, [sp, #24]
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	f1a3 0302 	sub.w	r3, r3, #2
 8007c08:	bfcc      	ite	gt
 8007c0a:	2500      	movgt	r5, #0
 8007c0c:	2501      	movle	r5, #1
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	f200 8087 	bhi.w	8007d22 <_dtoa_r+0x30a>
 8007c14:	e8df f003 	tbb	[pc, r3]
 8007c18:	59383a2d 	.word	0x59383a2d
 8007c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c20:	441d      	add	r5, r3
 8007c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	bfc1      	itttt	gt
 8007c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c3a:	bfda      	itte	le
 8007c3c:	f1c3 0320 	rsble	r3, r3, #32
 8007c40:	fa06 f003 	lslle.w	r0, r6, r3
 8007c44:	4318      	orrgt	r0, r3
 8007c46:	f7f8 fc65 	bl	8000514 <__aeabi_ui2d>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c52:	3d01      	subs	r5, #1
 8007c54:	930e      	str	r3, [sp, #56]	; 0x38
 8007c56:	e76a      	b.n	8007b2e <_dtoa_r+0x116>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e7b2      	b.n	8007bc2 <_dtoa_r+0x1aa>
 8007c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c5e:	e7b1      	b.n	8007bc4 <_dtoa_r+0x1ac>
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	9a00      	ldr	r2, [sp, #0]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	4253      	negs	r3, r2
 8007c6a:	9307      	str	r3, [sp, #28]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c70:	e7bf      	b.n	8007bf2 <_dtoa_r+0x1da>
 8007c72:	2300      	movs	r3, #0
 8007c74:	9308      	str	r3, [sp, #32]
 8007c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	dc55      	bgt.n	8007d28 <_dtoa_r+0x310>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c82:	461a      	mov	r2, r3
 8007c84:	9209      	str	r2, [sp, #36]	; 0x24
 8007c86:	e00c      	b.n	8007ca2 <_dtoa_r+0x28a>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e7f3      	b.n	8007c74 <_dtoa_r+0x25c>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c90:	9308      	str	r3, [sp, #32]
 8007c92:	9b00      	ldr	r3, [sp, #0]
 8007c94:	4413      	add	r3, r2
 8007c96:	9302      	str	r3, [sp, #8]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	bfb8      	it	lt
 8007ca0:	2301      	movlt	r3, #1
 8007ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	6042      	str	r2, [r0, #4]
 8007ca8:	2204      	movs	r2, #4
 8007caa:	f102 0614 	add.w	r6, r2, #20
 8007cae:	429e      	cmp	r6, r3
 8007cb0:	6841      	ldr	r1, [r0, #4]
 8007cb2:	d93d      	bls.n	8007d30 <_dtoa_r+0x318>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 fca9 	bl	800860c <_Balloc>
 8007cba:	9001      	str	r0, [sp, #4]
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d13b      	bne.n	8007d38 <_dtoa_r+0x320>
 8007cc0:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <_dtoa_r+0x2f0>)
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cc8:	e6c0      	b.n	8007a4c <_dtoa_r+0x34>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e7df      	b.n	8007c8e <_dtoa_r+0x276>
 8007cce:	bf00      	nop
 8007cd0:	636f4361 	.word	0x636f4361
 8007cd4:	3fd287a7 	.word	0x3fd287a7
 8007cd8:	8b60c8b3 	.word	0x8b60c8b3
 8007cdc:	3fc68a28 	.word	0x3fc68a28
 8007ce0:	509f79fb 	.word	0x509f79fb
 8007ce4:	3fd34413 	.word	0x3fd34413
 8007ce8:	08009eb9 	.word	0x08009eb9
 8007cec:	08009ed0 	.word	0x08009ed0
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	08009eb5 	.word	0x08009eb5
 8007cf8:	08009eac 	.word	0x08009eac
 8007cfc:	08009e89 	.word	0x08009e89
 8007d00:	3ff80000 	.word	0x3ff80000
 8007d04:	08009fc0 	.word	0x08009fc0
 8007d08:	08009f2b 	.word	0x08009f2b
 8007d0c:	2501      	movs	r5, #1
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9306      	str	r3, [sp, #24]
 8007d12:	9508      	str	r5, [sp, #32]
 8007d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2312      	movs	r3, #18
 8007d20:	e7b0      	b.n	8007c84 <_dtoa_r+0x26c>
 8007d22:	2301      	movs	r3, #1
 8007d24:	9308      	str	r3, [sp, #32]
 8007d26:	e7f5      	b.n	8007d14 <_dtoa_r+0x2fc>
 8007d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d2e:	e7b8      	b.n	8007ca2 <_dtoa_r+0x28a>
 8007d30:	3101      	adds	r1, #1
 8007d32:	6041      	str	r1, [r0, #4]
 8007d34:	0052      	lsls	r2, r2, #1
 8007d36:	e7b8      	b.n	8007caa <_dtoa_r+0x292>
 8007d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d3a:	9a01      	ldr	r2, [sp, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	2b0e      	cmp	r3, #14
 8007d42:	f200 809d 	bhi.w	8007e80 <_dtoa_r+0x468>
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	f000 809a 	beq.w	8007e80 <_dtoa_r+0x468>
 8007d4c:	9b00      	ldr	r3, [sp, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dd32      	ble.n	8007db8 <_dtoa_r+0x3a0>
 8007d52:	4ab7      	ldr	r2, [pc, #732]	; (8008030 <_dtoa_r+0x618>)
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	05d8      	lsls	r0, r3, #23
 8007d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d68:	d516      	bpl.n	8007d98 <_dtoa_r+0x380>
 8007d6a:	4bb2      	ldr	r3, [pc, #712]	; (8008034 <_dtoa_r+0x61c>)
 8007d6c:	ec51 0b19 	vmov	r0, r1, d9
 8007d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d74:	f7f8 fd72 	bl	800085c <__aeabi_ddiv>
 8007d78:	f007 070f 	and.w	r7, r7, #15
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	468b      	mov	fp, r1
 8007d80:	2503      	movs	r5, #3
 8007d82:	4eac      	ldr	r6, [pc, #688]	; (8008034 <_dtoa_r+0x61c>)
 8007d84:	b957      	cbnz	r7, 8007d9c <_dtoa_r+0x384>
 8007d86:	4642      	mov	r2, r8
 8007d88:	464b      	mov	r3, r9
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	4659      	mov	r1, fp
 8007d8e:	f7f8 fd65 	bl	800085c <__aeabi_ddiv>
 8007d92:	4682      	mov	sl, r0
 8007d94:	468b      	mov	fp, r1
 8007d96:	e028      	b.n	8007dea <_dtoa_r+0x3d2>
 8007d98:	2502      	movs	r5, #2
 8007d9a:	e7f2      	b.n	8007d82 <_dtoa_r+0x36a>
 8007d9c:	07f9      	lsls	r1, r7, #31
 8007d9e:	d508      	bpl.n	8007db2 <_dtoa_r+0x39a>
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007da8:	f7f8 fc2e 	bl	8000608 <__aeabi_dmul>
 8007dac:	3501      	adds	r5, #1
 8007dae:	4680      	mov	r8, r0
 8007db0:	4689      	mov	r9, r1
 8007db2:	107f      	asrs	r7, r7, #1
 8007db4:	3608      	adds	r6, #8
 8007db6:	e7e5      	b.n	8007d84 <_dtoa_r+0x36c>
 8007db8:	f000 809b 	beq.w	8007ef2 <_dtoa_r+0x4da>
 8007dbc:	9b00      	ldr	r3, [sp, #0]
 8007dbe:	4f9d      	ldr	r7, [pc, #628]	; (8008034 <_dtoa_r+0x61c>)
 8007dc0:	425e      	negs	r6, r3
 8007dc2:	4b9b      	ldr	r3, [pc, #620]	; (8008030 <_dtoa_r+0x618>)
 8007dc4:	f006 020f 	and.w	r2, r6, #15
 8007dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	ec51 0b19 	vmov	r0, r1, d9
 8007dd4:	f7f8 fc18 	bl	8000608 <__aeabi_dmul>
 8007dd8:	1136      	asrs	r6, r6, #4
 8007dda:	4682      	mov	sl, r0
 8007ddc:	468b      	mov	fp, r1
 8007dde:	2300      	movs	r3, #0
 8007de0:	2502      	movs	r5, #2
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	d17a      	bne.n	8007edc <_dtoa_r+0x4c4>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1d3      	bne.n	8007d92 <_dtoa_r+0x37a>
 8007dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8082 	beq.w	8007ef6 <_dtoa_r+0x4de>
 8007df2:	4b91      	ldr	r3, [pc, #580]	; (8008038 <_dtoa_r+0x620>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	4650      	mov	r0, sl
 8007df8:	4659      	mov	r1, fp
 8007dfa:	f7f8 fe77 	bl	8000aec <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d079      	beq.n	8007ef6 <_dtoa_r+0x4de>
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d076      	beq.n	8007ef6 <_dtoa_r+0x4de>
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	dd36      	ble.n	8007e7c <_dtoa_r+0x464>
 8007e0e:	9b00      	ldr	r3, [sp, #0]
 8007e10:	4650      	mov	r0, sl
 8007e12:	4659      	mov	r1, fp
 8007e14:	1e5f      	subs	r7, r3, #1
 8007e16:	2200      	movs	r2, #0
 8007e18:	4b88      	ldr	r3, [pc, #544]	; (800803c <_dtoa_r+0x624>)
 8007e1a:	f7f8 fbf5 	bl	8000608 <__aeabi_dmul>
 8007e1e:	9e02      	ldr	r6, [sp, #8]
 8007e20:	4682      	mov	sl, r0
 8007e22:	468b      	mov	fp, r1
 8007e24:	3501      	adds	r5, #1
 8007e26:	4628      	mov	r0, r5
 8007e28:	f7f8 fb84 	bl	8000534 <__aeabi_i2d>
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	465b      	mov	r3, fp
 8007e30:	f7f8 fbea 	bl	8000608 <__aeabi_dmul>
 8007e34:	4b82      	ldr	r3, [pc, #520]	; (8008040 <_dtoa_r+0x628>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fa30 	bl	800029c <__adddf3>
 8007e3c:	46d0      	mov	r8, sl
 8007e3e:	46d9      	mov	r9, fp
 8007e40:	4682      	mov	sl, r0
 8007e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	d158      	bne.n	8007efc <_dtoa_r+0x4e4>
 8007e4a:	4b7e      	ldr	r3, [pc, #504]	; (8008044 <_dtoa_r+0x62c>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fa21 	bl	8000298 <__aeabi_dsub>
 8007e56:	4652      	mov	r2, sl
 8007e58:	465b      	mov	r3, fp
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	4689      	mov	r9, r1
 8007e5e:	f7f8 fe63 	bl	8000b28 <__aeabi_dcmpgt>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f040 8295 	bne.w	8008392 <_dtoa_r+0x97a>
 8007e68:	4652      	mov	r2, sl
 8007e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e6e:	4640      	mov	r0, r8
 8007e70:	4649      	mov	r1, r9
 8007e72:	f7f8 fe3b 	bl	8000aec <__aeabi_dcmplt>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f040 8289 	bne.w	800838e <_dtoa_r+0x976>
 8007e7c:	ec5b ab19 	vmov	sl, fp, d9
 8007e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f2c0 8148 	blt.w	8008118 <_dtoa_r+0x700>
 8007e88:	9a00      	ldr	r2, [sp, #0]
 8007e8a:	2a0e      	cmp	r2, #14
 8007e8c:	f300 8144 	bgt.w	8008118 <_dtoa_r+0x700>
 8007e90:	4b67      	ldr	r3, [pc, #412]	; (8008030 <_dtoa_r+0x618>)
 8007e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f280 80d5 	bge.w	800804c <_dtoa_r+0x634>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f300 80d1 	bgt.w	800804c <_dtoa_r+0x634>
 8007eaa:	f040 826f 	bne.w	800838c <_dtoa_r+0x974>
 8007eae:	4b65      	ldr	r3, [pc, #404]	; (8008044 <_dtoa_r+0x62c>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	f7f8 fba7 	bl	8000608 <__aeabi_dmul>
 8007eba:	4652      	mov	r2, sl
 8007ebc:	465b      	mov	r3, fp
 8007ebe:	f7f8 fe29 	bl	8000b14 <__aeabi_dcmpge>
 8007ec2:	9e03      	ldr	r6, [sp, #12]
 8007ec4:	4637      	mov	r7, r6
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f040 8245 	bne.w	8008356 <_dtoa_r+0x93e>
 8007ecc:	9d01      	ldr	r5, [sp, #4]
 8007ece:	2331      	movs	r3, #49	; 0x31
 8007ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	e240      	b.n	800835e <_dtoa_r+0x946>
 8007edc:	07f2      	lsls	r2, r6, #31
 8007ede:	d505      	bpl.n	8007eec <_dtoa_r+0x4d4>
 8007ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee4:	f7f8 fb90 	bl	8000608 <__aeabi_dmul>
 8007ee8:	3501      	adds	r5, #1
 8007eea:	2301      	movs	r3, #1
 8007eec:	1076      	asrs	r6, r6, #1
 8007eee:	3708      	adds	r7, #8
 8007ef0:	e777      	b.n	8007de2 <_dtoa_r+0x3ca>
 8007ef2:	2502      	movs	r5, #2
 8007ef4:	e779      	b.n	8007dea <_dtoa_r+0x3d2>
 8007ef6:	9f00      	ldr	r7, [sp, #0]
 8007ef8:	9e03      	ldr	r6, [sp, #12]
 8007efa:	e794      	b.n	8007e26 <_dtoa_r+0x40e>
 8007efc:	9901      	ldr	r1, [sp, #4]
 8007efe:	4b4c      	ldr	r3, [pc, #304]	; (8008030 <_dtoa_r+0x618>)
 8007f00:	4431      	add	r1, r6
 8007f02:	910d      	str	r1, [sp, #52]	; 0x34
 8007f04:	9908      	ldr	r1, [sp, #32]
 8007f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	d043      	beq.n	8007f9a <_dtoa_r+0x582>
 8007f12:	494d      	ldr	r1, [pc, #308]	; (8008048 <_dtoa_r+0x630>)
 8007f14:	2000      	movs	r0, #0
 8007f16:	f7f8 fca1 	bl	800085c <__aeabi_ddiv>
 8007f1a:	4652      	mov	r2, sl
 8007f1c:	465b      	mov	r3, fp
 8007f1e:	f7f8 f9bb 	bl	8000298 <__aeabi_dsub>
 8007f22:	9d01      	ldr	r5, [sp, #4]
 8007f24:	4682      	mov	sl, r0
 8007f26:	468b      	mov	fp, r1
 8007f28:	4649      	mov	r1, r9
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7f8 fe1c 	bl	8000b68 <__aeabi_d2iz>
 8007f30:	4606      	mov	r6, r0
 8007f32:	f7f8 faff 	bl	8000534 <__aeabi_i2d>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	f7f8 f9ab 	bl	8000298 <__aeabi_dsub>
 8007f42:	3630      	adds	r6, #48	; 0x30
 8007f44:	f805 6b01 	strb.w	r6, [r5], #1
 8007f48:	4652      	mov	r2, sl
 8007f4a:	465b      	mov	r3, fp
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	4689      	mov	r9, r1
 8007f50:	f7f8 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d163      	bne.n	8008020 <_dtoa_r+0x608>
 8007f58:	4642      	mov	r2, r8
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	4936      	ldr	r1, [pc, #216]	; (8008038 <_dtoa_r+0x620>)
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f7f8 f99a 	bl	8000298 <__aeabi_dsub>
 8007f64:	4652      	mov	r2, sl
 8007f66:	465b      	mov	r3, fp
 8007f68:	f7f8 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f040 80b5 	bne.w	80080dc <_dtoa_r+0x6c4>
 8007f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f74:	429d      	cmp	r5, r3
 8007f76:	d081      	beq.n	8007e7c <_dtoa_r+0x464>
 8007f78:	4b30      	ldr	r3, [pc, #192]	; (800803c <_dtoa_r+0x624>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4650      	mov	r0, sl
 8007f7e:	4659      	mov	r1, fp
 8007f80:	f7f8 fb42 	bl	8000608 <__aeabi_dmul>
 8007f84:	4b2d      	ldr	r3, [pc, #180]	; (800803c <_dtoa_r+0x624>)
 8007f86:	4682      	mov	sl, r0
 8007f88:	468b      	mov	fp, r1
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f7f8 fb3a 	bl	8000608 <__aeabi_dmul>
 8007f94:	4680      	mov	r8, r0
 8007f96:	4689      	mov	r9, r1
 8007f98:	e7c6      	b.n	8007f28 <_dtoa_r+0x510>
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	4659      	mov	r1, fp
 8007f9e:	f7f8 fb33 	bl	8000608 <__aeabi_dmul>
 8007fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fa4:	9d01      	ldr	r5, [sp, #4]
 8007fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa8:	4682      	mov	sl, r0
 8007faa:	468b      	mov	fp, r1
 8007fac:	4649      	mov	r1, r9
 8007fae:	4640      	mov	r0, r8
 8007fb0:	f7f8 fdda 	bl	8000b68 <__aeabi_d2iz>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	f7f8 fabd 	bl	8000534 <__aeabi_i2d>
 8007fba:	3630      	adds	r6, #48	; 0x30
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	f7f8 f968 	bl	8000298 <__aeabi_dsub>
 8007fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8007fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fce:	429d      	cmp	r5, r3
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	4689      	mov	r9, r1
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	d124      	bne.n	8008024 <_dtoa_r+0x60c>
 8007fda:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <_dtoa_r+0x630>)
 8007fdc:	4650      	mov	r0, sl
 8007fde:	4659      	mov	r1, fp
 8007fe0:	f7f8 f95c 	bl	800029c <__adddf3>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fd9c 	bl	8000b28 <__aeabi_dcmpgt>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d173      	bne.n	80080dc <_dtoa_r+0x6c4>
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4913      	ldr	r1, [pc, #76]	; (8008048 <_dtoa_r+0x630>)
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f7f8 f94c 	bl	8000298 <__aeabi_dsub>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	4640      	mov	r0, r8
 8008006:	4649      	mov	r1, r9
 8008008:	f7f8 fd70 	bl	8000aec <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f af35 	beq.w	8007e7c <_dtoa_r+0x464>
 8008012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008014:	1e6b      	subs	r3, r5, #1
 8008016:	930f      	str	r3, [sp, #60]	; 0x3c
 8008018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d0f8      	beq.n	8008012 <_dtoa_r+0x5fa>
 8008020:	9700      	str	r7, [sp, #0]
 8008022:	e049      	b.n	80080b8 <_dtoa_r+0x6a0>
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <_dtoa_r+0x624>)
 8008026:	f7f8 faef 	bl	8000608 <__aeabi_dmul>
 800802a:	4680      	mov	r8, r0
 800802c:	4689      	mov	r9, r1
 800802e:	e7bd      	b.n	8007fac <_dtoa_r+0x594>
 8008030:	08009fc0 	.word	0x08009fc0
 8008034:	08009f98 	.word	0x08009f98
 8008038:	3ff00000 	.word	0x3ff00000
 800803c:	40240000 	.word	0x40240000
 8008040:	401c0000 	.word	0x401c0000
 8008044:	40140000 	.word	0x40140000
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	9d01      	ldr	r5, [sp, #4]
 800804e:	4656      	mov	r6, sl
 8008050:	465f      	mov	r7, fp
 8008052:	4642      	mov	r2, r8
 8008054:	464b      	mov	r3, r9
 8008056:	4630      	mov	r0, r6
 8008058:	4639      	mov	r1, r7
 800805a:	f7f8 fbff 	bl	800085c <__aeabi_ddiv>
 800805e:	f7f8 fd83 	bl	8000b68 <__aeabi_d2iz>
 8008062:	4682      	mov	sl, r0
 8008064:	f7f8 fa66 	bl	8000534 <__aeabi_i2d>
 8008068:	4642      	mov	r2, r8
 800806a:	464b      	mov	r3, r9
 800806c:	f7f8 facc 	bl	8000608 <__aeabi_dmul>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800807c:	f7f8 f90c 	bl	8000298 <__aeabi_dsub>
 8008080:	f805 6b01 	strb.w	r6, [r5], #1
 8008084:	9e01      	ldr	r6, [sp, #4]
 8008086:	9f03      	ldr	r7, [sp, #12]
 8008088:	1bae      	subs	r6, r5, r6
 800808a:	42b7      	cmp	r7, r6
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	d135      	bne.n	80080fe <_dtoa_r+0x6e6>
 8008092:	f7f8 f903 	bl	800029c <__adddf3>
 8008096:	4642      	mov	r2, r8
 8008098:	464b      	mov	r3, r9
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	f7f8 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 80080a2:	b9d0      	cbnz	r0, 80080da <_dtoa_r+0x6c2>
 80080a4:	4642      	mov	r2, r8
 80080a6:	464b      	mov	r3, r9
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f7f8 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 80080b0:	b110      	cbz	r0, 80080b8 <_dtoa_r+0x6a0>
 80080b2:	f01a 0f01 	tst.w	sl, #1
 80080b6:	d110      	bne.n	80080da <_dtoa_r+0x6c2>
 80080b8:	4620      	mov	r0, r4
 80080ba:	ee18 1a10 	vmov	r1, s16
 80080be:	f000 fae5 	bl	800868c <_Bfree>
 80080c2:	2300      	movs	r3, #0
 80080c4:	9800      	ldr	r0, [sp, #0]
 80080c6:	702b      	strb	r3, [r5, #0]
 80080c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080ca:	3001      	adds	r0, #1
 80080cc:	6018      	str	r0, [r3, #0]
 80080ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f43f acf1 	beq.w	8007ab8 <_dtoa_r+0xa0>
 80080d6:	601d      	str	r5, [r3, #0]
 80080d8:	e4ee      	b.n	8007ab8 <_dtoa_r+0xa0>
 80080da:	9f00      	ldr	r7, [sp, #0]
 80080dc:	462b      	mov	r3, r5
 80080de:	461d      	mov	r5, r3
 80080e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080e4:	2a39      	cmp	r2, #57	; 0x39
 80080e6:	d106      	bne.n	80080f6 <_dtoa_r+0x6de>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d1f7      	bne.n	80080de <_dtoa_r+0x6c6>
 80080ee:	9901      	ldr	r1, [sp, #4]
 80080f0:	2230      	movs	r2, #48	; 0x30
 80080f2:	3701      	adds	r7, #1
 80080f4:	700a      	strb	r2, [r1, #0]
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	3201      	adds	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]
 80080fc:	e790      	b.n	8008020 <_dtoa_r+0x608>
 80080fe:	4ba6      	ldr	r3, [pc, #664]	; (8008398 <_dtoa_r+0x980>)
 8008100:	2200      	movs	r2, #0
 8008102:	f7f8 fa81 	bl	8000608 <__aeabi_dmul>
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	4606      	mov	r6, r0
 800810c:	460f      	mov	r7, r1
 800810e:	f7f8 fce3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008112:	2800      	cmp	r0, #0
 8008114:	d09d      	beq.n	8008052 <_dtoa_r+0x63a>
 8008116:	e7cf      	b.n	80080b8 <_dtoa_r+0x6a0>
 8008118:	9a08      	ldr	r2, [sp, #32]
 800811a:	2a00      	cmp	r2, #0
 800811c:	f000 80d7 	beq.w	80082ce <_dtoa_r+0x8b6>
 8008120:	9a06      	ldr	r2, [sp, #24]
 8008122:	2a01      	cmp	r2, #1
 8008124:	f300 80ba 	bgt.w	800829c <_dtoa_r+0x884>
 8008128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800812a:	2a00      	cmp	r2, #0
 800812c:	f000 80b2 	beq.w	8008294 <_dtoa_r+0x87c>
 8008130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008134:	9e07      	ldr	r6, [sp, #28]
 8008136:	9d04      	ldr	r5, [sp, #16]
 8008138:	9a04      	ldr	r2, [sp, #16]
 800813a:	441a      	add	r2, r3
 800813c:	9204      	str	r2, [sp, #16]
 800813e:	9a05      	ldr	r2, [sp, #20]
 8008140:	2101      	movs	r1, #1
 8008142:	441a      	add	r2, r3
 8008144:	4620      	mov	r0, r4
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	f000 fb58 	bl	80087fc <__i2b>
 800814c:	4607      	mov	r7, r0
 800814e:	2d00      	cmp	r5, #0
 8008150:	dd0c      	ble.n	800816c <_dtoa_r+0x754>
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	2b00      	cmp	r3, #0
 8008156:	dd09      	ble.n	800816c <_dtoa_r+0x754>
 8008158:	42ab      	cmp	r3, r5
 800815a:	9a04      	ldr	r2, [sp, #16]
 800815c:	bfa8      	it	ge
 800815e:	462b      	movge	r3, r5
 8008160:	1ad2      	subs	r2, r2, r3
 8008162:	9204      	str	r2, [sp, #16]
 8008164:	9a05      	ldr	r2, [sp, #20]
 8008166:	1aed      	subs	r5, r5, r3
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	b31b      	cbz	r3, 80081b8 <_dtoa_r+0x7a0>
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80af 	beq.w	80082d6 <_dtoa_r+0x8be>
 8008178:	2e00      	cmp	r6, #0
 800817a:	dd13      	ble.n	80081a4 <_dtoa_r+0x78c>
 800817c:	4639      	mov	r1, r7
 800817e:	4632      	mov	r2, r6
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fbfb 	bl	800897c <__pow5mult>
 8008186:	ee18 2a10 	vmov	r2, s16
 800818a:	4601      	mov	r1, r0
 800818c:	4607      	mov	r7, r0
 800818e:	4620      	mov	r0, r4
 8008190:	f000 fb4a 	bl	8008828 <__multiply>
 8008194:	ee18 1a10 	vmov	r1, s16
 8008198:	4680      	mov	r8, r0
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fa76 	bl	800868c <_Bfree>
 80081a0:	ee08 8a10 	vmov	s16, r8
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	1b9a      	subs	r2, r3, r6
 80081a8:	d006      	beq.n	80081b8 <_dtoa_r+0x7a0>
 80081aa:	ee18 1a10 	vmov	r1, s16
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 fbe4 	bl	800897c <__pow5mult>
 80081b4:	ee08 0a10 	vmov	s16, r0
 80081b8:	2101      	movs	r1, #1
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fb1e 	bl	80087fc <__i2b>
 80081c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	4606      	mov	r6, r0
 80081c6:	f340 8088 	ble.w	80082da <_dtoa_r+0x8c2>
 80081ca:	461a      	mov	r2, r3
 80081cc:	4601      	mov	r1, r0
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 fbd4 	bl	800897c <__pow5mult>
 80081d4:	9b06      	ldr	r3, [sp, #24]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	4606      	mov	r6, r0
 80081da:	f340 8081 	ble.w	80082e0 <_dtoa_r+0x8c8>
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	6933      	ldr	r3, [r6, #16]
 80081e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081e8:	6918      	ldr	r0, [r3, #16]
 80081ea:	f000 fab7 	bl	800875c <__hi0bits>
 80081ee:	f1c0 0020 	rsb	r0, r0, #32
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	4418      	add	r0, r3
 80081f6:	f010 001f 	ands.w	r0, r0, #31
 80081fa:	f000 8092 	beq.w	8008322 <_dtoa_r+0x90a>
 80081fe:	f1c0 0320 	rsb	r3, r0, #32
 8008202:	2b04      	cmp	r3, #4
 8008204:	f340 808a 	ble.w	800831c <_dtoa_r+0x904>
 8008208:	f1c0 001c 	rsb	r0, r0, #28
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	4403      	add	r3, r0
 8008210:	9304      	str	r3, [sp, #16]
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	4403      	add	r3, r0
 8008216:	4405      	add	r5, r0
 8008218:	9305      	str	r3, [sp, #20]
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd07      	ble.n	8008230 <_dtoa_r+0x818>
 8008220:	ee18 1a10 	vmov	r1, s16
 8008224:	461a      	mov	r2, r3
 8008226:	4620      	mov	r0, r4
 8008228:	f000 fc02 	bl	8008a30 <__lshift>
 800822c:	ee08 0a10 	vmov	s16, r0
 8008230:	9b05      	ldr	r3, [sp, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	dd05      	ble.n	8008242 <_dtoa_r+0x82a>
 8008236:	4631      	mov	r1, r6
 8008238:	461a      	mov	r2, r3
 800823a:	4620      	mov	r0, r4
 800823c:	f000 fbf8 	bl	8008a30 <__lshift>
 8008240:	4606      	mov	r6, r0
 8008242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d06e      	beq.n	8008326 <_dtoa_r+0x90e>
 8008248:	ee18 0a10 	vmov	r0, s16
 800824c:	4631      	mov	r1, r6
 800824e:	f000 fc5f 	bl	8008b10 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	da67      	bge.n	8008326 <_dtoa_r+0x90e>
 8008256:	9b00      	ldr	r3, [sp, #0]
 8008258:	3b01      	subs	r3, #1
 800825a:	ee18 1a10 	vmov	r1, s16
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	220a      	movs	r2, #10
 8008262:	2300      	movs	r3, #0
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fa33 	bl	80086d0 <__multadd>
 800826a:	9b08      	ldr	r3, [sp, #32]
 800826c:	ee08 0a10 	vmov	s16, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 81b1 	beq.w	80085d8 <_dtoa_r+0xbc0>
 8008276:	2300      	movs	r3, #0
 8008278:	4639      	mov	r1, r7
 800827a:	220a      	movs	r2, #10
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fa27 	bl	80086d0 <__multadd>
 8008282:	9b02      	ldr	r3, [sp, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	4607      	mov	r7, r0
 8008288:	f300 808e 	bgt.w	80083a8 <_dtoa_r+0x990>
 800828c:	9b06      	ldr	r3, [sp, #24]
 800828e:	2b02      	cmp	r3, #2
 8008290:	dc51      	bgt.n	8008336 <_dtoa_r+0x91e>
 8008292:	e089      	b.n	80083a8 <_dtoa_r+0x990>
 8008294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800829a:	e74b      	b.n	8008134 <_dtoa_r+0x71c>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	1e5e      	subs	r6, r3, #1
 80082a0:	9b07      	ldr	r3, [sp, #28]
 80082a2:	42b3      	cmp	r3, r6
 80082a4:	bfbf      	itttt	lt
 80082a6:	9b07      	ldrlt	r3, [sp, #28]
 80082a8:	9607      	strlt	r6, [sp, #28]
 80082aa:	1af2      	sublt	r2, r6, r3
 80082ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082ae:	bfb6      	itet	lt
 80082b0:	189b      	addlt	r3, r3, r2
 80082b2:	1b9e      	subge	r6, r3, r6
 80082b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	bfb8      	it	lt
 80082ba:	2600      	movlt	r6, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	bfb7      	itett	lt
 80082c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082c8:	1a9d      	sublt	r5, r3, r2
 80082ca:	2300      	movlt	r3, #0
 80082cc:	e734      	b.n	8008138 <_dtoa_r+0x720>
 80082ce:	9e07      	ldr	r6, [sp, #28]
 80082d0:	9d04      	ldr	r5, [sp, #16]
 80082d2:	9f08      	ldr	r7, [sp, #32]
 80082d4:	e73b      	b.n	800814e <_dtoa_r+0x736>
 80082d6:	9a07      	ldr	r2, [sp, #28]
 80082d8:	e767      	b.n	80081aa <_dtoa_r+0x792>
 80082da:	9b06      	ldr	r3, [sp, #24]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	dc18      	bgt.n	8008312 <_dtoa_r+0x8fa>
 80082e0:	f1ba 0f00 	cmp.w	sl, #0
 80082e4:	d115      	bne.n	8008312 <_dtoa_r+0x8fa>
 80082e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082ea:	b993      	cbnz	r3, 8008312 <_dtoa_r+0x8fa>
 80082ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082f0:	0d1b      	lsrs	r3, r3, #20
 80082f2:	051b      	lsls	r3, r3, #20
 80082f4:	b183      	cbz	r3, 8008318 <_dtoa_r+0x900>
 80082f6:	9b04      	ldr	r3, [sp, #16]
 80082f8:	3301      	adds	r3, #1
 80082fa:	9304      	str	r3, [sp, #16]
 80082fc:	9b05      	ldr	r3, [sp, #20]
 80082fe:	3301      	adds	r3, #1
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	f04f 0801 	mov.w	r8, #1
 8008306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008308:	2b00      	cmp	r3, #0
 800830a:	f47f af6a 	bne.w	80081e2 <_dtoa_r+0x7ca>
 800830e:	2001      	movs	r0, #1
 8008310:	e76f      	b.n	80081f2 <_dtoa_r+0x7da>
 8008312:	f04f 0800 	mov.w	r8, #0
 8008316:	e7f6      	b.n	8008306 <_dtoa_r+0x8ee>
 8008318:	4698      	mov	r8, r3
 800831a:	e7f4      	b.n	8008306 <_dtoa_r+0x8ee>
 800831c:	f43f af7d 	beq.w	800821a <_dtoa_r+0x802>
 8008320:	4618      	mov	r0, r3
 8008322:	301c      	adds	r0, #28
 8008324:	e772      	b.n	800820c <_dtoa_r+0x7f4>
 8008326:	9b03      	ldr	r3, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	dc37      	bgt.n	800839c <_dtoa_r+0x984>
 800832c:	9b06      	ldr	r3, [sp, #24]
 800832e:	2b02      	cmp	r3, #2
 8008330:	dd34      	ble.n	800839c <_dtoa_r+0x984>
 8008332:	9b03      	ldr	r3, [sp, #12]
 8008334:	9302      	str	r3, [sp, #8]
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	b96b      	cbnz	r3, 8008356 <_dtoa_r+0x93e>
 800833a:	4631      	mov	r1, r6
 800833c:	2205      	movs	r2, #5
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f9c6 	bl	80086d0 <__multadd>
 8008344:	4601      	mov	r1, r0
 8008346:	4606      	mov	r6, r0
 8008348:	ee18 0a10 	vmov	r0, s16
 800834c:	f000 fbe0 	bl	8008b10 <__mcmp>
 8008350:	2800      	cmp	r0, #0
 8008352:	f73f adbb 	bgt.w	8007ecc <_dtoa_r+0x4b4>
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	9d01      	ldr	r5, [sp, #4]
 800835a:	43db      	mvns	r3, r3
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	4631      	mov	r1, r6
 8008364:	4620      	mov	r0, r4
 8008366:	f000 f991 	bl	800868c <_Bfree>
 800836a:	2f00      	cmp	r7, #0
 800836c:	f43f aea4 	beq.w	80080b8 <_dtoa_r+0x6a0>
 8008370:	f1b8 0f00 	cmp.w	r8, #0
 8008374:	d005      	beq.n	8008382 <_dtoa_r+0x96a>
 8008376:	45b8      	cmp	r8, r7
 8008378:	d003      	beq.n	8008382 <_dtoa_r+0x96a>
 800837a:	4641      	mov	r1, r8
 800837c:	4620      	mov	r0, r4
 800837e:	f000 f985 	bl	800868c <_Bfree>
 8008382:	4639      	mov	r1, r7
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f981 	bl	800868c <_Bfree>
 800838a:	e695      	b.n	80080b8 <_dtoa_r+0x6a0>
 800838c:	2600      	movs	r6, #0
 800838e:	4637      	mov	r7, r6
 8008390:	e7e1      	b.n	8008356 <_dtoa_r+0x93e>
 8008392:	9700      	str	r7, [sp, #0]
 8008394:	4637      	mov	r7, r6
 8008396:	e599      	b.n	8007ecc <_dtoa_r+0x4b4>
 8008398:	40240000 	.word	0x40240000
 800839c:	9b08      	ldr	r3, [sp, #32]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80ca 	beq.w	8008538 <_dtoa_r+0xb20>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	dd05      	ble.n	80083b8 <_dtoa_r+0x9a0>
 80083ac:	4639      	mov	r1, r7
 80083ae:	462a      	mov	r2, r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fb3d 	bl	8008a30 <__lshift>
 80083b6:	4607      	mov	r7, r0
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	d05b      	beq.n	8008476 <_dtoa_r+0xa5e>
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f923 	bl	800860c <_Balloc>
 80083c6:	4605      	mov	r5, r0
 80083c8:	b928      	cbnz	r0, 80083d6 <_dtoa_r+0x9be>
 80083ca:	4b87      	ldr	r3, [pc, #540]	; (80085e8 <_dtoa_r+0xbd0>)
 80083cc:	4602      	mov	r2, r0
 80083ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083d2:	f7ff bb3b 	b.w	8007a4c <_dtoa_r+0x34>
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	3202      	adds	r2, #2
 80083da:	0092      	lsls	r2, r2, #2
 80083dc:	f107 010c 	add.w	r1, r7, #12
 80083e0:	300c      	adds	r0, #12
 80083e2:	f7fe fded 	bl	8006fc0 <memcpy>
 80083e6:	2201      	movs	r2, #1
 80083e8:	4629      	mov	r1, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fb20 	bl	8008a30 <__lshift>
 80083f0:	9b01      	ldr	r3, [sp, #4]
 80083f2:	f103 0901 	add.w	r9, r3, #1
 80083f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80083fa:	4413      	add	r3, r2
 80083fc:	9305      	str	r3, [sp, #20]
 80083fe:	f00a 0301 	and.w	r3, sl, #1
 8008402:	46b8      	mov	r8, r7
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	4607      	mov	r7, r0
 8008408:	4631      	mov	r1, r6
 800840a:	ee18 0a10 	vmov	r0, s16
 800840e:	f7ff fa77 	bl	8007900 <quorem>
 8008412:	4641      	mov	r1, r8
 8008414:	9002      	str	r0, [sp, #8]
 8008416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800841a:	ee18 0a10 	vmov	r0, s16
 800841e:	f000 fb77 	bl	8008b10 <__mcmp>
 8008422:	463a      	mov	r2, r7
 8008424:	9003      	str	r0, [sp, #12]
 8008426:	4631      	mov	r1, r6
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fb8d 	bl	8008b48 <__mdiff>
 800842e:	68c2      	ldr	r2, [r0, #12]
 8008430:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008434:	4605      	mov	r5, r0
 8008436:	bb02      	cbnz	r2, 800847a <_dtoa_r+0xa62>
 8008438:	4601      	mov	r1, r0
 800843a:	ee18 0a10 	vmov	r0, s16
 800843e:	f000 fb67 	bl	8008b10 <__mcmp>
 8008442:	4602      	mov	r2, r0
 8008444:	4629      	mov	r1, r5
 8008446:	4620      	mov	r0, r4
 8008448:	9207      	str	r2, [sp, #28]
 800844a:	f000 f91f 	bl	800868c <_Bfree>
 800844e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008452:	ea43 0102 	orr.w	r1, r3, r2
 8008456:	9b04      	ldr	r3, [sp, #16]
 8008458:	430b      	orrs	r3, r1
 800845a:	464d      	mov	r5, r9
 800845c:	d10f      	bne.n	800847e <_dtoa_r+0xa66>
 800845e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008462:	d02a      	beq.n	80084ba <_dtoa_r+0xaa2>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	dd02      	ble.n	8008470 <_dtoa_r+0xa58>
 800846a:	9b02      	ldr	r3, [sp, #8]
 800846c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008470:	f88b a000 	strb.w	sl, [fp]
 8008474:	e775      	b.n	8008362 <_dtoa_r+0x94a>
 8008476:	4638      	mov	r0, r7
 8008478:	e7ba      	b.n	80083f0 <_dtoa_r+0x9d8>
 800847a:	2201      	movs	r2, #1
 800847c:	e7e2      	b.n	8008444 <_dtoa_r+0xa2c>
 800847e:	9b03      	ldr	r3, [sp, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db04      	blt.n	800848e <_dtoa_r+0xa76>
 8008484:	9906      	ldr	r1, [sp, #24]
 8008486:	430b      	orrs	r3, r1
 8008488:	9904      	ldr	r1, [sp, #16]
 800848a:	430b      	orrs	r3, r1
 800848c:	d122      	bne.n	80084d4 <_dtoa_r+0xabc>
 800848e:	2a00      	cmp	r2, #0
 8008490:	ddee      	ble.n	8008470 <_dtoa_r+0xa58>
 8008492:	ee18 1a10 	vmov	r1, s16
 8008496:	2201      	movs	r2, #1
 8008498:	4620      	mov	r0, r4
 800849a:	f000 fac9 	bl	8008a30 <__lshift>
 800849e:	4631      	mov	r1, r6
 80084a0:	ee08 0a10 	vmov	s16, r0
 80084a4:	f000 fb34 	bl	8008b10 <__mcmp>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	dc03      	bgt.n	80084b4 <_dtoa_r+0xa9c>
 80084ac:	d1e0      	bne.n	8008470 <_dtoa_r+0xa58>
 80084ae:	f01a 0f01 	tst.w	sl, #1
 80084b2:	d0dd      	beq.n	8008470 <_dtoa_r+0xa58>
 80084b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084b8:	d1d7      	bne.n	800846a <_dtoa_r+0xa52>
 80084ba:	2339      	movs	r3, #57	; 0x39
 80084bc:	f88b 3000 	strb.w	r3, [fp]
 80084c0:	462b      	mov	r3, r5
 80084c2:	461d      	mov	r5, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084ca:	2a39      	cmp	r2, #57	; 0x39
 80084cc:	d071      	beq.n	80085b2 <_dtoa_r+0xb9a>
 80084ce:	3201      	adds	r2, #1
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	e746      	b.n	8008362 <_dtoa_r+0x94a>
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	dd07      	ble.n	80084e8 <_dtoa_r+0xad0>
 80084d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084dc:	d0ed      	beq.n	80084ba <_dtoa_r+0xaa2>
 80084de:	f10a 0301 	add.w	r3, sl, #1
 80084e2:	f88b 3000 	strb.w	r3, [fp]
 80084e6:	e73c      	b.n	8008362 <_dtoa_r+0x94a>
 80084e8:	9b05      	ldr	r3, [sp, #20]
 80084ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80084ee:	4599      	cmp	r9, r3
 80084f0:	d047      	beq.n	8008582 <_dtoa_r+0xb6a>
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	2300      	movs	r3, #0
 80084f8:	220a      	movs	r2, #10
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f8e8 	bl	80086d0 <__multadd>
 8008500:	45b8      	cmp	r8, r7
 8008502:	ee08 0a10 	vmov	s16, r0
 8008506:	f04f 0300 	mov.w	r3, #0
 800850a:	f04f 020a 	mov.w	r2, #10
 800850e:	4641      	mov	r1, r8
 8008510:	4620      	mov	r0, r4
 8008512:	d106      	bne.n	8008522 <_dtoa_r+0xb0a>
 8008514:	f000 f8dc 	bl	80086d0 <__multadd>
 8008518:	4680      	mov	r8, r0
 800851a:	4607      	mov	r7, r0
 800851c:	f109 0901 	add.w	r9, r9, #1
 8008520:	e772      	b.n	8008408 <_dtoa_r+0x9f0>
 8008522:	f000 f8d5 	bl	80086d0 <__multadd>
 8008526:	4639      	mov	r1, r7
 8008528:	4680      	mov	r8, r0
 800852a:	2300      	movs	r3, #0
 800852c:	220a      	movs	r2, #10
 800852e:	4620      	mov	r0, r4
 8008530:	f000 f8ce 	bl	80086d0 <__multadd>
 8008534:	4607      	mov	r7, r0
 8008536:	e7f1      	b.n	800851c <_dtoa_r+0xb04>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	9302      	str	r3, [sp, #8]
 800853c:	9d01      	ldr	r5, [sp, #4]
 800853e:	ee18 0a10 	vmov	r0, s16
 8008542:	4631      	mov	r1, r6
 8008544:	f7ff f9dc 	bl	8007900 <quorem>
 8008548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	f805 ab01 	strb.w	sl, [r5], #1
 8008552:	1aea      	subs	r2, r5, r3
 8008554:	9b02      	ldr	r3, [sp, #8]
 8008556:	4293      	cmp	r3, r2
 8008558:	dd09      	ble.n	800856e <_dtoa_r+0xb56>
 800855a:	ee18 1a10 	vmov	r1, s16
 800855e:	2300      	movs	r3, #0
 8008560:	220a      	movs	r2, #10
 8008562:	4620      	mov	r0, r4
 8008564:	f000 f8b4 	bl	80086d0 <__multadd>
 8008568:	ee08 0a10 	vmov	s16, r0
 800856c:	e7e7      	b.n	800853e <_dtoa_r+0xb26>
 800856e:	9b02      	ldr	r3, [sp, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bfc8      	it	gt
 8008574:	461d      	movgt	r5, r3
 8008576:	9b01      	ldr	r3, [sp, #4]
 8008578:	bfd8      	it	le
 800857a:	2501      	movle	r5, #1
 800857c:	441d      	add	r5, r3
 800857e:	f04f 0800 	mov.w	r8, #0
 8008582:	ee18 1a10 	vmov	r1, s16
 8008586:	2201      	movs	r2, #1
 8008588:	4620      	mov	r0, r4
 800858a:	f000 fa51 	bl	8008a30 <__lshift>
 800858e:	4631      	mov	r1, r6
 8008590:	ee08 0a10 	vmov	s16, r0
 8008594:	f000 fabc 	bl	8008b10 <__mcmp>
 8008598:	2800      	cmp	r0, #0
 800859a:	dc91      	bgt.n	80084c0 <_dtoa_r+0xaa8>
 800859c:	d102      	bne.n	80085a4 <_dtoa_r+0xb8c>
 800859e:	f01a 0f01 	tst.w	sl, #1
 80085a2:	d18d      	bne.n	80084c0 <_dtoa_r+0xaa8>
 80085a4:	462b      	mov	r3, r5
 80085a6:	461d      	mov	r5, r3
 80085a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ac:	2a30      	cmp	r2, #48	; 0x30
 80085ae:	d0fa      	beq.n	80085a6 <_dtoa_r+0xb8e>
 80085b0:	e6d7      	b.n	8008362 <_dtoa_r+0x94a>
 80085b2:	9a01      	ldr	r2, [sp, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d184      	bne.n	80084c2 <_dtoa_r+0xaaa>
 80085b8:	9b00      	ldr	r3, [sp, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	2331      	movs	r3, #49	; 0x31
 80085c0:	7013      	strb	r3, [r2, #0]
 80085c2:	e6ce      	b.n	8008362 <_dtoa_r+0x94a>
 80085c4:	4b09      	ldr	r3, [pc, #36]	; (80085ec <_dtoa_r+0xbd4>)
 80085c6:	f7ff ba95 	b.w	8007af4 <_dtoa_r+0xdc>
 80085ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f47f aa6e 	bne.w	8007aae <_dtoa_r+0x96>
 80085d2:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <_dtoa_r+0xbd8>)
 80085d4:	f7ff ba8e 	b.w	8007af4 <_dtoa_r+0xdc>
 80085d8:	9b02      	ldr	r3, [sp, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dcae      	bgt.n	800853c <_dtoa_r+0xb24>
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	f73f aea8 	bgt.w	8008336 <_dtoa_r+0x91e>
 80085e6:	e7a9      	b.n	800853c <_dtoa_r+0xb24>
 80085e8:	08009f2b 	.word	0x08009f2b
 80085ec:	08009e88 	.word	0x08009e88
 80085f0:	08009eac 	.word	0x08009eac

080085f4 <_localeconv_r>:
 80085f4:	4800      	ldr	r0, [pc, #0]	; (80085f8 <_localeconv_r+0x4>)
 80085f6:	4770      	bx	lr
 80085f8:	20000164 	.word	0x20000164

080085fc <malloc>:
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <malloc+0xc>)
 80085fe:	4601      	mov	r1, r0
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	f000 bc09 	b.w	8008e18 <_malloc_r>
 8008606:	bf00      	nop
 8008608:	20000010 	.word	0x20000010

0800860c <_Balloc>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	b976      	cbnz	r6, 8008634 <_Balloc+0x28>
 8008616:	2010      	movs	r0, #16
 8008618:	f7ff fff0 	bl	80085fc <malloc>
 800861c:	4602      	mov	r2, r0
 800861e:	6260      	str	r0, [r4, #36]	; 0x24
 8008620:	b920      	cbnz	r0, 800862c <_Balloc+0x20>
 8008622:	4b18      	ldr	r3, [pc, #96]	; (8008684 <_Balloc+0x78>)
 8008624:	4818      	ldr	r0, [pc, #96]	; (8008688 <_Balloc+0x7c>)
 8008626:	2166      	movs	r1, #102	; 0x66
 8008628:	f000 fdd6 	bl	80091d8 <__assert_func>
 800862c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008630:	6006      	str	r6, [r0, #0]
 8008632:	60c6      	str	r6, [r0, #12]
 8008634:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008636:	68f3      	ldr	r3, [r6, #12]
 8008638:	b183      	cbz	r3, 800865c <_Balloc+0x50>
 800863a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008642:	b9b8      	cbnz	r0, 8008674 <_Balloc+0x68>
 8008644:	2101      	movs	r1, #1
 8008646:	fa01 f605 	lsl.w	r6, r1, r5
 800864a:	1d72      	adds	r2, r6, #5
 800864c:	0092      	lsls	r2, r2, #2
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fb60 	bl	8008d14 <_calloc_r>
 8008654:	b160      	cbz	r0, 8008670 <_Balloc+0x64>
 8008656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800865a:	e00e      	b.n	800867a <_Balloc+0x6e>
 800865c:	2221      	movs	r2, #33	; 0x21
 800865e:	2104      	movs	r1, #4
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fb57 	bl	8008d14 <_calloc_r>
 8008666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008668:	60f0      	str	r0, [r6, #12]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e4      	bne.n	800863a <_Balloc+0x2e>
 8008670:	2000      	movs	r0, #0
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	6802      	ldr	r2, [r0, #0]
 8008676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800867a:	2300      	movs	r3, #0
 800867c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008680:	e7f7      	b.n	8008672 <_Balloc+0x66>
 8008682:	bf00      	nop
 8008684:	08009eb9 	.word	0x08009eb9
 8008688:	08009f3c 	.word	0x08009f3c

0800868c <_Bfree>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008690:	4605      	mov	r5, r0
 8008692:	460c      	mov	r4, r1
 8008694:	b976      	cbnz	r6, 80086b4 <_Bfree+0x28>
 8008696:	2010      	movs	r0, #16
 8008698:	f7ff ffb0 	bl	80085fc <malloc>
 800869c:	4602      	mov	r2, r0
 800869e:	6268      	str	r0, [r5, #36]	; 0x24
 80086a0:	b920      	cbnz	r0, 80086ac <_Bfree+0x20>
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <_Bfree+0x3c>)
 80086a4:	4809      	ldr	r0, [pc, #36]	; (80086cc <_Bfree+0x40>)
 80086a6:	218a      	movs	r1, #138	; 0x8a
 80086a8:	f000 fd96 	bl	80091d8 <__assert_func>
 80086ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b0:	6006      	str	r6, [r0, #0]
 80086b2:	60c6      	str	r6, [r0, #12]
 80086b4:	b13c      	cbz	r4, 80086c6 <_Bfree+0x3a>
 80086b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086b8:	6862      	ldr	r2, [r4, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086c0:	6021      	str	r1, [r4, #0]
 80086c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	08009eb9 	.word	0x08009eb9
 80086cc:	08009f3c 	.word	0x08009f3c

080086d0 <__multadd>:
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	690d      	ldr	r5, [r1, #16]
 80086d6:	4607      	mov	r7, r0
 80086d8:	460c      	mov	r4, r1
 80086da:	461e      	mov	r6, r3
 80086dc:	f101 0c14 	add.w	ip, r1, #20
 80086e0:	2000      	movs	r0, #0
 80086e2:	f8dc 3000 	ldr.w	r3, [ip]
 80086e6:	b299      	uxth	r1, r3
 80086e8:	fb02 6101 	mla	r1, r2, r1, r6
 80086ec:	0c1e      	lsrs	r6, r3, #16
 80086ee:	0c0b      	lsrs	r3, r1, #16
 80086f0:	fb02 3306 	mla	r3, r2, r6, r3
 80086f4:	b289      	uxth	r1, r1
 80086f6:	3001      	adds	r0, #1
 80086f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086fc:	4285      	cmp	r5, r0
 80086fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008706:	dcec      	bgt.n	80086e2 <__multadd+0x12>
 8008708:	b30e      	cbz	r6, 800874e <__multadd+0x7e>
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	42ab      	cmp	r3, r5
 800870e:	dc19      	bgt.n	8008744 <__multadd+0x74>
 8008710:	6861      	ldr	r1, [r4, #4]
 8008712:	4638      	mov	r0, r7
 8008714:	3101      	adds	r1, #1
 8008716:	f7ff ff79 	bl	800860c <_Balloc>
 800871a:	4680      	mov	r8, r0
 800871c:	b928      	cbnz	r0, 800872a <__multadd+0x5a>
 800871e:	4602      	mov	r2, r0
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <__multadd+0x84>)
 8008722:	480d      	ldr	r0, [pc, #52]	; (8008758 <__multadd+0x88>)
 8008724:	21b5      	movs	r1, #181	; 0xb5
 8008726:	f000 fd57 	bl	80091d8 <__assert_func>
 800872a:	6922      	ldr	r2, [r4, #16]
 800872c:	3202      	adds	r2, #2
 800872e:	f104 010c 	add.w	r1, r4, #12
 8008732:	0092      	lsls	r2, r2, #2
 8008734:	300c      	adds	r0, #12
 8008736:	f7fe fc43 	bl	8006fc0 <memcpy>
 800873a:	4621      	mov	r1, r4
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ffa5 	bl	800868c <_Bfree>
 8008742:	4644      	mov	r4, r8
 8008744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008748:	3501      	adds	r5, #1
 800874a:	615e      	str	r6, [r3, #20]
 800874c:	6125      	str	r5, [r4, #16]
 800874e:	4620      	mov	r0, r4
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	08009f2b 	.word	0x08009f2b
 8008758:	08009f3c 	.word	0x08009f3c

0800875c <__hi0bits>:
 800875c:	0c03      	lsrs	r3, r0, #16
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	b9d3      	cbnz	r3, 8008798 <__hi0bits+0x3c>
 8008762:	0400      	lsls	r0, r0, #16
 8008764:	2310      	movs	r3, #16
 8008766:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800876a:	bf04      	itt	eq
 800876c:	0200      	lsleq	r0, r0, #8
 800876e:	3308      	addeq	r3, #8
 8008770:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008774:	bf04      	itt	eq
 8008776:	0100      	lsleq	r0, r0, #4
 8008778:	3304      	addeq	r3, #4
 800877a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800877e:	bf04      	itt	eq
 8008780:	0080      	lsleq	r0, r0, #2
 8008782:	3302      	addeq	r3, #2
 8008784:	2800      	cmp	r0, #0
 8008786:	db05      	blt.n	8008794 <__hi0bits+0x38>
 8008788:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800878c:	f103 0301 	add.w	r3, r3, #1
 8008790:	bf08      	it	eq
 8008792:	2320      	moveq	r3, #32
 8008794:	4618      	mov	r0, r3
 8008796:	4770      	bx	lr
 8008798:	2300      	movs	r3, #0
 800879a:	e7e4      	b.n	8008766 <__hi0bits+0xa>

0800879c <__lo0bits>:
 800879c:	6803      	ldr	r3, [r0, #0]
 800879e:	f013 0207 	ands.w	r2, r3, #7
 80087a2:	4601      	mov	r1, r0
 80087a4:	d00b      	beq.n	80087be <__lo0bits+0x22>
 80087a6:	07da      	lsls	r2, r3, #31
 80087a8:	d423      	bmi.n	80087f2 <__lo0bits+0x56>
 80087aa:	0798      	lsls	r0, r3, #30
 80087ac:	bf49      	itett	mi
 80087ae:	085b      	lsrmi	r3, r3, #1
 80087b0:	089b      	lsrpl	r3, r3, #2
 80087b2:	2001      	movmi	r0, #1
 80087b4:	600b      	strmi	r3, [r1, #0]
 80087b6:	bf5c      	itt	pl
 80087b8:	600b      	strpl	r3, [r1, #0]
 80087ba:	2002      	movpl	r0, #2
 80087bc:	4770      	bx	lr
 80087be:	b298      	uxth	r0, r3
 80087c0:	b9a8      	cbnz	r0, 80087ee <__lo0bits+0x52>
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	2010      	movs	r0, #16
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	b90a      	cbnz	r2, 80087ce <__lo0bits+0x32>
 80087ca:	3008      	adds	r0, #8
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	071a      	lsls	r2, r3, #28
 80087d0:	bf04      	itt	eq
 80087d2:	091b      	lsreq	r3, r3, #4
 80087d4:	3004      	addeq	r0, #4
 80087d6:	079a      	lsls	r2, r3, #30
 80087d8:	bf04      	itt	eq
 80087da:	089b      	lsreq	r3, r3, #2
 80087dc:	3002      	addeq	r0, #2
 80087de:	07da      	lsls	r2, r3, #31
 80087e0:	d403      	bmi.n	80087ea <__lo0bits+0x4e>
 80087e2:	085b      	lsrs	r3, r3, #1
 80087e4:	f100 0001 	add.w	r0, r0, #1
 80087e8:	d005      	beq.n	80087f6 <__lo0bits+0x5a>
 80087ea:	600b      	str	r3, [r1, #0]
 80087ec:	4770      	bx	lr
 80087ee:	4610      	mov	r0, r2
 80087f0:	e7e9      	b.n	80087c6 <__lo0bits+0x2a>
 80087f2:	2000      	movs	r0, #0
 80087f4:	4770      	bx	lr
 80087f6:	2020      	movs	r0, #32
 80087f8:	4770      	bx	lr
	...

080087fc <__i2b>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	2101      	movs	r1, #1
 8008802:	f7ff ff03 	bl	800860c <_Balloc>
 8008806:	4602      	mov	r2, r0
 8008808:	b928      	cbnz	r0, 8008816 <__i2b+0x1a>
 800880a:	4b05      	ldr	r3, [pc, #20]	; (8008820 <__i2b+0x24>)
 800880c:	4805      	ldr	r0, [pc, #20]	; (8008824 <__i2b+0x28>)
 800880e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008812:	f000 fce1 	bl	80091d8 <__assert_func>
 8008816:	2301      	movs	r3, #1
 8008818:	6144      	str	r4, [r0, #20]
 800881a:	6103      	str	r3, [r0, #16]
 800881c:	bd10      	pop	{r4, pc}
 800881e:	bf00      	nop
 8008820:	08009f2b 	.word	0x08009f2b
 8008824:	08009f3c 	.word	0x08009f3c

08008828 <__multiply>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	4691      	mov	r9, r2
 800882e:	690a      	ldr	r2, [r1, #16]
 8008830:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008834:	429a      	cmp	r2, r3
 8008836:	bfb8      	it	lt
 8008838:	460b      	movlt	r3, r1
 800883a:	460c      	mov	r4, r1
 800883c:	bfbc      	itt	lt
 800883e:	464c      	movlt	r4, r9
 8008840:	4699      	movlt	r9, r3
 8008842:	6927      	ldr	r7, [r4, #16]
 8008844:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008848:	68a3      	ldr	r3, [r4, #8]
 800884a:	6861      	ldr	r1, [r4, #4]
 800884c:	eb07 060a 	add.w	r6, r7, sl
 8008850:	42b3      	cmp	r3, r6
 8008852:	b085      	sub	sp, #20
 8008854:	bfb8      	it	lt
 8008856:	3101      	addlt	r1, #1
 8008858:	f7ff fed8 	bl	800860c <_Balloc>
 800885c:	b930      	cbnz	r0, 800886c <__multiply+0x44>
 800885e:	4602      	mov	r2, r0
 8008860:	4b44      	ldr	r3, [pc, #272]	; (8008974 <__multiply+0x14c>)
 8008862:	4845      	ldr	r0, [pc, #276]	; (8008978 <__multiply+0x150>)
 8008864:	f240 115d 	movw	r1, #349	; 0x15d
 8008868:	f000 fcb6 	bl	80091d8 <__assert_func>
 800886c:	f100 0514 	add.w	r5, r0, #20
 8008870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008874:	462b      	mov	r3, r5
 8008876:	2200      	movs	r2, #0
 8008878:	4543      	cmp	r3, r8
 800887a:	d321      	bcc.n	80088c0 <__multiply+0x98>
 800887c:	f104 0314 	add.w	r3, r4, #20
 8008880:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008884:	f109 0314 	add.w	r3, r9, #20
 8008888:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800888c:	9202      	str	r2, [sp, #8]
 800888e:	1b3a      	subs	r2, r7, r4
 8008890:	3a15      	subs	r2, #21
 8008892:	f022 0203 	bic.w	r2, r2, #3
 8008896:	3204      	adds	r2, #4
 8008898:	f104 0115 	add.w	r1, r4, #21
 800889c:	428f      	cmp	r7, r1
 800889e:	bf38      	it	cc
 80088a0:	2204      	movcc	r2, #4
 80088a2:	9201      	str	r2, [sp, #4]
 80088a4:	9a02      	ldr	r2, [sp, #8]
 80088a6:	9303      	str	r3, [sp, #12]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d80c      	bhi.n	80088c6 <__multiply+0x9e>
 80088ac:	2e00      	cmp	r6, #0
 80088ae:	dd03      	ble.n	80088b8 <__multiply+0x90>
 80088b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d05a      	beq.n	800896e <__multiply+0x146>
 80088b8:	6106      	str	r6, [r0, #16]
 80088ba:	b005      	add	sp, #20
 80088bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	f843 2b04 	str.w	r2, [r3], #4
 80088c4:	e7d8      	b.n	8008878 <__multiply+0x50>
 80088c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80088ca:	f1ba 0f00 	cmp.w	sl, #0
 80088ce:	d024      	beq.n	800891a <__multiply+0xf2>
 80088d0:	f104 0e14 	add.w	lr, r4, #20
 80088d4:	46a9      	mov	r9, r5
 80088d6:	f04f 0c00 	mov.w	ip, #0
 80088da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088de:	f8d9 1000 	ldr.w	r1, [r9]
 80088e2:	fa1f fb82 	uxth.w	fp, r2
 80088e6:	b289      	uxth	r1, r1
 80088e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80088ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088f0:	f8d9 2000 	ldr.w	r2, [r9]
 80088f4:	4461      	add	r1, ip
 80088f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80088fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008902:	b289      	uxth	r1, r1
 8008904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008908:	4577      	cmp	r7, lr
 800890a:	f849 1b04 	str.w	r1, [r9], #4
 800890e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008912:	d8e2      	bhi.n	80088da <__multiply+0xb2>
 8008914:	9a01      	ldr	r2, [sp, #4]
 8008916:	f845 c002 	str.w	ip, [r5, r2]
 800891a:	9a03      	ldr	r2, [sp, #12]
 800891c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008920:	3304      	adds	r3, #4
 8008922:	f1b9 0f00 	cmp.w	r9, #0
 8008926:	d020      	beq.n	800896a <__multiply+0x142>
 8008928:	6829      	ldr	r1, [r5, #0]
 800892a:	f104 0c14 	add.w	ip, r4, #20
 800892e:	46ae      	mov	lr, r5
 8008930:	f04f 0a00 	mov.w	sl, #0
 8008934:	f8bc b000 	ldrh.w	fp, [ip]
 8008938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800893c:	fb09 220b 	mla	r2, r9, fp, r2
 8008940:	4492      	add	sl, r2
 8008942:	b289      	uxth	r1, r1
 8008944:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008948:	f84e 1b04 	str.w	r1, [lr], #4
 800894c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008950:	f8be 1000 	ldrh.w	r1, [lr]
 8008954:	0c12      	lsrs	r2, r2, #16
 8008956:	fb09 1102 	mla	r1, r9, r2, r1
 800895a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800895e:	4567      	cmp	r7, ip
 8008960:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008964:	d8e6      	bhi.n	8008934 <__multiply+0x10c>
 8008966:	9a01      	ldr	r2, [sp, #4]
 8008968:	50a9      	str	r1, [r5, r2]
 800896a:	3504      	adds	r5, #4
 800896c:	e79a      	b.n	80088a4 <__multiply+0x7c>
 800896e:	3e01      	subs	r6, #1
 8008970:	e79c      	b.n	80088ac <__multiply+0x84>
 8008972:	bf00      	nop
 8008974:	08009f2b 	.word	0x08009f2b
 8008978:	08009f3c 	.word	0x08009f3c

0800897c <__pow5mult>:
 800897c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008980:	4615      	mov	r5, r2
 8008982:	f012 0203 	ands.w	r2, r2, #3
 8008986:	4606      	mov	r6, r0
 8008988:	460f      	mov	r7, r1
 800898a:	d007      	beq.n	800899c <__pow5mult+0x20>
 800898c:	4c25      	ldr	r4, [pc, #148]	; (8008a24 <__pow5mult+0xa8>)
 800898e:	3a01      	subs	r2, #1
 8008990:	2300      	movs	r3, #0
 8008992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008996:	f7ff fe9b 	bl	80086d0 <__multadd>
 800899a:	4607      	mov	r7, r0
 800899c:	10ad      	asrs	r5, r5, #2
 800899e:	d03d      	beq.n	8008a1c <__pow5mult+0xa0>
 80089a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089a2:	b97c      	cbnz	r4, 80089c4 <__pow5mult+0x48>
 80089a4:	2010      	movs	r0, #16
 80089a6:	f7ff fe29 	bl	80085fc <malloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6270      	str	r0, [r6, #36]	; 0x24
 80089ae:	b928      	cbnz	r0, 80089bc <__pow5mult+0x40>
 80089b0:	4b1d      	ldr	r3, [pc, #116]	; (8008a28 <__pow5mult+0xac>)
 80089b2:	481e      	ldr	r0, [pc, #120]	; (8008a2c <__pow5mult+0xb0>)
 80089b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089b8:	f000 fc0e 	bl	80091d8 <__assert_func>
 80089bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c0:	6004      	str	r4, [r0, #0]
 80089c2:	60c4      	str	r4, [r0, #12]
 80089c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089cc:	b94c      	cbnz	r4, 80089e2 <__pow5mult+0x66>
 80089ce:	f240 2171 	movw	r1, #625	; 0x271
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7ff ff12 	bl	80087fc <__i2b>
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c8 0008 	str.w	r0, [r8, #8]
 80089de:	4604      	mov	r4, r0
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	f04f 0900 	mov.w	r9, #0
 80089e6:	07eb      	lsls	r3, r5, #31
 80089e8:	d50a      	bpl.n	8008a00 <__pow5mult+0x84>
 80089ea:	4639      	mov	r1, r7
 80089ec:	4622      	mov	r2, r4
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff ff1a 	bl	8008828 <__multiply>
 80089f4:	4639      	mov	r1, r7
 80089f6:	4680      	mov	r8, r0
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7ff fe47 	bl	800868c <_Bfree>
 80089fe:	4647      	mov	r7, r8
 8008a00:	106d      	asrs	r5, r5, #1
 8008a02:	d00b      	beq.n	8008a1c <__pow5mult+0xa0>
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	b938      	cbnz	r0, 8008a18 <__pow5mult+0x9c>
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff ff0b 	bl	8008828 <__multiply>
 8008a12:	6020      	str	r0, [r4, #0]
 8008a14:	f8c0 9000 	str.w	r9, [r0]
 8008a18:	4604      	mov	r4, r0
 8008a1a:	e7e4      	b.n	80089e6 <__pow5mult+0x6a>
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a22:	bf00      	nop
 8008a24:	0800a088 	.word	0x0800a088
 8008a28:	08009eb9 	.word	0x08009eb9
 8008a2c:	08009f3c 	.word	0x08009f3c

08008a30 <__lshift>:
 8008a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	460c      	mov	r4, r1
 8008a36:	6849      	ldr	r1, [r1, #4]
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	4607      	mov	r7, r0
 8008a42:	4691      	mov	r9, r2
 8008a44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a48:	f108 0601 	add.w	r6, r8, #1
 8008a4c:	42b3      	cmp	r3, r6
 8008a4e:	db0b      	blt.n	8008a68 <__lshift+0x38>
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff fddb 	bl	800860c <_Balloc>
 8008a56:	4605      	mov	r5, r0
 8008a58:	b948      	cbnz	r0, 8008a6e <__lshift+0x3e>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <__lshift+0xd8>)
 8008a5e:	482b      	ldr	r0, [pc, #172]	; (8008b0c <__lshift+0xdc>)
 8008a60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a64:	f000 fbb8 	bl	80091d8 <__assert_func>
 8008a68:	3101      	adds	r1, #1
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	e7ee      	b.n	8008a4c <__lshift+0x1c>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f100 0114 	add.w	r1, r0, #20
 8008a74:	f100 0210 	add.w	r2, r0, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	4553      	cmp	r3, sl
 8008a7c:	db37      	blt.n	8008aee <__lshift+0xbe>
 8008a7e:	6920      	ldr	r0, [r4, #16]
 8008a80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a84:	f104 0314 	add.w	r3, r4, #20
 8008a88:	f019 091f 	ands.w	r9, r9, #31
 8008a8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a94:	d02f      	beq.n	8008af6 <__lshift+0xc6>
 8008a96:	f1c9 0e20 	rsb	lr, r9, #32
 8008a9a:	468a      	mov	sl, r1
 8008a9c:	f04f 0c00 	mov.w	ip, #0
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	fa02 f209 	lsl.w	r2, r2, r9
 8008aa6:	ea42 020c 	orr.w	r2, r2, ip
 8008aaa:	f84a 2b04 	str.w	r2, [sl], #4
 8008aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab2:	4298      	cmp	r0, r3
 8008ab4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008ab8:	d8f2      	bhi.n	8008aa0 <__lshift+0x70>
 8008aba:	1b03      	subs	r3, r0, r4
 8008abc:	3b15      	subs	r3, #21
 8008abe:	f023 0303 	bic.w	r3, r3, #3
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	f104 0215 	add.w	r2, r4, #21
 8008ac8:	4290      	cmp	r0, r2
 8008aca:	bf38      	it	cc
 8008acc:	2304      	movcc	r3, #4
 8008ace:	f841 c003 	str.w	ip, [r1, r3]
 8008ad2:	f1bc 0f00 	cmp.w	ip, #0
 8008ad6:	d001      	beq.n	8008adc <__lshift+0xac>
 8008ad8:	f108 0602 	add.w	r6, r8, #2
 8008adc:	3e01      	subs	r6, #1
 8008ade:	4638      	mov	r0, r7
 8008ae0:	612e      	str	r6, [r5, #16]
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	f7ff fdd2 	bl	800868c <_Bfree>
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008af2:	3301      	adds	r3, #1
 8008af4:	e7c1      	b.n	8008a7a <__lshift+0x4a>
 8008af6:	3904      	subs	r1, #4
 8008af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b00:	4298      	cmp	r0, r3
 8008b02:	d8f9      	bhi.n	8008af8 <__lshift+0xc8>
 8008b04:	e7ea      	b.n	8008adc <__lshift+0xac>
 8008b06:	bf00      	nop
 8008b08:	08009f2b 	.word	0x08009f2b
 8008b0c:	08009f3c 	.word	0x08009f3c

08008b10 <__mcmp>:
 8008b10:	b530      	push	{r4, r5, lr}
 8008b12:	6902      	ldr	r2, [r0, #16]
 8008b14:	690c      	ldr	r4, [r1, #16]
 8008b16:	1b12      	subs	r2, r2, r4
 8008b18:	d10e      	bne.n	8008b38 <__mcmp+0x28>
 8008b1a:	f100 0314 	add.w	r3, r0, #20
 8008b1e:	3114      	adds	r1, #20
 8008b20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b30:	42a5      	cmp	r5, r4
 8008b32:	d003      	beq.n	8008b3c <__mcmp+0x2c>
 8008b34:	d305      	bcc.n	8008b42 <__mcmp+0x32>
 8008b36:	2201      	movs	r2, #1
 8008b38:	4610      	mov	r0, r2
 8008b3a:	bd30      	pop	{r4, r5, pc}
 8008b3c:	4283      	cmp	r3, r0
 8008b3e:	d3f3      	bcc.n	8008b28 <__mcmp+0x18>
 8008b40:	e7fa      	b.n	8008b38 <__mcmp+0x28>
 8008b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b46:	e7f7      	b.n	8008b38 <__mcmp+0x28>

08008b48 <__mdiff>:
 8008b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	4606      	mov	r6, r0
 8008b50:	4611      	mov	r1, r2
 8008b52:	4620      	mov	r0, r4
 8008b54:	4690      	mov	r8, r2
 8008b56:	f7ff ffdb 	bl	8008b10 <__mcmp>
 8008b5a:	1e05      	subs	r5, r0, #0
 8008b5c:	d110      	bne.n	8008b80 <__mdiff+0x38>
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7ff fd53 	bl	800860c <_Balloc>
 8008b66:	b930      	cbnz	r0, 8008b76 <__mdiff+0x2e>
 8008b68:	4b3a      	ldr	r3, [pc, #232]	; (8008c54 <__mdiff+0x10c>)
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	f240 2132 	movw	r1, #562	; 0x232
 8008b70:	4839      	ldr	r0, [pc, #228]	; (8008c58 <__mdiff+0x110>)
 8008b72:	f000 fb31 	bl	80091d8 <__assert_func>
 8008b76:	2301      	movs	r3, #1
 8008b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	bfa4      	itt	ge
 8008b82:	4643      	movge	r3, r8
 8008b84:	46a0      	movge	r8, r4
 8008b86:	4630      	mov	r0, r6
 8008b88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b8c:	bfa6      	itte	ge
 8008b8e:	461c      	movge	r4, r3
 8008b90:	2500      	movge	r5, #0
 8008b92:	2501      	movlt	r5, #1
 8008b94:	f7ff fd3a 	bl	800860c <_Balloc>
 8008b98:	b920      	cbnz	r0, 8008ba4 <__mdiff+0x5c>
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	; (8008c54 <__mdiff+0x10c>)
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ba2:	e7e5      	b.n	8008b70 <__mdiff+0x28>
 8008ba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ba8:	6926      	ldr	r6, [r4, #16]
 8008baa:	60c5      	str	r5, [r0, #12]
 8008bac:	f104 0914 	add.w	r9, r4, #20
 8008bb0:	f108 0514 	add.w	r5, r8, #20
 8008bb4:	f100 0e14 	add.w	lr, r0, #20
 8008bb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bc0:	f108 0210 	add.w	r2, r8, #16
 8008bc4:	46f2      	mov	sl, lr
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bd0:	fa1f f883 	uxth.w	r8, r3
 8008bd4:	fa11 f18b 	uxtah	r1, r1, fp
 8008bd8:	0c1b      	lsrs	r3, r3, #16
 8008bda:	eba1 0808 	sub.w	r8, r1, r8
 8008bde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008be2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008be6:	fa1f f888 	uxth.w	r8, r8
 8008bea:	1419      	asrs	r1, r3, #16
 8008bec:	454e      	cmp	r6, r9
 8008bee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bf2:	f84a 3b04 	str.w	r3, [sl], #4
 8008bf6:	d8e7      	bhi.n	8008bc8 <__mdiff+0x80>
 8008bf8:	1b33      	subs	r3, r6, r4
 8008bfa:	3b15      	subs	r3, #21
 8008bfc:	f023 0303 	bic.w	r3, r3, #3
 8008c00:	3304      	adds	r3, #4
 8008c02:	3415      	adds	r4, #21
 8008c04:	42a6      	cmp	r6, r4
 8008c06:	bf38      	it	cc
 8008c08:	2304      	movcc	r3, #4
 8008c0a:	441d      	add	r5, r3
 8008c0c:	4473      	add	r3, lr
 8008c0e:	469e      	mov	lr, r3
 8008c10:	462e      	mov	r6, r5
 8008c12:	4566      	cmp	r6, ip
 8008c14:	d30e      	bcc.n	8008c34 <__mdiff+0xec>
 8008c16:	f10c 0203 	add.w	r2, ip, #3
 8008c1a:	1b52      	subs	r2, r2, r5
 8008c1c:	f022 0203 	bic.w	r2, r2, #3
 8008c20:	3d03      	subs	r5, #3
 8008c22:	45ac      	cmp	ip, r5
 8008c24:	bf38      	it	cc
 8008c26:	2200      	movcc	r2, #0
 8008c28:	441a      	add	r2, r3
 8008c2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c2e:	b17b      	cbz	r3, 8008c50 <__mdiff+0x108>
 8008c30:	6107      	str	r7, [r0, #16]
 8008c32:	e7a3      	b.n	8008b7c <__mdiff+0x34>
 8008c34:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c38:	fa11 f288 	uxtah	r2, r1, r8
 8008c3c:	1414      	asrs	r4, r2, #16
 8008c3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c42:	b292      	uxth	r2, r2
 8008c44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c48:	f84e 2b04 	str.w	r2, [lr], #4
 8008c4c:	1421      	asrs	r1, r4, #16
 8008c4e:	e7e0      	b.n	8008c12 <__mdiff+0xca>
 8008c50:	3f01      	subs	r7, #1
 8008c52:	e7ea      	b.n	8008c2a <__mdiff+0xe2>
 8008c54:	08009f2b 	.word	0x08009f2b
 8008c58:	08009f3c 	.word	0x08009f3c

08008c5c <__d2b>:
 8008c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c60:	4689      	mov	r9, r1
 8008c62:	2101      	movs	r1, #1
 8008c64:	ec57 6b10 	vmov	r6, r7, d0
 8008c68:	4690      	mov	r8, r2
 8008c6a:	f7ff fccf 	bl	800860c <_Balloc>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	b930      	cbnz	r0, 8008c80 <__d2b+0x24>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b25      	ldr	r3, [pc, #148]	; (8008d0c <__d2b+0xb0>)
 8008c76:	4826      	ldr	r0, [pc, #152]	; (8008d10 <__d2b+0xb4>)
 8008c78:	f240 310a 	movw	r1, #778	; 0x30a
 8008c7c:	f000 faac 	bl	80091d8 <__assert_func>
 8008c80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c88:	bb35      	cbnz	r5, 8008cd8 <__d2b+0x7c>
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	d028      	beq.n	8008ce2 <__d2b+0x86>
 8008c90:	4668      	mov	r0, sp
 8008c92:	9600      	str	r6, [sp, #0]
 8008c94:	f7ff fd82 	bl	800879c <__lo0bits>
 8008c98:	9900      	ldr	r1, [sp, #0]
 8008c9a:	b300      	cbz	r0, 8008cde <__d2b+0x82>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca6:	430b      	orrs	r3, r1
 8008ca8:	40c2      	lsrs	r2, r0
 8008caa:	6163      	str	r3, [r4, #20]
 8008cac:	9201      	str	r2, [sp, #4]
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	61a3      	str	r3, [r4, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bf14      	ite	ne
 8008cb6:	2202      	movne	r2, #2
 8008cb8:	2201      	moveq	r2, #1
 8008cba:	6122      	str	r2, [r4, #16]
 8008cbc:	b1d5      	cbz	r5, 8008cf4 <__d2b+0x98>
 8008cbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cc2:	4405      	add	r5, r0
 8008cc4:	f8c9 5000 	str.w	r5, [r9]
 8008cc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ccc:	f8c8 0000 	str.w	r0, [r8]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	b003      	add	sp, #12
 8008cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cdc:	e7d5      	b.n	8008c8a <__d2b+0x2e>
 8008cde:	6161      	str	r1, [r4, #20]
 8008ce0:	e7e5      	b.n	8008cae <__d2b+0x52>
 8008ce2:	a801      	add	r0, sp, #4
 8008ce4:	f7ff fd5a 	bl	800879c <__lo0bits>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	6163      	str	r3, [r4, #20]
 8008cec:	2201      	movs	r2, #1
 8008cee:	6122      	str	r2, [r4, #16]
 8008cf0:	3020      	adds	r0, #32
 8008cf2:	e7e3      	b.n	8008cbc <__d2b+0x60>
 8008cf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cfc:	f8c9 0000 	str.w	r0, [r9]
 8008d00:	6918      	ldr	r0, [r3, #16]
 8008d02:	f7ff fd2b 	bl	800875c <__hi0bits>
 8008d06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d0a:	e7df      	b.n	8008ccc <__d2b+0x70>
 8008d0c:	08009f2b 	.word	0x08009f2b
 8008d10:	08009f3c 	.word	0x08009f3c

08008d14 <_calloc_r>:
 8008d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d16:	fba1 2402 	umull	r2, r4, r1, r2
 8008d1a:	b94c      	cbnz	r4, 8008d30 <_calloc_r+0x1c>
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	9201      	str	r2, [sp, #4]
 8008d20:	f000 f87a 	bl	8008e18 <_malloc_r>
 8008d24:	9a01      	ldr	r2, [sp, #4]
 8008d26:	4605      	mov	r5, r0
 8008d28:	b930      	cbnz	r0, 8008d38 <_calloc_r+0x24>
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	b003      	add	sp, #12
 8008d2e:	bd30      	pop	{r4, r5, pc}
 8008d30:	220c      	movs	r2, #12
 8008d32:	6002      	str	r2, [r0, #0]
 8008d34:	2500      	movs	r5, #0
 8008d36:	e7f8      	b.n	8008d2a <_calloc_r+0x16>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	f7fe f94f 	bl	8006fdc <memset>
 8008d3e:	e7f4      	b.n	8008d2a <_calloc_r+0x16>

08008d40 <_free_r>:
 8008d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d044      	beq.n	8008dd0 <_free_r+0x90>
 8008d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4a:	9001      	str	r0, [sp, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d52:	bfb8      	it	lt
 8008d54:	18e4      	addlt	r4, r4, r3
 8008d56:	f000 fa9b 	bl	8009290 <__malloc_lock>
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	; (8008dd4 <_free_r+0x94>)
 8008d5c:	9801      	ldr	r0, [sp, #4]
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	b933      	cbnz	r3, 8008d70 <_free_r+0x30>
 8008d62:	6063      	str	r3, [r4, #4]
 8008d64:	6014      	str	r4, [r2, #0]
 8008d66:	b003      	add	sp, #12
 8008d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6c:	f000 ba96 	b.w	800929c <__malloc_unlock>
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	d908      	bls.n	8008d86 <_free_r+0x46>
 8008d74:	6825      	ldr	r5, [r4, #0]
 8008d76:	1961      	adds	r1, r4, r5
 8008d78:	428b      	cmp	r3, r1
 8008d7a:	bf01      	itttt	eq
 8008d7c:	6819      	ldreq	r1, [r3, #0]
 8008d7e:	685b      	ldreq	r3, [r3, #4]
 8008d80:	1949      	addeq	r1, r1, r5
 8008d82:	6021      	streq	r1, [r4, #0]
 8008d84:	e7ed      	b.n	8008d62 <_free_r+0x22>
 8008d86:	461a      	mov	r2, r3
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	b10b      	cbz	r3, 8008d90 <_free_r+0x50>
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	d9fa      	bls.n	8008d86 <_free_r+0x46>
 8008d90:	6811      	ldr	r1, [r2, #0]
 8008d92:	1855      	adds	r5, r2, r1
 8008d94:	42a5      	cmp	r5, r4
 8008d96:	d10b      	bne.n	8008db0 <_free_r+0x70>
 8008d98:	6824      	ldr	r4, [r4, #0]
 8008d9a:	4421      	add	r1, r4
 8008d9c:	1854      	adds	r4, r2, r1
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	d1e0      	bne.n	8008d66 <_free_r+0x26>
 8008da4:	681c      	ldr	r4, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	6053      	str	r3, [r2, #4]
 8008daa:	4421      	add	r1, r4
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	e7da      	b.n	8008d66 <_free_r+0x26>
 8008db0:	d902      	bls.n	8008db8 <_free_r+0x78>
 8008db2:	230c      	movs	r3, #12
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	e7d6      	b.n	8008d66 <_free_r+0x26>
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	1961      	adds	r1, r4, r5
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf04      	itt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	6063      	str	r3, [r4, #4]
 8008dc6:	bf04      	itt	eq
 8008dc8:	1949      	addeq	r1, r1, r5
 8008dca:	6021      	streq	r1, [r4, #0]
 8008dcc:	6054      	str	r4, [r2, #4]
 8008dce:	e7ca      	b.n	8008d66 <_free_r+0x26>
 8008dd0:	b003      	add	sp, #12
 8008dd2:	bd30      	pop	{r4, r5, pc}
 8008dd4:	20004c48 	.word	0x20004c48

08008dd8 <sbrk_aligned>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	4e0e      	ldr	r6, [pc, #56]	; (8008e14 <sbrk_aligned+0x3c>)
 8008ddc:	460c      	mov	r4, r1
 8008dde:	6831      	ldr	r1, [r6, #0]
 8008de0:	4605      	mov	r5, r0
 8008de2:	b911      	cbnz	r1, 8008dea <sbrk_aligned+0x12>
 8008de4:	f000 f9e8 	bl	80091b8 <_sbrk_r>
 8008de8:	6030      	str	r0, [r6, #0]
 8008dea:	4621      	mov	r1, r4
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 f9e3 	bl	80091b8 <_sbrk_r>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d00a      	beq.n	8008e0c <sbrk_aligned+0x34>
 8008df6:	1cc4      	adds	r4, r0, #3
 8008df8:	f024 0403 	bic.w	r4, r4, #3
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d007      	beq.n	8008e10 <sbrk_aligned+0x38>
 8008e00:	1a21      	subs	r1, r4, r0
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f9d8 	bl	80091b8 <_sbrk_r>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d101      	bne.n	8008e10 <sbrk_aligned+0x38>
 8008e0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e10:	4620      	mov	r0, r4
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	20004c4c 	.word	0x20004c4c

08008e18 <_malloc_r>:
 8008e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	1ccd      	adds	r5, r1, #3
 8008e1e:	f025 0503 	bic.w	r5, r5, #3
 8008e22:	3508      	adds	r5, #8
 8008e24:	2d0c      	cmp	r5, #12
 8008e26:	bf38      	it	cc
 8008e28:	250c      	movcc	r5, #12
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	db01      	blt.n	8008e34 <_malloc_r+0x1c>
 8008e30:	42a9      	cmp	r1, r5
 8008e32:	d905      	bls.n	8008e40 <_malloc_r+0x28>
 8008e34:	230c      	movs	r3, #12
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	2600      	movs	r6, #0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e40:	4e2e      	ldr	r6, [pc, #184]	; (8008efc <_malloc_r+0xe4>)
 8008e42:	f000 fa25 	bl	8009290 <__malloc_lock>
 8008e46:	6833      	ldr	r3, [r6, #0]
 8008e48:	461c      	mov	r4, r3
 8008e4a:	bb34      	cbnz	r4, 8008e9a <_malloc_r+0x82>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f7ff ffc2 	bl	8008dd8 <sbrk_aligned>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	4604      	mov	r4, r0
 8008e58:	d14d      	bne.n	8008ef6 <_malloc_r+0xde>
 8008e5a:	6834      	ldr	r4, [r6, #0]
 8008e5c:	4626      	mov	r6, r4
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d140      	bne.n	8008ee4 <_malloc_r+0xcc>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4631      	mov	r1, r6
 8008e66:	4638      	mov	r0, r7
 8008e68:	eb04 0803 	add.w	r8, r4, r3
 8008e6c:	f000 f9a4 	bl	80091b8 <_sbrk_r>
 8008e70:	4580      	cmp	r8, r0
 8008e72:	d13a      	bne.n	8008eea <_malloc_r+0xd2>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	3503      	adds	r5, #3
 8008e78:	1a6d      	subs	r5, r5, r1
 8008e7a:	f025 0503 	bic.w	r5, r5, #3
 8008e7e:	3508      	adds	r5, #8
 8008e80:	2d0c      	cmp	r5, #12
 8008e82:	bf38      	it	cc
 8008e84:	250c      	movcc	r5, #12
 8008e86:	4629      	mov	r1, r5
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff ffa5 	bl	8008dd8 <sbrk_aligned>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d02b      	beq.n	8008eea <_malloc_r+0xd2>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	442b      	add	r3, r5
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	e00e      	b.n	8008eb8 <_malloc_r+0xa0>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	1b52      	subs	r2, r2, r5
 8008e9e:	d41e      	bmi.n	8008ede <_malloc_r+0xc6>
 8008ea0:	2a0b      	cmp	r2, #11
 8008ea2:	d916      	bls.n	8008ed2 <_malloc_r+0xba>
 8008ea4:	1961      	adds	r1, r4, r5
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	bf18      	it	ne
 8008eac:	6059      	strne	r1, [r3, #4]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	bf08      	it	eq
 8008eb2:	6031      	streq	r1, [r6, #0]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f104 060b 	add.w	r6, r4, #11
 8008ebe:	f000 f9ed 	bl	800929c <__malloc_unlock>
 8008ec2:	f026 0607 	bic.w	r6, r6, #7
 8008ec6:	1d23      	adds	r3, r4, #4
 8008ec8:	1af2      	subs	r2, r6, r3
 8008eca:	d0b6      	beq.n	8008e3a <_malloc_r+0x22>
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	50a3      	str	r3, [r4, r2]
 8008ed0:	e7b3      	b.n	8008e3a <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	6032      	streq	r2, [r6, #0]
 8008eda:	605a      	strne	r2, [r3, #4]
 8008edc:	e7ec      	b.n	8008eb8 <_malloc_r+0xa0>
 8008ede:	4623      	mov	r3, r4
 8008ee0:	6864      	ldr	r4, [r4, #4]
 8008ee2:	e7b2      	b.n	8008e4a <_malloc_r+0x32>
 8008ee4:	4634      	mov	r4, r6
 8008ee6:	6876      	ldr	r6, [r6, #4]
 8008ee8:	e7b9      	b.n	8008e5e <_malloc_r+0x46>
 8008eea:	230c      	movs	r3, #12
 8008eec:	603b      	str	r3, [r7, #0]
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f000 f9d4 	bl	800929c <__malloc_unlock>
 8008ef4:	e7a1      	b.n	8008e3a <_malloc_r+0x22>
 8008ef6:	6025      	str	r5, [r4, #0]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa0>
 8008efa:	bf00      	nop
 8008efc:	20004c48 	.word	0x20004c48

08008f00 <__ssputs_r>:
 8008f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	688e      	ldr	r6, [r1, #8]
 8008f06:	429e      	cmp	r6, r3
 8008f08:	4682      	mov	sl, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	4690      	mov	r8, r2
 8008f0e:	461f      	mov	r7, r3
 8008f10:	d838      	bhi.n	8008f84 <__ssputs_r+0x84>
 8008f12:	898a      	ldrh	r2, [r1, #12]
 8008f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f18:	d032      	beq.n	8008f80 <__ssputs_r+0x80>
 8008f1a:	6825      	ldr	r5, [r4, #0]
 8008f1c:	6909      	ldr	r1, [r1, #16]
 8008f1e:	eba5 0901 	sub.w	r9, r5, r1
 8008f22:	6965      	ldr	r5, [r4, #20]
 8008f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	444b      	add	r3, r9
 8008f30:	106d      	asrs	r5, r5, #1
 8008f32:	429d      	cmp	r5, r3
 8008f34:	bf38      	it	cc
 8008f36:	461d      	movcc	r5, r3
 8008f38:	0553      	lsls	r3, r2, #21
 8008f3a:	d531      	bpl.n	8008fa0 <__ssputs_r+0xa0>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7ff ff6b 	bl	8008e18 <_malloc_r>
 8008f42:	4606      	mov	r6, r0
 8008f44:	b950      	cbnz	r0, 8008f5c <__ssputs_r+0x5c>
 8008f46:	230c      	movs	r3, #12
 8008f48:	f8ca 3000 	str.w	r3, [sl]
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f52:	81a3      	strh	r3, [r4, #12]
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5c:	6921      	ldr	r1, [r4, #16]
 8008f5e:	464a      	mov	r2, r9
 8008f60:	f7fe f82e 	bl	8006fc0 <memcpy>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	6126      	str	r6, [r4, #16]
 8008f72:	6165      	str	r5, [r4, #20]
 8008f74:	444e      	add	r6, r9
 8008f76:	eba5 0509 	sub.w	r5, r5, r9
 8008f7a:	6026      	str	r6, [r4, #0]
 8008f7c:	60a5      	str	r5, [r4, #8]
 8008f7e:	463e      	mov	r6, r7
 8008f80:	42be      	cmp	r6, r7
 8008f82:	d900      	bls.n	8008f86 <__ssputs_r+0x86>
 8008f84:	463e      	mov	r6, r7
 8008f86:	6820      	ldr	r0, [r4, #0]
 8008f88:	4632      	mov	r2, r6
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	f000 f966 	bl	800925c <memmove>
 8008f90:	68a3      	ldr	r3, [r4, #8]
 8008f92:	1b9b      	subs	r3, r3, r6
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4433      	add	r3, r6
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e7db      	b.n	8008f58 <__ssputs_r+0x58>
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	f000 f981 	bl	80092a8 <_realloc_r>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1e1      	bne.n	8008f70 <__ssputs_r+0x70>
 8008fac:	6921      	ldr	r1, [r4, #16]
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f7ff fec6 	bl	8008d40 <_free_r>
 8008fb4:	e7c7      	b.n	8008f46 <__ssputs_r+0x46>
	...

08008fb8 <_svfiprintf_r>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	4698      	mov	r8, r3
 8008fbe:	898b      	ldrh	r3, [r1, #12]
 8008fc0:	061b      	lsls	r3, r3, #24
 8008fc2:	b09d      	sub	sp, #116	; 0x74
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	4614      	mov	r4, r2
 8008fca:	d50e      	bpl.n	8008fea <_svfiprintf_r+0x32>
 8008fcc:	690b      	ldr	r3, [r1, #16]
 8008fce:	b963      	cbnz	r3, 8008fea <_svfiprintf_r+0x32>
 8008fd0:	2140      	movs	r1, #64	; 0x40
 8008fd2:	f7ff ff21 	bl	8008e18 <_malloc_r>
 8008fd6:	6028      	str	r0, [r5, #0]
 8008fd8:	6128      	str	r0, [r5, #16]
 8008fda:	b920      	cbnz	r0, 8008fe6 <_svfiprintf_r+0x2e>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe4:	e0d1      	b.n	800918a <_svfiprintf_r+0x1d2>
 8008fe6:	2340      	movs	r3, #64	; 0x40
 8008fe8:	616b      	str	r3, [r5, #20]
 8008fea:	2300      	movs	r3, #0
 8008fec:	9309      	str	r3, [sp, #36]	; 0x24
 8008fee:	2320      	movs	r3, #32
 8008ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff8:	2330      	movs	r3, #48	; 0x30
 8008ffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091a4 <_svfiprintf_r+0x1ec>
 8008ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009002:	f04f 0901 	mov.w	r9, #1
 8009006:	4623      	mov	r3, r4
 8009008:	469a      	mov	sl, r3
 800900a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900e:	b10a      	cbz	r2, 8009014 <_svfiprintf_r+0x5c>
 8009010:	2a25      	cmp	r2, #37	; 0x25
 8009012:	d1f9      	bne.n	8009008 <_svfiprintf_r+0x50>
 8009014:	ebba 0b04 	subs.w	fp, sl, r4
 8009018:	d00b      	beq.n	8009032 <_svfiprintf_r+0x7a>
 800901a:	465b      	mov	r3, fp
 800901c:	4622      	mov	r2, r4
 800901e:	4629      	mov	r1, r5
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ff6d 	bl	8008f00 <__ssputs_r>
 8009026:	3001      	adds	r0, #1
 8009028:	f000 80aa 	beq.w	8009180 <_svfiprintf_r+0x1c8>
 800902c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800902e:	445a      	add	r2, fp
 8009030:	9209      	str	r2, [sp, #36]	; 0x24
 8009032:	f89a 3000 	ldrb.w	r3, [sl]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 80a2 	beq.w	8009180 <_svfiprintf_r+0x1c8>
 800903c:	2300      	movs	r3, #0
 800903e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009046:	f10a 0a01 	add.w	sl, sl, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	9307      	str	r3, [sp, #28]
 800904e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009052:	931a      	str	r3, [sp, #104]	; 0x68
 8009054:	4654      	mov	r4, sl
 8009056:	2205      	movs	r2, #5
 8009058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905c:	4851      	ldr	r0, [pc, #324]	; (80091a4 <_svfiprintf_r+0x1ec>)
 800905e:	f7f7 f8c7 	bl	80001f0 <memchr>
 8009062:	9a04      	ldr	r2, [sp, #16]
 8009064:	b9d8      	cbnz	r0, 800909e <_svfiprintf_r+0xe6>
 8009066:	06d0      	lsls	r0, r2, #27
 8009068:	bf44      	itt	mi
 800906a:	2320      	movmi	r3, #32
 800906c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009070:	0711      	lsls	r1, r2, #28
 8009072:	bf44      	itt	mi
 8009074:	232b      	movmi	r3, #43	; 0x2b
 8009076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800907a:	f89a 3000 	ldrb.w	r3, [sl]
 800907e:	2b2a      	cmp	r3, #42	; 0x2a
 8009080:	d015      	beq.n	80090ae <_svfiprintf_r+0xf6>
 8009082:	9a07      	ldr	r2, [sp, #28]
 8009084:	4654      	mov	r4, sl
 8009086:	2000      	movs	r0, #0
 8009088:	f04f 0c0a 	mov.w	ip, #10
 800908c:	4621      	mov	r1, r4
 800908e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009092:	3b30      	subs	r3, #48	; 0x30
 8009094:	2b09      	cmp	r3, #9
 8009096:	d94e      	bls.n	8009136 <_svfiprintf_r+0x17e>
 8009098:	b1b0      	cbz	r0, 80090c8 <_svfiprintf_r+0x110>
 800909a:	9207      	str	r2, [sp, #28]
 800909c:	e014      	b.n	80090c8 <_svfiprintf_r+0x110>
 800909e:	eba0 0308 	sub.w	r3, r0, r8
 80090a2:	fa09 f303 	lsl.w	r3, r9, r3
 80090a6:	4313      	orrs	r3, r2
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	46a2      	mov	sl, r4
 80090ac:	e7d2      	b.n	8009054 <_svfiprintf_r+0x9c>
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	1d19      	adds	r1, r3, #4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	9103      	str	r1, [sp, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfbb      	ittet	lt
 80090ba:	425b      	neglt	r3, r3
 80090bc:	f042 0202 	orrlt.w	r2, r2, #2
 80090c0:	9307      	strge	r3, [sp, #28]
 80090c2:	9307      	strlt	r3, [sp, #28]
 80090c4:	bfb8      	it	lt
 80090c6:	9204      	strlt	r2, [sp, #16]
 80090c8:	7823      	ldrb	r3, [r4, #0]
 80090ca:	2b2e      	cmp	r3, #46	; 0x2e
 80090cc:	d10c      	bne.n	80090e8 <_svfiprintf_r+0x130>
 80090ce:	7863      	ldrb	r3, [r4, #1]
 80090d0:	2b2a      	cmp	r3, #42	; 0x2a
 80090d2:	d135      	bne.n	8009140 <_svfiprintf_r+0x188>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	9203      	str	r2, [sp, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfb8      	it	lt
 80090e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090e4:	3402      	adds	r4, #2
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091b4 <_svfiprintf_r+0x1fc>
 80090ec:	7821      	ldrb	r1, [r4, #0]
 80090ee:	2203      	movs	r2, #3
 80090f0:	4650      	mov	r0, sl
 80090f2:	f7f7 f87d 	bl	80001f0 <memchr>
 80090f6:	b140      	cbz	r0, 800910a <_svfiprintf_r+0x152>
 80090f8:	2340      	movs	r3, #64	; 0x40
 80090fa:	eba0 000a 	sub.w	r0, r0, sl
 80090fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009102:	9b04      	ldr	r3, [sp, #16]
 8009104:	4303      	orrs	r3, r0
 8009106:	3401      	adds	r4, #1
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910e:	4826      	ldr	r0, [pc, #152]	; (80091a8 <_svfiprintf_r+0x1f0>)
 8009110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009114:	2206      	movs	r2, #6
 8009116:	f7f7 f86b 	bl	80001f0 <memchr>
 800911a:	2800      	cmp	r0, #0
 800911c:	d038      	beq.n	8009190 <_svfiprintf_r+0x1d8>
 800911e:	4b23      	ldr	r3, [pc, #140]	; (80091ac <_svfiprintf_r+0x1f4>)
 8009120:	bb1b      	cbnz	r3, 800916a <_svfiprintf_r+0x1b2>
 8009122:	9b03      	ldr	r3, [sp, #12]
 8009124:	3307      	adds	r3, #7
 8009126:	f023 0307 	bic.w	r3, r3, #7
 800912a:	3308      	adds	r3, #8
 800912c:	9303      	str	r3, [sp, #12]
 800912e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009130:	4433      	add	r3, r6
 8009132:	9309      	str	r3, [sp, #36]	; 0x24
 8009134:	e767      	b.n	8009006 <_svfiprintf_r+0x4e>
 8009136:	fb0c 3202 	mla	r2, ip, r2, r3
 800913a:	460c      	mov	r4, r1
 800913c:	2001      	movs	r0, #1
 800913e:	e7a5      	b.n	800908c <_svfiprintf_r+0xd4>
 8009140:	2300      	movs	r3, #0
 8009142:	3401      	adds	r4, #1
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	4619      	mov	r1, r3
 8009148:	f04f 0c0a 	mov.w	ip, #10
 800914c:	4620      	mov	r0, r4
 800914e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009152:	3a30      	subs	r2, #48	; 0x30
 8009154:	2a09      	cmp	r2, #9
 8009156:	d903      	bls.n	8009160 <_svfiprintf_r+0x1a8>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0c5      	beq.n	80090e8 <_svfiprintf_r+0x130>
 800915c:	9105      	str	r1, [sp, #20]
 800915e:	e7c3      	b.n	80090e8 <_svfiprintf_r+0x130>
 8009160:	fb0c 2101 	mla	r1, ip, r1, r2
 8009164:	4604      	mov	r4, r0
 8009166:	2301      	movs	r3, #1
 8009168:	e7f0      	b.n	800914c <_svfiprintf_r+0x194>
 800916a:	ab03      	add	r3, sp, #12
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	462a      	mov	r2, r5
 8009170:	4b0f      	ldr	r3, [pc, #60]	; (80091b0 <_svfiprintf_r+0x1f8>)
 8009172:	a904      	add	r1, sp, #16
 8009174:	4638      	mov	r0, r7
 8009176:	f7fd ffd9 	bl	800712c <_printf_float>
 800917a:	1c42      	adds	r2, r0, #1
 800917c:	4606      	mov	r6, r0
 800917e:	d1d6      	bne.n	800912e <_svfiprintf_r+0x176>
 8009180:	89ab      	ldrh	r3, [r5, #12]
 8009182:	065b      	lsls	r3, r3, #25
 8009184:	f53f af2c 	bmi.w	8008fe0 <_svfiprintf_r+0x28>
 8009188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800918a:	b01d      	add	sp, #116	; 0x74
 800918c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009190:	ab03      	add	r3, sp, #12
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	462a      	mov	r2, r5
 8009196:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <_svfiprintf_r+0x1f8>)
 8009198:	a904      	add	r1, sp, #16
 800919a:	4638      	mov	r0, r7
 800919c:	f7fe fa6a 	bl	8007674 <_printf_i>
 80091a0:	e7eb      	b.n	800917a <_svfiprintf_r+0x1c2>
 80091a2:	bf00      	nop
 80091a4:	0800a094 	.word	0x0800a094
 80091a8:	0800a09e 	.word	0x0800a09e
 80091ac:	0800712d 	.word	0x0800712d
 80091b0:	08008f01 	.word	0x08008f01
 80091b4:	0800a09a 	.word	0x0800a09a

080091b8 <_sbrk_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_sbrk_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f8 fab0 	bl	8001728 <_sbrk>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_sbrk_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_sbrk_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20004c50 	.word	0x20004c50

080091d8 <__assert_func>:
 80091d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091da:	4614      	mov	r4, r2
 80091dc:	461a      	mov	r2, r3
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <__assert_func+0x2c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4605      	mov	r5, r0
 80091e4:	68d8      	ldr	r0, [r3, #12]
 80091e6:	b14c      	cbz	r4, 80091fc <__assert_func+0x24>
 80091e8:	4b07      	ldr	r3, [pc, #28]	; (8009208 <__assert_func+0x30>)
 80091ea:	9100      	str	r1, [sp, #0]
 80091ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f0:	4906      	ldr	r1, [pc, #24]	; (800920c <__assert_func+0x34>)
 80091f2:	462b      	mov	r3, r5
 80091f4:	f000 f80e 	bl	8009214 <fiprintf>
 80091f8:	f000 faac 	bl	8009754 <abort>
 80091fc:	4b04      	ldr	r3, [pc, #16]	; (8009210 <__assert_func+0x38>)
 80091fe:	461c      	mov	r4, r3
 8009200:	e7f3      	b.n	80091ea <__assert_func+0x12>
 8009202:	bf00      	nop
 8009204:	20000010 	.word	0x20000010
 8009208:	0800a0a5 	.word	0x0800a0a5
 800920c:	0800a0b2 	.word	0x0800a0b2
 8009210:	0800a0e0 	.word	0x0800a0e0

08009214 <fiprintf>:
 8009214:	b40e      	push	{r1, r2, r3}
 8009216:	b503      	push	{r0, r1, lr}
 8009218:	4601      	mov	r1, r0
 800921a:	ab03      	add	r3, sp, #12
 800921c:	4805      	ldr	r0, [pc, #20]	; (8009234 <fiprintf+0x20>)
 800921e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009222:	6800      	ldr	r0, [r0, #0]
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	f000 f897 	bl	8009358 <_vfiprintf_r>
 800922a:	b002      	add	sp, #8
 800922c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009230:	b003      	add	sp, #12
 8009232:	4770      	bx	lr
 8009234:	20000010 	.word	0x20000010

08009238 <__ascii_mbtowc>:
 8009238:	b082      	sub	sp, #8
 800923a:	b901      	cbnz	r1, 800923e <__ascii_mbtowc+0x6>
 800923c:	a901      	add	r1, sp, #4
 800923e:	b142      	cbz	r2, 8009252 <__ascii_mbtowc+0x1a>
 8009240:	b14b      	cbz	r3, 8009256 <__ascii_mbtowc+0x1e>
 8009242:	7813      	ldrb	r3, [r2, #0]
 8009244:	600b      	str	r3, [r1, #0]
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	1e10      	subs	r0, r2, #0
 800924a:	bf18      	it	ne
 800924c:	2001      	movne	r0, #1
 800924e:	b002      	add	sp, #8
 8009250:	4770      	bx	lr
 8009252:	4610      	mov	r0, r2
 8009254:	e7fb      	b.n	800924e <__ascii_mbtowc+0x16>
 8009256:	f06f 0001 	mvn.w	r0, #1
 800925a:	e7f8      	b.n	800924e <__ascii_mbtowc+0x16>

0800925c <memmove>:
 800925c:	4288      	cmp	r0, r1
 800925e:	b510      	push	{r4, lr}
 8009260:	eb01 0402 	add.w	r4, r1, r2
 8009264:	d902      	bls.n	800926c <memmove+0x10>
 8009266:	4284      	cmp	r4, r0
 8009268:	4623      	mov	r3, r4
 800926a:	d807      	bhi.n	800927c <memmove+0x20>
 800926c:	1e43      	subs	r3, r0, #1
 800926e:	42a1      	cmp	r1, r4
 8009270:	d008      	beq.n	8009284 <memmove+0x28>
 8009272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800927a:	e7f8      	b.n	800926e <memmove+0x12>
 800927c:	4402      	add	r2, r0
 800927e:	4601      	mov	r1, r0
 8009280:	428a      	cmp	r2, r1
 8009282:	d100      	bne.n	8009286 <memmove+0x2a>
 8009284:	bd10      	pop	{r4, pc}
 8009286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928e:	e7f7      	b.n	8009280 <memmove+0x24>

08009290 <__malloc_lock>:
 8009290:	4801      	ldr	r0, [pc, #4]	; (8009298 <__malloc_lock+0x8>)
 8009292:	f000 bc1f 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 8009296:	bf00      	nop
 8009298:	20004c54 	.word	0x20004c54

0800929c <__malloc_unlock>:
 800929c:	4801      	ldr	r0, [pc, #4]	; (80092a4 <__malloc_unlock+0x8>)
 800929e:	f000 bc1a 	b.w	8009ad6 <__retarget_lock_release_recursive>
 80092a2:	bf00      	nop
 80092a4:	20004c54 	.word	0x20004c54

080092a8 <_realloc_r>:
 80092a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ac:	4680      	mov	r8, r0
 80092ae:	4614      	mov	r4, r2
 80092b0:	460e      	mov	r6, r1
 80092b2:	b921      	cbnz	r1, 80092be <_realloc_r+0x16>
 80092b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092b8:	4611      	mov	r1, r2
 80092ba:	f7ff bdad 	b.w	8008e18 <_malloc_r>
 80092be:	b92a      	cbnz	r2, 80092cc <_realloc_r+0x24>
 80092c0:	f7ff fd3e 	bl	8008d40 <_free_r>
 80092c4:	4625      	mov	r5, r4
 80092c6:	4628      	mov	r0, r5
 80092c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092cc:	f000 fc6a 	bl	8009ba4 <_malloc_usable_size_r>
 80092d0:	4284      	cmp	r4, r0
 80092d2:	4607      	mov	r7, r0
 80092d4:	d802      	bhi.n	80092dc <_realloc_r+0x34>
 80092d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092da:	d812      	bhi.n	8009302 <_realloc_r+0x5a>
 80092dc:	4621      	mov	r1, r4
 80092de:	4640      	mov	r0, r8
 80092e0:	f7ff fd9a 	bl	8008e18 <_malloc_r>
 80092e4:	4605      	mov	r5, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0ed      	beq.n	80092c6 <_realloc_r+0x1e>
 80092ea:	42bc      	cmp	r4, r7
 80092ec:	4622      	mov	r2, r4
 80092ee:	4631      	mov	r1, r6
 80092f0:	bf28      	it	cs
 80092f2:	463a      	movcs	r2, r7
 80092f4:	f7fd fe64 	bl	8006fc0 <memcpy>
 80092f8:	4631      	mov	r1, r6
 80092fa:	4640      	mov	r0, r8
 80092fc:	f7ff fd20 	bl	8008d40 <_free_r>
 8009300:	e7e1      	b.n	80092c6 <_realloc_r+0x1e>
 8009302:	4635      	mov	r5, r6
 8009304:	e7df      	b.n	80092c6 <_realloc_r+0x1e>

08009306 <__sfputc_r>:
 8009306:	6893      	ldr	r3, [r2, #8]
 8009308:	3b01      	subs	r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	b410      	push	{r4}
 800930e:	6093      	str	r3, [r2, #8]
 8009310:	da08      	bge.n	8009324 <__sfputc_r+0x1e>
 8009312:	6994      	ldr	r4, [r2, #24]
 8009314:	42a3      	cmp	r3, r4
 8009316:	db01      	blt.n	800931c <__sfputc_r+0x16>
 8009318:	290a      	cmp	r1, #10
 800931a:	d103      	bne.n	8009324 <__sfputc_r+0x1e>
 800931c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009320:	f000 b94a 	b.w	80095b8 <__swbuf_r>
 8009324:	6813      	ldr	r3, [r2, #0]
 8009326:	1c58      	adds	r0, r3, #1
 8009328:	6010      	str	r0, [r2, #0]
 800932a:	7019      	strb	r1, [r3, #0]
 800932c:	4608      	mov	r0, r1
 800932e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009332:	4770      	bx	lr

08009334 <__sfputs_r>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	4606      	mov	r6, r0
 8009338:	460f      	mov	r7, r1
 800933a:	4614      	mov	r4, r2
 800933c:	18d5      	adds	r5, r2, r3
 800933e:	42ac      	cmp	r4, r5
 8009340:	d101      	bne.n	8009346 <__sfputs_r+0x12>
 8009342:	2000      	movs	r0, #0
 8009344:	e007      	b.n	8009356 <__sfputs_r+0x22>
 8009346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934a:	463a      	mov	r2, r7
 800934c:	4630      	mov	r0, r6
 800934e:	f7ff ffda 	bl	8009306 <__sfputc_r>
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	d1f3      	bne.n	800933e <__sfputs_r+0xa>
 8009356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009358 <_vfiprintf_r>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	460d      	mov	r5, r1
 800935e:	b09d      	sub	sp, #116	; 0x74
 8009360:	4614      	mov	r4, r2
 8009362:	4698      	mov	r8, r3
 8009364:	4606      	mov	r6, r0
 8009366:	b118      	cbz	r0, 8009370 <_vfiprintf_r+0x18>
 8009368:	6983      	ldr	r3, [r0, #24]
 800936a:	b90b      	cbnz	r3, 8009370 <_vfiprintf_r+0x18>
 800936c:	f000 fb14 	bl	8009998 <__sinit>
 8009370:	4b89      	ldr	r3, [pc, #548]	; (8009598 <_vfiprintf_r+0x240>)
 8009372:	429d      	cmp	r5, r3
 8009374:	d11b      	bne.n	80093ae <_vfiprintf_r+0x56>
 8009376:	6875      	ldr	r5, [r6, #4]
 8009378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800937a:	07d9      	lsls	r1, r3, #31
 800937c:	d405      	bmi.n	800938a <_vfiprintf_r+0x32>
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	059a      	lsls	r2, r3, #22
 8009382:	d402      	bmi.n	800938a <_vfiprintf_r+0x32>
 8009384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009386:	f000 fba5 	bl	8009ad4 <__retarget_lock_acquire_recursive>
 800938a:	89ab      	ldrh	r3, [r5, #12]
 800938c:	071b      	lsls	r3, r3, #28
 800938e:	d501      	bpl.n	8009394 <_vfiprintf_r+0x3c>
 8009390:	692b      	ldr	r3, [r5, #16]
 8009392:	b9eb      	cbnz	r3, 80093d0 <_vfiprintf_r+0x78>
 8009394:	4629      	mov	r1, r5
 8009396:	4630      	mov	r0, r6
 8009398:	f000 f96e 	bl	8009678 <__swsetup_r>
 800939c:	b1c0      	cbz	r0, 80093d0 <_vfiprintf_r+0x78>
 800939e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a0:	07dc      	lsls	r4, r3, #31
 80093a2:	d50e      	bpl.n	80093c2 <_vfiprintf_r+0x6a>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a8:	b01d      	add	sp, #116	; 0x74
 80093aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ae:	4b7b      	ldr	r3, [pc, #492]	; (800959c <_vfiprintf_r+0x244>)
 80093b0:	429d      	cmp	r5, r3
 80093b2:	d101      	bne.n	80093b8 <_vfiprintf_r+0x60>
 80093b4:	68b5      	ldr	r5, [r6, #8]
 80093b6:	e7df      	b.n	8009378 <_vfiprintf_r+0x20>
 80093b8:	4b79      	ldr	r3, [pc, #484]	; (80095a0 <_vfiprintf_r+0x248>)
 80093ba:	429d      	cmp	r5, r3
 80093bc:	bf08      	it	eq
 80093be:	68f5      	ldreq	r5, [r6, #12]
 80093c0:	e7da      	b.n	8009378 <_vfiprintf_r+0x20>
 80093c2:	89ab      	ldrh	r3, [r5, #12]
 80093c4:	0598      	lsls	r0, r3, #22
 80093c6:	d4ed      	bmi.n	80093a4 <_vfiprintf_r+0x4c>
 80093c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ca:	f000 fb84 	bl	8009ad6 <__retarget_lock_release_recursive>
 80093ce:	e7e9      	b.n	80093a4 <_vfiprintf_r+0x4c>
 80093d0:	2300      	movs	r3, #0
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
 80093d4:	2320      	movs	r3, #32
 80093d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093da:	f8cd 800c 	str.w	r8, [sp, #12]
 80093de:	2330      	movs	r3, #48	; 0x30
 80093e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095a4 <_vfiprintf_r+0x24c>
 80093e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093e8:	f04f 0901 	mov.w	r9, #1
 80093ec:	4623      	mov	r3, r4
 80093ee:	469a      	mov	sl, r3
 80093f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f4:	b10a      	cbz	r2, 80093fa <_vfiprintf_r+0xa2>
 80093f6:	2a25      	cmp	r2, #37	; 0x25
 80093f8:	d1f9      	bne.n	80093ee <_vfiprintf_r+0x96>
 80093fa:	ebba 0b04 	subs.w	fp, sl, r4
 80093fe:	d00b      	beq.n	8009418 <_vfiprintf_r+0xc0>
 8009400:	465b      	mov	r3, fp
 8009402:	4622      	mov	r2, r4
 8009404:	4629      	mov	r1, r5
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff ff94 	bl	8009334 <__sfputs_r>
 800940c:	3001      	adds	r0, #1
 800940e:	f000 80aa 	beq.w	8009566 <_vfiprintf_r+0x20e>
 8009412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009414:	445a      	add	r2, fp
 8009416:	9209      	str	r2, [sp, #36]	; 0x24
 8009418:	f89a 3000 	ldrb.w	r3, [sl]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80a2 	beq.w	8009566 <_vfiprintf_r+0x20e>
 8009422:	2300      	movs	r3, #0
 8009424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942c:	f10a 0a01 	add.w	sl, sl, #1
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	9307      	str	r3, [sp, #28]
 8009434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009438:	931a      	str	r3, [sp, #104]	; 0x68
 800943a:	4654      	mov	r4, sl
 800943c:	2205      	movs	r2, #5
 800943e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009442:	4858      	ldr	r0, [pc, #352]	; (80095a4 <_vfiprintf_r+0x24c>)
 8009444:	f7f6 fed4 	bl	80001f0 <memchr>
 8009448:	9a04      	ldr	r2, [sp, #16]
 800944a:	b9d8      	cbnz	r0, 8009484 <_vfiprintf_r+0x12c>
 800944c:	06d1      	lsls	r1, r2, #27
 800944e:	bf44      	itt	mi
 8009450:	2320      	movmi	r3, #32
 8009452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009456:	0713      	lsls	r3, r2, #28
 8009458:	bf44      	itt	mi
 800945a:	232b      	movmi	r3, #43	; 0x2b
 800945c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009460:	f89a 3000 	ldrb.w	r3, [sl]
 8009464:	2b2a      	cmp	r3, #42	; 0x2a
 8009466:	d015      	beq.n	8009494 <_vfiprintf_r+0x13c>
 8009468:	9a07      	ldr	r2, [sp, #28]
 800946a:	4654      	mov	r4, sl
 800946c:	2000      	movs	r0, #0
 800946e:	f04f 0c0a 	mov.w	ip, #10
 8009472:	4621      	mov	r1, r4
 8009474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009478:	3b30      	subs	r3, #48	; 0x30
 800947a:	2b09      	cmp	r3, #9
 800947c:	d94e      	bls.n	800951c <_vfiprintf_r+0x1c4>
 800947e:	b1b0      	cbz	r0, 80094ae <_vfiprintf_r+0x156>
 8009480:	9207      	str	r2, [sp, #28]
 8009482:	e014      	b.n	80094ae <_vfiprintf_r+0x156>
 8009484:	eba0 0308 	sub.w	r3, r0, r8
 8009488:	fa09 f303 	lsl.w	r3, r9, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	46a2      	mov	sl, r4
 8009492:	e7d2      	b.n	800943a <_vfiprintf_r+0xe2>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	1d19      	adds	r1, r3, #4
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	9103      	str	r1, [sp, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfbb      	ittet	lt
 80094a0:	425b      	neglt	r3, r3
 80094a2:	f042 0202 	orrlt.w	r2, r2, #2
 80094a6:	9307      	strge	r3, [sp, #28]
 80094a8:	9307      	strlt	r3, [sp, #28]
 80094aa:	bfb8      	it	lt
 80094ac:	9204      	strlt	r2, [sp, #16]
 80094ae:	7823      	ldrb	r3, [r4, #0]
 80094b0:	2b2e      	cmp	r3, #46	; 0x2e
 80094b2:	d10c      	bne.n	80094ce <_vfiprintf_r+0x176>
 80094b4:	7863      	ldrb	r3, [r4, #1]
 80094b6:	2b2a      	cmp	r3, #42	; 0x2a
 80094b8:	d135      	bne.n	8009526 <_vfiprintf_r+0x1ce>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	1d1a      	adds	r2, r3, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9203      	str	r2, [sp, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	bfb8      	it	lt
 80094c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094ca:	3402      	adds	r4, #2
 80094cc:	9305      	str	r3, [sp, #20]
 80094ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095b4 <_vfiprintf_r+0x25c>
 80094d2:	7821      	ldrb	r1, [r4, #0]
 80094d4:	2203      	movs	r2, #3
 80094d6:	4650      	mov	r0, sl
 80094d8:	f7f6 fe8a 	bl	80001f0 <memchr>
 80094dc:	b140      	cbz	r0, 80094f0 <_vfiprintf_r+0x198>
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	eba0 000a 	sub.w	r0, r0, sl
 80094e4:	fa03 f000 	lsl.w	r0, r3, r0
 80094e8:	9b04      	ldr	r3, [sp, #16]
 80094ea:	4303      	orrs	r3, r0
 80094ec:	3401      	adds	r4, #1
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f4:	482c      	ldr	r0, [pc, #176]	; (80095a8 <_vfiprintf_r+0x250>)
 80094f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094fa:	2206      	movs	r2, #6
 80094fc:	f7f6 fe78 	bl	80001f0 <memchr>
 8009500:	2800      	cmp	r0, #0
 8009502:	d03f      	beq.n	8009584 <_vfiprintf_r+0x22c>
 8009504:	4b29      	ldr	r3, [pc, #164]	; (80095ac <_vfiprintf_r+0x254>)
 8009506:	bb1b      	cbnz	r3, 8009550 <_vfiprintf_r+0x1f8>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	3307      	adds	r3, #7
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	3308      	adds	r3, #8
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	443b      	add	r3, r7
 8009518:	9309      	str	r3, [sp, #36]	; 0x24
 800951a:	e767      	b.n	80093ec <_vfiprintf_r+0x94>
 800951c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009520:	460c      	mov	r4, r1
 8009522:	2001      	movs	r0, #1
 8009524:	e7a5      	b.n	8009472 <_vfiprintf_r+0x11a>
 8009526:	2300      	movs	r3, #0
 8009528:	3401      	adds	r4, #1
 800952a:	9305      	str	r3, [sp, #20]
 800952c:	4619      	mov	r1, r3
 800952e:	f04f 0c0a 	mov.w	ip, #10
 8009532:	4620      	mov	r0, r4
 8009534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009538:	3a30      	subs	r2, #48	; 0x30
 800953a:	2a09      	cmp	r2, #9
 800953c:	d903      	bls.n	8009546 <_vfiprintf_r+0x1ee>
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0c5      	beq.n	80094ce <_vfiprintf_r+0x176>
 8009542:	9105      	str	r1, [sp, #20]
 8009544:	e7c3      	b.n	80094ce <_vfiprintf_r+0x176>
 8009546:	fb0c 2101 	mla	r1, ip, r1, r2
 800954a:	4604      	mov	r4, r0
 800954c:	2301      	movs	r3, #1
 800954e:	e7f0      	b.n	8009532 <_vfiprintf_r+0x1da>
 8009550:	ab03      	add	r3, sp, #12
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	462a      	mov	r2, r5
 8009556:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <_vfiprintf_r+0x258>)
 8009558:	a904      	add	r1, sp, #16
 800955a:	4630      	mov	r0, r6
 800955c:	f7fd fde6 	bl	800712c <_printf_float>
 8009560:	4607      	mov	r7, r0
 8009562:	1c78      	adds	r0, r7, #1
 8009564:	d1d6      	bne.n	8009514 <_vfiprintf_r+0x1bc>
 8009566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009568:	07d9      	lsls	r1, r3, #31
 800956a:	d405      	bmi.n	8009578 <_vfiprintf_r+0x220>
 800956c:	89ab      	ldrh	r3, [r5, #12]
 800956e:	059a      	lsls	r2, r3, #22
 8009570:	d402      	bmi.n	8009578 <_vfiprintf_r+0x220>
 8009572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009574:	f000 faaf 	bl	8009ad6 <__retarget_lock_release_recursive>
 8009578:	89ab      	ldrh	r3, [r5, #12]
 800957a:	065b      	lsls	r3, r3, #25
 800957c:	f53f af12 	bmi.w	80093a4 <_vfiprintf_r+0x4c>
 8009580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009582:	e711      	b.n	80093a8 <_vfiprintf_r+0x50>
 8009584:	ab03      	add	r3, sp, #12
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	462a      	mov	r2, r5
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <_vfiprintf_r+0x258>)
 800958c:	a904      	add	r1, sp, #16
 800958e:	4630      	mov	r0, r6
 8009590:	f7fe f870 	bl	8007674 <_printf_i>
 8009594:	e7e4      	b.n	8009560 <_vfiprintf_r+0x208>
 8009596:	bf00      	nop
 8009598:	0800a20c 	.word	0x0800a20c
 800959c:	0800a22c 	.word	0x0800a22c
 80095a0:	0800a1ec 	.word	0x0800a1ec
 80095a4:	0800a094 	.word	0x0800a094
 80095a8:	0800a09e 	.word	0x0800a09e
 80095ac:	0800712d 	.word	0x0800712d
 80095b0:	08009335 	.word	0x08009335
 80095b4:	0800a09a 	.word	0x0800a09a

080095b8 <__swbuf_r>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	460e      	mov	r6, r1
 80095bc:	4614      	mov	r4, r2
 80095be:	4605      	mov	r5, r0
 80095c0:	b118      	cbz	r0, 80095ca <__swbuf_r+0x12>
 80095c2:	6983      	ldr	r3, [r0, #24]
 80095c4:	b90b      	cbnz	r3, 80095ca <__swbuf_r+0x12>
 80095c6:	f000 f9e7 	bl	8009998 <__sinit>
 80095ca:	4b21      	ldr	r3, [pc, #132]	; (8009650 <__swbuf_r+0x98>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d12b      	bne.n	8009628 <__swbuf_r+0x70>
 80095d0:	686c      	ldr	r4, [r5, #4]
 80095d2:	69a3      	ldr	r3, [r4, #24]
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	071a      	lsls	r2, r3, #28
 80095da:	d52f      	bpl.n	800963c <__swbuf_r+0x84>
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	b36b      	cbz	r3, 800963c <__swbuf_r+0x84>
 80095e0:	6923      	ldr	r3, [r4, #16]
 80095e2:	6820      	ldr	r0, [r4, #0]
 80095e4:	1ac0      	subs	r0, r0, r3
 80095e6:	6963      	ldr	r3, [r4, #20]
 80095e8:	b2f6      	uxtb	r6, r6
 80095ea:	4283      	cmp	r3, r0
 80095ec:	4637      	mov	r7, r6
 80095ee:	dc04      	bgt.n	80095fa <__swbuf_r+0x42>
 80095f0:	4621      	mov	r1, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f93c 	bl	8009870 <_fflush_r>
 80095f8:	bb30      	cbnz	r0, 8009648 <__swbuf_r+0x90>
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	60a3      	str	r3, [r4, #8]
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	701e      	strb	r6, [r3, #0]
 8009608:	6963      	ldr	r3, [r4, #20]
 800960a:	3001      	adds	r0, #1
 800960c:	4283      	cmp	r3, r0
 800960e:	d004      	beq.n	800961a <__swbuf_r+0x62>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	07db      	lsls	r3, r3, #31
 8009614:	d506      	bpl.n	8009624 <__swbuf_r+0x6c>
 8009616:	2e0a      	cmp	r6, #10
 8009618:	d104      	bne.n	8009624 <__swbuf_r+0x6c>
 800961a:	4621      	mov	r1, r4
 800961c:	4628      	mov	r0, r5
 800961e:	f000 f927 	bl	8009870 <_fflush_r>
 8009622:	b988      	cbnz	r0, 8009648 <__swbuf_r+0x90>
 8009624:	4638      	mov	r0, r7
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <__swbuf_r+0x9c>)
 800962a:	429c      	cmp	r4, r3
 800962c:	d101      	bne.n	8009632 <__swbuf_r+0x7a>
 800962e:	68ac      	ldr	r4, [r5, #8]
 8009630:	e7cf      	b.n	80095d2 <__swbuf_r+0x1a>
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <__swbuf_r+0xa0>)
 8009634:	429c      	cmp	r4, r3
 8009636:	bf08      	it	eq
 8009638:	68ec      	ldreq	r4, [r5, #12]
 800963a:	e7ca      	b.n	80095d2 <__swbuf_r+0x1a>
 800963c:	4621      	mov	r1, r4
 800963e:	4628      	mov	r0, r5
 8009640:	f000 f81a 	bl	8009678 <__swsetup_r>
 8009644:	2800      	cmp	r0, #0
 8009646:	d0cb      	beq.n	80095e0 <__swbuf_r+0x28>
 8009648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800964c:	e7ea      	b.n	8009624 <__swbuf_r+0x6c>
 800964e:	bf00      	nop
 8009650:	0800a20c 	.word	0x0800a20c
 8009654:	0800a22c 	.word	0x0800a22c
 8009658:	0800a1ec 	.word	0x0800a1ec

0800965c <__ascii_wctomb>:
 800965c:	b149      	cbz	r1, 8009672 <__ascii_wctomb+0x16>
 800965e:	2aff      	cmp	r2, #255	; 0xff
 8009660:	bf85      	ittet	hi
 8009662:	238a      	movhi	r3, #138	; 0x8a
 8009664:	6003      	strhi	r3, [r0, #0]
 8009666:	700a      	strbls	r2, [r1, #0]
 8009668:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800966c:	bf98      	it	ls
 800966e:	2001      	movls	r0, #1
 8009670:	4770      	bx	lr
 8009672:	4608      	mov	r0, r1
 8009674:	4770      	bx	lr
	...

08009678 <__swsetup_r>:
 8009678:	4b32      	ldr	r3, [pc, #200]	; (8009744 <__swsetup_r+0xcc>)
 800967a:	b570      	push	{r4, r5, r6, lr}
 800967c:	681d      	ldr	r5, [r3, #0]
 800967e:	4606      	mov	r6, r0
 8009680:	460c      	mov	r4, r1
 8009682:	b125      	cbz	r5, 800968e <__swsetup_r+0x16>
 8009684:	69ab      	ldr	r3, [r5, #24]
 8009686:	b913      	cbnz	r3, 800968e <__swsetup_r+0x16>
 8009688:	4628      	mov	r0, r5
 800968a:	f000 f985 	bl	8009998 <__sinit>
 800968e:	4b2e      	ldr	r3, [pc, #184]	; (8009748 <__swsetup_r+0xd0>)
 8009690:	429c      	cmp	r4, r3
 8009692:	d10f      	bne.n	80096b4 <__swsetup_r+0x3c>
 8009694:	686c      	ldr	r4, [r5, #4]
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800969c:	0719      	lsls	r1, r3, #28
 800969e:	d42c      	bmi.n	80096fa <__swsetup_r+0x82>
 80096a0:	06dd      	lsls	r5, r3, #27
 80096a2:	d411      	bmi.n	80096c8 <__swsetup_r+0x50>
 80096a4:	2309      	movs	r3, #9
 80096a6:	6033      	str	r3, [r6, #0]
 80096a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b2:	e03e      	b.n	8009732 <__swsetup_r+0xba>
 80096b4:	4b25      	ldr	r3, [pc, #148]	; (800974c <__swsetup_r+0xd4>)
 80096b6:	429c      	cmp	r4, r3
 80096b8:	d101      	bne.n	80096be <__swsetup_r+0x46>
 80096ba:	68ac      	ldr	r4, [r5, #8]
 80096bc:	e7eb      	b.n	8009696 <__swsetup_r+0x1e>
 80096be:	4b24      	ldr	r3, [pc, #144]	; (8009750 <__swsetup_r+0xd8>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	bf08      	it	eq
 80096c4:	68ec      	ldreq	r4, [r5, #12]
 80096c6:	e7e6      	b.n	8009696 <__swsetup_r+0x1e>
 80096c8:	0758      	lsls	r0, r3, #29
 80096ca:	d512      	bpl.n	80096f2 <__swsetup_r+0x7a>
 80096cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ce:	b141      	cbz	r1, 80096e2 <__swsetup_r+0x6a>
 80096d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096d4:	4299      	cmp	r1, r3
 80096d6:	d002      	beq.n	80096de <__swsetup_r+0x66>
 80096d8:	4630      	mov	r0, r6
 80096da:	f7ff fb31 	bl	8008d40 <_free_r>
 80096de:	2300      	movs	r3, #0
 80096e0:	6363      	str	r3, [r4, #52]	; 0x34
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096e8:	81a3      	strh	r3, [r4, #12]
 80096ea:	2300      	movs	r3, #0
 80096ec:	6063      	str	r3, [r4, #4]
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	f043 0308 	orr.w	r3, r3, #8
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	b94b      	cbnz	r3, 8009712 <__swsetup_r+0x9a>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009708:	d003      	beq.n	8009712 <__swsetup_r+0x9a>
 800970a:	4621      	mov	r1, r4
 800970c:	4630      	mov	r0, r6
 800970e:	f000 fa09 	bl	8009b24 <__smakebuf_r>
 8009712:	89a0      	ldrh	r0, [r4, #12]
 8009714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009718:	f010 0301 	ands.w	r3, r0, #1
 800971c:	d00a      	beq.n	8009734 <__swsetup_r+0xbc>
 800971e:	2300      	movs	r3, #0
 8009720:	60a3      	str	r3, [r4, #8]
 8009722:	6963      	ldr	r3, [r4, #20]
 8009724:	425b      	negs	r3, r3
 8009726:	61a3      	str	r3, [r4, #24]
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	b943      	cbnz	r3, 800973e <__swsetup_r+0xc6>
 800972c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009730:	d1ba      	bne.n	80096a8 <__swsetup_r+0x30>
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	0781      	lsls	r1, r0, #30
 8009736:	bf58      	it	pl
 8009738:	6963      	ldrpl	r3, [r4, #20]
 800973a:	60a3      	str	r3, [r4, #8]
 800973c:	e7f4      	b.n	8009728 <__swsetup_r+0xb0>
 800973e:	2000      	movs	r0, #0
 8009740:	e7f7      	b.n	8009732 <__swsetup_r+0xba>
 8009742:	bf00      	nop
 8009744:	20000010 	.word	0x20000010
 8009748:	0800a20c 	.word	0x0800a20c
 800974c:	0800a22c 	.word	0x0800a22c
 8009750:	0800a1ec 	.word	0x0800a1ec

08009754 <abort>:
 8009754:	b508      	push	{r3, lr}
 8009756:	2006      	movs	r0, #6
 8009758:	f000 fa54 	bl	8009c04 <raise>
 800975c:	2001      	movs	r0, #1
 800975e:	f7f7 ff6b 	bl	8001638 <_exit>
	...

08009764 <__sflush_r>:
 8009764:	898a      	ldrh	r2, [r1, #12]
 8009766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	4605      	mov	r5, r0
 800976c:	0710      	lsls	r0, r2, #28
 800976e:	460c      	mov	r4, r1
 8009770:	d458      	bmi.n	8009824 <__sflush_r+0xc0>
 8009772:	684b      	ldr	r3, [r1, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	dc05      	bgt.n	8009784 <__sflush_r+0x20>
 8009778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800977a:	2b00      	cmp	r3, #0
 800977c:	dc02      	bgt.n	8009784 <__sflush_r+0x20>
 800977e:	2000      	movs	r0, #0
 8009780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009786:	2e00      	cmp	r6, #0
 8009788:	d0f9      	beq.n	800977e <__sflush_r+0x1a>
 800978a:	2300      	movs	r3, #0
 800978c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009790:	682f      	ldr	r7, [r5, #0]
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	d032      	beq.n	80097fc <__sflush_r+0x98>
 8009796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	075a      	lsls	r2, r3, #29
 800979c:	d505      	bpl.n	80097aa <__sflush_r+0x46>
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	1ac0      	subs	r0, r0, r3
 80097a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097a4:	b10b      	cbz	r3, 80097aa <__sflush_r+0x46>
 80097a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097a8:	1ac0      	subs	r0, r0, r3
 80097aa:	2300      	movs	r3, #0
 80097ac:	4602      	mov	r2, r0
 80097ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097b0:	6a21      	ldr	r1, [r4, #32]
 80097b2:	4628      	mov	r0, r5
 80097b4:	47b0      	blx	r6
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	d106      	bne.n	80097ca <__sflush_r+0x66>
 80097bc:	6829      	ldr	r1, [r5, #0]
 80097be:	291d      	cmp	r1, #29
 80097c0:	d82c      	bhi.n	800981c <__sflush_r+0xb8>
 80097c2:	4a2a      	ldr	r2, [pc, #168]	; (800986c <__sflush_r+0x108>)
 80097c4:	40ca      	lsrs	r2, r1
 80097c6:	07d6      	lsls	r6, r2, #31
 80097c8:	d528      	bpl.n	800981c <__sflush_r+0xb8>
 80097ca:	2200      	movs	r2, #0
 80097cc:	6062      	str	r2, [r4, #4]
 80097ce:	04d9      	lsls	r1, r3, #19
 80097d0:	6922      	ldr	r2, [r4, #16]
 80097d2:	6022      	str	r2, [r4, #0]
 80097d4:	d504      	bpl.n	80097e0 <__sflush_r+0x7c>
 80097d6:	1c42      	adds	r2, r0, #1
 80097d8:	d101      	bne.n	80097de <__sflush_r+0x7a>
 80097da:	682b      	ldr	r3, [r5, #0]
 80097dc:	b903      	cbnz	r3, 80097e0 <__sflush_r+0x7c>
 80097de:	6560      	str	r0, [r4, #84]	; 0x54
 80097e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097e2:	602f      	str	r7, [r5, #0]
 80097e4:	2900      	cmp	r1, #0
 80097e6:	d0ca      	beq.n	800977e <__sflush_r+0x1a>
 80097e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097ec:	4299      	cmp	r1, r3
 80097ee:	d002      	beq.n	80097f6 <__sflush_r+0x92>
 80097f0:	4628      	mov	r0, r5
 80097f2:	f7ff faa5 	bl	8008d40 <_free_r>
 80097f6:	2000      	movs	r0, #0
 80097f8:	6360      	str	r0, [r4, #52]	; 0x34
 80097fa:	e7c1      	b.n	8009780 <__sflush_r+0x1c>
 80097fc:	6a21      	ldr	r1, [r4, #32]
 80097fe:	2301      	movs	r3, #1
 8009800:	4628      	mov	r0, r5
 8009802:	47b0      	blx	r6
 8009804:	1c41      	adds	r1, r0, #1
 8009806:	d1c7      	bne.n	8009798 <__sflush_r+0x34>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0c4      	beq.n	8009798 <__sflush_r+0x34>
 800980e:	2b1d      	cmp	r3, #29
 8009810:	d001      	beq.n	8009816 <__sflush_r+0xb2>
 8009812:	2b16      	cmp	r3, #22
 8009814:	d101      	bne.n	800981a <__sflush_r+0xb6>
 8009816:	602f      	str	r7, [r5, #0]
 8009818:	e7b1      	b.n	800977e <__sflush_r+0x1a>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	e7ad      	b.n	8009780 <__sflush_r+0x1c>
 8009824:	690f      	ldr	r7, [r1, #16]
 8009826:	2f00      	cmp	r7, #0
 8009828:	d0a9      	beq.n	800977e <__sflush_r+0x1a>
 800982a:	0793      	lsls	r3, r2, #30
 800982c:	680e      	ldr	r6, [r1, #0]
 800982e:	bf08      	it	eq
 8009830:	694b      	ldreq	r3, [r1, #20]
 8009832:	600f      	str	r7, [r1, #0]
 8009834:	bf18      	it	ne
 8009836:	2300      	movne	r3, #0
 8009838:	eba6 0807 	sub.w	r8, r6, r7
 800983c:	608b      	str	r3, [r1, #8]
 800983e:	f1b8 0f00 	cmp.w	r8, #0
 8009842:	dd9c      	ble.n	800977e <__sflush_r+0x1a>
 8009844:	6a21      	ldr	r1, [r4, #32]
 8009846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009848:	4643      	mov	r3, r8
 800984a:	463a      	mov	r2, r7
 800984c:	4628      	mov	r0, r5
 800984e:	47b0      	blx	r6
 8009850:	2800      	cmp	r0, #0
 8009852:	dc06      	bgt.n	8009862 <__sflush_r+0xfe>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009860:	e78e      	b.n	8009780 <__sflush_r+0x1c>
 8009862:	4407      	add	r7, r0
 8009864:	eba8 0800 	sub.w	r8, r8, r0
 8009868:	e7e9      	b.n	800983e <__sflush_r+0xda>
 800986a:	bf00      	nop
 800986c:	20400001 	.word	0x20400001

08009870 <_fflush_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	690b      	ldr	r3, [r1, #16]
 8009874:	4605      	mov	r5, r0
 8009876:	460c      	mov	r4, r1
 8009878:	b913      	cbnz	r3, 8009880 <_fflush_r+0x10>
 800987a:	2500      	movs	r5, #0
 800987c:	4628      	mov	r0, r5
 800987e:	bd38      	pop	{r3, r4, r5, pc}
 8009880:	b118      	cbz	r0, 800988a <_fflush_r+0x1a>
 8009882:	6983      	ldr	r3, [r0, #24]
 8009884:	b90b      	cbnz	r3, 800988a <_fflush_r+0x1a>
 8009886:	f000 f887 	bl	8009998 <__sinit>
 800988a:	4b14      	ldr	r3, [pc, #80]	; (80098dc <_fflush_r+0x6c>)
 800988c:	429c      	cmp	r4, r3
 800988e:	d11b      	bne.n	80098c8 <_fflush_r+0x58>
 8009890:	686c      	ldr	r4, [r5, #4]
 8009892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0ef      	beq.n	800987a <_fflush_r+0xa>
 800989a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800989c:	07d0      	lsls	r0, r2, #31
 800989e:	d404      	bmi.n	80098aa <_fflush_r+0x3a>
 80098a0:	0599      	lsls	r1, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_fflush_r+0x3a>
 80098a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a6:	f000 f915 	bl	8009ad4 <__retarget_lock_acquire_recursive>
 80098aa:	4628      	mov	r0, r5
 80098ac:	4621      	mov	r1, r4
 80098ae:	f7ff ff59 	bl	8009764 <__sflush_r>
 80098b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098b4:	07da      	lsls	r2, r3, #31
 80098b6:	4605      	mov	r5, r0
 80098b8:	d4e0      	bmi.n	800987c <_fflush_r+0xc>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	059b      	lsls	r3, r3, #22
 80098be:	d4dd      	bmi.n	800987c <_fflush_r+0xc>
 80098c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098c2:	f000 f908 	bl	8009ad6 <__retarget_lock_release_recursive>
 80098c6:	e7d9      	b.n	800987c <_fflush_r+0xc>
 80098c8:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <_fflush_r+0x70>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <_fflush_r+0x62>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7df      	b.n	8009892 <_fflush_r+0x22>
 80098d2:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <_fflush_r+0x74>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7da      	b.n	8009892 <_fflush_r+0x22>
 80098dc:	0800a20c 	.word	0x0800a20c
 80098e0:	0800a22c 	.word	0x0800a22c
 80098e4:	0800a1ec 	.word	0x0800a1ec

080098e8 <std>:
 80098e8:	2300      	movs	r3, #0
 80098ea:	b510      	push	{r4, lr}
 80098ec:	4604      	mov	r4, r0
 80098ee:	e9c0 3300 	strd	r3, r3, [r0]
 80098f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098f6:	6083      	str	r3, [r0, #8]
 80098f8:	8181      	strh	r1, [r0, #12]
 80098fa:	6643      	str	r3, [r0, #100]	; 0x64
 80098fc:	81c2      	strh	r2, [r0, #14]
 80098fe:	6183      	str	r3, [r0, #24]
 8009900:	4619      	mov	r1, r3
 8009902:	2208      	movs	r2, #8
 8009904:	305c      	adds	r0, #92	; 0x5c
 8009906:	f7fd fb69 	bl	8006fdc <memset>
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <std+0x38>)
 800990c:	6263      	str	r3, [r4, #36]	; 0x24
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <std+0x3c>)
 8009910:	62a3      	str	r3, [r4, #40]	; 0x28
 8009912:	4b05      	ldr	r3, [pc, #20]	; (8009928 <std+0x40>)
 8009914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009916:	4b05      	ldr	r3, [pc, #20]	; (800992c <std+0x44>)
 8009918:	6224      	str	r4, [r4, #32]
 800991a:	6323      	str	r3, [r4, #48]	; 0x30
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	08009c3d 	.word	0x08009c3d
 8009924:	08009c5f 	.word	0x08009c5f
 8009928:	08009c97 	.word	0x08009c97
 800992c:	08009cbb 	.word	0x08009cbb

08009930 <_cleanup_r>:
 8009930:	4901      	ldr	r1, [pc, #4]	; (8009938 <_cleanup_r+0x8>)
 8009932:	f000 b8af 	b.w	8009a94 <_fwalk_reent>
 8009936:	bf00      	nop
 8009938:	08009871 	.word	0x08009871

0800993c <__sfmoreglue>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	2268      	movs	r2, #104	; 0x68
 8009940:	1e4d      	subs	r5, r1, #1
 8009942:	4355      	muls	r5, r2
 8009944:	460e      	mov	r6, r1
 8009946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800994a:	f7ff fa65 	bl	8008e18 <_malloc_r>
 800994e:	4604      	mov	r4, r0
 8009950:	b140      	cbz	r0, 8009964 <__sfmoreglue+0x28>
 8009952:	2100      	movs	r1, #0
 8009954:	e9c0 1600 	strd	r1, r6, [r0]
 8009958:	300c      	adds	r0, #12
 800995a:	60a0      	str	r0, [r4, #8]
 800995c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009960:	f7fd fb3c 	bl	8006fdc <memset>
 8009964:	4620      	mov	r0, r4
 8009966:	bd70      	pop	{r4, r5, r6, pc}

08009968 <__sfp_lock_acquire>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__sfp_lock_acquire+0x8>)
 800996a:	f000 b8b3 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 800996e:	bf00      	nop
 8009970:	20004c55 	.word	0x20004c55

08009974 <__sfp_lock_release>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__sfp_lock_release+0x8>)
 8009976:	f000 b8ae 	b.w	8009ad6 <__retarget_lock_release_recursive>
 800997a:	bf00      	nop
 800997c:	20004c55 	.word	0x20004c55

08009980 <__sinit_lock_acquire>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__sinit_lock_acquire+0x8>)
 8009982:	f000 b8a7 	b.w	8009ad4 <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	20004c56 	.word	0x20004c56

0800998c <__sinit_lock_release>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__sinit_lock_release+0x8>)
 800998e:	f000 b8a2 	b.w	8009ad6 <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	20004c56 	.word	0x20004c56

08009998 <__sinit>:
 8009998:	b510      	push	{r4, lr}
 800999a:	4604      	mov	r4, r0
 800999c:	f7ff fff0 	bl	8009980 <__sinit_lock_acquire>
 80099a0:	69a3      	ldr	r3, [r4, #24]
 80099a2:	b11b      	cbz	r3, 80099ac <__sinit+0x14>
 80099a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a8:	f7ff bff0 	b.w	800998c <__sinit_lock_release>
 80099ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099b0:	6523      	str	r3, [r4, #80]	; 0x50
 80099b2:	4b13      	ldr	r3, [pc, #76]	; (8009a00 <__sinit+0x68>)
 80099b4:	4a13      	ldr	r2, [pc, #76]	; (8009a04 <__sinit+0x6c>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	bf04      	itt	eq
 80099be:	2301      	moveq	r3, #1
 80099c0:	61a3      	streq	r3, [r4, #24]
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 f820 	bl	8009a08 <__sfp>
 80099c8:	6060      	str	r0, [r4, #4]
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 f81c 	bl	8009a08 <__sfp>
 80099d0:	60a0      	str	r0, [r4, #8]
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 f818 	bl	8009a08 <__sfp>
 80099d8:	2200      	movs	r2, #0
 80099da:	60e0      	str	r0, [r4, #12]
 80099dc:	2104      	movs	r1, #4
 80099de:	6860      	ldr	r0, [r4, #4]
 80099e0:	f7ff ff82 	bl	80098e8 <std>
 80099e4:	68a0      	ldr	r0, [r4, #8]
 80099e6:	2201      	movs	r2, #1
 80099e8:	2109      	movs	r1, #9
 80099ea:	f7ff ff7d 	bl	80098e8 <std>
 80099ee:	68e0      	ldr	r0, [r4, #12]
 80099f0:	2202      	movs	r2, #2
 80099f2:	2112      	movs	r1, #18
 80099f4:	f7ff ff78 	bl	80098e8 <std>
 80099f8:	2301      	movs	r3, #1
 80099fa:	61a3      	str	r3, [r4, #24]
 80099fc:	e7d2      	b.n	80099a4 <__sinit+0xc>
 80099fe:	bf00      	nop
 8009a00:	08009e74 	.word	0x08009e74
 8009a04:	08009931 	.word	0x08009931

08009a08 <__sfp>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	f7ff ffac 	bl	8009968 <__sfp_lock_acquire>
 8009a10:	4b1e      	ldr	r3, [pc, #120]	; (8009a8c <__sfp+0x84>)
 8009a12:	681e      	ldr	r6, [r3, #0]
 8009a14:	69b3      	ldr	r3, [r6, #24]
 8009a16:	b913      	cbnz	r3, 8009a1e <__sfp+0x16>
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff ffbd 	bl	8009998 <__sinit>
 8009a1e:	3648      	adds	r6, #72	; 0x48
 8009a20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	d503      	bpl.n	8009a30 <__sfp+0x28>
 8009a28:	6833      	ldr	r3, [r6, #0]
 8009a2a:	b30b      	cbz	r3, 8009a70 <__sfp+0x68>
 8009a2c:	6836      	ldr	r6, [r6, #0]
 8009a2e:	e7f7      	b.n	8009a20 <__sfp+0x18>
 8009a30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a34:	b9d5      	cbnz	r5, 8009a6c <__sfp+0x64>
 8009a36:	4b16      	ldr	r3, [pc, #88]	; (8009a90 <__sfp+0x88>)
 8009a38:	60e3      	str	r3, [r4, #12]
 8009a3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009a40:	f000 f847 	bl	8009ad2 <__retarget_lock_init_recursive>
 8009a44:	f7ff ff96 	bl	8009974 <__sfp_lock_release>
 8009a48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a50:	6025      	str	r5, [r4, #0]
 8009a52:	61a5      	str	r5, [r4, #24]
 8009a54:	2208      	movs	r2, #8
 8009a56:	4629      	mov	r1, r5
 8009a58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a5c:	f7fd fabe 	bl	8006fdc <memset>
 8009a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a6c:	3468      	adds	r4, #104	; 0x68
 8009a6e:	e7d9      	b.n	8009a24 <__sfp+0x1c>
 8009a70:	2104      	movs	r1, #4
 8009a72:	4638      	mov	r0, r7
 8009a74:	f7ff ff62 	bl	800993c <__sfmoreglue>
 8009a78:	4604      	mov	r4, r0
 8009a7a:	6030      	str	r0, [r6, #0]
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d1d5      	bne.n	8009a2c <__sfp+0x24>
 8009a80:	f7ff ff78 	bl	8009974 <__sfp_lock_release>
 8009a84:	230c      	movs	r3, #12
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	e7ee      	b.n	8009a68 <__sfp+0x60>
 8009a8a:	bf00      	nop
 8009a8c:	08009e74 	.word	0x08009e74
 8009a90:	ffff0001 	.word	0xffff0001

08009a94 <_fwalk_reent>:
 8009a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	4606      	mov	r6, r0
 8009a9a:	4688      	mov	r8, r1
 8009a9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009aa0:	2700      	movs	r7, #0
 8009aa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aa6:	f1b9 0901 	subs.w	r9, r9, #1
 8009aaa:	d505      	bpl.n	8009ab8 <_fwalk_reent+0x24>
 8009aac:	6824      	ldr	r4, [r4, #0]
 8009aae:	2c00      	cmp	r4, #0
 8009ab0:	d1f7      	bne.n	8009aa2 <_fwalk_reent+0xe>
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab8:	89ab      	ldrh	r3, [r5, #12]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d907      	bls.n	8009ace <_fwalk_reent+0x3a>
 8009abe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	d003      	beq.n	8009ace <_fwalk_reent+0x3a>
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4630      	mov	r0, r6
 8009aca:	47c0      	blx	r8
 8009acc:	4307      	orrs	r7, r0
 8009ace:	3568      	adds	r5, #104	; 0x68
 8009ad0:	e7e9      	b.n	8009aa6 <_fwalk_reent+0x12>

08009ad2 <__retarget_lock_init_recursive>:
 8009ad2:	4770      	bx	lr

08009ad4 <__retarget_lock_acquire_recursive>:
 8009ad4:	4770      	bx	lr

08009ad6 <__retarget_lock_release_recursive>:
 8009ad6:	4770      	bx	lr

08009ad8 <__swhatbuf_r>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	460e      	mov	r6, r1
 8009adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae0:	2900      	cmp	r1, #0
 8009ae2:	b096      	sub	sp, #88	; 0x58
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	da08      	bge.n	8009afc <__swhatbuf_r+0x24>
 8009aea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	602a      	str	r2, [r5, #0]
 8009af2:	061a      	lsls	r2, r3, #24
 8009af4:	d410      	bmi.n	8009b18 <__swhatbuf_r+0x40>
 8009af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009afa:	e00e      	b.n	8009b1a <__swhatbuf_r+0x42>
 8009afc:	466a      	mov	r2, sp
 8009afe:	f000 f903 	bl	8009d08 <_fstat_r>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	dbf1      	blt.n	8009aea <__swhatbuf_r+0x12>
 8009b06:	9a01      	ldr	r2, [sp, #4]
 8009b08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b10:	425a      	negs	r2, r3
 8009b12:	415a      	adcs	r2, r3
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	e7ee      	b.n	8009af6 <__swhatbuf_r+0x1e>
 8009b18:	2340      	movs	r3, #64	; 0x40
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	b016      	add	sp, #88	; 0x58
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b24 <__smakebuf_r>:
 8009b24:	898b      	ldrh	r3, [r1, #12]
 8009b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b28:	079d      	lsls	r5, r3, #30
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	d507      	bpl.n	8009b40 <__smakebuf_r+0x1c>
 8009b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	6123      	str	r3, [r4, #16]
 8009b38:	2301      	movs	r3, #1
 8009b3a:	6163      	str	r3, [r4, #20]
 8009b3c:	b002      	add	sp, #8
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	ab01      	add	r3, sp, #4
 8009b42:	466a      	mov	r2, sp
 8009b44:	f7ff ffc8 	bl	8009ad8 <__swhatbuf_r>
 8009b48:	9900      	ldr	r1, [sp, #0]
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff f963 	bl	8008e18 <_malloc_r>
 8009b52:	b948      	cbnz	r0, 8009b68 <__smakebuf_r+0x44>
 8009b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b58:	059a      	lsls	r2, r3, #22
 8009b5a:	d4ef      	bmi.n	8009b3c <__smakebuf_r+0x18>
 8009b5c:	f023 0303 	bic.w	r3, r3, #3
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	e7e3      	b.n	8009b30 <__smakebuf_r+0xc>
 8009b68:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <__smakebuf_r+0x7c>)
 8009b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	6020      	str	r0, [r4, #0]
 8009b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	9b00      	ldr	r3, [sp, #0]
 8009b78:	6163      	str	r3, [r4, #20]
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	6120      	str	r0, [r4, #16]
 8009b7e:	b15b      	cbz	r3, 8009b98 <__smakebuf_r+0x74>
 8009b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b84:	4630      	mov	r0, r6
 8009b86:	f000 f8d1 	bl	8009d2c <_isatty_r>
 8009b8a:	b128      	cbz	r0, 8009b98 <__smakebuf_r+0x74>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f023 0303 	bic.w	r3, r3, #3
 8009b92:	f043 0301 	orr.w	r3, r3, #1
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	89a0      	ldrh	r0, [r4, #12]
 8009b9a:	4305      	orrs	r5, r0
 8009b9c:	81a5      	strh	r5, [r4, #12]
 8009b9e:	e7cd      	b.n	8009b3c <__smakebuf_r+0x18>
 8009ba0:	08009931 	.word	0x08009931

08009ba4 <_malloc_usable_size_r>:
 8009ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba8:	1f18      	subs	r0, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	bfbc      	itt	lt
 8009bae:	580b      	ldrlt	r3, [r1, r0]
 8009bb0:	18c0      	addlt	r0, r0, r3
 8009bb2:	4770      	bx	lr

08009bb4 <_raise_r>:
 8009bb4:	291f      	cmp	r1, #31
 8009bb6:	b538      	push	{r3, r4, r5, lr}
 8009bb8:	4604      	mov	r4, r0
 8009bba:	460d      	mov	r5, r1
 8009bbc:	d904      	bls.n	8009bc8 <_raise_r+0x14>
 8009bbe:	2316      	movs	r3, #22
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bca:	b112      	cbz	r2, 8009bd2 <_raise_r+0x1e>
 8009bcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bd0:	b94b      	cbnz	r3, 8009be6 <_raise_r+0x32>
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f830 	bl	8009c38 <_getpid_r>
 8009bd8:	462a      	mov	r2, r5
 8009bda:	4601      	mov	r1, r0
 8009bdc:	4620      	mov	r0, r4
 8009bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be2:	f000 b817 	b.w	8009c14 <_kill_r>
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d00a      	beq.n	8009c00 <_raise_r+0x4c>
 8009bea:	1c59      	adds	r1, r3, #1
 8009bec:	d103      	bne.n	8009bf6 <_raise_r+0x42>
 8009bee:	2316      	movs	r3, #22
 8009bf0:	6003      	str	r3, [r0, #0]
 8009bf2:	2001      	movs	r0, #1
 8009bf4:	e7e7      	b.n	8009bc6 <_raise_r+0x12>
 8009bf6:	2400      	movs	r4, #0
 8009bf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	4798      	blx	r3
 8009c00:	2000      	movs	r0, #0
 8009c02:	e7e0      	b.n	8009bc6 <_raise_r+0x12>

08009c04 <raise>:
 8009c04:	4b02      	ldr	r3, [pc, #8]	; (8009c10 <raise+0xc>)
 8009c06:	4601      	mov	r1, r0
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	f7ff bfd3 	b.w	8009bb4 <_raise_r>
 8009c0e:	bf00      	nop
 8009c10:	20000010 	.word	0x20000010

08009c14 <_kill_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4d07      	ldr	r5, [pc, #28]	; (8009c34 <_kill_r+0x20>)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	4611      	mov	r1, r2
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	f7f7 fcf9 	bl	8001618 <_kill>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	d102      	bne.n	8009c30 <_kill_r+0x1c>
 8009c2a:	682b      	ldr	r3, [r5, #0]
 8009c2c:	b103      	cbz	r3, 8009c30 <_kill_r+0x1c>
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	bf00      	nop
 8009c34:	20004c50 	.word	0x20004c50

08009c38 <_getpid_r>:
 8009c38:	f7f7 bce6 	b.w	8001608 <_getpid>

08009c3c <__sread>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	460c      	mov	r4, r1
 8009c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c44:	f000 f894 	bl	8009d70 <_read_r>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	bfab      	itete	ge
 8009c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c50:	181b      	addge	r3, r3, r0
 8009c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c56:	bfac      	ite	ge
 8009c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c5a:	81a3      	strhlt	r3, [r4, #12]
 8009c5c:	bd10      	pop	{r4, pc}

08009c5e <__swrite>:
 8009c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c62:	461f      	mov	r7, r3
 8009c64:	898b      	ldrh	r3, [r1, #12]
 8009c66:	05db      	lsls	r3, r3, #23
 8009c68:	4605      	mov	r5, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	4616      	mov	r6, r2
 8009c6e:	d505      	bpl.n	8009c7c <__swrite+0x1e>
 8009c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c74:	2302      	movs	r3, #2
 8009c76:	2200      	movs	r2, #0
 8009c78:	f000 f868 	bl	8009d4c <_lseek_r>
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	4632      	mov	r2, r6
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c92:	f000 b817 	b.w	8009cc4 <_write_r>

08009c96 <__sseek>:
 8009c96:	b510      	push	{r4, lr}
 8009c98:	460c      	mov	r4, r1
 8009c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9e:	f000 f855 	bl	8009d4c <_lseek_r>
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	bf15      	itete	ne
 8009ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cb2:	81a3      	strheq	r3, [r4, #12]
 8009cb4:	bf18      	it	ne
 8009cb6:	81a3      	strhne	r3, [r4, #12]
 8009cb8:	bd10      	pop	{r4, pc}

08009cba <__sclose>:
 8009cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbe:	f000 b813 	b.w	8009ce8 <_close_r>
	...

08009cc4 <_write_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d07      	ldr	r5, [pc, #28]	; (8009ce4 <_write_r+0x20>)
 8009cc8:	4604      	mov	r4, r0
 8009cca:	4608      	mov	r0, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f7f7 fcd7 	bl	8001686 <_write>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_write_r+0x1e>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_write_r+0x1e>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	20004c50 	.word	0x20004c50

08009ce8 <_close_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d06      	ldr	r5, [pc, #24]	; (8009d04 <_close_r+0x1c>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	f7f7 fce3 	bl	80016be <_close>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_close_r+0x1a>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_close_r+0x1a>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20004c50 	.word	0x20004c50

08009d08 <_fstat_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	; (8009d28 <_fstat_r+0x20>)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	4611      	mov	r1, r2
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f7f7 fcde 	bl	80016d6 <_fstat>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	d102      	bne.n	8009d24 <_fstat_r+0x1c>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b103      	cbz	r3, 8009d24 <_fstat_r+0x1c>
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd38      	pop	{r3, r4, r5, pc}
 8009d26:	bf00      	nop
 8009d28:	20004c50 	.word	0x20004c50

08009d2c <_isatty_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d06      	ldr	r5, [pc, #24]	; (8009d48 <_isatty_r+0x1c>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7f7 fcdd 	bl	80016f6 <_isatty>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d102      	bne.n	8009d46 <_isatty_r+0x1a>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	b103      	cbz	r3, 8009d46 <_isatty_r+0x1a>
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	bd38      	pop	{r3, r4, r5, pc}
 8009d48:	20004c50 	.word	0x20004c50

08009d4c <_lseek_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_lseek_r+0x20>)
 8009d50:	4604      	mov	r4, r0
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f7f7 fcd6 	bl	800170c <_lseek>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_lseek_r+0x1e>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_lseek_r+0x1e>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	20004c50 	.word	0x20004c50

08009d70 <_read_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d07      	ldr	r5, [pc, #28]	; (8009d90 <_read_r+0x20>)
 8009d74:	4604      	mov	r4, r0
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f7f7 fc64 	bl	800164c <_read>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_read_r+0x1e>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_read_r+0x1e>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	20004c50 	.word	0x20004c50

08009d94 <_init>:
 8009d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d96:	bf00      	nop
 8009d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d9a:	bc08      	pop	{r3}
 8009d9c:	469e      	mov	lr, r3
 8009d9e:	4770      	bx	lr

08009da0 <_fini>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr
