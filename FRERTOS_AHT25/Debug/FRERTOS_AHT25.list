
FRERTOS_AHT25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800b378  0800b378  0001b378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f4  0800b8f4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f4  0800b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8fc  0800b8fc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8fc  0800b8fc  0001b8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b900  0800b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a30  200001e4  0800bae8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c14  0800bae8  00024c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e38  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d06  00000000  00000000  0003504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00037d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004488  00000000  00000000  00039fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d25  00000000  00000000  0003e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093aec  00000000  00000000  00052155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5c41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f98  00000000  00000000  000e5c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b360 	.word	0x0800b360

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b360 	.word	0x0800b360

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <read_sensor_values>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float temperature, humidity;

void read_sensor_values(float *temperature, float *humidity)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t cmd = AHT25_MEASURE_CMD;
 8001012:	23ac      	movs	r3, #172	; 0xac
 8001014:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c2, AHT25_ADDR,&cmd, 1, HAL_MAX_DELAY);
 8001016:	f107 020f 	add.w	r2, r7, #15
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2170      	movs	r1, #112	; 0x70
 8001024:	4836      	ldr	r0, [pc, #216]	; (8001100 <read_sensor_values+0xf8>)
 8001026:	f001 f81d 	bl	8002064 <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 fc48 	bl	80018c0 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2,0x71, data, 6, HAL_MAX_DELAY);
 8001030:	f107 0210 	add.w	r2, r7, #16
 8001034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2306      	movs	r3, #6
 800103c:	2171      	movs	r1, #113	; 0x71
 800103e:	4830      	ldr	r0, [pc, #192]	; (8001100 <read_sensor_values+0xf8>)
 8001040:	f001 f90e 	bl	8002260 <HAL_I2C_Master_Receive>

    *humidity = ((float)((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))) / 1048576.0 * 100.0;
 8001044:	7c7b      	ldrb	r3, [r7, #17]
 8001046:	031a      	lsls	r2, r3, #12
 8001048:	7cbb      	ldrb	r3, [r7, #18]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4313      	orrs	r3, r2
 800104e:	7cfa      	ldrb	r2, [r7, #19]
 8001050:	0912      	lsrs	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	4313      	orrs	r3, r2
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa79 	bl	8000558 <__aeabi_f2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <read_sensor_values+0xfc>)
 800106c:	f7ff fbf6 	bl	800085c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <read_sensor_values+0x100>)
 800107e:	f7ff fac3 	bl	8000608 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fdb5 	bl	8000bf8 <__aeabi_d2f>
 800108e:	4602      	mov	r2, r0
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	601a      	str	r2, [r3, #0]
    *temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0 * 200.0 - 50.0;
 8001094:	7cfb      	ldrb	r3, [r7, #19]
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800109c:	7d3b      	ldrb	r3, [r7, #20]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	7d7a      	ldrb	r2, [r7, #21]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <read_sensor_values+0xfc>)
 80010bc:	f7ff fbce 	bl	800085c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <read_sensor_values+0x104>)
 80010ce:	f7ff fa9b 	bl	8000608 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <read_sensor_values+0x108>)
 80010e0:	f7ff f8da 	bl	8000298 <__aeabi_dsub>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fd84 	bl	8000bf8 <__aeabi_d2f>
 80010f0:	4602      	mov	r2, r0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]


}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000200 	.word	0x20000200
 8001104:	41300000 	.word	0x41300000
 8001108:	40590000 	.word	0x40590000
 800110c:	40690000 	.word	0x40690000
 8001110:	40490000 	.word	0x40490000

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fb60 	bl	80017dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f834 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f8f4 	bl	800130c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001124:	f000 f8c8 	bl	80012b8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001128:	f000 f898 	bl	800125c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800112c:	f002 fe7a 	bl	8003e24 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <main+0x54>)
 8001132:	2102      	movs	r1, #2
 8001134:	2010      	movs	r0, #16
 8001136:	f002 ff6c 	bl	8004012 <osMessageQueueNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <main+0x58>)
 800113e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <main+0x5c>)
 8001142:	2100      	movs	r1, #0
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <main+0x60>)
 8001146:	f002 feb7 	bl	8003eb8 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <main+0x64>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <main+0x68>)
 8001152:	2100      	movs	r1, #0
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <main+0x6c>)
 8001156:	f002 feaf 	bl	8003eb8 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <main+0x70>)
 800115e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001160:	f002 fe84 	bl	8003e6c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x50>
 8001166:	bf00      	nop
 8001168:	0800b420 	.word	0x0800b420
 800116c:	200002a0 	.word	0x200002a0
 8001170:	0800b3d8 	.word	0x0800b3d8
 8001174:	0800135d 	.word	0x0800135d
 8001178:	20000298 	.word	0x20000298
 800117c:	0800b3fc 	.word	0x0800b3fc
 8001180:	0800137d 	.word	0x0800137d
 8001184:	2000029c 	.word	0x2000029c

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fc78 	bl	8006a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemClock_Config+0xd0>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011f8:	2310      	movs	r3, #16
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001202:	2304      	movs	r3, #4
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001206:	2304      	movs	r3, #4
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fd7a 	bl	8002d08 <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800121a:	f000 f8e9 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2102      	movs	r1, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f001 ffdc 	bl	80031f8 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001246:	f000 f8d3 	bl	80013f0 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C2_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_I2C2_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C2_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_I2C2_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C2_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2C2_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_I2C2_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C2_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2C2_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C2_Init+0x50>)
 800129a:	f000 fd9f 	bl	8001ddc <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f8a4 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000200 	.word	0x20000200
 80012b0:	40005800 	.word	0x40005800
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_USART2_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f002 f9a2 	bl	8003638 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 f879 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000254 	.word	0x20000254
 8001308:	40004400 	.word	0x40004400

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <MX_GPIO_Init+0x4c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  read_sensor_values(&temperature, &humidity);
 8001364:	4903      	ldr	r1, [pc, #12]	; (8001374 <StartTask1+0x18>)
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <StartTask1+0x1c>)
 8001368:	f7ff fe4e 	bl	8001008 <read_sensor_values>
	  osDelay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f002 fe35 	bl	8003fdc <osDelay>
	  read_sensor_values(&temperature, &humidity);
 8001372:	e7f7      	b.n	8001364 <StartTask1+0x8>
 8001374:	200002a8 	.word	0x200002a8
 8001378:	200002a4 	.word	0x200002a4

0800137c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800137c:	b5b0      	push	{r4, r5, r7, lr}
 800137e:	b0a0      	sub	sp, #128	; 0x80
 8001380:	af04      	add	r7, sp, #16
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  char buffer[100];
		  sprintf(buffer, "Temperature: %.2f°C\r","Humidity: %.2f°C\r", temperature ,humidity);
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <StartTask2+0x60>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8e5 	bl	8000558 <__aeabi_f2d>
 800138e:	4604      	mov	r4, r0
 8001390:	460d      	mov	r5, r1
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <StartTask2+0x64>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8de 	bl	8000558 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	f107 000c 	add.w	r0, r7, #12
 80013a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013a8:	e9cd 4500 	strd	r4, r5, [sp]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <StartTask2+0x68>)
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <StartTask2+0x6c>)
 80013b0:	f006 f9f4 	bl	800779c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff11 	bl	80001e0 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	f107 010c 	add.w	r1, r7, #12
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <StartTask2+0x70>)
 80013cc:	f002 f981 	bl	80036d2 <HAL_UART_Transmit>
		  osDelay(500);
 80013d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d4:	f002 fe02 	bl	8003fdc <osDelay>
  {
 80013d8:	e7d4      	b.n	8001384 <StartTask2+0x8>
 80013da:	bf00      	nop
 80013dc:	200002a4 	.word	0x200002a4
 80013e0:	200002a8 	.word	0x200002a8
 80013e4:	0800b394 	.word	0x0800b394
 80013e8:	0800b3a8 	.word	0x0800b3a8
 80013ec:	20000254 	.word	0x20000254

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_MspInit+0x54>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_MspInit+0x54>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x54>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_MspInit+0x54>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_MspInit+0x54>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_MspInit+0x54>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	210f      	movs	r1, #15
 800143e:	f06f 0001 	mvn.w	r0, #1
 8001442:	f000 fb1e 	bl	8001a82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <HAL_I2C_MspInit+0xa4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d13c      	bne.n	80014f0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_I2C_MspInit+0xa8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_I2C_MspInit+0xa8>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_I2C_MspInit+0xa8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014a4:	2304      	movs	r3, #4
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <HAL_I2C_MspInit+0xac>)
 80014b0:	f000 fb10 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b4:	2308      	movs	r3, #8
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b8:	2312      	movs	r3, #18
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014c4:	2309      	movs	r3, #9
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <HAL_I2C_MspInit+0xac>)
 80014d0:	f000 fb00 	bl	8001ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_I2C_MspInit+0xa8>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_I2C_MspInit+0xa8>)
 80014de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_I2C_MspInit+0xa8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40005800 	.word	0x40005800
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12b      	bne.n	800157e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_UART_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_UART_MspInit+0x88>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_UART_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_UART_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_UART_MspInit+0x88>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_UART_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155e:	230c      	movs	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	2307      	movs	r3, #7
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_UART_MspInit+0x8c>)
 800157a:	f000 faab 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40004400 	.word	0x40004400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 f95c 	bl	8001880 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015c8:	f004 f9c2 	bl	8005950 <xTaskGetSchedulerState>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015d2:	f004 ffa9 	bl	8006528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}

080015da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  return 1;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_kill>:

int _kill(int pid, int sig)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f4:	f005 fa12 	bl	8006a1c <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2216      	movs	r2, #22
 80015fc:	601a      	str	r2, [r3, #0]
  return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_exit>:

void _exit (int status)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001612:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffe7 	bl	80015ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800161c:	e7fe      	b.n	800161c <_exit+0x12>

0800161e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e00a      	b.n	8001646 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001630:	f3af 8000 	nop.w
 8001634:	4601      	mov	r1, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	60ba      	str	r2, [r7, #8]
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	dbf0      	blt.n	8001630 <_read+0x12>
  }

  return len;
 800164e:	687b      	ldr	r3, [r7, #4]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e009      	b.n	800167e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	60ba      	str	r2, [r7, #8]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbf1      	blt.n	800166a <_write+0x12>
  }
  return len;
 8001686:	687b      	ldr	r3, [r7, #4]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_close>:

int _close(int file)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b8:	605a      	str	r2, [r3, #4]
  return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_isatty>:

int _isatty(int file)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <_sbrk+0x5c>)
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_sbrk+0x60>)
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_sbrk+0x64>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_sbrk+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001728:	f005 f978 	bl	8006a1c <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001736:	e009      	b.n	800174c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20020000 	.word	0x20020000
 8001758:	00000400 	.word	0x00000400
 800175c:	200002ac 	.word	0x200002ac
 8001760:	20004c18 	.word	0x20004c18

08001764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b2:	f7ff ffd7 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f005 f937 	bl	8006a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7ff fcab 	bl	8001114 <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80017cc:	0800b904 	.word	0x0800b904
  ldr r2, =_sbss
 80017d0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80017d4:	20004c14 	.word	0x20004c14

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_Init+0x40>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_Init+0x40>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x40>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f931 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	200f      	movs	r0, #15
 800180c:	f000 f808 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fdf4 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x54>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x58>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f93b 	bl	8001aba <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00e      	b.n	800186c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d80a      	bhi.n	800186a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	f000 f911 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_InitTick+0x5c>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000000 	.word	0x20000000
 8001878:	20000008 	.word	0x20000008
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000008 	.word	0x20000008
 80018a4:	200002b0 	.word	0x200002b0

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200002b0 	.word	0x200002b0

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff47 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff5c 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffb0 	bl	8001a28 <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e159      	b.n	8001da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8148 	bne.w	8001d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a2 	beq.w	8001d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <HAL_GPIO_Init+0x2f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x1fe>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_GPIO_Init+0x2f8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x1fa>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x1f6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a45      	ldr	r2, [pc, #276]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x1f2>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f aea2 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e12b      	b.n	8002046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fb26 	bl	8001454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e40:	f001 fbd2 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8001e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a81      	ldr	r2, [pc, #516]	; (8002050 <HAL_I2C_Init+0x274>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d807      	bhi.n	8001e60 <HAL_I2C_Init+0x84>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a80      	ldr	r2, [pc, #512]	; (8002054 <HAL_I2C_Init+0x278>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	bf94      	ite	ls
 8001e58:	2301      	movls	r3, #1
 8001e5a:	2300      	movhi	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	e006      	b.n	8001e6e <HAL_I2C_Init+0x92>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a7d      	ldr	r2, [pc, #500]	; (8002058 <HAL_I2C_Init+0x27c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0e7      	b.n	8002046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a78      	ldr	r2, [pc, #480]	; (800205c <HAL_I2C_Init+0x280>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_I2C_Init+0x274>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_I2C_Init+0xd4>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3301      	adds	r3, #1
 8001eae:	e009      	b.n	8001ec4 <HAL_I2C_Init+0xe8>
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_I2C_Init+0x284>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	495c      	ldr	r1, [pc, #368]	; (8002050 <HAL_I2C_Init+0x274>)
 8001ee0:	428b      	cmp	r3, r1
 8001ee2:	d819      	bhi.n	8001f18 <HAL_I2C_Init+0x13c>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e59      	subs	r1, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef2:	1c59      	adds	r1, r3, #1
 8001ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ef8:	400b      	ands	r3, r1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_I2C_Init+0x138>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e59      	subs	r1, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f12:	e051      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e04f      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d111      	bne.n	8001f44 <HAL_I2C_Init+0x168>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e012      	b.n	8001f6a <HAL_I2C_Init+0x18e>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Init+0x196>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e022      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10e      	bne.n	8001f98 <HAL_I2C_Init+0x1bc>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e58      	subs	r0, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f96:	e00f      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e58      	subs	r0, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	0099      	lsls	r1, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	6809      	ldr	r1, [r1, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6911      	ldr	r1, [r2, #16]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68d2      	ldr	r2, [r2, #12]
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	000186a0 	.word	0x000186a0
 8002054:	001e847f 	.word	0x001e847f
 8002058:	003d08ff 	.word	0x003d08ff
 800205c:	431bde83 	.word	0x431bde83
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	817b      	strh	r3, [r7, #10]
 8002074:	4613      	mov	r3, r2
 8002076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fc16 	bl	80018a8 <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	f040 80e0 	bne.w	800224c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2319      	movs	r3, #25
 8002092:	2201      	movs	r2, #1
 8002094:	4970      	ldr	r1, [pc, #448]	; (8002258 <HAL_I2C_Master_Transmit+0x1f4>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fc58 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0d3      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x50>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e0cc      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d007      	beq.n	80020da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2210      	movs	r2, #16
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a50      	ldr	r2, [pc, #320]	; (800225c <HAL_I2C_Master_Transmit+0x1f8>)
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800211c:	8979      	ldrh	r1, [r7, #10]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fac2 	bl	80026ac <I2C_MasterRequestWrite>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08d      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002148:	e066      	b.n	8002218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fcd2 	bl	8002af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b04      	cmp	r3, #4
 8002160:	d107      	bne.n	8002172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x188>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d017      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	6a39      	ldr	r1, [r7, #32]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fcc2 	bl	8002b7a <I2C_WaitOnBTFFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b04      	cmp	r3, #4
 8002202:	d107      	bne.n	8002214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e01a      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d194      	bne.n	800214a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	00100002 	.word	0x00100002
 800225c:	ffff0000 	.word	0xffff0000

08002260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	460b      	mov	r3, r1
 800226e:	817b      	strh	r3, [r7, #10]
 8002270:	4613      	mov	r3, r2
 8002272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fb18 	bl	80018a8 <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 820b 	bne.w	800269e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	497c      	ldr	r1, [pc, #496]	; (8002484 <HAL_I2C_Master_Receive+0x224>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb5a 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e1fe      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x50>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e1f7      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2222      	movs	r2, #34	; 0x22
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_I2C_Master_Receive+0x228>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fa46 	bl	80027b0 <I2C_MasterRequestRead>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1b8      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e18c      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d11b      	bne.n	800239e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e16c      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d11b      	bne.n	80023de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	e14c      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002404:	e138      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	2b03      	cmp	r3, #3
 800240c:	f200 80f1 	bhi.w	80025f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b01      	cmp	r3, #1
 8002416:	d123      	bne.n	8002460 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fbed 	bl	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e139      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800245e:	e10b      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b02      	cmp	r3, #2
 8002466:	d14e      	bne.n	8002506 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	2200      	movs	r2, #0
 8002470:	4906      	ldr	r1, [pc, #24]	; (800248c <HAL_I2C_Master_Receive+0x22c>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fa6a 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e10e      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
 8002482:	bf00      	nop
 8002484:	00100002 	.word	0x00100002
 8002488:	ffff0000 	.word	0xffff0000
 800248c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002504:	e0b8      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	2200      	movs	r2, #0
 800250e:	4966      	ldr	r1, [pc, #408]	; (80026a8 <HAL_I2C_Master_Receive+0x448>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa1b 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0bf      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	494f      	ldr	r1, [pc, #316]	; (80026a8 <HAL_I2C_Master_Receive+0x448>)
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f9ed 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e091      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025f0:	e042      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb00 	bl	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e04c      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d118      	bne.n	8002678 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f aec2 	bne.w	8002406 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	00010004 	.word	0x00010004

080026ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	460b      	mov	r3, r1
 80026ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d006      	beq.n	80026d6 <I2C_MasterRequestWrite+0x2a>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d003      	beq.n	80026d6 <I2C_MasterRequestWrite+0x2a>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d4:	d108      	bne.n	80026e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e00b      	b.n	8002700 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	d107      	bne.n	8002700 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f91d 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002726:	d103      	bne.n	8002730 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e035      	b.n	80027a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800273c:	d108      	bne.n	8002750 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e01b      	b.n	8002788 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	11db      	asrs	r3, r3, #7
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0306 	and.w	r3, r3, #6
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f063 030f 	orn	r3, r3, #15
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <I2C_MasterRequestWrite+0xfc>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f943 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e010      	b.n	80027a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <I2C_MasterRequestWrite+0x100>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f933 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	00010008 	.word	0x00010008
 80027ac:	00010002 	.word	0x00010002

080027b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	460b      	mov	r3, r1
 80027be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d006      	beq.n	80027ea <I2C_MasterRequestRead+0x3a>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d003      	beq.n	80027ea <I2C_MasterRequestRead+0x3a>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e8:	d108      	bne.n	80027fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e00b      	b.n	8002814 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b11      	cmp	r3, #17
 8002802:	d107      	bne.n	8002814 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002812:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f893 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283a:	d103      	bne.n	8002844 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e079      	b.n	800293c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002850:	d108      	bne.n	8002864 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	e05f      	b.n	8002924 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	11db      	asrs	r3, r3, #7
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 0306 	and.w	r3, r3, #6
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f063 030f 	orn	r3, r3, #15
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4930      	ldr	r1, [pc, #192]	; (8002944 <I2C_MasterRequestRead+0x194>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f8b9 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e054      	b.n	800293c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4929      	ldr	r1, [pc, #164]	; (8002948 <I2C_MasterRequestRead+0x198>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8a9 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e044      	b.n	800293c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f831 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fe:	d103      	bne.n	8002908 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e017      	b.n	800293c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	11db      	asrs	r3, r3, #7
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0306 	and.w	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f063 030e 	orn	r3, r3, #14
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <I2C_MasterRequestRead+0x198>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f865 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	00010008 	.word	0x00010008
 8002948:	00010002 	.word	0x00010002

0800294c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800295c:	e025      	b.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002964:	d021      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fe ff9f 	bl	80018a8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e023      	b.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10d      	bne.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	e00c      	b.n	80029ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d0b6      	beq.n	800295e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a08:	e051      	b.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d123      	bne.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e046      	b.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a68:	d021      	beq.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7fe ff1d 	bl	80018a8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e020      	b.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10c      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e00b      	b.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4013      	ands	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d18d      	bne.n	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b04:	e02d      	b.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8ce 	bl	8002ca8 <I2C_IsAcknowledgeFailed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02d      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1c:	d021      	beq.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fec3 	bl	80018a8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d1ca      	bne.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b86:	e02d      	b.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f88d 	bl	8002ca8 <I2C_IsAcknowledgeFailed>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e02d      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9e:	d021      	beq.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7fe fe82 	bl	80018a8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d1ca      	bne.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c08:	e042      	b.n	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d119      	bne.n	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0210 	mvn.w	r2, #16
 8002c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e029      	b.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7fe fe2c 	bl	80018a8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e007      	b.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d1b5      	bne.n	8002c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbe:	d11b      	bne.n	8002cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fd72 	bl	80018a8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fd6e 	bl	80018a8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fd5e 	bl	80018a8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fd5a 	bl	80018a8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fd13 	bl	80018a8 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fd0f 	bl	80018a8 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fcf2 	bl	80018a8 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fcee 	bl	80018a8 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fcd2 	bl	80018a8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fcce 	bl	80018a8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fcbb 	bl	80018a8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe fcb7 	bl	80018a8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fc77 	bl	80018a8 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe fc73 	bl	80018a8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fc38 	bl	80018a8 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe fc34 	bl	80018a8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fc22 	bl	80018a8 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fc1e 	bl	80018a8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fbf2 	bl	80018a8 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fbee 	bl	80018a8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fbc7 	bl	80018a8 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fbc3 	bl	80018a8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fbb0 	bl	80018a8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fbac 	bl	80018a8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fade 	bl	80018a8 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fada 	bl	80018a8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fa3e 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	0800b438 	.word	0x0800b438
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b094      	sub	sp, #80	; 0x50
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
 80033d0:	2300      	movs	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	2300      	movs	r3, #0
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80e1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e0db      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033fc:	e0db      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003402:	e0d8      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
 8003424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4621      	mov	r1, r4
 8003450:	1a51      	subs	r1, r2, r1
 8003452:	6139      	str	r1, [r7, #16]
 8003454:	4629      	mov	r1, r5
 8003456:	eb63 0301 	sbc.w	r3, r3, r1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003468:	4659      	mov	r1, fp
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003472:	4651      	mov	r1, sl
 8003474:	018a      	lsls	r2, r1, #6
 8003476:	4651      	mov	r1, sl
 8003478:	ebb2 0801 	subs.w	r8, r2, r1
 800347c:	4659      	mov	r1, fp
 800347e:	eb63 0901 	sbc.w	r9, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb18 0303 	adds.w	r3, r8, r3
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	462b      	mov	r3, r5
 80034a4:	eb49 0303 	adc.w	r3, r9, r3
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b6:	4629      	mov	r1, r5
 80034b8:	024b      	lsls	r3, r1, #9
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c0:	4621      	mov	r1, r4
 80034c2:	024a      	lsls	r2, r1, #9
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d4:	f7fd fbe0 	bl	8000c98 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e0:	e058      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	4611      	mov	r1, r2
 80034ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0159      	lsls	r1, r3, #5
 800350a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350e:	0150      	lsls	r0, r2, #5
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4641      	mov	r1, r8
 8003516:	ebb2 0a01 	subs.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800352c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003534:	ebb2 040a 	subs.w	r4, r2, sl
 8003538:	eb63 050b 	sbc.w	r5, r3, fp
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	00eb      	lsls	r3, r5, #3
 8003546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354a:	00e2      	lsls	r2, r4, #3
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	4643      	mov	r3, r8
 8003552:	18e3      	adds	r3, r4, r3
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	464b      	mov	r3, r9
 8003558:	eb45 0303 	adc.w	r3, r5, r3
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	61fa      	str	r2, [r7, #28]
 8003584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003588:	f7fd fb86 	bl	8000c98 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3750      	adds	r7, #80	; 0x50
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	0800b448 	.word	0x0800b448

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	0800b448 	.word	0x0800b448

08003638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03f      	b.n	80036ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd ff50 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800367a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f929 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08a      	sub	sp, #40	; 0x28
 80036d6:	af02      	add	r7, sp, #8
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d17c      	bne.n	80037ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_UART_Transmit+0x2c>
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e075      	b.n	80037ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UART_Transmit+0x3e>
 800370c:	2302      	movs	r3, #2
 800370e:	e06e      	b.n	80037ee <HAL_UART_Transmit+0x11c>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2221      	movs	r2, #33	; 0x21
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003726:	f7fe f8bf 	bl	80018a8 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x82>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003764:	e02a      	b.n	80037bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f840 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e036      	b.n	80037ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e007      	b.n	80037ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1cf      	bne.n	8003766 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f810 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e006      	b.n	80037ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b090      	sub	sp, #64	; 0x40
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	e050      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800380e:	d04c      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
 8003816:	f7fe f847 	bl	80018a8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003822:	429a      	cmp	r2, r3
 8003824:	d241      	bcs.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003846:	637a      	str	r2, [r7, #52]	; 0x34
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387a:	623a      	str	r2, [r7, #32]
 800387c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	69f9      	ldr	r1, [r7, #28]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	61bb      	str	r3, [r7, #24]
   return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e5      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d09f      	beq.n	8003808 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3740      	adds	r7, #64	; 0x40
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0c0      	sub	sp, #256	; 0x100
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800393a:	430b      	orrs	r3, r1
 800393c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	ea40 0301 	orr.w	r3, r0, r1
 800395a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0xa0>
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <UART_SetConfig+0x2d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7ff fe4c 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8003978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7ff fe33 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8003982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	f040 810c 	bne.w	8003bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800399e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ae:	415b      	adcs	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039b6:	4621      	mov	r1, r4
 80039b8:	eb12 0801 	adds.w	r8, r2, r1
 80039bc:	4629      	mov	r1, r5
 80039be:	eb43 0901 	adc.w	r9, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d6:	4690      	mov	r8, r2
 80039d8:	4699      	mov	r9, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb18 0303 	adds.w	r3, r8, r3
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	4613      	mov	r3, r2
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a18:	f7fd f93e 	bl	8000c98 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a44:	415b      	adcs	r3, r3
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aae:	f7fd f8f3 	bl	8000c98 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	; 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af8:	415b      	adcs	r3, r3
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6339      	str	r1, [r7, #48]	; 0x30
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b54:	460b      	mov	r3, r1
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b6a:	f7fd f895 	bl	8000c98 <__aeabi_uldivmod>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	; 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4422      	add	r2, r4
 8003b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9c:	e105      	b.n	8003daa <UART_SetConfig+0x4d6>
 8003b9e:	bf00      	nop
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6239      	str	r1, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0501 	adc.w	r5, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4621      	mov	r1, r4
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c2c:	f7fd f834 	bl	8000c98 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	61b9      	str	r1, [r7, #24]
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	4641      	mov	r1, r8
 8003c62:	1851      	adds	r1, r2, r1
 8003c64:	6139      	str	r1, [r7, #16]
 8003c66:	4649      	mov	r1, r9
 8003c68:	414b      	adcs	r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4651      	mov	r1, sl
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c94:	464b      	mov	r3, r9
 8003c96:	460a      	mov	r2, r1
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cca:	f7fc ffe5 	bl	8000c98 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	441c      	add	r4, r3
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1851      	adds	r1, r2, r1
 8003d16:	6039      	str	r1, [r7, #0]
 8003d18:	4649      	mov	r1, r9
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	00cb      	lsls	r3, r1, #3
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d34:	4651      	mov	r1, sl
 8003d36:	00ca      	lsls	r2, r1, #3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
 8003d58:	667a      	str	r2, [r7, #100]	; 0x64
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d66:	4649      	mov	r1, r9
 8003d68:	008b      	lsls	r3, r1, #2
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d70:	4641      	mov	r1, r8
 8003d72:	008a      	lsls	r2, r1, #2
 8003d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d78:	f7fc ff8e 	bl	8000c98 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4422      	add	r2, r4
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <__NVIC_SetPriority>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db0a      	blt.n	8003de6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	490c      	ldr	r1, [pc, #48]	; (8003e08 <__NVIC_SetPriority+0x4c>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	440b      	add	r3, r1
 8003de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003de4:	e00a      	b.n	8003dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4908      	ldr	r1, [pc, #32]	; (8003e0c <__NVIC_SetPriority+0x50>)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	3b04      	subs	r3, #4
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	761a      	strb	r2, [r3, #24]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e14:	2100      	movs	r1, #0
 8003e16:	f06f 0004 	mvn.w	r0, #4
 8003e1a:	f7ff ffcf 	bl	8003dbc <__NVIC_SetPriority>
#endif
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e2a:	f3ef 8305 	mrs	r3, IPSR
 8003e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e36:	f06f 0305 	mvn.w	r3, #5
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	e00c      	b.n	8003e58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <osKernelInitialize+0x44>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <osKernelInitialize+0x44>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	607b      	str	r3, [r7, #4]
 8003e50:	e002      	b.n	8003e58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	200002b4 	.word	0x200002b4

08003e6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e72:	f3ef 8305 	mrs	r3, IPSR
 8003e76:	603b      	str	r3, [r7, #0]
  return(result);
 8003e78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e7e:	f06f 0305 	mvn.w	r3, #5
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	e010      	b.n	8003ea8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <osKernelStart+0x48>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d109      	bne.n	8003ea2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e8e:	f7ff ffbf 	bl	8003e10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <osKernelStart+0x48>)
 8003e94:	2202      	movs	r2, #2
 8003e96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e98:	f001 f912 	bl	80050c0 <vTaskStartScheduler>
      stat = osOK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	e002      	b.n	8003ea8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ea6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ea8:	687b      	ldr	r3, [r7, #4]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200002b4 	.word	0x200002b4

08003eb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af04      	add	r7, sp, #16
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ec8:	f3ef 8305 	mrs	r3, IPSR
 8003ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8003ece:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d17e      	bne.n	8003fd2 <osThreadNew+0x11a>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d07b      	beq.n	8003fd2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ede:	2318      	movs	r3, #24
 8003ee0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d045      	beq.n	8003f7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <osThreadNew+0x48>
        name = attr->name;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <osThreadNew+0x6e>
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b38      	cmp	r3, #56	; 0x38
 8003f18:	d805      	bhi.n	8003f26 <osThreadNew+0x6e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <osThreadNew+0x72>
        return (NULL);
 8003f26:	2300      	movs	r3, #0
 8003f28:	e054      	b.n	8003fd4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00e      	beq.n	8003f60 <osThreadNew+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b5b      	cmp	r3, #91	; 0x5b
 8003f48:	d90a      	bls.n	8003f60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <osThreadNew+0xa8>
        mem = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e010      	b.n	8003f82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10c      	bne.n	8003f82 <osThreadNew+0xca>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <osThreadNew+0xca>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <osThreadNew+0xca>
          mem = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e001      	b.n	8003f82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d110      	bne.n	8003faa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f90:	9202      	str	r2, [sp, #8]
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 feb8 	bl	8004d14 <xTaskCreateStatic>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	e013      	b.n	8003fd2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d110      	bne.n	8003fd2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 ff03 	bl	8004dce <xTaskCreate>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <osThreadNew+0x11a>
            hTask = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fd2:	693b      	ldr	r3, [r7, #16]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3728      	adds	r7, #40	; 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe4:	f3ef 8305 	mrs	r3, IPSR
 8003fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <osDelay+0x1c>
    stat = osErrorISR;
 8003ff0:	f06f 0305 	mvn.w	r3, #5
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e007      	b.n	8004008 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 f828 	bl	8005058 <vTaskDelay>
    }
  }

  return (stat);
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004012:	b580      	push	{r7, lr}
 8004014:	b08a      	sub	sp, #40	; 0x28
 8004016:	af02      	add	r7, sp, #8
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004022:	f3ef 8305 	mrs	r3, IPSR
 8004026:	613b      	str	r3, [r7, #16]
  return(result);
 8004028:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800402a:	2b00      	cmp	r3, #0
 800402c:	d15f      	bne.n	80040ee <osMessageQueueNew+0xdc>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05c      	beq.n	80040ee <osMessageQueueNew+0xdc>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d059      	beq.n	80040ee <osMessageQueueNew+0xdc>
    mem = -1;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800403e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d029      	beq.n	800409a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d012      	beq.n	8004074 <osMessageQueueNew+0x62>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b4f      	cmp	r3, #79	; 0x4f
 8004054:	d90e      	bls.n	8004074 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <osMessageQueueNew+0x62>
        mem = 1;
 800406e:	2301      	movs	r3, #1
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e014      	b.n	800409e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d110      	bne.n	800409e <osMessageQueueNew+0x8c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10c      	bne.n	800409e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004088:	2b00      	cmp	r3, #0
 800408a:	d108      	bne.n	800409e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <osMessageQueueNew+0x8c>
          mem = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	e001      	b.n	800409e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10b      	bne.n	80040bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2100      	movs	r1, #0
 80040ae:	9100      	str	r1, [sp, #0]
 80040b0:	68b9      	ldr	r1, [r7, #8]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f970 	bl	8004398 <xQueueGenericCreateStatic>
 80040b8:	61f8      	str	r0, [r7, #28]
 80040ba:	e008      	b.n	80040ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80040c2:	2200      	movs	r2, #0
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f9de 	bl	8004488 <xQueueGenericCreate>
 80040cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	e001      	b.n	80040e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	69f8      	ldr	r0, [r7, #28]
 80040ea:	f000 fdb5 	bl	8004c58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80040ee:	69fb      	ldr	r3, [r7, #28]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <vApplicationGetIdleTaskMemory+0x2c>)
 8004108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a06      	ldr	r2, [pc, #24]	; (8004128 <vApplicationGetIdleTaskMemory+0x30>)
 800410e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	200002b8 	.word	0x200002b8
 8004128:	20000314 	.word	0x20000314

0800412c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a07      	ldr	r2, [pc, #28]	; (8004158 <vApplicationGetTimerTaskMemory+0x2c>)
 800413c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4a06      	ldr	r2, [pc, #24]	; (800415c <vApplicationGetTimerTaskMemory+0x30>)
 8004142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800414a:	601a      	str	r2, [r3, #0]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000514 	.word	0x20000514
 800415c:	20000570 	.word	0x20000570

08004160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0208 	add.w	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0208 	add.w	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f103 0208 	add.w	r2, r3, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004218:	d103      	bne.n	8004222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e00c      	b.n	800423c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3308      	adds	r3, #8
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e002      	b.n	8004230 <vListInsert+0x2e>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	429a      	cmp	r2, r3
 800423a:	d2f6      	bcs.n	800422a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6852      	ldr	r2, [r2, #4]
 8004294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d103      	bne.n	80042a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042f2:	f002 f887 	bl	8006404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004302:	fb01 f303 	mul.w	r3, r1, r3
 8004306:	441a      	add	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	3b01      	subs	r3, #1
 8004324:	68f9      	ldr	r1, [r7, #12]
 8004326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	441a      	add	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	22ff      	movs	r2, #255	; 0xff
 8004336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d114      	bne.n	8004372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3310      	adds	r3, #16
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f93d 	bl	80055d4 <xTaskRemoveFromEventList>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d012      	beq.n	8004386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <xQueueGenericReset+0xcc>)
 8004362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	e009      	b.n	8004386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3310      	adds	r3, #16
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fef2 	bl	8004160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff feed 	bl	8004160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004386:	f002 f86d 	bl	8006464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <xQueueGenericCreateStatic+0x52>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <xQueueGenericCreateStatic+0x56>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <xQueueGenericCreateStatic+0x58>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	623b      	str	r3, [r7, #32]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xQueueGenericCreateStatic+0x7e>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <xQueueGenericCreateStatic+0x82>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueGenericCreateStatic+0x84>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	61fb      	str	r3, [r7, #28]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004436:	2350      	movs	r3, #80	; 0x50
 8004438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b50      	cmp	r3, #80	; 0x50
 800443e:	d00a      	beq.n	8004456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
}
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800446a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f83f 	bl	80044fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004480:	4618      	mov	r0, r3
 8004482:	3730      	adds	r7, #48	; 0x30
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	613b      	str	r3, [r7, #16]
}
 80044ae:	bf00      	nop
 80044b0:	e7fe      	b.n	80044b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3350      	adds	r3, #80	; 0x50
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 f8c1 	bl	8006648 <pvPortMalloc>
 80044c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	3350      	adds	r3, #80	; 0x50
 80044d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044e0:	79fa      	ldrb	r2, [r7, #7]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f805 	bl	80044fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044f2:	69bb      	ldr	r3, [r7, #24]
	}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e002      	b.n	800451e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800452a:	2101      	movs	r1, #1
 800452c:	69b8      	ldr	r0, [r7, #24]
 800452e:	f7ff fecb 	bl	80042c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueGenericSend+0x32>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <xQueueGenericSend+0x40>
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <xQueueGenericSend+0x44>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <xQueueGenericSend+0x46>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <xQueueGenericSend+0x60>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d103      	bne.n	80045b2 <xQueueGenericSend+0x6e>
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <xQueueGenericSend+0x72>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueGenericSend+0x74>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	623b      	str	r3, [r7, #32]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045d2:	f001 f9bd 	bl	8005950 <xTaskGetSchedulerState>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <xQueueGenericSend+0x9e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <xQueueGenericSend+0xa2>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <xQueueGenericSend+0xa4>
 80045e6:	2300      	movs	r3, #0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <xQueueGenericSend+0xbe>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	61fb      	str	r3, [r7, #28]
}
 80045fe:	bf00      	nop
 8004600:	e7fe      	b.n	8004600 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004602:	f001 feff 	bl	8006404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <xQueueGenericSend+0xd4>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d129      	bne.n	800466c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800461e:	f000 fa0b 	bl	8004a38 <prvCopyDataToQueue>
 8004622:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	3324      	adds	r3, #36	; 0x24
 8004630:	4618      	mov	r0, r3
 8004632:	f000 ffcf 	bl	80055d4 <xTaskRemoveFromEventList>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800463c:	4b3f      	ldr	r3, [pc, #252]	; (800473c <xQueueGenericSend+0x1f8>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	e00a      	b.n	8004664 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d007      	beq.n	8004664 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004654:	4b39      	ldr	r3, [pc, #228]	; (800473c <xQueueGenericSend+0x1f8>)
 8004656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004664:	f001 fefe 	bl	8006464 <vPortExitCritical>
				return pdPASS;
 8004668:	2301      	movs	r3, #1
 800466a:	e063      	b.n	8004734 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004672:	f001 fef7 	bl	8006464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004676:	2300      	movs	r3, #0
 8004678:	e05c      	b.n	8004734 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4618      	mov	r0, r3
 8004686:	f001 f809 	bl	800569c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468a:	2301      	movs	r3, #1
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800468e:	f001 fee9 	bl	8006464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004692:	f000 fd7b 	bl	800518c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004696:	f001 feb5 	bl	8006404 <vPortEnterCritical>
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a0:	b25b      	sxtb	r3, r3
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a6:	d103      	bne.n	80046b0 <xQueueGenericSend+0x16c>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b6:	b25b      	sxtb	r3, r3
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046bc:	d103      	bne.n	80046c6 <xQueueGenericSend+0x182>
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c6:	f001 fecd 	bl	8006464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ca:	1d3a      	adds	r2, r7, #4
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fff8 	bl	80056c8 <xTaskCheckForTimeOut>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d124      	bne.n	8004728 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e0:	f000 faa2 	bl	8004c28 <prvIsQueueFull>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	3310      	adds	r3, #16
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 ff1e 	bl	8005534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046fa:	f000 fa2d 	bl	8004b58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046fe:	f000 fd53 	bl	80051a8 <xTaskResumeAll>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f af7c 	bne.w	8004602 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <xQueueGenericSend+0x1f8>)
 800470c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	e772      	b.n	8004602 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800471c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800471e:	f000 fa1b 	bl	8004b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004722:	f000 fd41 	bl	80051a8 <xTaskResumeAll>
 8004726:	e76c      	b.n	8004602 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800472a:	f000 fa15 	bl	8004b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800472e:	f000 fd3b 	bl	80051a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004732:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004734:	4618      	mov	r0, r3
 8004736:	3738      	adds	r7, #56	; 0x38
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b090      	sub	sp, #64	; 0x40
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <xQueueGenericSendFromISR+0x3c>
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <xQueueGenericSendFromISR+0x40>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <xQueueGenericSendFromISR+0x42>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d103      	bne.n	80047aa <xQueueGenericSendFromISR+0x6a>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <xQueueGenericSendFromISR+0x6e>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <xQueueGenericSendFromISR+0x70>
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	623b      	str	r3, [r7, #32]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ca:	f001 fefd 	bl	80065c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047ce:	f3ef 8211 	mrs	r2, BASEPRI
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	61fa      	str	r2, [r7, #28]
 80047e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <xQueueGenericSendFromISR+0xbc>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d12f      	bne.n	800485c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004812:	f000 f911 	bl	8004a38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004816:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481e:	d112      	bne.n	8004846 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d016      	beq.n	8004856 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	3324      	adds	r3, #36	; 0x24
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fed1 	bl	80055d4 <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00e      	beq.n	8004856 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e007      	b.n	8004856 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004846:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800484a:	3301      	adds	r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	b25a      	sxtb	r2, r3
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004856:	2301      	movs	r3, #1
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800485a:	e001      	b.n	8004860 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800485c:	2300      	movs	r3, #0
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800486a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800486e:	4618      	mov	r0, r3
 8004870:	3740      	adds	r7, #64	; 0x40
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <xQueueReceive+0x30>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	623b      	str	r3, [r7, #32]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <xQueueReceive+0x3e>
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <xQueueReceive+0x42>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <xQueueReceive+0x44>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueReceive+0x5e>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	61fb      	str	r3, [r7, #28]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048d6:	f001 f83b 	bl	8005950 <xTaskGetSchedulerState>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <xQueueReceive+0x6e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <xQueueReceive+0x72>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <xQueueReceive+0x74>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueReceive+0x8e>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	61bb      	str	r3, [r7, #24]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004906:	f001 fd7d 	bl	8006404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01f      	beq.n	8004956 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491a:	f000 f8f7 	bl	8004b0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1e5a      	subs	r2, r3, #1
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00f      	beq.n	800494e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	3310      	adds	r3, #16
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fe4e 	bl	80055d4 <xTaskRemoveFromEventList>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800493e:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <xQueueReceive+0x1bc>)
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800494e:	f001 fd89 	bl	8006464 <vPortExitCritical>
				return pdPASS;
 8004952:	2301      	movs	r3, #1
 8004954:	e069      	b.n	8004a2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d103      	bne.n	8004964 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800495c:	f001 fd82 	bl	8006464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004960:	2300      	movs	r3, #0
 8004962:	e062      	b.n	8004a2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800496a:	f107 0310 	add.w	r3, r7, #16
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fe94 	bl	800569c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004978:	f001 fd74 	bl	8006464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800497c:	f000 fc06 	bl	800518c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004980:	f001 fd40 	bl	8006404 <vPortEnterCritical>
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800498a:	b25b      	sxtb	r3, r3
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004990:	d103      	bne.n	800499a <xQueueReceive+0x122>
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a6:	d103      	bne.n	80049b0 <xQueueReceive+0x138>
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	f001 fd58 	bl	8006464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b4:	1d3a      	adds	r2, r7, #4
 80049b6:	f107 0310 	add.w	r3, r7, #16
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fe83 	bl	80056c8 <xTaskCheckForTimeOut>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d123      	bne.n	8004a10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ca:	f000 f917 	bl	8004bfc <prvIsQueueEmpty>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d017      	beq.n	8004a04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	3324      	adds	r3, #36	; 0x24
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fda9 	bl	8005534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e4:	f000 f8b8 	bl	8004b58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049e8:	f000 fbde 	bl	80051a8 <xTaskResumeAll>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d189      	bne.n	8004906 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <xQueueReceive+0x1bc>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	e780      	b.n	8004906 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a06:	f000 f8a7 	bl	8004b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a0a:	f000 fbcd 	bl	80051a8 <xTaskResumeAll>
 8004a0e:	e77a      	b.n	8004906 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a12:	f000 f8a1 	bl	8004b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a16:	f000 fbc7 	bl	80051a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1c:	f000 f8ee 	bl	8004bfc <prvIsQueueEmpty>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f43f af6f 	beq.w	8004906 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3730      	adds	r7, #48	; 0x30
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d14d      	bne.n	8004afa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ff92 	bl	800598c <xTaskPriorityDisinherit>
 8004a68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e043      	b.n	8004afa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d119      	bne.n	8004aac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6858      	ldr	r0, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	461a      	mov	r2, r3
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	f001 fff4 	bl	8006a70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d32b      	bcc.n	8004afa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	e026      	b.n	8004afa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68d8      	ldr	r0, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	f001 ffda 	bl	8006a70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d207      	bcs.n	8004ae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	441a      	add	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d105      	bne.n	8004afa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d303      	bcc.n	8004b40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68d9      	ldr	r1, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6838      	ldr	r0, [r7, #0]
 8004b4c:	f001 ff90 	bl	8006a70 <memcpy>
	}
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b60:	f001 fc50 	bl	8006404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b6c:	e011      	b.n	8004b92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d012      	beq.n	8004b9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3324      	adds	r3, #36	; 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fd2a 	bl	80055d4 <xTaskRemoveFromEventList>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b86:	f000 fe01 	bl	800578c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dce9      	bgt.n	8004b6e <prvUnlockQueue+0x16>
 8004b9a:	e000      	b.n	8004b9e <prvUnlockQueue+0x46>
					break;
 8004b9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ba6:	f001 fc5d 	bl	8006464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004baa:	f001 fc2b 	bl	8006404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bb6:	e011      	b.n	8004bdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d012      	beq.n	8004be6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3310      	adds	r3, #16
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fd05 	bl	80055d4 <xTaskRemoveFromEventList>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bd0:	f000 fddc 	bl	800578c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	dce9      	bgt.n	8004bb8 <prvUnlockQueue+0x60>
 8004be4:	e000      	b.n	8004be8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004be6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	22ff      	movs	r2, #255	; 0xff
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004bf0:	f001 fc38 	bl	8006464 <vPortExitCritical>
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c04:	f001 fbfe 	bl	8006404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e001      	b.n	8004c1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c1a:	f001 fc23 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c30:	f001 fbe8 	bl	8006404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d102      	bne.n	8004c46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e001      	b.n	8004c4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c4a:	f001 fc0b 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e014      	b.n	8004c92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <vQueueAddToRegistry+0x50>)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c74:	490c      	ldr	r1, [pc, #48]	; (8004ca8 <vQueueAddToRegistry+0x50>)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <vQueueAddToRegistry+0x50>)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c8a:	e006      	b.n	8004c9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b07      	cmp	r3, #7
 8004c96:	d9e7      	bls.n	8004c68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000970 	.word	0x20000970

08004cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cbc:	f001 fba2 	bl	8006404 <vPortEnterCritical>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cc6:	b25b      	sxtb	r3, r3
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ccc:	d103      	bne.n	8004cd6 <vQueueWaitForMessageRestricted+0x2a>
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce2:	d103      	bne.n	8004cec <vQueueWaitForMessageRestricted+0x40>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cec:	f001 fbba 	bl	8006464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fc3b 	bl	800557c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d06:	6978      	ldr	r0, [r7, #20]
 8004d08:	f7ff ff26 	bl	8004b58 <prvUnlockQueue>
	}
 8004d0c:	bf00      	nop
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	; 0x38
 8004d18:	af04      	add	r7, sp, #16
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	623b      	str	r3, [r7, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xTaskCreateStatic+0x46>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61fb      	str	r3, [r7, #28]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d5a:	235c      	movs	r3, #92	; 0x5c
 8004d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b5c      	cmp	r3, #92	; 0x5c
 8004d62:	d00a      	beq.n	8004d7a <xTaskCreateStatic+0x66>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	61bb      	str	r3, [r7, #24]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01e      	beq.n	8004dc0 <xTaskCreateStatic+0xac>
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9303      	str	r3, [sp, #12]
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	9302      	str	r3, [sp, #8]
 8004da2:	f107 0314 	add.w	r3, r7, #20
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 f850 	bl	8004e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dba:	f000 f8dd 	bl	8004f78 <prvAddNewTaskToReadyList>
 8004dbe:	e001      	b.n	8004dc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dc4:	697b      	ldr	r3, [r7, #20]
	}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3728      	adds	r7, #40	; 0x28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b08c      	sub	sp, #48	; 0x30
 8004dd2:	af04      	add	r7, sp, #16
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fc30 	bl	8006648 <pvPortMalloc>
 8004de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00e      	beq.n	8004e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004df0:	205c      	movs	r0, #92	; 0x5c
 8004df2:	f001 fc29 	bl	8006648 <pvPortMalloc>
 8004df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
 8004e04:	e005      	b.n	8004e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e06:	6978      	ldr	r0, [r7, #20]
 8004e08:	f001 fcea 	bl	80067e0 <vPortFree>
 8004e0c:	e001      	b.n	8004e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d017      	beq.n	8004e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	2300      	movs	r3, #0
 8004e24:	9303      	str	r3, [sp, #12]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	9302      	str	r3, [sp, #8]
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f80e 	bl	8004e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e3c:	69f8      	ldr	r0, [r7, #28]
 8004e3e:	f000 f89b 	bl	8004f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e002      	b.n	8004e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	21a5      	movs	r1, #165	; 0xa5
 8004e72:	f001 fe0b 	bl	8006a8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e80:	3b01      	subs	r3, #1
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	617b      	str	r3, [r7, #20]
}
 8004eac:	bf00      	nop
 8004eae:	e7fe      	b.n	8004eae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01f      	beq.n	8004ef6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	e012      	b.n	8004ee2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	7819      	ldrb	r1, [r3, #0]
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	3334      	adds	r3, #52	; 0x34
 8004ecc:	460a      	mov	r2, r1
 8004ece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b0f      	cmp	r3, #15
 8004ee6:	d9e9      	bls.n	8004ebc <prvInitialiseNewTask+0x64>
 8004ee8:	e000      	b.n	8004eec <prvInitialiseNewTask+0x94>
			{
				break;
 8004eea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef4:	e003      	b.n	8004efe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	2b37      	cmp	r3, #55	; 0x37
 8004f02:	d901      	bls.n	8004f08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f04:	2337      	movs	r3, #55	; 0x37
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2200      	movs	r2, #0
 8004f18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff f93e 	bl	80041a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	3318      	adds	r3, #24
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff f939 	bl	80041a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2200      	movs	r2, #0
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	69b8      	ldr	r0, [r7, #24]
 8004f58:	f001 f928 	bl	80061ac <pxPortInitialiseStack>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
	...

08004f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f80:	f001 fa40 	bl	8006404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f84:	4b2d      	ldr	r3, [pc, #180]	; (800503c <prvAddNewTaskToReadyList+0xc4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <prvAddNewTaskToReadyList+0xc4>)
 8004f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f8e:	4b2c      	ldr	r3, [pc, #176]	; (8005040 <prvAddNewTaskToReadyList+0xc8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f96:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <prvAddNewTaskToReadyList+0xc8>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <prvAddNewTaskToReadyList+0xc4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d110      	bne.n	8004fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fa4:	f000 fc16 	bl	80057d4 <prvInitialiseTaskLists>
 8004fa8:	e00d      	b.n	8004fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <prvAddNewTaskToReadyList+0xcc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <prvAddNewTaskToReadyList+0xc8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d802      	bhi.n	8004fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <prvAddNewTaskToReadyList+0xc8>)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <prvAddNewTaskToReadyList+0xd0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <prvAddNewTaskToReadyList+0xd0>)
 8004fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <prvAddNewTaskToReadyList+0xd0>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <prvAddNewTaskToReadyList+0xd4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d903      	bls.n	8004fec <prvAddNewTaskToReadyList+0x74>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <prvAddNewTaskToReadyList+0xd4>)
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <prvAddNewTaskToReadyList+0xd8>)
 8004ffa:	441a      	add	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7ff f8d9 	bl	80041ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005008:	f001 fa2c 	bl	8006464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800500c:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <prvAddNewTaskToReadyList+0xcc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00e      	beq.n	8005032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <prvAddNewTaskToReadyList+0xc8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	429a      	cmp	r2, r3
 8005020:	d207      	bcs.n	8005032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <prvAddNewTaskToReadyList+0xdc>)
 8005024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000e84 	.word	0x20000e84
 8005040:	200009b0 	.word	0x200009b0
 8005044:	20000e90 	.word	0x20000e90
 8005048:	20000ea0 	.word	0x20000ea0
 800504c:	20000e8c 	.word	0x20000e8c
 8005050:	200009b4 	.word	0x200009b4
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <vTaskDelay+0x60>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <vTaskDelay+0x30>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60bb      	str	r3, [r7, #8]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005088:	f000 f880 	bl	800518c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fcea 	bl	8005a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005094:	f000 f888 	bl	80051a8 <xTaskResumeAll>
 8005098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <vTaskDelay+0x64>)
 80050a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000eac 	.word	0x20000eac
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ce:	463a      	mov	r2, r7
 80050d0:	1d39      	adds	r1, r7, #4
 80050d2:	f107 0308 	add.w	r3, r7, #8
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f80e 	bl	80040f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	9202      	str	r2, [sp, #8]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	460a      	mov	r2, r1
 80050ee:	4921      	ldr	r1, [pc, #132]	; (8005174 <vTaskStartScheduler+0xb4>)
 80050f0:	4821      	ldr	r0, [pc, #132]	; (8005178 <vTaskStartScheduler+0xb8>)
 80050f2:	f7ff fe0f 	bl	8004d14 <xTaskCreateStatic>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a20      	ldr	r2, [pc, #128]	; (800517c <vTaskStartScheduler+0xbc>)
 80050fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <vTaskStartScheduler+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e001      	b.n	800510e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d102      	bne.n	800511a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005114:	f000 fcfc 	bl	8005b10 <xTimerCreateTimerTask>
 8005118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d116      	bne.n	800514e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005134:	4b12      	ldr	r3, [pc, #72]	; (8005180 <vTaskStartScheduler+0xc0>)
 8005136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800513a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <vTaskStartScheduler+0xc4>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <vTaskStartScheduler+0xc8>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005148:	f001 f8ba 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800514c:	e00e      	b.n	800516c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005154:	d10a      	bne.n	800516c <vTaskStartScheduler+0xac>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <vTaskStartScheduler+0xaa>
}
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	0800b3c0 	.word	0x0800b3c0
 8005178:	080057a5 	.word	0x080057a5
 800517c:	20000ea8 	.word	0x20000ea8
 8005180:	20000ea4 	.word	0x20000ea4
 8005184:	20000e90 	.word	0x20000e90
 8005188:	20000e88 	.word	0x20000e88

0800518c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <vTaskSuspendAll+0x18>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	4a03      	ldr	r2, [pc, #12]	; (80051a4 <vTaskSuspendAll+0x18>)
 8005198:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	20000eac 	.word	0x20000eac

080051a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051b6:	4b42      	ldr	r3, [pc, #264]	; (80052c0 <xTaskResumeAll+0x118>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	603b      	str	r3, [r7, #0]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051d4:	f001 f916 	bl	8006404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051d8:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <xTaskResumeAll+0x118>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3b01      	subs	r3, #1
 80051de:	4a38      	ldr	r2, [pc, #224]	; (80052c0 <xTaskResumeAll+0x118>)
 80051e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <xTaskResumeAll+0x118>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d162      	bne.n	80052b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051ea:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <xTaskResumeAll+0x11c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d05e      	beq.n	80052b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051f2:	e02f      	b.n	8005254 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051f4:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <xTaskResumeAll+0x120>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3318      	adds	r3, #24
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f837 	bl	8004274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff f832 	bl	8004274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <xTaskResumeAll+0x124>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d903      	bls.n	8005224 <xTaskResumeAll+0x7c>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <xTaskResumeAll+0x124>)
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <xTaskResumeAll+0x128>)
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fe ffbd 	bl	80041ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	4b23      	ldr	r3, [pc, #140]	; (80052d4 <xTaskResumeAll+0x12c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <xTaskResumeAll+0x130>)
 8005250:	2201      	movs	r2, #1
 8005252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005254:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <xTaskResumeAll+0x120>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1cb      	bne.n	80051f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005262:	f000 fb55 	bl	8005910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005266:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <xTaskResumeAll+0x134>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d010      	beq.n	8005294 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005272:	f000 f847 	bl	8005304 <xTaskIncrementTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <xTaskResumeAll+0x130>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3b01      	subs	r3, #1
 8005286:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f1      	bne.n	8005272 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <xTaskResumeAll+0x134>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <xTaskResumeAll+0x130>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <xTaskResumeAll+0x138>)
 80052a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052b0:	f001 f8d8 	bl	8006464 <vPortExitCritical>

	return xAlreadyYielded;
 80052b4:	68bb      	ldr	r3, [r7, #8]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000eac 	.word	0x20000eac
 80052c4:	20000e84 	.word	0x20000e84
 80052c8:	20000e44 	.word	0x20000e44
 80052cc:	20000e8c 	.word	0x20000e8c
 80052d0:	200009b4 	.word	0x200009b4
 80052d4:	200009b0 	.word	0x200009b0
 80052d8:	20000e98 	.word	0x20000e98
 80052dc:	20000e94 	.word	0x20000e94
 80052e0:	e000ed04 	.word	0xe000ed04

080052e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <xTaskGetTickCount+0x1c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052f0:	687b      	ldr	r3, [r7, #4]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000e88 	.word	0x20000e88

08005304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530e:	4b4f      	ldr	r3, [pc, #316]	; (800544c <xTaskIncrementTick+0x148>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	f040 808f 	bne.w	8005436 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005318:	4b4d      	ldr	r3, [pc, #308]	; (8005450 <xTaskIncrementTick+0x14c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005320:	4a4b      	ldr	r2, [pc, #300]	; (8005450 <xTaskIncrementTick+0x14c>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d120      	bne.n	800536e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800532c:	4b49      	ldr	r3, [pc, #292]	; (8005454 <xTaskIncrementTick+0x150>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <xTaskIncrementTick+0x48>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	603b      	str	r3, [r7, #0]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <xTaskIncrementTick+0x46>
 800534c:	4b41      	ldr	r3, [pc, #260]	; (8005454 <xTaskIncrementTick+0x150>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	4b41      	ldr	r3, [pc, #260]	; (8005458 <xTaskIncrementTick+0x154>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <xTaskIncrementTick+0x150>)
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4a3f      	ldr	r2, [pc, #252]	; (8005458 <xTaskIncrementTick+0x154>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b3e      	ldr	r3, [pc, #248]	; (800545c <xTaskIncrementTick+0x158>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3301      	adds	r3, #1
 8005366:	4a3d      	ldr	r2, [pc, #244]	; (800545c <xTaskIncrementTick+0x158>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	f000 fad1 	bl	8005910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800536e:	4b3c      	ldr	r3, [pc, #240]	; (8005460 <xTaskIncrementTick+0x15c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d349      	bcc.n	800540c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005378:	4b36      	ldr	r3, [pc, #216]	; (8005454 <xTaskIncrementTick+0x150>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005382:	4b37      	ldr	r3, [pc, #220]	; (8005460 <xTaskIncrementTick+0x15c>)
 8005384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005388:	601a      	str	r2, [r3, #0]
					break;
 800538a:	e03f      	b.n	800540c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800538c:	4b31      	ldr	r3, [pc, #196]	; (8005454 <xTaskIncrementTick+0x150>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d203      	bcs.n	80053ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053a4:	4a2e      	ldr	r2, [pc, #184]	; (8005460 <xTaskIncrementTick+0x15c>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053aa:	e02f      	b.n	800540c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe ff5f 	bl	8004274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3318      	adds	r3, #24
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe ff56 	bl	8004274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	4b25      	ldr	r3, [pc, #148]	; (8005464 <xTaskIncrementTick+0x160>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d903      	bls.n	80053dc <xTaskIncrementTick+0xd8>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a22      	ldr	r2, [pc, #136]	; (8005464 <xTaskIncrementTick+0x160>)
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <xTaskIncrementTick+0x164>)
 80053ea:	441a      	add	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7fe fee1 	bl	80041ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <xTaskIncrementTick+0x168>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	429a      	cmp	r2, r3
 8005404:	d3b8      	bcc.n	8005378 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800540a:	e7b5      	b.n	8005378 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800540c:	4b17      	ldr	r3, [pc, #92]	; (800546c <xTaskIncrementTick+0x168>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005412:	4915      	ldr	r1, [pc, #84]	; (8005468 <xTaskIncrementTick+0x164>)
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d901      	bls.n	8005428 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <xTaskIncrementTick+0x16c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e004      	b.n	8005440 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005436:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <xTaskIncrementTick+0x170>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3301      	adds	r3, #1
 800543c:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <xTaskIncrementTick+0x170>)
 800543e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005440:	697b      	ldr	r3, [r7, #20]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000eac 	.word	0x20000eac
 8005450:	20000e88 	.word	0x20000e88
 8005454:	20000e3c 	.word	0x20000e3c
 8005458:	20000e40 	.word	0x20000e40
 800545c:	20000e9c 	.word	0x20000e9c
 8005460:	20000ea4 	.word	0x20000ea4
 8005464:	20000e8c 	.word	0x20000e8c
 8005468:	200009b4 	.word	0x200009b4
 800546c:	200009b0 	.word	0x200009b0
 8005470:	20000e98 	.word	0x20000e98
 8005474:	20000e94 	.word	0x20000e94

08005478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800547e:	4b28      	ldr	r3, [pc, #160]	; (8005520 <vTaskSwitchContext+0xa8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <vTaskSwitchContext+0xac>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800548c:	e041      	b.n	8005512 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800548e:	4b25      	ldr	r3, [pc, #148]	; (8005524 <vTaskSwitchContext+0xac>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005494:	4b24      	ldr	r3, [pc, #144]	; (8005528 <vTaskSwitchContext+0xb0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e010      	b.n	80054be <vTaskSwitchContext+0x46>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	607b      	str	r3, [r7, #4]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vTaskSwitchContext+0x3e>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	491b      	ldr	r1, [pc, #108]	; (800552c <vTaskSwitchContext+0xb4>)
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0e4      	beq.n	800549c <vTaskSwitchContext+0x24>
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4a13      	ldr	r2, [pc, #76]	; (800552c <vTaskSwitchContext+0xb4>)
 80054de:	4413      	add	r3, r2
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	3308      	adds	r3, #8
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d104      	bne.n	8005502 <vTaskSwitchContext+0x8a>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <vTaskSwitchContext+0xb8>)
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4a06      	ldr	r2, [pc, #24]	; (8005528 <vTaskSwitchContext+0xb0>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6013      	str	r3, [r2, #0]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20000eac 	.word	0x20000eac
 8005524:	20000e98 	.word	0x20000e98
 8005528:	20000e8c 	.word	0x20000e8c
 800552c:	200009b4 	.word	0x200009b4
 8005530:	200009b0 	.word	0x200009b0

08005534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <vTaskPlaceOnEventList+0x44>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3318      	adds	r3, #24
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fe fe4d 	bl	8004202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005568:	2101      	movs	r1, #1
 800556a:	6838      	ldr	r0, [r7, #0]
 800556c:	f000 fa7c 	bl	8005a68 <prvAddCurrentTaskToDelayedList>
}
 8005570:	bf00      	nop
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200009b0 	.word	0x200009b0

0800557c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	617b      	str	r3, [r7, #20]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3318      	adds	r3, #24
 80055aa:	4619      	mov	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7fe fe04 	bl	80041ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	68b8      	ldr	r0, [r7, #8]
 80055c2:	f000 fa51 	bl	8005a68 <prvAddCurrentTaskToDelayedList>
	}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200009b0 	.word	0x200009b0

080055d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3318      	adds	r3, #24
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fe35 	bl	8004274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <xTaskRemoveFromEventList+0xb0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11d      	bne.n	800564e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	3304      	adds	r3, #4
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fe2c 	bl	8004274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <xTaskRemoveFromEventList+0xb4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d903      	bls.n	8005630 <xTaskRemoveFromEventList+0x5c>
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	4a16      	ldr	r2, [pc, #88]	; (8005688 <xTaskRemoveFromEventList+0xb4>)
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4a13      	ldr	r2, [pc, #76]	; (800568c <xTaskRemoveFromEventList+0xb8>)
 800563e:	441a      	add	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fe fdb7 	bl	80041ba <vListInsertEnd>
 800564c:	e005      	b.n	800565a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	3318      	adds	r3, #24
 8005652:	4619      	mov	r1, r3
 8005654:	480e      	ldr	r0, [pc, #56]	; (8005690 <xTaskRemoveFromEventList+0xbc>)
 8005656:	f7fe fdb0 	bl	80041ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <xTaskRemoveFromEventList+0xc0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	429a      	cmp	r2, r3
 8005666:	d905      	bls.n	8005674 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005668:	2301      	movs	r3, #1
 800566a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <xTaskRemoveFromEventList+0xc4>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e001      	b.n	8005678 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005678:	697b      	ldr	r3, [r7, #20]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000eac 	.word	0x20000eac
 8005688:	20000e8c 	.word	0x20000e8c
 800568c:	200009b4 	.word	0x200009b4
 8005690:	20000e44 	.word	0x20000e44
 8005694:	200009b0 	.word	0x200009b0
 8005698:	20000e98 	.word	0x20000e98

0800569c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <vTaskInternalSetTimeOutState+0x24>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <vTaskInternalSetTimeOutState+0x28>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	605a      	str	r2, [r3, #4]
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20000e9c 	.word	0x20000e9c
 80056c4:	20000e88 	.word	0x20000e88

080056c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	613b      	str	r3, [r7, #16]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	60fb      	str	r3, [r7, #12]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800570a:	f000 fe7b 	bl	8006404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800570e:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <xTaskCheckForTimeOut+0xbc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005726:	d102      	bne.n	800572e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	e023      	b.n	8005776 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <xTaskCheckForTimeOut+0xc0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d007      	beq.n	800574a <xTaskCheckForTimeOut+0x82>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	429a      	cmp	r2, r3
 8005742:	d302      	bcc.n	800574a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005744:	2301      	movs	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e015      	b.n	8005776 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	429a      	cmp	r2, r3
 8005752:	d20b      	bcs.n	800576c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	1ad2      	subs	r2, r2, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff9b 	bl	800569c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	e004      	b.n	8005776 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005772:	2301      	movs	r3, #1
 8005774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005776:	f000 fe75 	bl	8006464 <vPortExitCritical>

	return xReturn;
 800577a:	69fb      	ldr	r3, [r7, #28]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000e88 	.word	0x20000e88
 8005788:	20000e9c 	.word	0x20000e9c

0800578c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <vTaskMissedYield+0x14>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]
}
 8005796:	bf00      	nop
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20000e98 	.word	0x20000e98

080057a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057ac:	f000 f852 	bl	8005854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057b0:	4b06      	ldr	r3, [pc, #24]	; (80057cc <prvIdleTask+0x28>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d9f9      	bls.n	80057ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <prvIdleTask+0x2c>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057c8:	e7f0      	b.n	80057ac <prvIdleTask+0x8>
 80057ca:	bf00      	nop
 80057cc:	200009b4 	.word	0x200009b4
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057da:	2300      	movs	r3, #0
 80057dc:	607b      	str	r3, [r7, #4]
 80057de:	e00c      	b.n	80057fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <prvInitialiseTaskLists+0x60>)
 80057ec:	4413      	add	r3, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fcb6 	bl	8004160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3301      	adds	r3, #1
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b37      	cmp	r3, #55	; 0x37
 80057fe:	d9ef      	bls.n	80057e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005800:	480d      	ldr	r0, [pc, #52]	; (8005838 <prvInitialiseTaskLists+0x64>)
 8005802:	f7fe fcad 	bl	8004160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005806:	480d      	ldr	r0, [pc, #52]	; (800583c <prvInitialiseTaskLists+0x68>)
 8005808:	f7fe fcaa 	bl	8004160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800580c:	480c      	ldr	r0, [pc, #48]	; (8005840 <prvInitialiseTaskLists+0x6c>)
 800580e:	f7fe fca7 	bl	8004160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005812:	480c      	ldr	r0, [pc, #48]	; (8005844 <prvInitialiseTaskLists+0x70>)
 8005814:	f7fe fca4 	bl	8004160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005818:	480b      	ldr	r0, [pc, #44]	; (8005848 <prvInitialiseTaskLists+0x74>)
 800581a:	f7fe fca1 	bl	8004160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800581e:	4b0b      	ldr	r3, [pc, #44]	; (800584c <prvInitialiseTaskLists+0x78>)
 8005820:	4a05      	ldr	r2, [pc, #20]	; (8005838 <prvInitialiseTaskLists+0x64>)
 8005822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <prvInitialiseTaskLists+0x7c>)
 8005826:	4a05      	ldr	r2, [pc, #20]	; (800583c <prvInitialiseTaskLists+0x68>)
 8005828:	601a      	str	r2, [r3, #0]
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200009b4 	.word	0x200009b4
 8005838:	20000e14 	.word	0x20000e14
 800583c:	20000e28 	.word	0x20000e28
 8005840:	20000e44 	.word	0x20000e44
 8005844:	20000e58 	.word	0x20000e58
 8005848:	20000e70 	.word	0x20000e70
 800584c:	20000e3c 	.word	0x20000e3c
 8005850:	20000e40 	.word	0x20000e40

08005854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800585a:	e019      	b.n	8005890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800585c:	f000 fdd2 	bl	8006404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <prvCheckTasksWaitingTermination+0x50>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe fd01 	bl	8004274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <prvCheckTasksWaitingTermination+0x54>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3b01      	subs	r3, #1
 8005878:	4a0b      	ldr	r2, [pc, #44]	; (80058a8 <prvCheckTasksWaitingTermination+0x54>)
 800587a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <prvCheckTasksWaitingTermination+0x58>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3b01      	subs	r3, #1
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <prvCheckTasksWaitingTermination+0x58>)
 8005884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005886:	f000 fded 	bl	8006464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f810 	bl	80058b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <prvCheckTasksWaitingTermination+0x58>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e1      	bne.n	800585c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000e58 	.word	0x20000e58
 80058a8:	20000e84 	.word	0x20000e84
 80058ac:	20000e6c 	.word	0x20000e6c

080058b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 ff8a 	bl	80067e0 <vPortFree>
				vPortFree( pxTCB );
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ff87 	bl	80067e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058d2:	e018      	b.n	8005906 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d103      	bne.n	80058e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 ff7e 	bl	80067e0 <vPortFree>
	}
 80058e4:	e00f      	b.n	8005906 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d00a      	beq.n	8005906 <prvDeleteTCB+0x56>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <prvDeleteTCB+0x54>
	}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <prvResetNextTaskUnblockTime+0x38>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <prvResetNextTaskUnblockTime+0x3c>)
 8005922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005928:	e008      	b.n	800593c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <prvResetNextTaskUnblockTime+0x38>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4a04      	ldr	r2, [pc, #16]	; (800594c <prvResetNextTaskUnblockTime+0x3c>)
 800593a:	6013      	str	r3, [r2, #0]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	20000e3c 	.word	0x20000e3c
 800594c:	20000ea4 	.word	0x20000ea4

08005950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <xTaskGetSchedulerState+0x34>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800595e:	2301      	movs	r3, #1
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	e008      	b.n	8005976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <xTaskGetSchedulerState+0x38>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d102      	bne.n	8005972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800596c:	2302      	movs	r3, #2
 800596e:	607b      	str	r3, [r7, #4]
 8005970:	e001      	b.n	8005976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005972:	2300      	movs	r3, #0
 8005974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005976:	687b      	ldr	r3, [r7, #4]
	}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	20000e90 	.word	0x20000e90
 8005988:	20000eac 	.word	0x20000eac

0800598c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d056      	beq.n	8005a50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059a2:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <xTaskPriorityDisinherit+0xd0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d00a      	beq.n	80059c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60bb      	str	r3, [r7, #8]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e4:	1e5a      	subs	r2, r3, #1
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d02c      	beq.n	8005a50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d128      	bne.n	8005a50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3304      	adds	r3, #4
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fc36 	bl	8004274 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <xTaskPriorityDisinherit+0xd4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d903      	bls.n	8005a30 <xTaskPriorityDisinherit+0xa4>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <xTaskPriorityDisinherit+0xd4>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <xTaskPriorityDisinherit+0xd8>)
 8005a3e:	441a      	add	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f7fe fbb7 	bl	80041ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a50:	697b      	ldr	r3, [r7, #20]
	}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	200009b0 	.word	0x200009b0
 8005a60:	20000e8c 	.word	0x20000e8c
 8005a64:	200009b4 	.word	0x200009b4

08005a68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a72:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a78:	4b20      	ldr	r3, [pc, #128]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fbf8 	bl	8004274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a8a:	d10a      	bne.n	8005aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d007      	beq.n	8005aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a92:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4819      	ldr	r0, [pc, #100]	; (8005b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a9c:	f7fe fb8d 	bl	80041ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005aa0:	e026      	b.n	8005af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d209      	bcs.n	8005ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f7fe fb9b 	bl	8004202 <vListInsert>
}
 8005acc:	e010      	b.n	8005af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7fe fb91 	bl	8004202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d202      	bcs.n	8005af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aea:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	20000e88 	.word	0x20000e88
 8005afc:	200009b0 	.word	0x200009b0
 8005b00:	20000e70 	.word	0x20000e70
 8005b04:	20000e40 	.word	0x20000e40
 8005b08:	20000e3c 	.word	0x20000e3c
 8005b0c:	20000ea4 	.word	0x20000ea4

08005b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b1a:	f000 fb07 	bl	800612c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <xTimerCreateTimerTask+0x80>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d021      	beq.n	8005b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b2e:	1d3a      	adds	r2, r7, #4
 8005b30:	f107 0108 	add.w	r1, r7, #8
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe faf7 	bl	800412c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	9202      	str	r2, [sp, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	2302      	movs	r3, #2
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	460a      	mov	r2, r1
 8005b50:	4910      	ldr	r1, [pc, #64]	; (8005b94 <xTimerCreateTimerTask+0x84>)
 8005b52:	4811      	ldr	r0, [pc, #68]	; (8005b98 <xTimerCreateTimerTask+0x88>)
 8005b54:	f7ff f8de 	bl	8004d14 <xTaskCreateStatic>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <xTimerCreateTimerTask+0x8c>)
 8005b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b5e:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <xTimerCreateTimerTask+0x8c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b66:	2301      	movs	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	613b      	str	r3, [r7, #16]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b86:	697b      	ldr	r3, [r7, #20]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000ee0 	.word	0x20000ee0
 8005b94:	0800b3c8 	.word	0x0800b3c8
 8005b98:	08005cd5 	.word	0x08005cd5
 8005b9c:	20000ee4 	.word	0x20000ee4

08005ba0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <xTimerGenericCommand+0x2e>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	623b      	str	r3, [r7, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005bce:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <xTimerGenericCommand+0x98>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d02a      	beq.n	8005c2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b05      	cmp	r3, #5
 8005be6:	dc18      	bgt.n	8005c1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005be8:	f7ff feb2 	bl	8005950 <xTaskGetSchedulerState>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d109      	bne.n	8005c06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <xTimerGenericCommand+0x98>)
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	f107 0110 	add.w	r1, r7, #16
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfe:	f7fe fca1 	bl	8004544 <xQueueGenericSend>
 8005c02:	6278      	str	r0, [r7, #36]	; 0x24
 8005c04:	e012      	b.n	8005c2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <xTimerGenericCommand+0x98>)
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f107 0110 	add.w	r1, r7, #16
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2200      	movs	r2, #0
 8005c12:	f7fe fc97 	bl	8004544 <xQueueGenericSend>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24
 8005c18:	e008      	b.n	8005c2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <xTimerGenericCommand+0x98>)
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	f107 0110 	add.w	r1, r7, #16
 8005c22:	2300      	movs	r3, #0
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	f7fe fd8b 	bl	8004740 <xQueueGenericSendFromISR>
 8005c2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000ee0 	.word	0x20000ee0

08005c3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c46:	4b22      	ldr	r3, [pc, #136]	; (8005cd0 <prvProcessExpiredTimer+0x94>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe fb0d 	bl	8004274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d022      	beq.n	8005cae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	18d1      	adds	r1, r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	6978      	ldr	r0, [r7, #20]
 8005c76:	f000 f8d1 	bl	8005e1c <prvInsertTimerInActiveList>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01f      	beq.n	8005cc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c80:	2300      	movs	r3, #0
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6978      	ldr	r0, [r7, #20]
 8005c8c:	f7ff ff88 	bl	8005ba0 <xTimerGenericCommand>
 8005c90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d113      	bne.n	8005cc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	6978      	ldr	r0, [r7, #20]
 8005cc6:	4798      	blx	r3
}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000ed8 	.word	0x20000ed8

08005cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cdc:	f107 0308 	add.w	r3, r7, #8
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 f857 	bl	8005d94 <prvGetNextExpireTime>
 8005ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4619      	mov	r1, r3
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f803 	bl	8005cf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cf2:	f000 f8d5 	bl	8005ea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cf6:	e7f1      	b.n	8005cdc <prvTimerTask+0x8>

08005cf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d02:	f7ff fa43 	bl	800518c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d06:	f107 0308 	add.w	r3, r7, #8
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f866 	bl	8005ddc <prvSampleTimeNow>
 8005d10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d130      	bne.n	8005d7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <prvProcessTimerOrBlockTask+0x3c>
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d806      	bhi.n	8005d34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d26:	f7ff fa3f 	bl	80051a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff85 	bl	8005c3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d32:	e024      	b.n	8005d7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d3a:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <prvProcessTimerOrBlockTask+0x90>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <prvProcessTimerOrBlockTask+0x50>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <prvProcessTimerOrBlockTask+0x52>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <prvProcessTimerOrBlockTask+0x94>)
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f7fe ffa7 	bl	8004cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d5e:	f7ff fa23 	bl	80051a8 <xTaskResumeAll>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <prvProcessTimerOrBlockTask+0x98>)
 8005d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	f3bf 8f6f 	isb	sy
}
 8005d78:	e001      	b.n	8005d7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d7a:	f7ff fa15 	bl	80051a8 <xTaskResumeAll>
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000edc 	.word	0x20000edc
 8005d8c:	20000ee0 	.word	0x20000ee0
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <prvGetNextExpireTime+0x44>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <prvGetNextExpireTime+0x16>
 8005da6:	2201      	movs	r2, #1
 8005da8:	e000      	b.n	8005dac <prvGetNextExpireTime+0x18>
 8005daa:	2200      	movs	r2, #0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <prvGetNextExpireTime+0x44>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e001      	b.n	8005dc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	20000ed8 	.word	0x20000ed8

08005ddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005de4:	f7ff fa7e 	bl	80052e4 <xTaskGetTickCount>
 8005de8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvSampleTimeNow+0x3c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d205      	bcs.n	8005e00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005df4:	f000 f936 	bl	8006064 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e002      	b.n	8005e06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e06:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <prvSampleTimeNow+0x3c>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000ee8 	.word	0x20000ee8

08005e1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d812      	bhi.n	8005e68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d302      	bcc.n	8005e56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e01b      	b.n	8005e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <prvInsertTimerInActiveList+0x7c>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4610      	mov	r0, r2
 8005e62:	f7fe f9ce 	bl	8004202 <vListInsert>
 8005e66:	e012      	b.n	8005e8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d206      	bcs.n	8005e7e <prvInsertTimerInActiveList+0x62>
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e007      	b.n	8005e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <prvInsertTimerInActiveList+0x80>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fe f9ba 	bl	8004202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e8e:	697b      	ldr	r3, [r7, #20]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000edc 	.word	0x20000edc
 8005e9c:	20000ed8 	.word	0x20000ed8

08005ea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08e      	sub	sp, #56	; 0x38
 8005ea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ea6:	e0ca      	b.n	800603e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da18      	bge.n	8005ee0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10a      	bne.n	8005ed0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	61fb      	str	r3, [r7, #28]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed6:	6850      	ldr	r0, [r2, #4]
 8005ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eda:	6892      	ldr	r2, [r2, #8]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f2c0 80aa 	blt.w	800603c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d004      	beq.n	8005efe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe f9bb 	bl	8004274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005efe:	463b      	mov	r3, r7
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff ff6b 	bl	8005ddc <prvSampleTimeNow>
 8005f06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b09      	cmp	r3, #9
 8005f0c:	f200 8097 	bhi.w	800603e <prvProcessReceivedCommands+0x19e>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <prvProcessReceivedCommands+0x78>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f41 	.word	0x08005f41
 8005f24:	08005fb5 	.word	0x08005fb5
 8005f28:	08005fc9 	.word	0x08005fc9
 8005f2c:	08006013 	.word	0x08006013
 8005f30:	08005f41 	.word	0x08005f41
 8005f34:	08005f41 	.word	0x08005f41
 8005f38:	08005fb5 	.word	0x08005fb5
 8005f3c:	08005fc9 	.word	0x08005fc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	18d1      	adds	r1, r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f60:	f7ff ff5c 	bl	8005e1c <prvInsertTimerInActiveList>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d069      	beq.n	800603e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05e      	beq.n	800603e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	441a      	add	r2, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2100      	movs	r1, #0
 8005f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f92:	f7ff fe05 	bl	8005ba0 <xTimerGenericCommand>
 8005f96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d14f      	bne.n	800603e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61bb      	str	r3, [r7, #24]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005fc6:	e03a      	b.n	800603e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	617b      	str	r3, [r7, #20]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	18d1      	adds	r1, r2, r3
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600c:	f7ff ff06 	bl	8005e1c <prvInsertTimerInActiveList>
					break;
 8006010:	e015      	b.n	800603e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006022:	f000 fbdd 	bl	80067e0 <vPortFree>
 8006026:	e00a      	b.n	800603e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800603a:	e000      	b.n	800603e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800603c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800603e:	4b08      	ldr	r3, [pc, #32]	; (8006060 <prvProcessReceivedCommands+0x1c0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	1d39      	adds	r1, r7, #4
 8006044:	2200      	movs	r2, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fc16 	bl	8004878 <xQueueReceive>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	f47f af2a 	bne.w	8005ea8 <prvProcessReceivedCommands+0x8>
	}
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	3730      	adds	r7, #48	; 0x30
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000ee0 	.word	0x20000ee0

08006064 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800606a:	e048      	b.n	80060fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800606c:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <prvSwitchTimerLists+0xc0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006076:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <prvSwitchTimerLists+0xc0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3304      	adds	r3, #4
 8006084:	4618      	mov	r0, r3
 8006086:	f7fe f8f5 	bl	8004274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	d02e      	beq.n	80060fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d90e      	bls.n	80060d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060be:	4b19      	ldr	r3, [pc, #100]	; (8006124 <prvSwitchTimerLists+0xc0>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f7fe f89a 	bl	8004202 <vListInsert>
 80060ce:	e016      	b.n	80060fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060d0:	2300      	movs	r3, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	2100      	movs	r1, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fd60 	bl	8005ba0 <xTimerGenericCommand>
 80060e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	603b      	str	r3, [r7, #0]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060fe:	4b09      	ldr	r3, [pc, #36]	; (8006124 <prvSwitchTimerLists+0xc0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1b1      	bne.n	800606c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006108:	4b06      	ldr	r3, [pc, #24]	; (8006124 <prvSwitchTimerLists+0xc0>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <prvSwitchTimerLists+0xc4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a04      	ldr	r2, [pc, #16]	; (8006124 <prvSwitchTimerLists+0xc0>)
 8006114:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006116:	4a04      	ldr	r2, [pc, #16]	; (8006128 <prvSwitchTimerLists+0xc4>)
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6013      	str	r3, [r2, #0]
}
 800611c:	bf00      	nop
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000ed8 	.word	0x20000ed8
 8006128:	20000edc 	.word	0x20000edc

0800612c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006132:	f000 f967 	bl	8006404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <prvCheckForValidListAndQueue+0x60>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d120      	bne.n	8006180 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800613e:	4814      	ldr	r0, [pc, #80]	; (8006190 <prvCheckForValidListAndQueue+0x64>)
 8006140:	f7fe f80e 	bl	8004160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006144:	4813      	ldr	r0, [pc, #76]	; (8006194 <prvCheckForValidListAndQueue+0x68>)
 8006146:	f7fe f80b 	bl	8004160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <prvCheckForValidListAndQueue+0x6c>)
 800614c:	4a10      	ldr	r2, [pc, #64]	; (8006190 <prvCheckForValidListAndQueue+0x64>)
 800614e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006150:	4b12      	ldr	r3, [pc, #72]	; (800619c <prvCheckForValidListAndQueue+0x70>)
 8006152:	4a10      	ldr	r2, [pc, #64]	; (8006194 <prvCheckForValidListAndQueue+0x68>)
 8006154:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006156:	2300      	movs	r3, #0
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <prvCheckForValidListAndQueue+0x74>)
 800615c:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <prvCheckForValidListAndQueue+0x78>)
 800615e:	2110      	movs	r1, #16
 8006160:	200a      	movs	r0, #10
 8006162:	f7fe f919 	bl	8004398 <xQueueGenericCreateStatic>
 8006166:	4603      	mov	r3, r0
 8006168:	4a08      	ldr	r2, [pc, #32]	; (800618c <prvCheckForValidListAndQueue+0x60>)
 800616a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800616c:	4b07      	ldr	r3, [pc, #28]	; (800618c <prvCheckForValidListAndQueue+0x60>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <prvCheckForValidListAndQueue+0x60>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	490b      	ldr	r1, [pc, #44]	; (80061a8 <prvCheckForValidListAndQueue+0x7c>)
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fd6c 	bl	8004c58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006180:	f000 f970 	bl	8006464 <vPortExitCritical>
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000ee0 	.word	0x20000ee0
 8006190:	20000eb0 	.word	0x20000eb0
 8006194:	20000ec4 	.word	0x20000ec4
 8006198:	20000ed8 	.word	0x20000ed8
 800619c:	20000edc 	.word	0x20000edc
 80061a0:	20000f8c 	.word	0x20000f8c
 80061a4:	20000eec 	.word	0x20000eec
 80061a8:	0800b3d0 	.word	0x0800b3d0

080061ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3b04      	subs	r3, #4
 80061bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3b04      	subs	r3, #4
 80061da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061dc:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <pxPortInitialiseStack+0x64>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	3b14      	subs	r3, #20
 80061e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f06f 0202 	mvn.w	r2, #2
 80061fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3b20      	subs	r3, #32
 8006200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	08006215 	.word	0x08006215

08006214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800621e:	4b12      	ldr	r3, [pc, #72]	; (8006268 <prvTaskExitError+0x54>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006226:	d00a      	beq.n	800623e <prvTaskExitError+0x2a>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <prvTaskExitError+0x28>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60bb      	str	r3, [r7, #8]
}
 8006250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006252:	bf00      	nop
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0fc      	beq.n	8006254 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	2000000c 	.word	0x2000000c
 800626c:	00000000 	.word	0x00000000

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	200009b0 	.word	0x200009b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	; (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b46      	ldr	r3, [pc, #280]	; (80063e0 <xPortStartScheduler+0x120>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <xPortStartScheduler+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10a      	bne.n	80062e6 <xPortStartScheduler+0x26>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <xPortStartScheduler+0x120>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3f      	ldr	r2, [pc, #252]	; (80063e8 <xPortStartScheduler+0x128>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10a      	bne.n	8006306 <xPortStartScheduler+0x46>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	60fb      	str	r3, [r7, #12]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <xPortStartScheduler+0x12c>)
 8006308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <xPortStartScheduler+0x130>)
 800632c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800632e:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <xPortStartScheduler+0x134>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006334:	e009      	b.n	800634a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006336:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <xPortStartScheduler+0x134>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3b01      	subs	r3, #1
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <xPortStartScheduler+0x134>)
 800633e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d0ef      	beq.n	8006336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <xPortStartScheduler+0x134>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1c3 0307 	rsb	r3, r3, #7
 800635e:	2b04      	cmp	r3, #4
 8006360:	d00a      	beq.n	8006378 <xPortStartScheduler+0xb8>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <xPortStartScheduler+0x134>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <xPortStartScheduler+0x134>)
 8006380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006382:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <xPortStartScheduler+0x134>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <xPortStartScheduler+0x134>)
 800638c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <xPortStartScheduler+0x138>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <xPortStartScheduler+0x138>)
 800639c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a2:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <xPortStartScheduler+0x138>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <xPortStartScheduler+0x138>)
 80063a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ae:	f000 f8dd 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <xPortStartScheduler+0x13c>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063b8:	f000 f8fc 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xPortStartScheduler+0x140>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a0f      	ldr	r2, [pc, #60]	; (8006400 <xPortStartScheduler+0x140>)
 80063c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063c8:	f7ff ff66 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063cc:	f7ff f854 	bl	8005478 <vTaskSwitchContext>
	prvTaskExitError();
 80063d0:	f7ff ff20 	bl	8006214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000ed00 	.word	0xe000ed00
 80063e4:	410fc271 	.word	0x410fc271
 80063e8:	410fc270 	.word	0x410fc270
 80063ec:	e000e400 	.word	0xe000e400
 80063f0:	20000fdc 	.word	0x20000fdc
 80063f4:	20000fe0 	.word	0x20000fe0
 80063f8:	e000ed20 	.word	0xe000ed20
 80063fc:	2000000c 	.word	0x2000000c
 8006400:	e000ef34 	.word	0xe000ef34

08006404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	607b      	str	r3, [r7, #4]
}
 800641c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <vPortEnterCritical+0x58>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a0d      	ldr	r2, [pc, #52]	; (800645c <vPortEnterCritical+0x58>)
 8006426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <vPortEnterCritical+0x58>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortEnterCritical+0x5c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <vPortEnterCritical+0x4c>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	603b      	str	r3, [r7, #0]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vPortEnterCritical+0x4a>
	}
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000000c 	.word	0x2000000c
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <vPortExitCritical+0x50>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <vPortExitCritical+0x24>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	607b      	str	r3, [r7, #4]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <vPortExitCritical+0x50>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3b01      	subs	r3, #1
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <vPortExitCritical+0x50>)
 8006490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <vPortExitCritical+0x42>
 800649a:	2300      	movs	r3, #0
 800649c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f383 8811 	msr	BASEPRI, r3
}
 80064a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000000c 	.word	0x2000000c
	...

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	; (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f7fe ffc2 	bl	8005478 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	200009b0 	.word	0x200009b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f7fe fedf 	bl	8005304 <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <xPortSysTickHandler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	20000000 	.word	0x20000000
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ce:	f3ef 8305 	mrs	r3, IPSR
 80065d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d914      	bls.n	8006604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <vPortValidateInterruptPriority+0x70>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065e4:	4b15      	ldr	r3, [pc, #84]	; (800663c <vPortValidateInterruptPriority+0x74>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	7afa      	ldrb	r2, [r7, #11]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20a      	bcs.n	8006604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <vPortValidateInterruptPriority+0x78>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <vPortValidateInterruptPriority+0x7c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d90a      	bls.n	800662a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	603b      	str	r3, [r7, #0]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <vPortValidateInterruptPriority+0x60>
	}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	e000e3f0 	.word	0xe000e3f0
 800663c:	20000fdc 	.word	0x20000fdc
 8006640:	e000ed0c 	.word	0xe000ed0c
 8006644:	20000fe0 	.word	0x20000fe0

08006648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006654:	f7fe fd9a 	bl	800518c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006658:	4b5b      	ldr	r3, [pc, #364]	; (80067c8 <pvPortMalloc+0x180>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006660:	f000 f920 	bl	80068a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006664:	4b59      	ldr	r3, [pc, #356]	; (80067cc <pvPortMalloc+0x184>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 8093 	bne.w	8006798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01d      	beq.n	80066b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006678:	2208      	movs	r2, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	3308      	adds	r3, #8
 8006692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <pvPortMalloc+0x6c>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	617b      	str	r3, [r7, #20]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d06e      	beq.n	8006798 <pvPortMalloc+0x150>
 80066ba:	4b45      	ldr	r3, [pc, #276]	; (80067d0 <pvPortMalloc+0x188>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d869      	bhi.n	8006798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066c4:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <pvPortMalloc+0x18c>)
 80066c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066c8:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <pvPortMalloc+0x18c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ce:	e004      	b.n	80066da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d903      	bls.n	80066ec <pvPortMalloc+0xa4>
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <pvPortMalloc+0x180>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d050      	beq.n	8006798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	4413      	add	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	2308      	movs	r3, #8
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	429a      	cmp	r2, r3
 8006716:	d91f      	bls.n	8006758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <pvPortMalloc+0xf8>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	613b      	str	r3, [r7, #16]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006752:	69b8      	ldr	r0, [r7, #24]
 8006754:	f000 f908 	bl	8006968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <pvPortMalloc+0x188>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <pvPortMalloc+0x188>)
 8006764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <pvPortMalloc+0x188>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <pvPortMalloc+0x190>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d203      	bcs.n	800677a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006772:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <pvPortMalloc+0x188>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <pvPortMalloc+0x190>)
 8006778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <pvPortMalloc+0x184>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	431a      	orrs	r2, r3
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <pvPortMalloc+0x194>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	4a11      	ldr	r2, [pc, #68]	; (80067dc <pvPortMalloc+0x194>)
 8006796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006798:	f7fe fd06 	bl	80051a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <pvPortMalloc+0x174>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60fb      	str	r3, [r7, #12]
}
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <pvPortMalloc+0x172>
	return pvReturn;
 80067bc:	69fb      	ldr	r3, [r7, #28]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3728      	adds	r7, #40	; 0x28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20004bec 	.word	0x20004bec
 80067cc:	20004c00 	.word	0x20004c00
 80067d0:	20004bf0 	.word	0x20004bf0
 80067d4:	20004be4 	.word	0x20004be4
 80067d8:	20004bf4 	.word	0x20004bf4
 80067dc:	20004bf8 	.word	0x20004bf8

080067e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04d      	beq.n	800688e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067f2:	2308      	movs	r3, #8
 80067f4:	425b      	negs	r3, r3
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	4b24      	ldr	r3, [pc, #144]	; (8006898 <vPortFree+0xb8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <vPortFree+0x44>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <vPortFree+0x62>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60bb      	str	r3, [r7, #8]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <vPortFree+0xb8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01e      	beq.n	800688e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d11a      	bne.n	800688e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <vPortFree+0xb8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	43db      	mvns	r3, r3
 8006862:	401a      	ands	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006868:	f7fe fc90 	bl	800518c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <vPortFree+0xbc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4413      	add	r3, r2
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <vPortFree+0xbc>)
 8006878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800687a:	6938      	ldr	r0, [r7, #16]
 800687c:	f000 f874 	bl	8006968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <vPortFree+0xc0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <vPortFree+0xc0>)
 8006888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800688a:	f7fe fc8d 	bl	80051a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20004c00 	.word	0x20004c00
 800689c:	20004bf0 	.word	0x20004bf0
 80068a0:	20004bfc 	.word	0x20004bfc

080068a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068b0:	4b27      	ldr	r3, [pc, #156]	; (8006950 <prvHeapInit+0xac>)
 80068b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <prvHeapInit+0xac>)
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <prvHeapInit+0xb0>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <prvHeapInit+0xb0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4413      	add	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068f0:	2208      	movs	r2, #8
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <prvHeapInit+0xb4>)
 8006904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <prvHeapInit+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <prvHeapInit+0xb4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <prvHeapInit+0xb4>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <prvHeapInit+0xb8>)
 8006932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <prvHeapInit+0xbc>)
 800693a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <prvHeapInit+0xc0>)
 800693e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	20000fe4 	.word	0x20000fe4
 8006954:	20004be4 	.word	0x20004be4
 8006958:	20004bec 	.word	0x20004bec
 800695c:	20004bf4 	.word	0x20004bf4
 8006960:	20004bf0 	.word	0x20004bf0
 8006964:	20004c00 	.word	0x20004c00

08006968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006970:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <prvInsertBlockIntoFreeList+0xac>)
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e002      	b.n	800697c <prvInsertBlockIntoFreeList+0x14>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d8f7      	bhi.n	8006976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d108      	bne.n	80069aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d118      	bne.n	80069f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d00d      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e008      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e003      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d002      	beq.n	8006a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20004be4 	.word	0x20004be4
 8006a18:	20004bec 	.word	0x20004bec

08006a1c <__errno>:
 8006a1c:	4b01      	ldr	r3, [pc, #4]	; (8006a24 <__errno+0x8>)
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20000010 	.word	0x20000010

08006a28 <__libc_init_array>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	4d0d      	ldr	r5, [pc, #52]	; (8006a60 <__libc_init_array+0x38>)
 8006a2c:	4c0d      	ldr	r4, [pc, #52]	; (8006a64 <__libc_init_array+0x3c>)
 8006a2e:	1b64      	subs	r4, r4, r5
 8006a30:	10a4      	asrs	r4, r4, #2
 8006a32:	2600      	movs	r6, #0
 8006a34:	42a6      	cmp	r6, r4
 8006a36:	d109      	bne.n	8006a4c <__libc_init_array+0x24>
 8006a38:	4d0b      	ldr	r5, [pc, #44]	; (8006a68 <__libc_init_array+0x40>)
 8006a3a:	4c0c      	ldr	r4, [pc, #48]	; (8006a6c <__libc_init_array+0x44>)
 8006a3c:	f004 fc90 	bl	800b360 <_init>
 8006a40:	1b64      	subs	r4, r4, r5
 8006a42:	10a4      	asrs	r4, r4, #2
 8006a44:	2600      	movs	r6, #0
 8006a46:	42a6      	cmp	r6, r4
 8006a48:	d105      	bne.n	8006a56 <__libc_init_array+0x2e>
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a50:	4798      	blx	r3
 8006a52:	3601      	adds	r6, #1
 8006a54:	e7ee      	b.n	8006a34 <__libc_init_array+0xc>
 8006a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5a:	4798      	blx	r3
 8006a5c:	3601      	adds	r6, #1
 8006a5e:	e7f2      	b.n	8006a46 <__libc_init_array+0x1e>
 8006a60:	0800b8fc 	.word	0x0800b8fc
 8006a64:	0800b8fc 	.word	0x0800b8fc
 8006a68:	0800b8fc 	.word	0x0800b8fc
 8006a6c:	0800b900 	.word	0x0800b900

08006a70 <memcpy>:
 8006a70:	440a      	add	r2, r1
 8006a72:	4291      	cmp	r1, r2
 8006a74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a78:	d100      	bne.n	8006a7c <memcpy+0xc>
 8006a7a:	4770      	bx	lr
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a86:	4291      	cmp	r1, r2
 8006a88:	d1f9      	bne.n	8006a7e <memcpy+0xe>
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <memset>:
 8006a8c:	4402      	add	r2, r0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d100      	bne.n	8006a96 <memset+0xa>
 8006a94:	4770      	bx	lr
 8006a96:	f803 1b01 	strb.w	r1, [r3], #1
 8006a9a:	e7f9      	b.n	8006a90 <memset+0x4>

08006a9c <__cvt>:
 8006a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	ec55 4b10 	vmov	r4, r5, d0
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	460e      	mov	r6, r1
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	462b      	mov	r3, r5
 8006aac:	bfbb      	ittet	lt
 8006aae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ab2:	461d      	movlt	r5, r3
 8006ab4:	2300      	movge	r3, #0
 8006ab6:	232d      	movlt	r3, #45	; 0x2d
 8006ab8:	700b      	strb	r3, [r1, #0]
 8006aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006abc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ac0:	4691      	mov	r9, r2
 8006ac2:	f023 0820 	bic.w	r8, r3, #32
 8006ac6:	bfbc      	itt	lt
 8006ac8:	4622      	movlt	r2, r4
 8006aca:	4614      	movlt	r4, r2
 8006acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ad0:	d005      	beq.n	8006ade <__cvt+0x42>
 8006ad2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ad6:	d100      	bne.n	8006ada <__cvt+0x3e>
 8006ad8:	3601      	adds	r6, #1
 8006ada:	2102      	movs	r1, #2
 8006adc:	e000      	b.n	8006ae0 <__cvt+0x44>
 8006ade:	2103      	movs	r1, #3
 8006ae0:	ab03      	add	r3, sp, #12
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	ab02      	add	r3, sp, #8
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	ec45 4b10 	vmov	d0, r4, r5
 8006aec:	4653      	mov	r3, sl
 8006aee:	4632      	mov	r2, r6
 8006af0:	f001 fdae 	bl	8008650 <_dtoa_r>
 8006af4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006af8:	4607      	mov	r7, r0
 8006afa:	d102      	bne.n	8006b02 <__cvt+0x66>
 8006afc:	f019 0f01 	tst.w	r9, #1
 8006b00:	d022      	beq.n	8006b48 <__cvt+0xac>
 8006b02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b06:	eb07 0906 	add.w	r9, r7, r6
 8006b0a:	d110      	bne.n	8006b2e <__cvt+0x92>
 8006b0c:	783b      	ldrb	r3, [r7, #0]
 8006b0e:	2b30      	cmp	r3, #48	; 0x30
 8006b10:	d10a      	bne.n	8006b28 <__cvt+0x8c>
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b1e:	b918      	cbnz	r0, 8006b28 <__cvt+0x8c>
 8006b20:	f1c6 0601 	rsb	r6, r6, #1
 8006b24:	f8ca 6000 	str.w	r6, [sl]
 8006b28:	f8da 3000 	ldr.w	r3, [sl]
 8006b2c:	4499      	add	r9, r3
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2300      	movs	r3, #0
 8006b32:	4620      	mov	r0, r4
 8006b34:	4629      	mov	r1, r5
 8006b36:	f7f9 ffcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b3a:	b108      	cbz	r0, 8006b40 <__cvt+0xa4>
 8006b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b40:	2230      	movs	r2, #48	; 0x30
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	454b      	cmp	r3, r9
 8006b46:	d307      	bcc.n	8006b58 <__cvt+0xbc>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b4c:	1bdb      	subs	r3, r3, r7
 8006b4e:	4638      	mov	r0, r7
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	b004      	add	sp, #16
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	9103      	str	r1, [sp, #12]
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e7f0      	b.n	8006b42 <__cvt+0xa6>

08006b60 <__exponent>:
 8006b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b62:	4603      	mov	r3, r0
 8006b64:	2900      	cmp	r1, #0
 8006b66:	bfb8      	it	lt
 8006b68:	4249      	neglt	r1, r1
 8006b6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006b6e:	bfb4      	ite	lt
 8006b70:	222d      	movlt	r2, #45	; 0x2d
 8006b72:	222b      	movge	r2, #43	; 0x2b
 8006b74:	2909      	cmp	r1, #9
 8006b76:	7042      	strb	r2, [r0, #1]
 8006b78:	dd2a      	ble.n	8006bd0 <__exponent+0x70>
 8006b7a:	f10d 0407 	add.w	r4, sp, #7
 8006b7e:	46a4      	mov	ip, r4
 8006b80:	270a      	movs	r7, #10
 8006b82:	46a6      	mov	lr, r4
 8006b84:	460a      	mov	r2, r1
 8006b86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006b8e:	3530      	adds	r5, #48	; 0x30
 8006b90:	2a63      	cmp	r2, #99	; 0x63
 8006b92:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006b96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	dcf1      	bgt.n	8006b82 <__exponent+0x22>
 8006b9e:	3130      	adds	r1, #48	; 0x30
 8006ba0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ba4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ba8:	1c44      	adds	r4, r0, #1
 8006baa:	4629      	mov	r1, r5
 8006bac:	4561      	cmp	r1, ip
 8006bae:	d30a      	bcc.n	8006bc6 <__exponent+0x66>
 8006bb0:	f10d 0209 	add.w	r2, sp, #9
 8006bb4:	eba2 020e 	sub.w	r2, r2, lr
 8006bb8:	4565      	cmp	r5, ip
 8006bba:	bf88      	it	hi
 8006bbc:	2200      	movhi	r2, #0
 8006bbe:	4413      	add	r3, r2
 8006bc0:	1a18      	subs	r0, r3, r0
 8006bc2:	b003      	add	sp, #12
 8006bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bce:	e7ed      	b.n	8006bac <__exponent+0x4c>
 8006bd0:	2330      	movs	r3, #48	; 0x30
 8006bd2:	3130      	adds	r1, #48	; 0x30
 8006bd4:	7083      	strb	r3, [r0, #2]
 8006bd6:	70c1      	strb	r1, [r0, #3]
 8006bd8:	1d03      	adds	r3, r0, #4
 8006bda:	e7f1      	b.n	8006bc0 <__exponent+0x60>

08006bdc <_printf_float>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	ed2d 8b02 	vpush	{d8}
 8006be4:	b08d      	sub	sp, #52	; 0x34
 8006be6:	460c      	mov	r4, r1
 8006be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bec:	4616      	mov	r6, r2
 8006bee:	461f      	mov	r7, r3
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	f002 fe8b 	bl	800990c <_localeconv_r>
 8006bf6:	f8d0 a000 	ldr.w	sl, [r0]
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	f7f9 faf0 	bl	80001e0 <strlen>
 8006c00:	2300      	movs	r3, #0
 8006c02:	930a      	str	r3, [sp, #40]	; 0x28
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	9305      	str	r3, [sp, #20]
 8006c08:	f8d8 3000 	ldr.w	r3, [r8]
 8006c0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c10:	3307      	adds	r3, #7
 8006c12:	f023 0307 	bic.w	r3, r3, #7
 8006c16:	f103 0208 	add.w	r2, r3, #8
 8006c1a:	f8c8 2000 	str.w	r2, [r8]
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c34:	ee08 0a10 	vmov	s16, r0
 8006c38:	4b9f      	ldr	r3, [pc, #636]	; (8006eb8 <_printf_float+0x2dc>)
 8006c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c42:	f7f9 ff7b 	bl	8000b3c <__aeabi_dcmpun>
 8006c46:	bb88      	cbnz	r0, 8006cac <_printf_float+0xd0>
 8006c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4c:	4b9a      	ldr	r3, [pc, #616]	; (8006eb8 <_printf_float+0x2dc>)
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c52:	f7f9 ff55 	bl	8000b00 <__aeabi_dcmple>
 8006c56:	bb48      	cbnz	r0, 8006cac <_printf_float+0xd0>
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	4640      	mov	r0, r8
 8006c5e:	4649      	mov	r1, r9
 8006c60:	f7f9 ff44 	bl	8000aec <__aeabi_dcmplt>
 8006c64:	b110      	cbz	r0, 8006c6c <_printf_float+0x90>
 8006c66:	232d      	movs	r3, #45	; 0x2d
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	4b93      	ldr	r3, [pc, #588]	; (8006ebc <_printf_float+0x2e0>)
 8006c6e:	4894      	ldr	r0, [pc, #592]	; (8006ec0 <_printf_float+0x2e4>)
 8006c70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c74:	bf94      	ite	ls
 8006c76:	4698      	movls	r8, r3
 8006c78:	4680      	movhi	r8, r0
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	9b05      	ldr	r3, [sp, #20]
 8006c80:	f023 0204 	bic.w	r2, r3, #4
 8006c84:	6022      	str	r2, [r4, #0]
 8006c86:	f04f 0900 	mov.w	r9, #0
 8006c8a:	9700      	str	r7, [sp, #0]
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c90:	4621      	mov	r1, r4
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f9d8 	bl	8007048 <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f040 8090 	bne.w	8006dbe <_printf_float+0x1e2>
 8006c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca2:	b00d      	add	sp, #52	; 0x34
 8006ca4:	ecbd 8b02 	vpop	{d8}
 8006ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	4649      	mov	r1, r9
 8006cb4:	f7f9 ff42 	bl	8000b3c <__aeabi_dcmpun>
 8006cb8:	b140      	cbz	r0, 8006ccc <_printf_float+0xf0>
 8006cba:	464b      	mov	r3, r9
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	bfbc      	itt	lt
 8006cc0:	232d      	movlt	r3, #45	; 0x2d
 8006cc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cc6:	487f      	ldr	r0, [pc, #508]	; (8006ec4 <_printf_float+0x2e8>)
 8006cc8:	4b7f      	ldr	r3, [pc, #508]	; (8006ec8 <_printf_float+0x2ec>)
 8006cca:	e7d1      	b.n	8006c70 <_printf_float+0x94>
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cd2:	9206      	str	r2, [sp, #24]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	d13f      	bne.n	8006d58 <_printf_float+0x17c>
 8006cd8:	2306      	movs	r3, #6
 8006cda:	6063      	str	r3, [r4, #4]
 8006cdc:	9b05      	ldr	r3, [sp, #20]
 8006cde:	6861      	ldr	r1, [r4, #4]
 8006ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	ab0a      	add	r3, sp, #40	; 0x28
 8006cea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cee:	ab09      	add	r3, sp, #36	; 0x24
 8006cf0:	ec49 8b10 	vmov	d0, r8, r9
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	6022      	str	r2, [r4, #0]
 8006cf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f7ff fecd 	bl	8006a9c <__cvt>
 8006d02:	9b06      	ldr	r3, [sp, #24]
 8006d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d06:	2b47      	cmp	r3, #71	; 0x47
 8006d08:	4680      	mov	r8, r0
 8006d0a:	d108      	bne.n	8006d1e <_printf_float+0x142>
 8006d0c:	1cc8      	adds	r0, r1, #3
 8006d0e:	db02      	blt.n	8006d16 <_printf_float+0x13a>
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	4299      	cmp	r1, r3
 8006d14:	dd41      	ble.n	8006d9a <_printf_float+0x1be>
 8006d16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006d1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d22:	d820      	bhi.n	8006d66 <_printf_float+0x18a>
 8006d24:	3901      	subs	r1, #1
 8006d26:	465a      	mov	r2, fp
 8006d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d2e:	f7ff ff17 	bl	8006b60 <__exponent>
 8006d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d34:	1813      	adds	r3, r2, r0
 8006d36:	2a01      	cmp	r2, #1
 8006d38:	4681      	mov	r9, r0
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	dc02      	bgt.n	8006d44 <_printf_float+0x168>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	07d2      	lsls	r2, r2, #31
 8006d42:	d501      	bpl.n	8006d48 <_printf_float+0x16c>
 8006d44:	3301      	adds	r3, #1
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d09c      	beq.n	8006c8a <_printf_float+0xae>
 8006d50:	232d      	movs	r3, #45	; 0x2d
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d56:	e798      	b.n	8006c8a <_printf_float+0xae>
 8006d58:	9a06      	ldr	r2, [sp, #24]
 8006d5a:	2a47      	cmp	r2, #71	; 0x47
 8006d5c:	d1be      	bne.n	8006cdc <_printf_float+0x100>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1bc      	bne.n	8006cdc <_printf_float+0x100>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e7b9      	b.n	8006cda <_printf_float+0xfe>
 8006d66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d6a:	d118      	bne.n	8006d9e <_printf_float+0x1c2>
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	6863      	ldr	r3, [r4, #4]
 8006d70:	dd0b      	ble.n	8006d8a <_printf_float+0x1ae>
 8006d72:	6121      	str	r1, [r4, #16]
 8006d74:	b913      	cbnz	r3, 8006d7c <_printf_float+0x1a0>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	07d0      	lsls	r0, r2, #31
 8006d7a:	d502      	bpl.n	8006d82 <_printf_float+0x1a6>
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	440b      	add	r3, r1
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d84:	f04f 0900 	mov.w	r9, #0
 8006d88:	e7de      	b.n	8006d48 <_printf_float+0x16c>
 8006d8a:	b913      	cbnz	r3, 8006d92 <_printf_float+0x1b6>
 8006d8c:	6822      	ldr	r2, [r4, #0]
 8006d8e:	07d2      	lsls	r2, r2, #31
 8006d90:	d501      	bpl.n	8006d96 <_printf_float+0x1ba>
 8006d92:	3302      	adds	r3, #2
 8006d94:	e7f4      	b.n	8006d80 <_printf_float+0x1a4>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7f2      	b.n	8006d80 <_printf_float+0x1a4>
 8006d9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da0:	4299      	cmp	r1, r3
 8006da2:	db05      	blt.n	8006db0 <_printf_float+0x1d4>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	6121      	str	r1, [r4, #16]
 8006da8:	07d8      	lsls	r0, r3, #31
 8006daa:	d5ea      	bpl.n	8006d82 <_printf_float+0x1a6>
 8006dac:	1c4b      	adds	r3, r1, #1
 8006dae:	e7e7      	b.n	8006d80 <_printf_float+0x1a4>
 8006db0:	2900      	cmp	r1, #0
 8006db2:	bfd4      	ite	le
 8006db4:	f1c1 0202 	rsble	r2, r1, #2
 8006db8:	2201      	movgt	r2, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	e7e0      	b.n	8006d80 <_printf_float+0x1a4>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	055a      	lsls	r2, r3, #21
 8006dc2:	d407      	bmi.n	8006dd4 <_printf_float+0x1f8>
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d12c      	bne.n	8006e2c <_printf_float+0x250>
 8006dd2:	e764      	b.n	8006c9e <_printf_float+0xc2>
 8006dd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dd8:	f240 80e0 	bls.w	8006f9c <_printf_float+0x3c0>
 8006ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006de0:	2200      	movs	r2, #0
 8006de2:	2300      	movs	r3, #0
 8006de4:	f7f9 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d034      	beq.n	8006e56 <_printf_float+0x27a>
 8006dec:	4a37      	ldr	r2, [pc, #220]	; (8006ecc <_printf_float+0x2f0>)
 8006dee:	2301      	movs	r3, #1
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af51 	beq.w	8006c9e <_printf_float+0xc2>
 8006dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e00:	429a      	cmp	r2, r3
 8006e02:	db02      	blt.n	8006e0a <_printf_float+0x22e>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	07d8      	lsls	r0, r3, #31
 8006e08:	d510      	bpl.n	8006e2c <_printf_float+0x250>
 8006e0a:	ee18 3a10 	vmov	r3, s16
 8006e0e:	4652      	mov	r2, sl
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	f43f af41 	beq.w	8006c9e <_printf_float+0xc2>
 8006e1c:	f04f 0800 	mov.w	r8, #0
 8006e20:	f104 091a 	add.w	r9, r4, #26
 8006e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	dc09      	bgt.n	8006e40 <_printf_float+0x264>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	079b      	lsls	r3, r3, #30
 8006e30:	f100 8105 	bmi.w	800703e <_printf_float+0x462>
 8006e34:	68e0      	ldr	r0, [r4, #12]
 8006e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e38:	4298      	cmp	r0, r3
 8006e3a:	bfb8      	it	lt
 8006e3c:	4618      	movlt	r0, r3
 8006e3e:	e730      	b.n	8006ca2 <_printf_float+0xc6>
 8006e40:	2301      	movs	r3, #1
 8006e42:	464a      	mov	r2, r9
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af27 	beq.w	8006c9e <_printf_float+0xc2>
 8006e50:	f108 0801 	add.w	r8, r8, #1
 8006e54:	e7e6      	b.n	8006e24 <_printf_float+0x248>
 8006e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dc39      	bgt.n	8006ed0 <_printf_float+0x2f4>
 8006e5c:	4a1b      	ldr	r2, [pc, #108]	; (8006ecc <_printf_float+0x2f0>)
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	f43f af19 	beq.w	8006c9e <_printf_float+0xc2>
 8006e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e70:	4313      	orrs	r3, r2
 8006e72:	d102      	bne.n	8006e7a <_printf_float+0x29e>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	07d9      	lsls	r1, r3, #31
 8006e78:	d5d8      	bpl.n	8006e2c <_printf_float+0x250>
 8006e7a:	ee18 3a10 	vmov	r3, s16
 8006e7e:	4652      	mov	r2, sl
 8006e80:	4631      	mov	r1, r6
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	f43f af09 	beq.w	8006c9e <_printf_float+0xc2>
 8006e8c:	f04f 0900 	mov.w	r9, #0
 8006e90:	f104 0a1a 	add.w	sl, r4, #26
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	425b      	negs	r3, r3
 8006e98:	454b      	cmp	r3, r9
 8006e9a:	dc01      	bgt.n	8006ea0 <_printf_float+0x2c4>
 8006e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9e:	e792      	b.n	8006dc6 <_printf_float+0x1ea>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4652      	mov	r2, sl
 8006ea4:	4631      	mov	r1, r6
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f aef7 	beq.w	8006c9e <_printf_float+0xc2>
 8006eb0:	f109 0901 	add.w	r9, r9, #1
 8006eb4:	e7ee      	b.n	8006e94 <_printf_float+0x2b8>
 8006eb6:	bf00      	nop
 8006eb8:	7fefffff 	.word	0x7fefffff
 8006ebc:	0800b454 	.word	0x0800b454
 8006ec0:	0800b458 	.word	0x0800b458
 8006ec4:	0800b460 	.word	0x0800b460
 8006ec8:	0800b45c 	.word	0x0800b45c
 8006ecc:	0800b464 	.word	0x0800b464
 8006ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	bfa8      	it	ge
 8006ed8:	461a      	movge	r2, r3
 8006eda:	2a00      	cmp	r2, #0
 8006edc:	4691      	mov	r9, r2
 8006ede:	dc37      	bgt.n	8006f50 <_printf_float+0x374>
 8006ee0:	f04f 0b00 	mov.w	fp, #0
 8006ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee8:	f104 021a 	add.w	r2, r4, #26
 8006eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eee:	9305      	str	r3, [sp, #20]
 8006ef0:	eba3 0309 	sub.w	r3, r3, r9
 8006ef4:	455b      	cmp	r3, fp
 8006ef6:	dc33      	bgt.n	8006f60 <_printf_float+0x384>
 8006ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006efc:	429a      	cmp	r2, r3
 8006efe:	db3b      	blt.n	8006f78 <_printf_float+0x39c>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07da      	lsls	r2, r3, #31
 8006f04:	d438      	bmi.n	8006f78 <_printf_float+0x39c>
 8006f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f08:	9a05      	ldr	r2, [sp, #20]
 8006f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0c:	1a9a      	subs	r2, r3, r2
 8006f0e:	eba3 0901 	sub.w	r9, r3, r1
 8006f12:	4591      	cmp	r9, r2
 8006f14:	bfa8      	it	ge
 8006f16:	4691      	movge	r9, r2
 8006f18:	f1b9 0f00 	cmp.w	r9, #0
 8006f1c:	dc35      	bgt.n	8006f8a <_printf_float+0x3ae>
 8006f1e:	f04f 0800 	mov.w	r8, #0
 8006f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f26:	f104 0a1a 	add.w	sl, r4, #26
 8006f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	eba3 0309 	sub.w	r3, r3, r9
 8006f34:	4543      	cmp	r3, r8
 8006f36:	f77f af79 	ble.w	8006e2c <_printf_float+0x250>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4652      	mov	r2, sl
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4628      	mov	r0, r5
 8006f42:	47b8      	blx	r7
 8006f44:	3001      	adds	r0, #1
 8006f46:	f43f aeaa 	beq.w	8006c9e <_printf_float+0xc2>
 8006f4a:	f108 0801 	add.w	r8, r8, #1
 8006f4e:	e7ec      	b.n	8006f2a <_printf_float+0x34e>
 8006f50:	4613      	mov	r3, r2
 8006f52:	4631      	mov	r1, r6
 8006f54:	4642      	mov	r2, r8
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d1c0      	bne.n	8006ee0 <_printf_float+0x304>
 8006f5e:	e69e      	b.n	8006c9e <_printf_float+0xc2>
 8006f60:	2301      	movs	r3, #1
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	9205      	str	r2, [sp, #20]
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f ae97 	beq.w	8006c9e <_printf_float+0xc2>
 8006f70:	9a05      	ldr	r2, [sp, #20]
 8006f72:	f10b 0b01 	add.w	fp, fp, #1
 8006f76:	e7b9      	b.n	8006eec <_printf_float+0x310>
 8006f78:	ee18 3a10 	vmov	r3, s16
 8006f7c:	4652      	mov	r2, sl
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	d1be      	bne.n	8006f06 <_printf_float+0x32a>
 8006f88:	e689      	b.n	8006c9e <_printf_float+0xc2>
 8006f8a:	9a05      	ldr	r2, [sp, #20]
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	4442      	add	r2, r8
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	d1c1      	bne.n	8006f1e <_printf_float+0x342>
 8006f9a:	e680      	b.n	8006c9e <_printf_float+0xc2>
 8006f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f9e:	2a01      	cmp	r2, #1
 8006fa0:	dc01      	bgt.n	8006fa6 <_printf_float+0x3ca>
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d538      	bpl.n	8007018 <_printf_float+0x43c>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4642      	mov	r2, r8
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae74 	beq.w	8006c9e <_printf_float+0xc2>
 8006fb6:	ee18 3a10 	vmov	r3, s16
 8006fba:	4652      	mov	r2, sl
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f ae6b 	beq.w	8006c9e <_printf_float+0xc2>
 8006fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f7f9 fd82 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fd4:	b9d8      	cbnz	r0, 800700e <_printf_float+0x432>
 8006fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd8:	f108 0201 	add.w	r2, r8, #1
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d10e      	bne.n	8007006 <_printf_float+0x42a>
 8006fe8:	e659      	b.n	8006c9e <_printf_float+0xc2>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b8      	blx	r7
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	f43f ae52 	beq.w	8006c9e <_printf_float+0xc2>
 8006ffa:	f108 0801 	add.w	r8, r8, #1
 8006ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007000:	3b01      	subs	r3, #1
 8007002:	4543      	cmp	r3, r8
 8007004:	dcf1      	bgt.n	8006fea <_printf_float+0x40e>
 8007006:	464b      	mov	r3, r9
 8007008:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800700c:	e6dc      	b.n	8006dc8 <_printf_float+0x1ec>
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	f104 0a1a 	add.w	sl, r4, #26
 8007016:	e7f2      	b.n	8006ffe <_printf_float+0x422>
 8007018:	2301      	movs	r3, #1
 800701a:	4642      	mov	r2, r8
 800701c:	e7df      	b.n	8006fde <_printf_float+0x402>
 800701e:	2301      	movs	r3, #1
 8007020:	464a      	mov	r2, r9
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae38 	beq.w	8006c9e <_printf_float+0xc2>
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	68e3      	ldr	r3, [r4, #12]
 8007034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007036:	1a5b      	subs	r3, r3, r1
 8007038:	4543      	cmp	r3, r8
 800703a:	dcf0      	bgt.n	800701e <_printf_float+0x442>
 800703c:	e6fa      	b.n	8006e34 <_printf_float+0x258>
 800703e:	f04f 0800 	mov.w	r8, #0
 8007042:	f104 0919 	add.w	r9, r4, #25
 8007046:	e7f4      	b.n	8007032 <_printf_float+0x456>

08007048 <_printf_common>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	4616      	mov	r6, r2
 800704e:	4699      	mov	r9, r3
 8007050:	688a      	ldr	r2, [r1, #8]
 8007052:	690b      	ldr	r3, [r1, #16]
 8007054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007058:	4293      	cmp	r3, r2
 800705a:	bfb8      	it	lt
 800705c:	4613      	movlt	r3, r2
 800705e:	6033      	str	r3, [r6, #0]
 8007060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007064:	4607      	mov	r7, r0
 8007066:	460c      	mov	r4, r1
 8007068:	b10a      	cbz	r2, 800706e <_printf_common+0x26>
 800706a:	3301      	adds	r3, #1
 800706c:	6033      	str	r3, [r6, #0]
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	0699      	lsls	r1, r3, #26
 8007072:	bf42      	ittt	mi
 8007074:	6833      	ldrmi	r3, [r6, #0]
 8007076:	3302      	addmi	r3, #2
 8007078:	6033      	strmi	r3, [r6, #0]
 800707a:	6825      	ldr	r5, [r4, #0]
 800707c:	f015 0506 	ands.w	r5, r5, #6
 8007080:	d106      	bne.n	8007090 <_printf_common+0x48>
 8007082:	f104 0a19 	add.w	sl, r4, #25
 8007086:	68e3      	ldr	r3, [r4, #12]
 8007088:	6832      	ldr	r2, [r6, #0]
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	42ab      	cmp	r3, r5
 800708e:	dc26      	bgt.n	80070de <_printf_common+0x96>
 8007090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007094:	1e13      	subs	r3, r2, #0
 8007096:	6822      	ldr	r2, [r4, #0]
 8007098:	bf18      	it	ne
 800709a:	2301      	movne	r3, #1
 800709c:	0692      	lsls	r2, r2, #26
 800709e:	d42b      	bmi.n	80070f8 <_printf_common+0xb0>
 80070a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070a4:	4649      	mov	r1, r9
 80070a6:	4638      	mov	r0, r7
 80070a8:	47c0      	blx	r8
 80070aa:	3001      	adds	r0, #1
 80070ac:	d01e      	beq.n	80070ec <_printf_common+0xa4>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	68e5      	ldr	r5, [r4, #12]
 80070b2:	6832      	ldr	r2, [r6, #0]
 80070b4:	f003 0306 	and.w	r3, r3, #6
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	bf08      	it	eq
 80070bc:	1aad      	subeq	r5, r5, r2
 80070be:	68a3      	ldr	r3, [r4, #8]
 80070c0:	6922      	ldr	r2, [r4, #16]
 80070c2:	bf0c      	ite	eq
 80070c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070c8:	2500      	movne	r5, #0
 80070ca:	4293      	cmp	r3, r2
 80070cc:	bfc4      	itt	gt
 80070ce:	1a9b      	subgt	r3, r3, r2
 80070d0:	18ed      	addgt	r5, r5, r3
 80070d2:	2600      	movs	r6, #0
 80070d4:	341a      	adds	r4, #26
 80070d6:	42b5      	cmp	r5, r6
 80070d8:	d11a      	bne.n	8007110 <_printf_common+0xc8>
 80070da:	2000      	movs	r0, #0
 80070dc:	e008      	b.n	80070f0 <_printf_common+0xa8>
 80070de:	2301      	movs	r3, #1
 80070e0:	4652      	mov	r2, sl
 80070e2:	4649      	mov	r1, r9
 80070e4:	4638      	mov	r0, r7
 80070e6:	47c0      	blx	r8
 80070e8:	3001      	adds	r0, #1
 80070ea:	d103      	bne.n	80070f4 <_printf_common+0xac>
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f4:	3501      	adds	r5, #1
 80070f6:	e7c6      	b.n	8007086 <_printf_common+0x3e>
 80070f8:	18e1      	adds	r1, r4, r3
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	2030      	movs	r0, #48	; 0x30
 80070fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007102:	4422      	add	r2, r4
 8007104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800710c:	3302      	adds	r3, #2
 800710e:	e7c7      	b.n	80070a0 <_printf_common+0x58>
 8007110:	2301      	movs	r3, #1
 8007112:	4622      	mov	r2, r4
 8007114:	4649      	mov	r1, r9
 8007116:	4638      	mov	r0, r7
 8007118:	47c0      	blx	r8
 800711a:	3001      	adds	r0, #1
 800711c:	d0e6      	beq.n	80070ec <_printf_common+0xa4>
 800711e:	3601      	adds	r6, #1
 8007120:	e7d9      	b.n	80070d6 <_printf_common+0x8e>
	...

08007124 <_printf_i>:
 8007124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	7e0f      	ldrb	r7, [r1, #24]
 800712a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800712c:	2f78      	cmp	r7, #120	; 0x78
 800712e:	4691      	mov	r9, r2
 8007130:	4680      	mov	r8, r0
 8007132:	460c      	mov	r4, r1
 8007134:	469a      	mov	sl, r3
 8007136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800713a:	d807      	bhi.n	800714c <_printf_i+0x28>
 800713c:	2f62      	cmp	r7, #98	; 0x62
 800713e:	d80a      	bhi.n	8007156 <_printf_i+0x32>
 8007140:	2f00      	cmp	r7, #0
 8007142:	f000 80d8 	beq.w	80072f6 <_printf_i+0x1d2>
 8007146:	2f58      	cmp	r7, #88	; 0x58
 8007148:	f000 80a3 	beq.w	8007292 <_printf_i+0x16e>
 800714c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007154:	e03a      	b.n	80071cc <_printf_i+0xa8>
 8007156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800715a:	2b15      	cmp	r3, #21
 800715c:	d8f6      	bhi.n	800714c <_printf_i+0x28>
 800715e:	a101      	add	r1, pc, #4	; (adr r1, 8007164 <_printf_i+0x40>)
 8007160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007164:	080071bd 	.word	0x080071bd
 8007168:	080071d1 	.word	0x080071d1
 800716c:	0800714d 	.word	0x0800714d
 8007170:	0800714d 	.word	0x0800714d
 8007174:	0800714d 	.word	0x0800714d
 8007178:	0800714d 	.word	0x0800714d
 800717c:	080071d1 	.word	0x080071d1
 8007180:	0800714d 	.word	0x0800714d
 8007184:	0800714d 	.word	0x0800714d
 8007188:	0800714d 	.word	0x0800714d
 800718c:	0800714d 	.word	0x0800714d
 8007190:	080072dd 	.word	0x080072dd
 8007194:	08007201 	.word	0x08007201
 8007198:	080072bf 	.word	0x080072bf
 800719c:	0800714d 	.word	0x0800714d
 80071a0:	0800714d 	.word	0x0800714d
 80071a4:	080072ff 	.word	0x080072ff
 80071a8:	0800714d 	.word	0x0800714d
 80071ac:	08007201 	.word	0x08007201
 80071b0:	0800714d 	.word	0x0800714d
 80071b4:	0800714d 	.word	0x0800714d
 80071b8:	080072c7 	.word	0x080072c7
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	1d1a      	adds	r2, r3, #4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	602a      	str	r2, [r5, #0]
 80071c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071cc:	2301      	movs	r3, #1
 80071ce:	e0a3      	b.n	8007318 <_printf_i+0x1f4>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	6829      	ldr	r1, [r5, #0]
 80071d4:	0606      	lsls	r6, r0, #24
 80071d6:	f101 0304 	add.w	r3, r1, #4
 80071da:	d50a      	bpl.n	80071f2 <_printf_i+0xce>
 80071dc:	680e      	ldr	r6, [r1, #0]
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	2e00      	cmp	r6, #0
 80071e2:	da03      	bge.n	80071ec <_printf_i+0xc8>
 80071e4:	232d      	movs	r3, #45	; 0x2d
 80071e6:	4276      	negs	r6, r6
 80071e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ec:	485e      	ldr	r0, [pc, #376]	; (8007368 <_printf_i+0x244>)
 80071ee:	230a      	movs	r3, #10
 80071f0:	e019      	b.n	8007226 <_printf_i+0x102>
 80071f2:	680e      	ldr	r6, [r1, #0]
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071fa:	bf18      	it	ne
 80071fc:	b236      	sxthne	r6, r6
 80071fe:	e7ef      	b.n	80071e0 <_printf_i+0xbc>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	6820      	ldr	r0, [r4, #0]
 8007204:	1d19      	adds	r1, r3, #4
 8007206:	6029      	str	r1, [r5, #0]
 8007208:	0601      	lsls	r1, r0, #24
 800720a:	d501      	bpl.n	8007210 <_printf_i+0xec>
 800720c:	681e      	ldr	r6, [r3, #0]
 800720e:	e002      	b.n	8007216 <_printf_i+0xf2>
 8007210:	0646      	lsls	r6, r0, #25
 8007212:	d5fb      	bpl.n	800720c <_printf_i+0xe8>
 8007214:	881e      	ldrh	r6, [r3, #0]
 8007216:	4854      	ldr	r0, [pc, #336]	; (8007368 <_printf_i+0x244>)
 8007218:	2f6f      	cmp	r7, #111	; 0x6f
 800721a:	bf0c      	ite	eq
 800721c:	2308      	moveq	r3, #8
 800721e:	230a      	movne	r3, #10
 8007220:	2100      	movs	r1, #0
 8007222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007226:	6865      	ldr	r5, [r4, #4]
 8007228:	60a5      	str	r5, [r4, #8]
 800722a:	2d00      	cmp	r5, #0
 800722c:	bfa2      	ittt	ge
 800722e:	6821      	ldrge	r1, [r4, #0]
 8007230:	f021 0104 	bicge.w	r1, r1, #4
 8007234:	6021      	strge	r1, [r4, #0]
 8007236:	b90e      	cbnz	r6, 800723c <_printf_i+0x118>
 8007238:	2d00      	cmp	r5, #0
 800723a:	d04d      	beq.n	80072d8 <_printf_i+0x1b4>
 800723c:	4615      	mov	r5, r2
 800723e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007242:	fb03 6711 	mls	r7, r3, r1, r6
 8007246:	5dc7      	ldrb	r7, [r0, r7]
 8007248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800724c:	4637      	mov	r7, r6
 800724e:	42bb      	cmp	r3, r7
 8007250:	460e      	mov	r6, r1
 8007252:	d9f4      	bls.n	800723e <_printf_i+0x11a>
 8007254:	2b08      	cmp	r3, #8
 8007256:	d10b      	bne.n	8007270 <_printf_i+0x14c>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	07de      	lsls	r6, r3, #31
 800725c:	d508      	bpl.n	8007270 <_printf_i+0x14c>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	6861      	ldr	r1, [r4, #4]
 8007262:	4299      	cmp	r1, r3
 8007264:	bfde      	ittt	le
 8007266:	2330      	movle	r3, #48	; 0x30
 8007268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800726c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007270:	1b52      	subs	r2, r2, r5
 8007272:	6122      	str	r2, [r4, #16]
 8007274:	f8cd a000 	str.w	sl, [sp]
 8007278:	464b      	mov	r3, r9
 800727a:	aa03      	add	r2, sp, #12
 800727c:	4621      	mov	r1, r4
 800727e:	4640      	mov	r0, r8
 8007280:	f7ff fee2 	bl	8007048 <_printf_common>
 8007284:	3001      	adds	r0, #1
 8007286:	d14c      	bne.n	8007322 <_printf_i+0x1fe>
 8007288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800728c:	b004      	add	sp, #16
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	4835      	ldr	r0, [pc, #212]	; (8007368 <_printf_i+0x244>)
 8007294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f851 6b04 	ldr.w	r6, [r1], #4
 80072a0:	6029      	str	r1, [r5, #0]
 80072a2:	061d      	lsls	r5, r3, #24
 80072a4:	d514      	bpl.n	80072d0 <_printf_i+0x1ac>
 80072a6:	07df      	lsls	r7, r3, #31
 80072a8:	bf44      	itt	mi
 80072aa:	f043 0320 	orrmi.w	r3, r3, #32
 80072ae:	6023      	strmi	r3, [r4, #0]
 80072b0:	b91e      	cbnz	r6, 80072ba <_printf_i+0x196>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f023 0320 	bic.w	r3, r3, #32
 80072b8:	6023      	str	r3, [r4, #0]
 80072ba:	2310      	movs	r3, #16
 80072bc:	e7b0      	b.n	8007220 <_printf_i+0xfc>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	f043 0320 	orr.w	r3, r3, #32
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	2378      	movs	r3, #120	; 0x78
 80072c8:	4828      	ldr	r0, [pc, #160]	; (800736c <_printf_i+0x248>)
 80072ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ce:	e7e3      	b.n	8007298 <_printf_i+0x174>
 80072d0:	0659      	lsls	r1, r3, #25
 80072d2:	bf48      	it	mi
 80072d4:	b2b6      	uxthmi	r6, r6
 80072d6:	e7e6      	b.n	80072a6 <_printf_i+0x182>
 80072d8:	4615      	mov	r5, r2
 80072da:	e7bb      	b.n	8007254 <_printf_i+0x130>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	6826      	ldr	r6, [r4, #0]
 80072e0:	6961      	ldr	r1, [r4, #20]
 80072e2:	1d18      	adds	r0, r3, #4
 80072e4:	6028      	str	r0, [r5, #0]
 80072e6:	0635      	lsls	r5, r6, #24
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	d501      	bpl.n	80072f0 <_printf_i+0x1cc>
 80072ec:	6019      	str	r1, [r3, #0]
 80072ee:	e002      	b.n	80072f6 <_printf_i+0x1d2>
 80072f0:	0670      	lsls	r0, r6, #25
 80072f2:	d5fb      	bpl.n	80072ec <_printf_i+0x1c8>
 80072f4:	8019      	strh	r1, [r3, #0]
 80072f6:	2300      	movs	r3, #0
 80072f8:	6123      	str	r3, [r4, #16]
 80072fa:	4615      	mov	r5, r2
 80072fc:	e7ba      	b.n	8007274 <_printf_i+0x150>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	602a      	str	r2, [r5, #0]
 8007304:	681d      	ldr	r5, [r3, #0]
 8007306:	6862      	ldr	r2, [r4, #4]
 8007308:	2100      	movs	r1, #0
 800730a:	4628      	mov	r0, r5
 800730c:	f7f8 ff70 	bl	80001f0 <memchr>
 8007310:	b108      	cbz	r0, 8007316 <_printf_i+0x1f2>
 8007312:	1b40      	subs	r0, r0, r5
 8007314:	6060      	str	r0, [r4, #4]
 8007316:	6863      	ldr	r3, [r4, #4]
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	2300      	movs	r3, #0
 800731c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007320:	e7a8      	b.n	8007274 <_printf_i+0x150>
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	462a      	mov	r2, r5
 8007326:	4649      	mov	r1, r9
 8007328:	4640      	mov	r0, r8
 800732a:	47d0      	blx	sl
 800732c:	3001      	adds	r0, #1
 800732e:	d0ab      	beq.n	8007288 <_printf_i+0x164>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	079b      	lsls	r3, r3, #30
 8007334:	d413      	bmi.n	800735e <_printf_i+0x23a>
 8007336:	68e0      	ldr	r0, [r4, #12]
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	4298      	cmp	r0, r3
 800733c:	bfb8      	it	lt
 800733e:	4618      	movlt	r0, r3
 8007340:	e7a4      	b.n	800728c <_printf_i+0x168>
 8007342:	2301      	movs	r3, #1
 8007344:	4632      	mov	r2, r6
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	47d0      	blx	sl
 800734c:	3001      	adds	r0, #1
 800734e:	d09b      	beq.n	8007288 <_printf_i+0x164>
 8007350:	3501      	adds	r5, #1
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	9903      	ldr	r1, [sp, #12]
 8007356:	1a5b      	subs	r3, r3, r1
 8007358:	42ab      	cmp	r3, r5
 800735a:	dcf2      	bgt.n	8007342 <_printf_i+0x21e>
 800735c:	e7eb      	b.n	8007336 <_printf_i+0x212>
 800735e:	2500      	movs	r5, #0
 8007360:	f104 0619 	add.w	r6, r4, #25
 8007364:	e7f5      	b.n	8007352 <_printf_i+0x22e>
 8007366:	bf00      	nop
 8007368:	0800b466 	.word	0x0800b466
 800736c:	0800b477 	.word	0x0800b477

08007370 <_scanf_float>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	b087      	sub	sp, #28
 8007376:	4617      	mov	r7, r2
 8007378:	9303      	str	r3, [sp, #12]
 800737a:	688b      	ldr	r3, [r1, #8]
 800737c:	1e5a      	subs	r2, r3, #1
 800737e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007382:	bf83      	ittte	hi
 8007384:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007388:	195b      	addhi	r3, r3, r5
 800738a:	9302      	strhi	r3, [sp, #8]
 800738c:	2300      	movls	r3, #0
 800738e:	bf86      	itte	hi
 8007390:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007394:	608b      	strhi	r3, [r1, #8]
 8007396:	9302      	strls	r3, [sp, #8]
 8007398:	680b      	ldr	r3, [r1, #0]
 800739a:	468b      	mov	fp, r1
 800739c:	2500      	movs	r5, #0
 800739e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80073a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073aa:	4680      	mov	r8, r0
 80073ac:	460c      	mov	r4, r1
 80073ae:	465e      	mov	r6, fp
 80073b0:	46aa      	mov	sl, r5
 80073b2:	46a9      	mov	r9, r5
 80073b4:	9501      	str	r5, [sp, #4]
 80073b6:	68a2      	ldr	r2, [r4, #8]
 80073b8:	b152      	cbz	r2, 80073d0 <_scanf_float+0x60>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b4e      	cmp	r3, #78	; 0x4e
 80073c0:	d864      	bhi.n	800748c <_scanf_float+0x11c>
 80073c2:	2b40      	cmp	r3, #64	; 0x40
 80073c4:	d83c      	bhi.n	8007440 <_scanf_float+0xd0>
 80073c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80073ca:	b2c8      	uxtb	r0, r1
 80073cc:	280e      	cmp	r0, #14
 80073ce:	d93a      	bls.n	8007446 <_scanf_float+0xd6>
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	d003      	beq.n	80073de <_scanf_float+0x6e>
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80073e2:	f1ba 0f01 	cmp.w	sl, #1
 80073e6:	f200 8113 	bhi.w	8007610 <_scanf_float+0x2a0>
 80073ea:	455e      	cmp	r6, fp
 80073ec:	f200 8105 	bhi.w	80075fa <_scanf_float+0x28a>
 80073f0:	2501      	movs	r5, #1
 80073f2:	4628      	mov	r0, r5
 80073f4:	b007      	add	sp, #28
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80073fe:	2a0d      	cmp	r2, #13
 8007400:	d8e6      	bhi.n	80073d0 <_scanf_float+0x60>
 8007402:	a101      	add	r1, pc, #4	; (adr r1, 8007408 <_scanf_float+0x98>)
 8007404:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007408:	08007547 	.word	0x08007547
 800740c:	080073d1 	.word	0x080073d1
 8007410:	080073d1 	.word	0x080073d1
 8007414:	080073d1 	.word	0x080073d1
 8007418:	080075a7 	.word	0x080075a7
 800741c:	0800757f 	.word	0x0800757f
 8007420:	080073d1 	.word	0x080073d1
 8007424:	080073d1 	.word	0x080073d1
 8007428:	08007555 	.word	0x08007555
 800742c:	080073d1 	.word	0x080073d1
 8007430:	080073d1 	.word	0x080073d1
 8007434:	080073d1 	.word	0x080073d1
 8007438:	080073d1 	.word	0x080073d1
 800743c:	0800750d 	.word	0x0800750d
 8007440:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007444:	e7db      	b.n	80073fe <_scanf_float+0x8e>
 8007446:	290e      	cmp	r1, #14
 8007448:	d8c2      	bhi.n	80073d0 <_scanf_float+0x60>
 800744a:	a001      	add	r0, pc, #4	; (adr r0, 8007450 <_scanf_float+0xe0>)
 800744c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007450:	080074ff 	.word	0x080074ff
 8007454:	080073d1 	.word	0x080073d1
 8007458:	080074ff 	.word	0x080074ff
 800745c:	08007593 	.word	0x08007593
 8007460:	080073d1 	.word	0x080073d1
 8007464:	080074ad 	.word	0x080074ad
 8007468:	080074e9 	.word	0x080074e9
 800746c:	080074e9 	.word	0x080074e9
 8007470:	080074e9 	.word	0x080074e9
 8007474:	080074e9 	.word	0x080074e9
 8007478:	080074e9 	.word	0x080074e9
 800747c:	080074e9 	.word	0x080074e9
 8007480:	080074e9 	.word	0x080074e9
 8007484:	080074e9 	.word	0x080074e9
 8007488:	080074e9 	.word	0x080074e9
 800748c:	2b6e      	cmp	r3, #110	; 0x6e
 800748e:	d809      	bhi.n	80074a4 <_scanf_float+0x134>
 8007490:	2b60      	cmp	r3, #96	; 0x60
 8007492:	d8b2      	bhi.n	80073fa <_scanf_float+0x8a>
 8007494:	2b54      	cmp	r3, #84	; 0x54
 8007496:	d077      	beq.n	8007588 <_scanf_float+0x218>
 8007498:	2b59      	cmp	r3, #89	; 0x59
 800749a:	d199      	bne.n	80073d0 <_scanf_float+0x60>
 800749c:	2d07      	cmp	r5, #7
 800749e:	d197      	bne.n	80073d0 <_scanf_float+0x60>
 80074a0:	2508      	movs	r5, #8
 80074a2:	e029      	b.n	80074f8 <_scanf_float+0x188>
 80074a4:	2b74      	cmp	r3, #116	; 0x74
 80074a6:	d06f      	beq.n	8007588 <_scanf_float+0x218>
 80074a8:	2b79      	cmp	r3, #121	; 0x79
 80074aa:	e7f6      	b.n	800749a <_scanf_float+0x12a>
 80074ac:	6821      	ldr	r1, [r4, #0]
 80074ae:	05c8      	lsls	r0, r1, #23
 80074b0:	d51a      	bpl.n	80074e8 <_scanf_float+0x178>
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074b8:	6021      	str	r1, [r4, #0]
 80074ba:	f109 0901 	add.w	r9, r9, #1
 80074be:	b11b      	cbz	r3, 80074c8 <_scanf_float+0x158>
 80074c0:	3b01      	subs	r3, #1
 80074c2:	3201      	adds	r2, #1
 80074c4:	9302      	str	r3, [sp, #8]
 80074c6:	60a2      	str	r2, [r4, #8]
 80074c8:	68a3      	ldr	r3, [r4, #8]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	6123      	str	r3, [r4, #16]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	f340 8084 	ble.w	80075e8 <_scanf_float+0x278>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	603b      	str	r3, [r7, #0]
 80074e6:	e766      	b.n	80073b6 <_scanf_float+0x46>
 80074e8:	eb1a 0f05 	cmn.w	sl, r5
 80074ec:	f47f af70 	bne.w	80073d0 <_scanf_float+0x60>
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074f6:	6022      	str	r2, [r4, #0]
 80074f8:	f806 3b01 	strb.w	r3, [r6], #1
 80074fc:	e7e4      	b.n	80074c8 <_scanf_float+0x158>
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	0610      	lsls	r0, r2, #24
 8007502:	f57f af65 	bpl.w	80073d0 <_scanf_float+0x60>
 8007506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800750a:	e7f4      	b.n	80074f6 <_scanf_float+0x186>
 800750c:	f1ba 0f00 	cmp.w	sl, #0
 8007510:	d10e      	bne.n	8007530 <_scanf_float+0x1c0>
 8007512:	f1b9 0f00 	cmp.w	r9, #0
 8007516:	d10e      	bne.n	8007536 <_scanf_float+0x1c6>
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800751e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007522:	d108      	bne.n	8007536 <_scanf_float+0x1c6>
 8007524:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	f04f 0a01 	mov.w	sl, #1
 800752e:	e7e3      	b.n	80074f8 <_scanf_float+0x188>
 8007530:	f1ba 0f02 	cmp.w	sl, #2
 8007534:	d055      	beq.n	80075e2 <_scanf_float+0x272>
 8007536:	2d01      	cmp	r5, #1
 8007538:	d002      	beq.n	8007540 <_scanf_float+0x1d0>
 800753a:	2d04      	cmp	r5, #4
 800753c:	f47f af48 	bne.w	80073d0 <_scanf_float+0x60>
 8007540:	3501      	adds	r5, #1
 8007542:	b2ed      	uxtb	r5, r5
 8007544:	e7d8      	b.n	80074f8 <_scanf_float+0x188>
 8007546:	f1ba 0f01 	cmp.w	sl, #1
 800754a:	f47f af41 	bne.w	80073d0 <_scanf_float+0x60>
 800754e:	f04f 0a02 	mov.w	sl, #2
 8007552:	e7d1      	b.n	80074f8 <_scanf_float+0x188>
 8007554:	b97d      	cbnz	r5, 8007576 <_scanf_float+0x206>
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	f47f af3c 	bne.w	80073d6 <_scanf_float+0x66>
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007564:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007568:	f47f af39 	bne.w	80073de <_scanf_float+0x6e>
 800756c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	2501      	movs	r5, #1
 8007574:	e7c0      	b.n	80074f8 <_scanf_float+0x188>
 8007576:	2d03      	cmp	r5, #3
 8007578:	d0e2      	beq.n	8007540 <_scanf_float+0x1d0>
 800757a:	2d05      	cmp	r5, #5
 800757c:	e7de      	b.n	800753c <_scanf_float+0x1cc>
 800757e:	2d02      	cmp	r5, #2
 8007580:	f47f af26 	bne.w	80073d0 <_scanf_float+0x60>
 8007584:	2503      	movs	r5, #3
 8007586:	e7b7      	b.n	80074f8 <_scanf_float+0x188>
 8007588:	2d06      	cmp	r5, #6
 800758a:	f47f af21 	bne.w	80073d0 <_scanf_float+0x60>
 800758e:	2507      	movs	r5, #7
 8007590:	e7b2      	b.n	80074f8 <_scanf_float+0x188>
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	0591      	lsls	r1, r2, #22
 8007596:	f57f af1b 	bpl.w	80073d0 <_scanf_float+0x60>
 800759a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800759e:	6022      	str	r2, [r4, #0]
 80075a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80075a4:	e7a8      	b.n	80074f8 <_scanf_float+0x188>
 80075a6:	6822      	ldr	r2, [r4, #0]
 80075a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80075ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80075b0:	d006      	beq.n	80075c0 <_scanf_float+0x250>
 80075b2:	0550      	lsls	r0, r2, #21
 80075b4:	f57f af0c 	bpl.w	80073d0 <_scanf_float+0x60>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	f43f af0f 	beq.w	80073de <_scanf_float+0x6e>
 80075c0:	0591      	lsls	r1, r2, #22
 80075c2:	bf58      	it	pl
 80075c4:	9901      	ldrpl	r1, [sp, #4]
 80075c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075ca:	bf58      	it	pl
 80075cc:	eba9 0101 	subpl.w	r1, r9, r1
 80075d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075d4:	bf58      	it	pl
 80075d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	e78a      	b.n	80074f8 <_scanf_float+0x188>
 80075e2:	f04f 0a03 	mov.w	sl, #3
 80075e6:	e787      	b.n	80074f8 <_scanf_float+0x188>
 80075e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075ec:	4639      	mov	r1, r7
 80075ee:	4640      	mov	r0, r8
 80075f0:	4798      	blx	r3
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f43f aedf 	beq.w	80073b6 <_scanf_float+0x46>
 80075f8:	e6ea      	b.n	80073d0 <_scanf_float+0x60>
 80075fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007602:	463a      	mov	r2, r7
 8007604:	4640      	mov	r0, r8
 8007606:	4798      	blx	r3
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	3b01      	subs	r3, #1
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	e6ec      	b.n	80073ea <_scanf_float+0x7a>
 8007610:	1e6b      	subs	r3, r5, #1
 8007612:	2b06      	cmp	r3, #6
 8007614:	d825      	bhi.n	8007662 <_scanf_float+0x2f2>
 8007616:	2d02      	cmp	r5, #2
 8007618:	d836      	bhi.n	8007688 <_scanf_float+0x318>
 800761a:	455e      	cmp	r6, fp
 800761c:	f67f aee8 	bls.w	80073f0 <_scanf_float+0x80>
 8007620:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007624:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007628:	463a      	mov	r2, r7
 800762a:	4640      	mov	r0, r8
 800762c:	4798      	blx	r3
 800762e:	6923      	ldr	r3, [r4, #16]
 8007630:	3b01      	subs	r3, #1
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	e7f1      	b.n	800761a <_scanf_float+0x2aa>
 8007636:	9802      	ldr	r0, [sp, #8]
 8007638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800763c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007640:	9002      	str	r0, [sp, #8]
 8007642:	463a      	mov	r2, r7
 8007644:	4640      	mov	r0, r8
 8007646:	4798      	blx	r3
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	3b01      	subs	r3, #1
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007652:	fa5f fa8a 	uxtb.w	sl, sl
 8007656:	f1ba 0f02 	cmp.w	sl, #2
 800765a:	d1ec      	bne.n	8007636 <_scanf_float+0x2c6>
 800765c:	3d03      	subs	r5, #3
 800765e:	b2ed      	uxtb	r5, r5
 8007660:	1b76      	subs	r6, r6, r5
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	05da      	lsls	r2, r3, #23
 8007666:	d52f      	bpl.n	80076c8 <_scanf_float+0x358>
 8007668:	055b      	lsls	r3, r3, #21
 800766a:	d510      	bpl.n	800768e <_scanf_float+0x31e>
 800766c:	455e      	cmp	r6, fp
 800766e:	f67f aebf 	bls.w	80073f0 <_scanf_float+0x80>
 8007672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800767a:	463a      	mov	r2, r7
 800767c:	4640      	mov	r0, r8
 800767e:	4798      	blx	r3
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	3b01      	subs	r3, #1
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	e7f1      	b.n	800766c <_scanf_float+0x2fc>
 8007688:	46aa      	mov	sl, r5
 800768a:	9602      	str	r6, [sp, #8]
 800768c:	e7df      	b.n	800764e <_scanf_float+0x2de>
 800768e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	2965      	cmp	r1, #101	; 0x65
 8007696:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800769a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	d00c      	beq.n	80076bc <_scanf_float+0x34c>
 80076a2:	2945      	cmp	r1, #69	; 0x45
 80076a4:	d00a      	beq.n	80076bc <_scanf_float+0x34c>
 80076a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076aa:	463a      	mov	r2, r7
 80076ac:	4640      	mov	r0, r8
 80076ae:	4798      	blx	r3
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	1eb5      	subs	r5, r6, #2
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076c0:	463a      	mov	r2, r7
 80076c2:	4640      	mov	r0, r8
 80076c4:	4798      	blx	r3
 80076c6:	462e      	mov	r6, r5
 80076c8:	6825      	ldr	r5, [r4, #0]
 80076ca:	f015 0510 	ands.w	r5, r5, #16
 80076ce:	d159      	bne.n	8007784 <_scanf_float+0x414>
 80076d0:	7035      	strb	r5, [r6, #0]
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076dc:	d11b      	bne.n	8007716 <_scanf_float+0x3a6>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	454b      	cmp	r3, r9
 80076e2:	eba3 0209 	sub.w	r2, r3, r9
 80076e6:	d123      	bne.n	8007730 <_scanf_float+0x3c0>
 80076e8:	2200      	movs	r2, #0
 80076ea:	4659      	mov	r1, fp
 80076ec:	4640      	mov	r0, r8
 80076ee:	f000 fe99 	bl	8008424 <_strtod_r>
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	f012 0f02 	tst.w	r2, #2
 80076fa:	ec57 6b10 	vmov	r6, r7, d0
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	d021      	beq.n	8007746 <_scanf_float+0x3d6>
 8007702:	9903      	ldr	r1, [sp, #12]
 8007704:	1d1a      	adds	r2, r3, #4
 8007706:	600a      	str	r2, [r1, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	e9c3 6700 	strd	r6, r7, [r3]
 800770e:	68e3      	ldr	r3, [r4, #12]
 8007710:	3301      	adds	r3, #1
 8007712:	60e3      	str	r3, [r4, #12]
 8007714:	e66d      	b.n	80073f2 <_scanf_float+0x82>
 8007716:	9b04      	ldr	r3, [sp, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0e5      	beq.n	80076e8 <_scanf_float+0x378>
 800771c:	9905      	ldr	r1, [sp, #20]
 800771e:	230a      	movs	r3, #10
 8007720:	462a      	mov	r2, r5
 8007722:	3101      	adds	r1, #1
 8007724:	4640      	mov	r0, r8
 8007726:	f000 ff05 	bl	8008534 <_strtol_r>
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	9e05      	ldr	r6, [sp, #20]
 800772e:	1ac2      	subs	r2, r0, r3
 8007730:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007734:	429e      	cmp	r6, r3
 8007736:	bf28      	it	cs
 8007738:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800773c:	4912      	ldr	r1, [pc, #72]	; (8007788 <_scanf_float+0x418>)
 800773e:	4630      	mov	r0, r6
 8007740:	f000 f82c 	bl	800779c <siprintf>
 8007744:	e7d0      	b.n	80076e8 <_scanf_float+0x378>
 8007746:	9903      	ldr	r1, [sp, #12]
 8007748:	f012 0f04 	tst.w	r2, #4
 800774c:	f103 0204 	add.w	r2, r3, #4
 8007750:	600a      	str	r2, [r1, #0]
 8007752:	d1d9      	bne.n	8007708 <_scanf_float+0x398>
 8007754:	f8d3 8000 	ldr.w	r8, [r3]
 8007758:	ee10 2a10 	vmov	r2, s0
 800775c:	ee10 0a10 	vmov	r0, s0
 8007760:	463b      	mov	r3, r7
 8007762:	4639      	mov	r1, r7
 8007764:	f7f9 f9ea 	bl	8000b3c <__aeabi_dcmpun>
 8007768:	b128      	cbz	r0, 8007776 <_scanf_float+0x406>
 800776a:	4808      	ldr	r0, [pc, #32]	; (800778c <_scanf_float+0x41c>)
 800776c:	f000 f810 	bl	8007790 <nanf>
 8007770:	ed88 0a00 	vstr	s0, [r8]
 8007774:	e7cb      	b.n	800770e <_scanf_float+0x39e>
 8007776:	4630      	mov	r0, r6
 8007778:	4639      	mov	r1, r7
 800777a:	f7f9 fa3d 	bl	8000bf8 <__aeabi_d2f>
 800777e:	f8c8 0000 	str.w	r0, [r8]
 8007782:	e7c4      	b.n	800770e <_scanf_float+0x39e>
 8007784:	2500      	movs	r5, #0
 8007786:	e634      	b.n	80073f2 <_scanf_float+0x82>
 8007788:	0800b488 	.word	0x0800b488
 800778c:	0800b890 	.word	0x0800b890

08007790 <nanf>:
 8007790:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007798 <nanf+0x8>
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	7fc00000 	.word	0x7fc00000

0800779c <siprintf>:
 800779c:	b40e      	push	{r1, r2, r3}
 800779e:	b500      	push	{lr}
 80077a0:	b09c      	sub	sp, #112	; 0x70
 80077a2:	ab1d      	add	r3, sp, #116	; 0x74
 80077a4:	9002      	str	r0, [sp, #8]
 80077a6:	9006      	str	r0, [sp, #24]
 80077a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ac:	4809      	ldr	r0, [pc, #36]	; (80077d4 <siprintf+0x38>)
 80077ae:	9107      	str	r1, [sp, #28]
 80077b0:	9104      	str	r1, [sp, #16]
 80077b2:	4909      	ldr	r1, [pc, #36]	; (80077d8 <siprintf+0x3c>)
 80077b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b8:	9105      	str	r1, [sp, #20]
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	a902      	add	r1, sp, #8
 80077c0:	f002 fed6 	bl	800a570 <_svfiprintf_r>
 80077c4:	9b02      	ldr	r3, [sp, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	b01c      	add	sp, #112	; 0x70
 80077cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d0:	b003      	add	sp, #12
 80077d2:	4770      	bx	lr
 80077d4:	20000010 	.word	0x20000010
 80077d8:	ffff0208 	.word	0xffff0208

080077dc <sulp>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	4604      	mov	r4, r0
 80077e0:	460d      	mov	r5, r1
 80077e2:	ec45 4b10 	vmov	d0, r4, r5
 80077e6:	4616      	mov	r6, r2
 80077e8:	f002 fc20 	bl	800a02c <__ulp>
 80077ec:	ec51 0b10 	vmov	r0, r1, d0
 80077f0:	b17e      	cbz	r6, 8007812 <sulp+0x36>
 80077f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dd09      	ble.n	8007812 <sulp+0x36>
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007804:	2400      	movs	r4, #0
 8007806:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	f7f8 fefb 	bl	8000608 <__aeabi_dmul>
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	0000      	movs	r0, r0
	...

08007818 <_strtod_l>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	ed2d 8b02 	vpush	{d8}
 8007820:	b09d      	sub	sp, #116	; 0x74
 8007822:	461f      	mov	r7, r3
 8007824:	2300      	movs	r3, #0
 8007826:	9318      	str	r3, [sp, #96]	; 0x60
 8007828:	4ba2      	ldr	r3, [pc, #648]	; (8007ab4 <_strtod_l+0x29c>)
 800782a:	9213      	str	r2, [sp, #76]	; 0x4c
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	9305      	str	r3, [sp, #20]
 8007830:	4604      	mov	r4, r0
 8007832:	4618      	mov	r0, r3
 8007834:	4688      	mov	r8, r1
 8007836:	f7f8 fcd3 	bl	80001e0 <strlen>
 800783a:	f04f 0a00 	mov.w	sl, #0
 800783e:	4605      	mov	r5, r0
 8007840:	f04f 0b00 	mov.w	fp, #0
 8007844:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	2a2b      	cmp	r2, #43	; 0x2b
 800784e:	d04e      	beq.n	80078ee <_strtod_l+0xd6>
 8007850:	d83b      	bhi.n	80078ca <_strtod_l+0xb2>
 8007852:	2a0d      	cmp	r2, #13
 8007854:	d834      	bhi.n	80078c0 <_strtod_l+0xa8>
 8007856:	2a08      	cmp	r2, #8
 8007858:	d834      	bhi.n	80078c4 <_strtod_l+0xac>
 800785a:	2a00      	cmp	r2, #0
 800785c:	d03e      	beq.n	80078dc <_strtod_l+0xc4>
 800785e:	2300      	movs	r3, #0
 8007860:	930a      	str	r3, [sp, #40]	; 0x28
 8007862:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007864:	7833      	ldrb	r3, [r6, #0]
 8007866:	2b30      	cmp	r3, #48	; 0x30
 8007868:	f040 80b0 	bne.w	80079cc <_strtod_l+0x1b4>
 800786c:	7873      	ldrb	r3, [r6, #1]
 800786e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007872:	2b58      	cmp	r3, #88	; 0x58
 8007874:	d168      	bne.n	8007948 <_strtod_l+0x130>
 8007876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	ab18      	add	r3, sp, #96	; 0x60
 800787c:	9702      	str	r7, [sp, #8]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4a8d      	ldr	r2, [pc, #564]	; (8007ab8 <_strtod_l+0x2a0>)
 8007882:	ab19      	add	r3, sp, #100	; 0x64
 8007884:	a917      	add	r1, sp, #92	; 0x5c
 8007886:	4620      	mov	r0, r4
 8007888:	f001 fd38 	bl	80092fc <__gethex>
 800788c:	f010 0707 	ands.w	r7, r0, #7
 8007890:	4605      	mov	r5, r0
 8007892:	d005      	beq.n	80078a0 <_strtod_l+0x88>
 8007894:	2f06      	cmp	r7, #6
 8007896:	d12c      	bne.n	80078f2 <_strtod_l+0xda>
 8007898:	3601      	adds	r6, #1
 800789a:	2300      	movs	r3, #0
 800789c:	9617      	str	r6, [sp, #92]	; 0x5c
 800789e:	930a      	str	r3, [sp, #40]	; 0x28
 80078a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f040 8590 	bne.w	80083c8 <_strtod_l+0xbb0>
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	b1eb      	cbz	r3, 80078e8 <_strtod_l+0xd0>
 80078ac:	4652      	mov	r2, sl
 80078ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078b2:	ec43 2b10 	vmov	d0, r2, r3
 80078b6:	b01d      	add	sp, #116	; 0x74
 80078b8:	ecbd 8b02 	vpop	{d8}
 80078bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	2a20      	cmp	r2, #32
 80078c2:	d1cc      	bne.n	800785e <_strtod_l+0x46>
 80078c4:	3301      	adds	r3, #1
 80078c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80078c8:	e7be      	b.n	8007848 <_strtod_l+0x30>
 80078ca:	2a2d      	cmp	r2, #45	; 0x2d
 80078cc:	d1c7      	bne.n	800785e <_strtod_l+0x46>
 80078ce:	2201      	movs	r2, #1
 80078d0:	920a      	str	r2, [sp, #40]	; 0x28
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1c2      	bne.n	8007862 <_strtod_l+0x4a>
 80078dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 856e 	bne.w	80083c4 <_strtod_l+0xbac>
 80078e8:	4652      	mov	r2, sl
 80078ea:	465b      	mov	r3, fp
 80078ec:	e7e1      	b.n	80078b2 <_strtod_l+0x9a>
 80078ee:	2200      	movs	r2, #0
 80078f0:	e7ee      	b.n	80078d0 <_strtod_l+0xb8>
 80078f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80078f4:	b13a      	cbz	r2, 8007906 <_strtod_l+0xee>
 80078f6:	2135      	movs	r1, #53	; 0x35
 80078f8:	a81a      	add	r0, sp, #104	; 0x68
 80078fa:	f002 fca2 	bl	800a242 <__copybits>
 80078fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007900:	4620      	mov	r0, r4
 8007902:	f002 f861 	bl	80099c8 <_Bfree>
 8007906:	3f01      	subs	r7, #1
 8007908:	2f04      	cmp	r7, #4
 800790a:	d806      	bhi.n	800791a <_strtod_l+0x102>
 800790c:	e8df f007 	tbb	[pc, r7]
 8007910:	1714030a 	.word	0x1714030a
 8007914:	0a          	.byte	0x0a
 8007915:	00          	.byte	0x00
 8007916:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800791a:	0728      	lsls	r0, r5, #28
 800791c:	d5c0      	bpl.n	80078a0 <_strtod_l+0x88>
 800791e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007922:	e7bd      	b.n	80078a0 <_strtod_l+0x88>
 8007924:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007928:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800792a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800792e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007932:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007936:	e7f0      	b.n	800791a <_strtod_l+0x102>
 8007938:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007abc <_strtod_l+0x2a4>
 800793c:	e7ed      	b.n	800791a <_strtod_l+0x102>
 800793e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007942:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007946:	e7e8      	b.n	800791a <_strtod_l+0x102>
 8007948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	9217      	str	r2, [sp, #92]	; 0x5c
 800794e:	785b      	ldrb	r3, [r3, #1]
 8007950:	2b30      	cmp	r3, #48	; 0x30
 8007952:	d0f9      	beq.n	8007948 <_strtod_l+0x130>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0a3      	beq.n	80078a0 <_strtod_l+0x88>
 8007958:	2301      	movs	r3, #1
 800795a:	f04f 0900 	mov.w	r9, #0
 800795e:	9304      	str	r3, [sp, #16]
 8007960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	f8cd 901c 	str.w	r9, [sp, #28]
 8007968:	464f      	mov	r7, r9
 800796a:	220a      	movs	r2, #10
 800796c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800796e:	7806      	ldrb	r6, [r0, #0]
 8007970:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007974:	b2d9      	uxtb	r1, r3
 8007976:	2909      	cmp	r1, #9
 8007978:	d92a      	bls.n	80079d0 <_strtod_l+0x1b8>
 800797a:	9905      	ldr	r1, [sp, #20]
 800797c:	462a      	mov	r2, r5
 800797e:	f002 ff0f 	bl	800a7a0 <strncmp>
 8007982:	b398      	cbz	r0, 80079ec <_strtod_l+0x1d4>
 8007984:	2000      	movs	r0, #0
 8007986:	4632      	mov	r2, r6
 8007988:	463d      	mov	r5, r7
 800798a:	9005      	str	r0, [sp, #20]
 800798c:	4603      	mov	r3, r0
 800798e:	2a65      	cmp	r2, #101	; 0x65
 8007990:	d001      	beq.n	8007996 <_strtod_l+0x17e>
 8007992:	2a45      	cmp	r2, #69	; 0x45
 8007994:	d118      	bne.n	80079c8 <_strtod_l+0x1b0>
 8007996:	b91d      	cbnz	r5, 80079a0 <_strtod_l+0x188>
 8007998:	9a04      	ldr	r2, [sp, #16]
 800799a:	4302      	orrs	r2, r0
 800799c:	d09e      	beq.n	80078dc <_strtod_l+0xc4>
 800799e:	2500      	movs	r5, #0
 80079a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80079a4:	f108 0201 	add.w	r2, r8, #1
 80079a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80079aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80079ae:	2a2b      	cmp	r2, #43	; 0x2b
 80079b0:	d075      	beq.n	8007a9e <_strtod_l+0x286>
 80079b2:	2a2d      	cmp	r2, #45	; 0x2d
 80079b4:	d07b      	beq.n	8007aae <_strtod_l+0x296>
 80079b6:	f04f 0c00 	mov.w	ip, #0
 80079ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80079be:	2909      	cmp	r1, #9
 80079c0:	f240 8082 	bls.w	8007ac8 <_strtod_l+0x2b0>
 80079c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80079c8:	2600      	movs	r6, #0
 80079ca:	e09d      	b.n	8007b08 <_strtod_l+0x2f0>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e7c4      	b.n	800795a <_strtod_l+0x142>
 80079d0:	2f08      	cmp	r7, #8
 80079d2:	bfd8      	it	le
 80079d4:	9907      	ldrle	r1, [sp, #28]
 80079d6:	f100 0001 	add.w	r0, r0, #1
 80079da:	bfda      	itte	le
 80079dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80079e0:	9307      	strle	r3, [sp, #28]
 80079e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80079e6:	3701      	adds	r7, #1
 80079e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80079ea:	e7bf      	b.n	800796c <_strtod_l+0x154>
 80079ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079ee:	195a      	adds	r2, r3, r5
 80079f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80079f2:	5d5a      	ldrb	r2, [r3, r5]
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	d037      	beq.n	8007a68 <_strtod_l+0x250>
 80079f8:	9005      	str	r0, [sp, #20]
 80079fa:	463d      	mov	r5, r7
 80079fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a00:	2b09      	cmp	r3, #9
 8007a02:	d912      	bls.n	8007a2a <_strtod_l+0x212>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e7c2      	b.n	800798e <_strtod_l+0x176>
 8007a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a0e:	785a      	ldrb	r2, [r3, #1]
 8007a10:	3001      	adds	r0, #1
 8007a12:	2a30      	cmp	r2, #48	; 0x30
 8007a14:	d0f8      	beq.n	8007a08 <_strtod_l+0x1f0>
 8007a16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	f200 84d9 	bhi.w	80083d2 <_strtod_l+0xbba>
 8007a20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a22:	9005      	str	r0, [sp, #20]
 8007a24:	2000      	movs	r0, #0
 8007a26:	9308      	str	r3, [sp, #32]
 8007a28:	4605      	mov	r5, r0
 8007a2a:	3a30      	subs	r2, #48	; 0x30
 8007a2c:	f100 0301 	add.w	r3, r0, #1
 8007a30:	d014      	beq.n	8007a5c <_strtod_l+0x244>
 8007a32:	9905      	ldr	r1, [sp, #20]
 8007a34:	4419      	add	r1, r3
 8007a36:	9105      	str	r1, [sp, #20]
 8007a38:	462b      	mov	r3, r5
 8007a3a:	eb00 0e05 	add.w	lr, r0, r5
 8007a3e:	210a      	movs	r1, #10
 8007a40:	4573      	cmp	r3, lr
 8007a42:	d113      	bne.n	8007a6c <_strtod_l+0x254>
 8007a44:	182b      	adds	r3, r5, r0
 8007a46:	2b08      	cmp	r3, #8
 8007a48:	f105 0501 	add.w	r5, r5, #1
 8007a4c:	4405      	add	r5, r0
 8007a4e:	dc1c      	bgt.n	8007a8a <_strtod_l+0x272>
 8007a50:	9907      	ldr	r1, [sp, #28]
 8007a52:	230a      	movs	r3, #10
 8007a54:	fb03 2301 	mla	r3, r3, r1, r2
 8007a58:	9307      	str	r3, [sp, #28]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a5e:	1c51      	adds	r1, r2, #1
 8007a60:	9117      	str	r1, [sp, #92]	; 0x5c
 8007a62:	7852      	ldrb	r2, [r2, #1]
 8007a64:	4618      	mov	r0, r3
 8007a66:	e7c9      	b.n	80079fc <_strtod_l+0x1e4>
 8007a68:	4638      	mov	r0, r7
 8007a6a:	e7d2      	b.n	8007a12 <_strtod_l+0x1fa>
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	dc04      	bgt.n	8007a7a <_strtod_l+0x262>
 8007a70:	9e07      	ldr	r6, [sp, #28]
 8007a72:	434e      	muls	r6, r1
 8007a74:	9607      	str	r6, [sp, #28]
 8007a76:	3301      	adds	r3, #1
 8007a78:	e7e2      	b.n	8007a40 <_strtod_l+0x228>
 8007a7a:	f103 0c01 	add.w	ip, r3, #1
 8007a7e:	f1bc 0f10 	cmp.w	ip, #16
 8007a82:	bfd8      	it	le
 8007a84:	fb01 f909 	mulle.w	r9, r1, r9
 8007a88:	e7f5      	b.n	8007a76 <_strtod_l+0x25e>
 8007a8a:	2d10      	cmp	r5, #16
 8007a8c:	bfdc      	itt	le
 8007a8e:	230a      	movle	r3, #10
 8007a90:	fb03 2909 	mlale	r9, r3, r9, r2
 8007a94:	e7e1      	b.n	8007a5a <_strtod_l+0x242>
 8007a96:	2300      	movs	r3, #0
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e77c      	b.n	8007998 <_strtod_l+0x180>
 8007a9e:	f04f 0c00 	mov.w	ip, #0
 8007aa2:	f108 0202 	add.w	r2, r8, #2
 8007aa6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007aa8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007aac:	e785      	b.n	80079ba <_strtod_l+0x1a2>
 8007aae:	f04f 0c01 	mov.w	ip, #1
 8007ab2:	e7f6      	b.n	8007aa2 <_strtod_l+0x28a>
 8007ab4:	0800b6d8 	.word	0x0800b6d8
 8007ab8:	0800b490 	.word	0x0800b490
 8007abc:	7ff00000 	.word	0x7ff00000
 8007ac0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ac2:	1c51      	adds	r1, r2, #1
 8007ac4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ac6:	7852      	ldrb	r2, [r2, #1]
 8007ac8:	2a30      	cmp	r2, #48	; 0x30
 8007aca:	d0f9      	beq.n	8007ac0 <_strtod_l+0x2a8>
 8007acc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007ad0:	2908      	cmp	r1, #8
 8007ad2:	f63f af79 	bhi.w	80079c8 <_strtod_l+0x1b0>
 8007ad6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007ada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007adc:	9206      	str	r2, [sp, #24]
 8007ade:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ae0:	1c51      	adds	r1, r2, #1
 8007ae2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ae4:	7852      	ldrb	r2, [r2, #1]
 8007ae6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007aea:	2e09      	cmp	r6, #9
 8007aec:	d937      	bls.n	8007b5e <_strtod_l+0x346>
 8007aee:	9e06      	ldr	r6, [sp, #24]
 8007af0:	1b89      	subs	r1, r1, r6
 8007af2:	2908      	cmp	r1, #8
 8007af4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007af8:	dc02      	bgt.n	8007b00 <_strtod_l+0x2e8>
 8007afa:	4576      	cmp	r6, lr
 8007afc:	bfa8      	it	ge
 8007afe:	4676      	movge	r6, lr
 8007b00:	f1bc 0f00 	cmp.w	ip, #0
 8007b04:	d000      	beq.n	8007b08 <_strtod_l+0x2f0>
 8007b06:	4276      	negs	r6, r6
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	d14d      	bne.n	8007ba8 <_strtod_l+0x390>
 8007b0c:	9904      	ldr	r1, [sp, #16]
 8007b0e:	4301      	orrs	r1, r0
 8007b10:	f47f aec6 	bne.w	80078a0 <_strtod_l+0x88>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f aee1 	bne.w	80078dc <_strtod_l+0xc4>
 8007b1a:	2a69      	cmp	r2, #105	; 0x69
 8007b1c:	d027      	beq.n	8007b6e <_strtod_l+0x356>
 8007b1e:	dc24      	bgt.n	8007b6a <_strtod_l+0x352>
 8007b20:	2a49      	cmp	r2, #73	; 0x49
 8007b22:	d024      	beq.n	8007b6e <_strtod_l+0x356>
 8007b24:	2a4e      	cmp	r2, #78	; 0x4e
 8007b26:	f47f aed9 	bne.w	80078dc <_strtod_l+0xc4>
 8007b2a:	499f      	ldr	r1, [pc, #636]	; (8007da8 <_strtod_l+0x590>)
 8007b2c:	a817      	add	r0, sp, #92	; 0x5c
 8007b2e:	f001 fe3d 	bl	80097ac <__match>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	f43f aed2 	beq.w	80078dc <_strtod_l+0xc4>
 8007b38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b28      	cmp	r3, #40	; 0x28
 8007b3e:	d12d      	bne.n	8007b9c <_strtod_l+0x384>
 8007b40:	499a      	ldr	r1, [pc, #616]	; (8007dac <_strtod_l+0x594>)
 8007b42:	aa1a      	add	r2, sp, #104	; 0x68
 8007b44:	a817      	add	r0, sp, #92	; 0x5c
 8007b46:	f001 fe45 	bl	80097d4 <__hexnan>
 8007b4a:	2805      	cmp	r0, #5
 8007b4c:	d126      	bne.n	8007b9c <_strtod_l+0x384>
 8007b4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007b54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b5c:	e6a0      	b.n	80078a0 <_strtod_l+0x88>
 8007b5e:	210a      	movs	r1, #10
 8007b60:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007b64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007b68:	e7b9      	b.n	8007ade <_strtod_l+0x2c6>
 8007b6a:	2a6e      	cmp	r2, #110	; 0x6e
 8007b6c:	e7db      	b.n	8007b26 <_strtod_l+0x30e>
 8007b6e:	4990      	ldr	r1, [pc, #576]	; (8007db0 <_strtod_l+0x598>)
 8007b70:	a817      	add	r0, sp, #92	; 0x5c
 8007b72:	f001 fe1b 	bl	80097ac <__match>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f43f aeb0 	beq.w	80078dc <_strtod_l+0xc4>
 8007b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b7e:	498d      	ldr	r1, [pc, #564]	; (8007db4 <_strtod_l+0x59c>)
 8007b80:	3b01      	subs	r3, #1
 8007b82:	a817      	add	r0, sp, #92	; 0x5c
 8007b84:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b86:	f001 fe11 	bl	80097ac <__match>
 8007b8a:	b910      	cbnz	r0, 8007b92 <_strtod_l+0x37a>
 8007b8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b8e:	3301      	adds	r3, #1
 8007b90:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b92:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007dc4 <_strtod_l+0x5ac>
 8007b96:	f04f 0a00 	mov.w	sl, #0
 8007b9a:	e681      	b.n	80078a0 <_strtod_l+0x88>
 8007b9c:	4886      	ldr	r0, [pc, #536]	; (8007db8 <_strtod_l+0x5a0>)
 8007b9e:	f002 fde7 	bl	800a770 <nan>
 8007ba2:	ec5b ab10 	vmov	sl, fp, d0
 8007ba6:	e67b      	b.n	80078a0 <_strtod_l+0x88>
 8007ba8:	9b05      	ldr	r3, [sp, #20]
 8007baa:	9807      	ldr	r0, [sp, #28]
 8007bac:	1af3      	subs	r3, r6, r3
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	bf08      	it	eq
 8007bb2:	462f      	moveq	r7, r5
 8007bb4:	2d10      	cmp	r5, #16
 8007bb6:	9306      	str	r3, [sp, #24]
 8007bb8:	46a8      	mov	r8, r5
 8007bba:	bfa8      	it	ge
 8007bbc:	f04f 0810 	movge.w	r8, #16
 8007bc0:	f7f8 fca8 	bl	8000514 <__aeabi_ui2d>
 8007bc4:	2d09      	cmp	r5, #9
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	468b      	mov	fp, r1
 8007bca:	dd13      	ble.n	8007bf4 <_strtod_l+0x3dc>
 8007bcc:	4b7b      	ldr	r3, [pc, #492]	; (8007dbc <_strtod_l+0x5a4>)
 8007bce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007bd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007bd6:	f7f8 fd17 	bl	8000608 <__aeabi_dmul>
 8007bda:	4682      	mov	sl, r0
 8007bdc:	4648      	mov	r0, r9
 8007bde:	468b      	mov	fp, r1
 8007be0:	f7f8 fc98 	bl	8000514 <__aeabi_ui2d>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4650      	mov	r0, sl
 8007bea:	4659      	mov	r1, fp
 8007bec:	f7f8 fb56 	bl	800029c <__adddf3>
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	468b      	mov	fp, r1
 8007bf4:	2d0f      	cmp	r5, #15
 8007bf6:	dc38      	bgt.n	8007c6a <_strtod_l+0x452>
 8007bf8:	9b06      	ldr	r3, [sp, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f43f ae50 	beq.w	80078a0 <_strtod_l+0x88>
 8007c00:	dd24      	ble.n	8007c4c <_strtod_l+0x434>
 8007c02:	2b16      	cmp	r3, #22
 8007c04:	dc0b      	bgt.n	8007c1e <_strtod_l+0x406>
 8007c06:	496d      	ldr	r1, [pc, #436]	; (8007dbc <_strtod_l+0x5a4>)
 8007c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c10:	4652      	mov	r2, sl
 8007c12:	465b      	mov	r3, fp
 8007c14:	f7f8 fcf8 	bl	8000608 <__aeabi_dmul>
 8007c18:	4682      	mov	sl, r0
 8007c1a:	468b      	mov	fp, r1
 8007c1c:	e640      	b.n	80078a0 <_strtod_l+0x88>
 8007c1e:	9a06      	ldr	r2, [sp, #24]
 8007c20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007c24:	4293      	cmp	r3, r2
 8007c26:	db20      	blt.n	8007c6a <_strtod_l+0x452>
 8007c28:	4c64      	ldr	r4, [pc, #400]	; (8007dbc <_strtod_l+0x5a4>)
 8007c2a:	f1c5 050f 	rsb	r5, r5, #15
 8007c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c32:	4652      	mov	r2, sl
 8007c34:	465b      	mov	r3, fp
 8007c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c3a:	f7f8 fce5 	bl	8000608 <__aeabi_dmul>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	1b5d      	subs	r5, r3, r5
 8007c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c4a:	e7e3      	b.n	8007c14 <_strtod_l+0x3fc>
 8007c4c:	9b06      	ldr	r3, [sp, #24]
 8007c4e:	3316      	adds	r3, #22
 8007c50:	db0b      	blt.n	8007c6a <_strtod_l+0x452>
 8007c52:	9b05      	ldr	r3, [sp, #20]
 8007c54:	1b9e      	subs	r6, r3, r6
 8007c56:	4b59      	ldr	r3, [pc, #356]	; (8007dbc <_strtod_l+0x5a4>)
 8007c58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	f7f8 fdfa 	bl	800085c <__aeabi_ddiv>
 8007c68:	e7d6      	b.n	8007c18 <_strtod_l+0x400>
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	eba5 0808 	sub.w	r8, r5, r8
 8007c70:	4498      	add	r8, r3
 8007c72:	f1b8 0f00 	cmp.w	r8, #0
 8007c76:	dd74      	ble.n	8007d62 <_strtod_l+0x54a>
 8007c78:	f018 030f 	ands.w	r3, r8, #15
 8007c7c:	d00a      	beq.n	8007c94 <_strtod_l+0x47c>
 8007c7e:	494f      	ldr	r1, [pc, #316]	; (8007dbc <_strtod_l+0x5a4>)
 8007c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c84:	4652      	mov	r2, sl
 8007c86:	465b      	mov	r3, fp
 8007c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c8c:	f7f8 fcbc 	bl	8000608 <__aeabi_dmul>
 8007c90:	4682      	mov	sl, r0
 8007c92:	468b      	mov	fp, r1
 8007c94:	f038 080f 	bics.w	r8, r8, #15
 8007c98:	d04f      	beq.n	8007d3a <_strtod_l+0x522>
 8007c9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007c9e:	dd22      	ble.n	8007ce6 <_strtod_l+0x4ce>
 8007ca0:	2500      	movs	r5, #0
 8007ca2:	462e      	mov	r6, r5
 8007ca4:	9507      	str	r5, [sp, #28]
 8007ca6:	9505      	str	r5, [sp, #20]
 8007ca8:	2322      	movs	r3, #34	; 0x22
 8007caa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007dc4 <_strtod_l+0x5ac>
 8007cae:	6023      	str	r3, [r4, #0]
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f43f adf2 	beq.w	80078a0 <_strtod_l+0x88>
 8007cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f001 fe82 	bl	80099c8 <_Bfree>
 8007cc4:	9905      	ldr	r1, [sp, #20]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f001 fe7e 	bl	80099c8 <_Bfree>
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f001 fe7a 	bl	80099c8 <_Bfree>
 8007cd4:	9907      	ldr	r1, [sp, #28]
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f001 fe76 	bl	80099c8 <_Bfree>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f001 fe72 	bl	80099c8 <_Bfree>
 8007ce4:	e5dc      	b.n	80078a0 <_strtod_l+0x88>
 8007ce6:	4b36      	ldr	r3, [pc, #216]	; (8007dc0 <_strtod_l+0x5a8>)
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	2300      	movs	r3, #0
 8007cec:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007cf0:	4650      	mov	r0, sl
 8007cf2:	4659      	mov	r1, fp
 8007cf4:	4699      	mov	r9, r3
 8007cf6:	f1b8 0f01 	cmp.w	r8, #1
 8007cfa:	dc21      	bgt.n	8007d40 <_strtod_l+0x528>
 8007cfc:	b10b      	cbz	r3, 8007d02 <_strtod_l+0x4ea>
 8007cfe:	4682      	mov	sl, r0
 8007d00:	468b      	mov	fp, r1
 8007d02:	4b2f      	ldr	r3, [pc, #188]	; (8007dc0 <_strtod_l+0x5a8>)
 8007d04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007d08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	465b      	mov	r3, fp
 8007d10:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007d14:	f7f8 fc78 	bl	8000608 <__aeabi_dmul>
 8007d18:	4b2a      	ldr	r3, [pc, #168]	; (8007dc4 <_strtod_l+0x5ac>)
 8007d1a:	460a      	mov	r2, r1
 8007d1c:	400b      	ands	r3, r1
 8007d1e:	492a      	ldr	r1, [pc, #168]	; (8007dc8 <_strtod_l+0x5b0>)
 8007d20:	428b      	cmp	r3, r1
 8007d22:	4682      	mov	sl, r0
 8007d24:	d8bc      	bhi.n	8007ca0 <_strtod_l+0x488>
 8007d26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d2a:	428b      	cmp	r3, r1
 8007d2c:	bf86      	itte	hi
 8007d2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007dcc <_strtod_l+0x5b4>
 8007d32:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007d36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	e084      	b.n	8007e4a <_strtod_l+0x632>
 8007d40:	f018 0f01 	tst.w	r8, #1
 8007d44:	d005      	beq.n	8007d52 <_strtod_l+0x53a>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fc5c 	bl	8000608 <__aeabi_dmul>
 8007d50:	2301      	movs	r3, #1
 8007d52:	9a04      	ldr	r2, [sp, #16]
 8007d54:	3208      	adds	r2, #8
 8007d56:	f109 0901 	add.w	r9, r9, #1
 8007d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007d5e:	9204      	str	r2, [sp, #16]
 8007d60:	e7c9      	b.n	8007cf6 <_strtod_l+0x4de>
 8007d62:	d0ea      	beq.n	8007d3a <_strtod_l+0x522>
 8007d64:	f1c8 0800 	rsb	r8, r8, #0
 8007d68:	f018 020f 	ands.w	r2, r8, #15
 8007d6c:	d00a      	beq.n	8007d84 <_strtod_l+0x56c>
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <_strtod_l+0x5a4>)
 8007d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d74:	4650      	mov	r0, sl
 8007d76:	4659      	mov	r1, fp
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f7f8 fd6e 	bl	800085c <__aeabi_ddiv>
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007d88:	d0d7      	beq.n	8007d3a <_strtod_l+0x522>
 8007d8a:	f1b8 0f1f 	cmp.w	r8, #31
 8007d8e:	dd1f      	ble.n	8007dd0 <_strtod_l+0x5b8>
 8007d90:	2500      	movs	r5, #0
 8007d92:	462e      	mov	r6, r5
 8007d94:	9507      	str	r5, [sp, #28]
 8007d96:	9505      	str	r5, [sp, #20]
 8007d98:	2322      	movs	r3, #34	; 0x22
 8007d9a:	f04f 0a00 	mov.w	sl, #0
 8007d9e:	f04f 0b00 	mov.w	fp, #0
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	e786      	b.n	8007cb4 <_strtod_l+0x49c>
 8007da6:	bf00      	nop
 8007da8:	0800b461 	.word	0x0800b461
 8007dac:	0800b4a4 	.word	0x0800b4a4
 8007db0:	0800b459 	.word	0x0800b459
 8007db4:	0800b5e4 	.word	0x0800b5e4
 8007db8:	0800b890 	.word	0x0800b890
 8007dbc:	0800b770 	.word	0x0800b770
 8007dc0:	0800b748 	.word	0x0800b748
 8007dc4:	7ff00000 	.word	0x7ff00000
 8007dc8:	7ca00000 	.word	0x7ca00000
 8007dcc:	7fefffff 	.word	0x7fefffff
 8007dd0:	f018 0310 	ands.w	r3, r8, #16
 8007dd4:	bf18      	it	ne
 8007dd6:	236a      	movne	r3, #106	; 0x6a
 8007dd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008188 <_strtod_l+0x970>
 8007ddc:	9304      	str	r3, [sp, #16]
 8007dde:	4650      	mov	r0, sl
 8007de0:	4659      	mov	r1, fp
 8007de2:	2300      	movs	r3, #0
 8007de4:	f018 0f01 	tst.w	r8, #1
 8007de8:	d004      	beq.n	8007df4 <_strtod_l+0x5dc>
 8007dea:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007dee:	f7f8 fc0b 	bl	8000608 <__aeabi_dmul>
 8007df2:	2301      	movs	r3, #1
 8007df4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007df8:	f109 0908 	add.w	r9, r9, #8
 8007dfc:	d1f2      	bne.n	8007de4 <_strtod_l+0x5cc>
 8007dfe:	b10b      	cbz	r3, 8007e04 <_strtod_l+0x5ec>
 8007e00:	4682      	mov	sl, r0
 8007e02:	468b      	mov	fp, r1
 8007e04:	9b04      	ldr	r3, [sp, #16]
 8007e06:	b1c3      	cbz	r3, 8007e3a <_strtod_l+0x622>
 8007e08:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007e0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	4659      	mov	r1, fp
 8007e14:	dd11      	ble.n	8007e3a <_strtod_l+0x622>
 8007e16:	2b1f      	cmp	r3, #31
 8007e18:	f340 8124 	ble.w	8008064 <_strtod_l+0x84c>
 8007e1c:	2b34      	cmp	r3, #52	; 0x34
 8007e1e:	bfde      	ittt	le
 8007e20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e24:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007e28:	fa03 f202 	lslle.w	r2, r3, r2
 8007e2c:	f04f 0a00 	mov.w	sl, #0
 8007e30:	bfcc      	ite	gt
 8007e32:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007e36:	ea02 0b01 	andle.w	fp, r2, r1
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4650      	mov	r0, sl
 8007e40:	4659      	mov	r1, fp
 8007e42:	f7f8 fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1a2      	bne.n	8007d90 <_strtod_l+0x578>
 8007e4a:	9b07      	ldr	r3, [sp, #28]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	9908      	ldr	r1, [sp, #32]
 8007e50:	462b      	mov	r3, r5
 8007e52:	463a      	mov	r2, r7
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 fe1f 	bl	8009a98 <__s2b>
 8007e5a:	9007      	str	r0, [sp, #28]
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f43f af1f 	beq.w	8007ca0 <_strtod_l+0x488>
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	1b9e      	subs	r6, r3, r6
 8007e66:	9b06      	ldr	r3, [sp, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	bfb4      	ite	lt
 8007e6c:	4633      	movlt	r3, r6
 8007e6e:	2300      	movge	r3, #0
 8007e70:	930c      	str	r3, [sp, #48]	; 0x30
 8007e72:	9b06      	ldr	r3, [sp, #24]
 8007e74:	2500      	movs	r5, #0
 8007e76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007e7a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e7c:	462e      	mov	r6, r5
 8007e7e:	9b07      	ldr	r3, [sp, #28]
 8007e80:	4620      	mov	r0, r4
 8007e82:	6859      	ldr	r1, [r3, #4]
 8007e84:	f001 fd60 	bl	8009948 <_Balloc>
 8007e88:	9005      	str	r0, [sp, #20]
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f43f af0c 	beq.w	8007ca8 <_strtod_l+0x490>
 8007e90:	9b07      	ldr	r3, [sp, #28]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	3202      	adds	r2, #2
 8007e96:	f103 010c 	add.w	r1, r3, #12
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	300c      	adds	r0, #12
 8007e9e:	f7fe fde7 	bl	8006a70 <memcpy>
 8007ea2:	ec4b ab10 	vmov	d0, sl, fp
 8007ea6:	aa1a      	add	r2, sp, #104	; 0x68
 8007ea8:	a919      	add	r1, sp, #100	; 0x64
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f002 f93a 	bl	800a124 <__d2b>
 8007eb0:	ec4b ab18 	vmov	d8, sl, fp
 8007eb4:	9018      	str	r0, [sp, #96]	; 0x60
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f43f aef6 	beq.w	8007ca8 <_strtod_l+0x490>
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f001 fe84 	bl	8009bcc <__i2b>
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f43f aeee 	beq.w	8007ca8 <_strtod_l+0x490>
 8007ecc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ece:	9904      	ldr	r1, [sp, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bfab      	itete	ge
 8007ed4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007ed6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007ed8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007eda:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007ede:	bfac      	ite	ge
 8007ee0:	eb03 0902 	addge.w	r9, r3, r2
 8007ee4:	1ad7      	sublt	r7, r2, r3
 8007ee6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ee8:	eba3 0801 	sub.w	r8, r3, r1
 8007eec:	4490      	add	r8, r2
 8007eee:	4ba1      	ldr	r3, [pc, #644]	; (8008174 <_strtod_l+0x95c>)
 8007ef0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007ef4:	4598      	cmp	r8, r3
 8007ef6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007efa:	f280 80c7 	bge.w	800808c <_strtod_l+0x874>
 8007efe:	eba3 0308 	sub.w	r3, r3, r8
 8007f02:	2b1f      	cmp	r3, #31
 8007f04:	eba2 0203 	sub.w	r2, r2, r3
 8007f08:	f04f 0101 	mov.w	r1, #1
 8007f0c:	f300 80b1 	bgt.w	8008072 <_strtod_l+0x85a>
 8007f10:	fa01 f303 	lsl.w	r3, r1, r3
 8007f14:	930d      	str	r3, [sp, #52]	; 0x34
 8007f16:	2300      	movs	r3, #0
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	eb09 0802 	add.w	r8, r9, r2
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	45c1      	cmp	r9, r8
 8007f22:	4417      	add	r7, r2
 8007f24:	441f      	add	r7, r3
 8007f26:	464b      	mov	r3, r9
 8007f28:	bfa8      	it	ge
 8007f2a:	4643      	movge	r3, r8
 8007f2c:	42bb      	cmp	r3, r7
 8007f2e:	bfa8      	it	ge
 8007f30:	463b      	movge	r3, r7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bfc2      	ittt	gt
 8007f36:	eba8 0803 	subgt.w	r8, r8, r3
 8007f3a:	1aff      	subgt	r7, r7, r3
 8007f3c:	eba9 0903 	subgt.w	r9, r9, r3
 8007f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd17      	ble.n	8007f76 <_strtod_l+0x75e>
 8007f46:	4631      	mov	r1, r6
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f001 fefe 	bl	8009d4c <__pow5mult>
 8007f50:	4606      	mov	r6, r0
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f aea8 	beq.w	8007ca8 <_strtod_l+0x490>
 8007f58:	4601      	mov	r1, r0
 8007f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f001 fe4b 	bl	8009bf8 <__multiply>
 8007f62:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f64:	2800      	cmp	r0, #0
 8007f66:	f43f ae9f 	beq.w	8007ca8 <_strtod_l+0x490>
 8007f6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f001 fd2b 	bl	80099c8 <_Bfree>
 8007f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f74:	9318      	str	r3, [sp, #96]	; 0x60
 8007f76:	f1b8 0f00 	cmp.w	r8, #0
 8007f7a:	f300 808c 	bgt.w	8008096 <_strtod_l+0x87e>
 8007f7e:	9b06      	ldr	r3, [sp, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	dd08      	ble.n	8007f96 <_strtod_l+0x77e>
 8007f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f86:	9905      	ldr	r1, [sp, #20]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f001 fedf 	bl	8009d4c <__pow5mult>
 8007f8e:	9005      	str	r0, [sp, #20]
 8007f90:	2800      	cmp	r0, #0
 8007f92:	f43f ae89 	beq.w	8007ca8 <_strtod_l+0x490>
 8007f96:	2f00      	cmp	r7, #0
 8007f98:	dd08      	ble.n	8007fac <_strtod_l+0x794>
 8007f9a:	9905      	ldr	r1, [sp, #20]
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f001 ff2e 	bl	8009e00 <__lshift>
 8007fa4:	9005      	str	r0, [sp, #20]
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f43f ae7e 	beq.w	8007ca8 <_strtod_l+0x490>
 8007fac:	f1b9 0f00 	cmp.w	r9, #0
 8007fb0:	dd08      	ble.n	8007fc4 <_strtod_l+0x7ac>
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	464a      	mov	r2, r9
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f001 ff22 	bl	8009e00 <__lshift>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f43f ae72 	beq.w	8007ca8 <_strtod_l+0x490>
 8007fc4:	9a05      	ldr	r2, [sp, #20]
 8007fc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f001 ffa5 	bl	8009f18 <__mdiff>
 8007fce:	4605      	mov	r5, r0
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f43f ae69 	beq.w	8007ca8 <_strtod_l+0x490>
 8007fd6:	68c3      	ldr	r3, [r0, #12]
 8007fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fda:	2300      	movs	r3, #0
 8007fdc:	60c3      	str	r3, [r0, #12]
 8007fde:	4631      	mov	r1, r6
 8007fe0:	f001 ff7e 	bl	8009ee0 <__mcmp>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	da60      	bge.n	80080aa <_strtod_l+0x892>
 8007fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fea:	ea53 030a 	orrs.w	r3, r3, sl
 8007fee:	f040 8082 	bne.w	80080f6 <_strtod_l+0x8de>
 8007ff2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d17d      	bne.n	80080f6 <_strtod_l+0x8de>
 8007ffa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ffe:	0d1b      	lsrs	r3, r3, #20
 8008000:	051b      	lsls	r3, r3, #20
 8008002:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008006:	d976      	bls.n	80080f6 <_strtod_l+0x8de>
 8008008:	696b      	ldr	r3, [r5, #20]
 800800a:	b913      	cbnz	r3, 8008012 <_strtod_l+0x7fa>
 800800c:	692b      	ldr	r3, [r5, #16]
 800800e:	2b01      	cmp	r3, #1
 8008010:	dd71      	ble.n	80080f6 <_strtod_l+0x8de>
 8008012:	4629      	mov	r1, r5
 8008014:	2201      	movs	r2, #1
 8008016:	4620      	mov	r0, r4
 8008018:	f001 fef2 	bl	8009e00 <__lshift>
 800801c:	4631      	mov	r1, r6
 800801e:	4605      	mov	r5, r0
 8008020:	f001 ff5e 	bl	8009ee0 <__mcmp>
 8008024:	2800      	cmp	r0, #0
 8008026:	dd66      	ble.n	80080f6 <_strtod_l+0x8de>
 8008028:	9904      	ldr	r1, [sp, #16]
 800802a:	4a53      	ldr	r2, [pc, #332]	; (8008178 <_strtod_l+0x960>)
 800802c:	465b      	mov	r3, fp
 800802e:	2900      	cmp	r1, #0
 8008030:	f000 8081 	beq.w	8008136 <_strtod_l+0x91e>
 8008034:	ea02 010b 	and.w	r1, r2, fp
 8008038:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800803c:	dc7b      	bgt.n	8008136 <_strtod_l+0x91e>
 800803e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008042:	f77f aea9 	ble.w	8007d98 <_strtod_l+0x580>
 8008046:	4b4d      	ldr	r3, [pc, #308]	; (800817c <_strtod_l+0x964>)
 8008048:	4650      	mov	r0, sl
 800804a:	4659      	mov	r1, fp
 800804c:	2200      	movs	r2, #0
 800804e:	f7f8 fadb 	bl	8000608 <__aeabi_dmul>
 8008052:	460b      	mov	r3, r1
 8008054:	4303      	orrs	r3, r0
 8008056:	bf08      	it	eq
 8008058:	2322      	moveq	r3, #34	; 0x22
 800805a:	4682      	mov	sl, r0
 800805c:	468b      	mov	fp, r1
 800805e:	bf08      	it	eq
 8008060:	6023      	streq	r3, [r4, #0]
 8008062:	e62b      	b.n	8007cbc <_strtod_l+0x4a4>
 8008064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	ea03 0a0a 	and.w	sl, r3, sl
 8008070:	e6e3      	b.n	8007e3a <_strtod_l+0x622>
 8008072:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008076:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800807a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800807e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008082:	fa01 f308 	lsl.w	r3, r1, r8
 8008086:	9308      	str	r3, [sp, #32]
 8008088:	910d      	str	r1, [sp, #52]	; 0x34
 800808a:	e746      	b.n	8007f1a <_strtod_l+0x702>
 800808c:	2300      	movs	r3, #0
 800808e:	9308      	str	r3, [sp, #32]
 8008090:	2301      	movs	r3, #1
 8008092:	930d      	str	r3, [sp, #52]	; 0x34
 8008094:	e741      	b.n	8007f1a <_strtod_l+0x702>
 8008096:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008098:	4642      	mov	r2, r8
 800809a:	4620      	mov	r0, r4
 800809c:	f001 feb0 	bl	8009e00 <__lshift>
 80080a0:	9018      	str	r0, [sp, #96]	; 0x60
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f47f af6b 	bne.w	8007f7e <_strtod_l+0x766>
 80080a8:	e5fe      	b.n	8007ca8 <_strtod_l+0x490>
 80080aa:	465f      	mov	r7, fp
 80080ac:	d16e      	bne.n	800818c <_strtod_l+0x974>
 80080ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080b4:	b342      	cbz	r2, 8008108 <_strtod_l+0x8f0>
 80080b6:	4a32      	ldr	r2, [pc, #200]	; (8008180 <_strtod_l+0x968>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d128      	bne.n	800810e <_strtod_l+0x8f6>
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	4651      	mov	r1, sl
 80080c0:	b1eb      	cbz	r3, 80080fe <_strtod_l+0x8e6>
 80080c2:	4b2d      	ldr	r3, [pc, #180]	; (8008178 <_strtod_l+0x960>)
 80080c4:	403b      	ands	r3, r7
 80080c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ce:	d819      	bhi.n	8008104 <_strtod_l+0x8ec>
 80080d0:	0d1b      	lsrs	r3, r3, #20
 80080d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080d6:	fa02 f303 	lsl.w	r3, r2, r3
 80080da:	4299      	cmp	r1, r3
 80080dc:	d117      	bne.n	800810e <_strtod_l+0x8f6>
 80080de:	4b29      	ldr	r3, [pc, #164]	; (8008184 <_strtod_l+0x96c>)
 80080e0:	429f      	cmp	r7, r3
 80080e2:	d102      	bne.n	80080ea <_strtod_l+0x8d2>
 80080e4:	3101      	adds	r1, #1
 80080e6:	f43f addf 	beq.w	8007ca8 <_strtod_l+0x490>
 80080ea:	4b23      	ldr	r3, [pc, #140]	; (8008178 <_strtod_l+0x960>)
 80080ec:	403b      	ands	r3, r7
 80080ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80080f2:	f04f 0a00 	mov.w	sl, #0
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1a4      	bne.n	8008046 <_strtod_l+0x82e>
 80080fc:	e5de      	b.n	8007cbc <_strtod_l+0x4a4>
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008102:	e7ea      	b.n	80080da <_strtod_l+0x8c2>
 8008104:	4613      	mov	r3, r2
 8008106:	e7e8      	b.n	80080da <_strtod_l+0x8c2>
 8008108:	ea53 030a 	orrs.w	r3, r3, sl
 800810c:	d08c      	beq.n	8008028 <_strtod_l+0x810>
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	b1db      	cbz	r3, 800814a <_strtod_l+0x932>
 8008112:	423b      	tst	r3, r7
 8008114:	d0ef      	beq.n	80080f6 <_strtod_l+0x8de>
 8008116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008118:	9a04      	ldr	r2, [sp, #16]
 800811a:	4650      	mov	r0, sl
 800811c:	4659      	mov	r1, fp
 800811e:	b1c3      	cbz	r3, 8008152 <_strtod_l+0x93a>
 8008120:	f7ff fb5c 	bl	80077dc <sulp>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	ec51 0b18 	vmov	r0, r1, d8
 800812c:	f7f8 f8b6 	bl	800029c <__adddf3>
 8008130:	4682      	mov	sl, r0
 8008132:	468b      	mov	fp, r1
 8008134:	e7df      	b.n	80080f6 <_strtod_l+0x8de>
 8008136:	4013      	ands	r3, r2
 8008138:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800813c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008140:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008144:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008148:	e7d5      	b.n	80080f6 <_strtod_l+0x8de>
 800814a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800814c:	ea13 0f0a 	tst.w	r3, sl
 8008150:	e7e0      	b.n	8008114 <_strtod_l+0x8fc>
 8008152:	f7ff fb43 	bl	80077dc <sulp>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	ec51 0b18 	vmov	r0, r1, d8
 800815e:	f7f8 f89b 	bl	8000298 <__aeabi_dsub>
 8008162:	2200      	movs	r2, #0
 8008164:	2300      	movs	r3, #0
 8008166:	4682      	mov	sl, r0
 8008168:	468b      	mov	fp, r1
 800816a:	f7f8 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800816e:	2800      	cmp	r0, #0
 8008170:	d0c1      	beq.n	80080f6 <_strtod_l+0x8de>
 8008172:	e611      	b.n	8007d98 <_strtod_l+0x580>
 8008174:	fffffc02 	.word	0xfffffc02
 8008178:	7ff00000 	.word	0x7ff00000
 800817c:	39500000 	.word	0x39500000
 8008180:	000fffff 	.word	0x000fffff
 8008184:	7fefffff 	.word	0x7fefffff
 8008188:	0800b4b8 	.word	0x0800b4b8
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	f002 f824 	bl	800a1dc <__ratio>
 8008194:	ec59 8b10 	vmov	r8, r9, d0
 8008198:	ee10 0a10 	vmov	r0, s0
 800819c:	2200      	movs	r2, #0
 800819e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081a2:	4649      	mov	r1, r9
 80081a4:	f7f8 fcac 	bl	8000b00 <__aeabi_dcmple>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d07a      	beq.n	80082a2 <_strtod_l+0xa8a>
 80081ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d04a      	beq.n	8008248 <_strtod_l+0xa30>
 80081b2:	4b95      	ldr	r3, [pc, #596]	; (8008408 <_strtod_l+0xbf0>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008408 <_strtod_l+0xbf0>
 80081be:	f04f 0800 	mov.w	r8, #0
 80081c2:	4b92      	ldr	r3, [pc, #584]	; (800840c <_strtod_l+0xbf4>)
 80081c4:	403b      	ands	r3, r7
 80081c6:	930d      	str	r3, [sp, #52]	; 0x34
 80081c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081ca:	4b91      	ldr	r3, [pc, #580]	; (8008410 <_strtod_l+0xbf8>)
 80081cc:	429a      	cmp	r2, r3
 80081ce:	f040 80b0 	bne.w	8008332 <_strtod_l+0xb1a>
 80081d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80081da:	ec4b ab10 	vmov	d0, sl, fp
 80081de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80081e2:	f001 ff23 	bl	800a02c <__ulp>
 80081e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081ea:	ec53 2b10 	vmov	r2, r3, d0
 80081ee:	f7f8 fa0b 	bl	8000608 <__aeabi_dmul>
 80081f2:	4652      	mov	r2, sl
 80081f4:	465b      	mov	r3, fp
 80081f6:	f7f8 f851 	bl	800029c <__adddf3>
 80081fa:	460b      	mov	r3, r1
 80081fc:	4983      	ldr	r1, [pc, #524]	; (800840c <_strtod_l+0xbf4>)
 80081fe:	4a85      	ldr	r2, [pc, #532]	; (8008414 <_strtod_l+0xbfc>)
 8008200:	4019      	ands	r1, r3
 8008202:	4291      	cmp	r1, r2
 8008204:	4682      	mov	sl, r0
 8008206:	d960      	bls.n	80082ca <_strtod_l+0xab2>
 8008208:	ee18 3a90 	vmov	r3, s17
 800820c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008210:	4293      	cmp	r3, r2
 8008212:	d104      	bne.n	800821e <_strtod_l+0xa06>
 8008214:	ee18 3a10 	vmov	r3, s16
 8008218:	3301      	adds	r3, #1
 800821a:	f43f ad45 	beq.w	8007ca8 <_strtod_l+0x490>
 800821e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008420 <_strtod_l+0xc08>
 8008222:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008228:	4620      	mov	r0, r4
 800822a:	f001 fbcd 	bl	80099c8 <_Bfree>
 800822e:	9905      	ldr	r1, [sp, #20]
 8008230:	4620      	mov	r0, r4
 8008232:	f001 fbc9 	bl	80099c8 <_Bfree>
 8008236:	4631      	mov	r1, r6
 8008238:	4620      	mov	r0, r4
 800823a:	f001 fbc5 	bl	80099c8 <_Bfree>
 800823e:	4629      	mov	r1, r5
 8008240:	4620      	mov	r0, r4
 8008242:	f001 fbc1 	bl	80099c8 <_Bfree>
 8008246:	e61a      	b.n	8007e7e <_strtod_l+0x666>
 8008248:	f1ba 0f00 	cmp.w	sl, #0
 800824c:	d11b      	bne.n	8008286 <_strtod_l+0xa6e>
 800824e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008252:	b9f3      	cbnz	r3, 8008292 <_strtod_l+0xa7a>
 8008254:	4b6c      	ldr	r3, [pc, #432]	; (8008408 <_strtod_l+0xbf0>)
 8008256:	2200      	movs	r2, #0
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 fc46 	bl	8000aec <__aeabi_dcmplt>
 8008260:	b9d0      	cbnz	r0, 8008298 <_strtod_l+0xa80>
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	4b6c      	ldr	r3, [pc, #432]	; (8008418 <_strtod_l+0xc00>)
 8008268:	2200      	movs	r2, #0
 800826a:	f7f8 f9cd 	bl	8000608 <__aeabi_dmul>
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008276:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800827a:	9315      	str	r3, [sp, #84]	; 0x54
 800827c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008280:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008284:	e79d      	b.n	80081c2 <_strtod_l+0x9aa>
 8008286:	f1ba 0f01 	cmp.w	sl, #1
 800828a:	d102      	bne.n	8008292 <_strtod_l+0xa7a>
 800828c:	2f00      	cmp	r7, #0
 800828e:	f43f ad83 	beq.w	8007d98 <_strtod_l+0x580>
 8008292:	4b62      	ldr	r3, [pc, #392]	; (800841c <_strtod_l+0xc04>)
 8008294:	2200      	movs	r2, #0
 8008296:	e78e      	b.n	80081b6 <_strtod_l+0x99e>
 8008298:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008418 <_strtod_l+0xc00>
 800829c:	f04f 0800 	mov.w	r8, #0
 80082a0:	e7e7      	b.n	8008272 <_strtod_l+0xa5a>
 80082a2:	4b5d      	ldr	r3, [pc, #372]	; (8008418 <_strtod_l+0xc00>)
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	2200      	movs	r2, #0
 80082aa:	f7f8 f9ad 	bl	8000608 <__aeabi_dmul>
 80082ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	b933      	cbnz	r3, 80082c4 <_strtod_l+0xaac>
 80082b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ba:	900e      	str	r0, [sp, #56]	; 0x38
 80082bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80082be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80082c2:	e7dd      	b.n	8008280 <_strtod_l+0xa68>
 80082c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80082c8:	e7f9      	b.n	80082be <_strtod_l+0xaa6>
 80082ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1a8      	bne.n	8008226 <_strtod_l+0xa0e>
 80082d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082da:	0d1b      	lsrs	r3, r3, #20
 80082dc:	051b      	lsls	r3, r3, #20
 80082de:	429a      	cmp	r2, r3
 80082e0:	d1a1      	bne.n	8008226 <_strtod_l+0xa0e>
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f8 fcef 	bl	8000cc8 <__aeabi_d2lz>
 80082ea:	f7f8 f95f 	bl	80005ac <__aeabi_l2d>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	4640      	mov	r0, r8
 80082f4:	4649      	mov	r1, r9
 80082f6:	f7f7 ffcf 	bl	8000298 <__aeabi_dsub>
 80082fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008300:	ea43 030a 	orr.w	r3, r3, sl
 8008304:	4313      	orrs	r3, r2
 8008306:	4680      	mov	r8, r0
 8008308:	4689      	mov	r9, r1
 800830a:	d055      	beq.n	80083b8 <_strtod_l+0xba0>
 800830c:	a336      	add	r3, pc, #216	; (adr r3, 80083e8 <_strtod_l+0xbd0>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f8 fbeb 	bl	8000aec <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	f47f acd0 	bne.w	8007cbc <_strtod_l+0x4a4>
 800831c:	a334      	add	r3, pc, #208	; (adr r3, 80083f0 <_strtod_l+0xbd8>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	4640      	mov	r0, r8
 8008324:	4649      	mov	r1, r9
 8008326:	f7f8 fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800832a:	2800      	cmp	r0, #0
 800832c:	f43f af7b 	beq.w	8008226 <_strtod_l+0xa0e>
 8008330:	e4c4      	b.n	8007cbc <_strtod_l+0x4a4>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	b333      	cbz	r3, 8008384 <_strtod_l+0xb6c>
 8008336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008338:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800833c:	d822      	bhi.n	8008384 <_strtod_l+0xb6c>
 800833e:	a32e      	add	r3, pc, #184	; (adr r3, 80083f8 <_strtod_l+0xbe0>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	4640      	mov	r0, r8
 8008346:	4649      	mov	r1, r9
 8008348:	f7f8 fbda 	bl	8000b00 <__aeabi_dcmple>
 800834c:	b1a0      	cbz	r0, 8008378 <_strtod_l+0xb60>
 800834e:	4649      	mov	r1, r9
 8008350:	4640      	mov	r0, r8
 8008352:	f7f8 fc31 	bl	8000bb8 <__aeabi_d2uiz>
 8008356:	2801      	cmp	r0, #1
 8008358:	bf38      	it	cc
 800835a:	2001      	movcc	r0, #1
 800835c:	f7f8 f8da 	bl	8000514 <__aeabi_ui2d>
 8008360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008362:	4680      	mov	r8, r0
 8008364:	4689      	mov	r9, r1
 8008366:	bb23      	cbnz	r3, 80083b2 <_strtod_l+0xb9a>
 8008368:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800836c:	9010      	str	r0, [sp, #64]	; 0x40
 800836e:	9311      	str	r3, [sp, #68]	; 0x44
 8008370:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008374:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800837c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	9309      	str	r3, [sp, #36]	; 0x24
 8008384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008388:	eeb0 0a48 	vmov.f32	s0, s16
 800838c:	eef0 0a68 	vmov.f32	s1, s17
 8008390:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008394:	f001 fe4a 	bl	800a02c <__ulp>
 8008398:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800839c:	ec53 2b10 	vmov	r2, r3, d0
 80083a0:	f7f8 f932 	bl	8000608 <__aeabi_dmul>
 80083a4:	ec53 2b18 	vmov	r2, r3, d8
 80083a8:	f7f7 ff78 	bl	800029c <__adddf3>
 80083ac:	4682      	mov	sl, r0
 80083ae:	468b      	mov	fp, r1
 80083b0:	e78d      	b.n	80082ce <_strtod_l+0xab6>
 80083b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80083b6:	e7db      	b.n	8008370 <_strtod_l+0xb58>
 80083b8:	a311      	add	r3, pc, #68	; (adr r3, 8008400 <_strtod_l+0xbe8>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 fb95 	bl	8000aec <__aeabi_dcmplt>
 80083c2:	e7b2      	b.n	800832a <_strtod_l+0xb12>
 80083c4:	2300      	movs	r3, #0
 80083c6:	930a      	str	r3, [sp, #40]	; 0x28
 80083c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	f7ff ba6b 	b.w	80078a8 <_strtod_l+0x90>
 80083d2:	2a65      	cmp	r2, #101	; 0x65
 80083d4:	f43f ab5f 	beq.w	8007a96 <_strtod_l+0x27e>
 80083d8:	2a45      	cmp	r2, #69	; 0x45
 80083da:	f43f ab5c 	beq.w	8007a96 <_strtod_l+0x27e>
 80083de:	2301      	movs	r3, #1
 80083e0:	f7ff bb94 	b.w	8007b0c <_strtod_l+0x2f4>
 80083e4:	f3af 8000 	nop.w
 80083e8:	94a03595 	.word	0x94a03595
 80083ec:	3fdfffff 	.word	0x3fdfffff
 80083f0:	35afe535 	.word	0x35afe535
 80083f4:	3fe00000 	.word	0x3fe00000
 80083f8:	ffc00000 	.word	0xffc00000
 80083fc:	41dfffff 	.word	0x41dfffff
 8008400:	94a03595 	.word	0x94a03595
 8008404:	3fcfffff 	.word	0x3fcfffff
 8008408:	3ff00000 	.word	0x3ff00000
 800840c:	7ff00000 	.word	0x7ff00000
 8008410:	7fe00000 	.word	0x7fe00000
 8008414:	7c9fffff 	.word	0x7c9fffff
 8008418:	3fe00000 	.word	0x3fe00000
 800841c:	bff00000 	.word	0xbff00000
 8008420:	7fefffff 	.word	0x7fefffff

08008424 <_strtod_r>:
 8008424:	4b01      	ldr	r3, [pc, #4]	; (800842c <_strtod_r+0x8>)
 8008426:	f7ff b9f7 	b.w	8007818 <_strtod_l>
 800842a:	bf00      	nop
 800842c:	20000078 	.word	0x20000078

08008430 <_strtol_l.constprop.0>:
 8008430:	2b01      	cmp	r3, #1
 8008432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008436:	d001      	beq.n	800843c <_strtol_l.constprop.0+0xc>
 8008438:	2b24      	cmp	r3, #36	; 0x24
 800843a:	d906      	bls.n	800844a <_strtol_l.constprop.0+0x1a>
 800843c:	f7fe faee 	bl	8006a1c <__errno>
 8008440:	2316      	movs	r3, #22
 8008442:	6003      	str	r3, [r0, #0]
 8008444:	2000      	movs	r0, #0
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008530 <_strtol_l.constprop.0+0x100>
 800844e:	460d      	mov	r5, r1
 8008450:	462e      	mov	r6, r5
 8008452:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008456:	f814 700c 	ldrb.w	r7, [r4, ip]
 800845a:	f017 0708 	ands.w	r7, r7, #8
 800845e:	d1f7      	bne.n	8008450 <_strtol_l.constprop.0+0x20>
 8008460:	2c2d      	cmp	r4, #45	; 0x2d
 8008462:	d132      	bne.n	80084ca <_strtol_l.constprop.0+0x9a>
 8008464:	782c      	ldrb	r4, [r5, #0]
 8008466:	2701      	movs	r7, #1
 8008468:	1cb5      	adds	r5, r6, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d05b      	beq.n	8008526 <_strtol_l.constprop.0+0xf6>
 800846e:	2b10      	cmp	r3, #16
 8008470:	d109      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008472:	2c30      	cmp	r4, #48	; 0x30
 8008474:	d107      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008476:	782c      	ldrb	r4, [r5, #0]
 8008478:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800847c:	2c58      	cmp	r4, #88	; 0x58
 800847e:	d14d      	bne.n	800851c <_strtol_l.constprop.0+0xec>
 8008480:	786c      	ldrb	r4, [r5, #1]
 8008482:	2310      	movs	r3, #16
 8008484:	3502      	adds	r5, #2
 8008486:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800848a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800848e:	f04f 0c00 	mov.w	ip, #0
 8008492:	fbb8 f9f3 	udiv	r9, r8, r3
 8008496:	4666      	mov	r6, ip
 8008498:	fb03 8a19 	mls	sl, r3, r9, r8
 800849c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80084a0:	f1be 0f09 	cmp.w	lr, #9
 80084a4:	d816      	bhi.n	80084d4 <_strtol_l.constprop.0+0xa4>
 80084a6:	4674      	mov	r4, lr
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	dd24      	ble.n	80084f6 <_strtol_l.constprop.0+0xc6>
 80084ac:	f1bc 0f00 	cmp.w	ip, #0
 80084b0:	db1e      	blt.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084b2:	45b1      	cmp	r9, r6
 80084b4:	d31c      	bcc.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084b6:	d101      	bne.n	80084bc <_strtol_l.constprop.0+0x8c>
 80084b8:	45a2      	cmp	sl, r4
 80084ba:	db19      	blt.n	80084f0 <_strtol_l.constprop.0+0xc0>
 80084bc:	fb06 4603 	mla	r6, r6, r3, r4
 80084c0:	f04f 0c01 	mov.w	ip, #1
 80084c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084c8:	e7e8      	b.n	800849c <_strtol_l.constprop.0+0x6c>
 80084ca:	2c2b      	cmp	r4, #43	; 0x2b
 80084cc:	bf04      	itt	eq
 80084ce:	782c      	ldrbeq	r4, [r5, #0]
 80084d0:	1cb5      	addeq	r5, r6, #2
 80084d2:	e7ca      	b.n	800846a <_strtol_l.constprop.0+0x3a>
 80084d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80084d8:	f1be 0f19 	cmp.w	lr, #25
 80084dc:	d801      	bhi.n	80084e2 <_strtol_l.constprop.0+0xb2>
 80084de:	3c37      	subs	r4, #55	; 0x37
 80084e0:	e7e2      	b.n	80084a8 <_strtol_l.constprop.0+0x78>
 80084e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80084e6:	f1be 0f19 	cmp.w	lr, #25
 80084ea:	d804      	bhi.n	80084f6 <_strtol_l.constprop.0+0xc6>
 80084ec:	3c57      	subs	r4, #87	; 0x57
 80084ee:	e7db      	b.n	80084a8 <_strtol_l.constprop.0+0x78>
 80084f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80084f4:	e7e6      	b.n	80084c4 <_strtol_l.constprop.0+0x94>
 80084f6:	f1bc 0f00 	cmp.w	ip, #0
 80084fa:	da05      	bge.n	8008508 <_strtol_l.constprop.0+0xd8>
 80084fc:	2322      	movs	r3, #34	; 0x22
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	4646      	mov	r6, r8
 8008502:	b942      	cbnz	r2, 8008516 <_strtol_l.constprop.0+0xe6>
 8008504:	4630      	mov	r0, r6
 8008506:	e79e      	b.n	8008446 <_strtol_l.constprop.0+0x16>
 8008508:	b107      	cbz	r7, 800850c <_strtol_l.constprop.0+0xdc>
 800850a:	4276      	negs	r6, r6
 800850c:	2a00      	cmp	r2, #0
 800850e:	d0f9      	beq.n	8008504 <_strtol_l.constprop.0+0xd4>
 8008510:	f1bc 0f00 	cmp.w	ip, #0
 8008514:	d000      	beq.n	8008518 <_strtol_l.constprop.0+0xe8>
 8008516:	1e69      	subs	r1, r5, #1
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	e7f3      	b.n	8008504 <_strtol_l.constprop.0+0xd4>
 800851c:	2430      	movs	r4, #48	; 0x30
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1b1      	bne.n	8008486 <_strtol_l.constprop.0+0x56>
 8008522:	2308      	movs	r3, #8
 8008524:	e7af      	b.n	8008486 <_strtol_l.constprop.0+0x56>
 8008526:	2c30      	cmp	r4, #48	; 0x30
 8008528:	d0a5      	beq.n	8008476 <_strtol_l.constprop.0+0x46>
 800852a:	230a      	movs	r3, #10
 800852c:	e7ab      	b.n	8008486 <_strtol_l.constprop.0+0x56>
 800852e:	bf00      	nop
 8008530:	0800b4e1 	.word	0x0800b4e1

08008534 <_strtol_r>:
 8008534:	f7ff bf7c 	b.w	8008430 <_strtol_l.constprop.0>

08008538 <quorem>:
 8008538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	6903      	ldr	r3, [r0, #16]
 800853e:	690c      	ldr	r4, [r1, #16]
 8008540:	42a3      	cmp	r3, r4
 8008542:	4607      	mov	r7, r0
 8008544:	f2c0 8081 	blt.w	800864a <quorem+0x112>
 8008548:	3c01      	subs	r4, #1
 800854a:	f101 0814 	add.w	r8, r1, #20
 800854e:	f100 0514 	add.w	r5, r0, #20
 8008552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800855c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008560:	3301      	adds	r3, #1
 8008562:	429a      	cmp	r2, r3
 8008564:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008568:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800856c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008570:	d331      	bcc.n	80085d6 <quorem+0x9e>
 8008572:	f04f 0e00 	mov.w	lr, #0
 8008576:	4640      	mov	r0, r8
 8008578:	46ac      	mov	ip, r5
 800857a:	46f2      	mov	sl, lr
 800857c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008580:	b293      	uxth	r3, r2
 8008582:	fb06 e303 	mla	r3, r6, r3, lr
 8008586:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800858a:	b29b      	uxth	r3, r3
 800858c:	ebaa 0303 	sub.w	r3, sl, r3
 8008590:	f8dc a000 	ldr.w	sl, [ip]
 8008594:	0c12      	lsrs	r2, r2, #16
 8008596:	fa13 f38a 	uxtah	r3, r3, sl
 800859a:	fb06 e202 	mla	r2, r6, r2, lr
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085a6:	b292      	uxth	r2, r2
 80085a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80085ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80085b4:	4581      	cmp	r9, r0
 80085b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ba:	f84c 3b04 	str.w	r3, [ip], #4
 80085be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085c2:	d2db      	bcs.n	800857c <quorem+0x44>
 80085c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80085c8:	b92b      	cbnz	r3, 80085d6 <quorem+0x9e>
 80085ca:	9b01      	ldr	r3, [sp, #4]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	429d      	cmp	r5, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	d32e      	bcc.n	8008632 <quorem+0xfa>
 80085d4:	613c      	str	r4, [r7, #16]
 80085d6:	4638      	mov	r0, r7
 80085d8:	f001 fc82 	bl	8009ee0 <__mcmp>
 80085dc:	2800      	cmp	r0, #0
 80085de:	db24      	blt.n	800862a <quorem+0xf2>
 80085e0:	3601      	adds	r6, #1
 80085e2:	4628      	mov	r0, r5
 80085e4:	f04f 0c00 	mov.w	ip, #0
 80085e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80085ec:	f8d0 e000 	ldr.w	lr, [r0]
 80085f0:	b293      	uxth	r3, r2
 80085f2:	ebac 0303 	sub.w	r3, ip, r3
 80085f6:	0c12      	lsrs	r2, r2, #16
 80085f8:	fa13 f38e 	uxtah	r3, r3, lr
 80085fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008600:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008604:	b29b      	uxth	r3, r3
 8008606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800860a:	45c1      	cmp	r9, r8
 800860c:	f840 3b04 	str.w	r3, [r0], #4
 8008610:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008614:	d2e8      	bcs.n	80085e8 <quorem+0xb0>
 8008616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800861a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800861e:	b922      	cbnz	r2, 800862a <quorem+0xf2>
 8008620:	3b04      	subs	r3, #4
 8008622:	429d      	cmp	r5, r3
 8008624:	461a      	mov	r2, r3
 8008626:	d30a      	bcc.n	800863e <quorem+0x106>
 8008628:	613c      	str	r4, [r7, #16]
 800862a:	4630      	mov	r0, r6
 800862c:	b003      	add	sp, #12
 800862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	3b04      	subs	r3, #4
 8008636:	2a00      	cmp	r2, #0
 8008638:	d1cc      	bne.n	80085d4 <quorem+0x9c>
 800863a:	3c01      	subs	r4, #1
 800863c:	e7c7      	b.n	80085ce <quorem+0x96>
 800863e:	6812      	ldr	r2, [r2, #0]
 8008640:	3b04      	subs	r3, #4
 8008642:	2a00      	cmp	r2, #0
 8008644:	d1f0      	bne.n	8008628 <quorem+0xf0>
 8008646:	3c01      	subs	r4, #1
 8008648:	e7eb      	b.n	8008622 <quorem+0xea>
 800864a:	2000      	movs	r0, #0
 800864c:	e7ee      	b.n	800862c <quorem+0xf4>
	...

08008650 <_dtoa_r>:
 8008650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	ed2d 8b04 	vpush	{d8-d9}
 8008658:	ec57 6b10 	vmov	r6, r7, d0
 800865c:	b093      	sub	sp, #76	; 0x4c
 800865e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008660:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008664:	9106      	str	r1, [sp, #24]
 8008666:	ee10 aa10 	vmov	sl, s0
 800866a:	4604      	mov	r4, r0
 800866c:	9209      	str	r2, [sp, #36]	; 0x24
 800866e:	930c      	str	r3, [sp, #48]	; 0x30
 8008670:	46bb      	mov	fp, r7
 8008672:	b975      	cbnz	r5, 8008692 <_dtoa_r+0x42>
 8008674:	2010      	movs	r0, #16
 8008676:	f001 f94d 	bl	8009914 <malloc>
 800867a:	4602      	mov	r2, r0
 800867c:	6260      	str	r0, [r4, #36]	; 0x24
 800867e:	b920      	cbnz	r0, 800868a <_dtoa_r+0x3a>
 8008680:	4ba7      	ldr	r3, [pc, #668]	; (8008920 <_dtoa_r+0x2d0>)
 8008682:	21ea      	movs	r1, #234	; 0xea
 8008684:	48a7      	ldr	r0, [pc, #668]	; (8008924 <_dtoa_r+0x2d4>)
 8008686:	f002 f8ad 	bl	800a7e4 <__assert_func>
 800868a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800868e:	6005      	str	r5, [r0, #0]
 8008690:	60c5      	str	r5, [r0, #12]
 8008692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008694:	6819      	ldr	r1, [r3, #0]
 8008696:	b151      	cbz	r1, 80086ae <_dtoa_r+0x5e>
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	604a      	str	r2, [r1, #4]
 800869c:	2301      	movs	r3, #1
 800869e:	4093      	lsls	r3, r2
 80086a0:	608b      	str	r3, [r1, #8]
 80086a2:	4620      	mov	r0, r4
 80086a4:	f001 f990 	bl	80099c8 <_Bfree>
 80086a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	1e3b      	subs	r3, r7, #0
 80086b0:	bfaa      	itet	ge
 80086b2:	2300      	movge	r3, #0
 80086b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80086b8:	f8c8 3000 	strge.w	r3, [r8]
 80086bc:	4b9a      	ldr	r3, [pc, #616]	; (8008928 <_dtoa_r+0x2d8>)
 80086be:	bfbc      	itt	lt
 80086c0:	2201      	movlt	r2, #1
 80086c2:	f8c8 2000 	strlt.w	r2, [r8]
 80086c6:	ea33 030b 	bics.w	r3, r3, fp
 80086ca:	d11b      	bne.n	8008704 <_dtoa_r+0xb4>
 80086cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086d8:	4333      	orrs	r3, r6
 80086da:	f000 8592 	beq.w	8009202 <_dtoa_r+0xbb2>
 80086de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e0:	b963      	cbnz	r3, 80086fc <_dtoa_r+0xac>
 80086e2:	4b92      	ldr	r3, [pc, #584]	; (800892c <_dtoa_r+0x2dc>)
 80086e4:	e022      	b.n	800872c <_dtoa_r+0xdc>
 80086e6:	4b92      	ldr	r3, [pc, #584]	; (8008930 <_dtoa_r+0x2e0>)
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	3308      	adds	r3, #8
 80086ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	9801      	ldr	r0, [sp, #4]
 80086f2:	b013      	add	sp, #76	; 0x4c
 80086f4:	ecbd 8b04 	vpop	{d8-d9}
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	4b8b      	ldr	r3, [pc, #556]	; (800892c <_dtoa_r+0x2dc>)
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	3303      	adds	r3, #3
 8008702:	e7f3      	b.n	80086ec <_dtoa_r+0x9c>
 8008704:	2200      	movs	r2, #0
 8008706:	2300      	movs	r3, #0
 8008708:	4650      	mov	r0, sl
 800870a:	4659      	mov	r1, fp
 800870c:	f7f8 f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008710:	ec4b ab19 	vmov	d9, sl, fp
 8008714:	4680      	mov	r8, r0
 8008716:	b158      	cbz	r0, 8008730 <_dtoa_r+0xe0>
 8008718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800871a:	2301      	movs	r3, #1
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 856b 	beq.w	80091fc <_dtoa_r+0xbac>
 8008726:	4883      	ldr	r0, [pc, #524]	; (8008934 <_dtoa_r+0x2e4>)
 8008728:	6018      	str	r0, [r3, #0]
 800872a:	1e43      	subs	r3, r0, #1
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	e7df      	b.n	80086f0 <_dtoa_r+0xa0>
 8008730:	ec4b ab10 	vmov	d0, sl, fp
 8008734:	aa10      	add	r2, sp, #64	; 0x40
 8008736:	a911      	add	r1, sp, #68	; 0x44
 8008738:	4620      	mov	r0, r4
 800873a:	f001 fcf3 	bl	800a124 <__d2b>
 800873e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008742:	ee08 0a10 	vmov	s16, r0
 8008746:	2d00      	cmp	r5, #0
 8008748:	f000 8084 	beq.w	8008854 <_dtoa_r+0x204>
 800874c:	ee19 3a90 	vmov	r3, s19
 8008750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008754:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008758:	4656      	mov	r6, sl
 800875a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800875e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008762:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008766:	4b74      	ldr	r3, [pc, #464]	; (8008938 <_dtoa_r+0x2e8>)
 8008768:	2200      	movs	r2, #0
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	f7f7 fd93 	bl	8000298 <__aeabi_dsub>
 8008772:	a365      	add	r3, pc, #404	; (adr r3, 8008908 <_dtoa_r+0x2b8>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f7f7 ff46 	bl	8000608 <__aeabi_dmul>
 800877c:	a364      	add	r3, pc, #400	; (adr r3, 8008910 <_dtoa_r+0x2c0>)
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	f7f7 fd8b 	bl	800029c <__adddf3>
 8008786:	4606      	mov	r6, r0
 8008788:	4628      	mov	r0, r5
 800878a:	460f      	mov	r7, r1
 800878c:	f7f7 fed2 	bl	8000534 <__aeabi_i2d>
 8008790:	a361      	add	r3, pc, #388	; (adr r3, 8008918 <_dtoa_r+0x2c8>)
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f7f7 ff37 	bl	8000608 <__aeabi_dmul>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f7 fd7b 	bl	800029c <__adddf3>
 80087a6:	4606      	mov	r6, r0
 80087a8:	460f      	mov	r7, r1
 80087aa:	f7f8 f9dd 	bl	8000b68 <__aeabi_d2iz>
 80087ae:	2200      	movs	r2, #0
 80087b0:	9000      	str	r0, [sp, #0]
 80087b2:	2300      	movs	r3, #0
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f8 f998 	bl	8000aec <__aeabi_dcmplt>
 80087bc:	b150      	cbz	r0, 80087d4 <_dtoa_r+0x184>
 80087be:	9800      	ldr	r0, [sp, #0]
 80087c0:	f7f7 feb8 	bl	8000534 <__aeabi_i2d>
 80087c4:	4632      	mov	r2, r6
 80087c6:	463b      	mov	r3, r7
 80087c8:	f7f8 f986 	bl	8000ad8 <__aeabi_dcmpeq>
 80087cc:	b910      	cbnz	r0, 80087d4 <_dtoa_r+0x184>
 80087ce:	9b00      	ldr	r3, [sp, #0]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	2b16      	cmp	r3, #22
 80087d8:	d85a      	bhi.n	8008890 <_dtoa_r+0x240>
 80087da:	9a00      	ldr	r2, [sp, #0]
 80087dc:	4b57      	ldr	r3, [pc, #348]	; (800893c <_dtoa_r+0x2ec>)
 80087de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	ec51 0b19 	vmov	r0, r1, d9
 80087ea:	f7f8 f97f 	bl	8000aec <__aeabi_dcmplt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d050      	beq.n	8008894 <_dtoa_r+0x244>
 80087f2:	9b00      	ldr	r3, [sp, #0]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	2300      	movs	r3, #0
 80087fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80087fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087fe:	1b5d      	subs	r5, r3, r5
 8008800:	1e6b      	subs	r3, r5, #1
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	bf45      	ittet	mi
 8008806:	f1c5 0301 	rsbmi	r3, r5, #1
 800880a:	9304      	strmi	r3, [sp, #16]
 800880c:	2300      	movpl	r3, #0
 800880e:	2300      	movmi	r3, #0
 8008810:	bf4c      	ite	mi
 8008812:	9305      	strmi	r3, [sp, #20]
 8008814:	9304      	strpl	r3, [sp, #16]
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	db3d      	blt.n	8008898 <_dtoa_r+0x248>
 800881c:	9b05      	ldr	r3, [sp, #20]
 800881e:	9a00      	ldr	r2, [sp, #0]
 8008820:	920a      	str	r2, [sp, #40]	; 0x28
 8008822:	4413      	add	r3, r2
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	2300      	movs	r3, #0
 8008828:	9307      	str	r3, [sp, #28]
 800882a:	9b06      	ldr	r3, [sp, #24]
 800882c:	2b09      	cmp	r3, #9
 800882e:	f200 8089 	bhi.w	8008944 <_dtoa_r+0x2f4>
 8008832:	2b05      	cmp	r3, #5
 8008834:	bfc4      	itt	gt
 8008836:	3b04      	subgt	r3, #4
 8008838:	9306      	strgt	r3, [sp, #24]
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	f1a3 0302 	sub.w	r3, r3, #2
 8008840:	bfcc      	ite	gt
 8008842:	2500      	movgt	r5, #0
 8008844:	2501      	movle	r5, #1
 8008846:	2b03      	cmp	r3, #3
 8008848:	f200 8087 	bhi.w	800895a <_dtoa_r+0x30a>
 800884c:	e8df f003 	tbb	[pc, r3]
 8008850:	59383a2d 	.word	0x59383a2d
 8008854:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008858:	441d      	add	r5, r3
 800885a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800885e:	2b20      	cmp	r3, #32
 8008860:	bfc1      	itttt	gt
 8008862:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008866:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800886a:	fa0b f303 	lslgt.w	r3, fp, r3
 800886e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008872:	bfda      	itte	le
 8008874:	f1c3 0320 	rsble	r3, r3, #32
 8008878:	fa06 f003 	lslle.w	r0, r6, r3
 800887c:	4318      	orrgt	r0, r3
 800887e:	f7f7 fe49 	bl	8000514 <__aeabi_ui2d>
 8008882:	2301      	movs	r3, #1
 8008884:	4606      	mov	r6, r0
 8008886:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800888a:	3d01      	subs	r5, #1
 800888c:	930e      	str	r3, [sp, #56]	; 0x38
 800888e:	e76a      	b.n	8008766 <_dtoa_r+0x116>
 8008890:	2301      	movs	r3, #1
 8008892:	e7b2      	b.n	80087fa <_dtoa_r+0x1aa>
 8008894:	900b      	str	r0, [sp, #44]	; 0x2c
 8008896:	e7b1      	b.n	80087fc <_dtoa_r+0x1ac>
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	9a00      	ldr	r2, [sp, #0]
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	4253      	negs	r3, r2
 80088a2:	9307      	str	r3, [sp, #28]
 80088a4:	2300      	movs	r3, #0
 80088a6:	930a      	str	r3, [sp, #40]	; 0x28
 80088a8:	e7bf      	b.n	800882a <_dtoa_r+0x1da>
 80088aa:	2300      	movs	r3, #0
 80088ac:	9308      	str	r3, [sp, #32]
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dc55      	bgt.n	8008960 <_dtoa_r+0x310>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088ba:	461a      	mov	r2, r3
 80088bc:	9209      	str	r2, [sp, #36]	; 0x24
 80088be:	e00c      	b.n	80088da <_dtoa_r+0x28a>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e7f3      	b.n	80088ac <_dtoa_r+0x25c>
 80088c4:	2300      	movs	r3, #0
 80088c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088c8:	9308      	str	r3, [sp, #32]
 80088ca:	9b00      	ldr	r3, [sp, #0]
 80088cc:	4413      	add	r3, r2
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	3301      	adds	r3, #1
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	9303      	str	r3, [sp, #12]
 80088d6:	bfb8      	it	lt
 80088d8:	2301      	movlt	r3, #1
 80088da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088dc:	2200      	movs	r2, #0
 80088de:	6042      	str	r2, [r0, #4]
 80088e0:	2204      	movs	r2, #4
 80088e2:	f102 0614 	add.w	r6, r2, #20
 80088e6:	429e      	cmp	r6, r3
 80088e8:	6841      	ldr	r1, [r0, #4]
 80088ea:	d93d      	bls.n	8008968 <_dtoa_r+0x318>
 80088ec:	4620      	mov	r0, r4
 80088ee:	f001 f82b 	bl	8009948 <_Balloc>
 80088f2:	9001      	str	r0, [sp, #4]
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d13b      	bne.n	8008970 <_dtoa_r+0x320>
 80088f8:	4b11      	ldr	r3, [pc, #68]	; (8008940 <_dtoa_r+0x2f0>)
 80088fa:	4602      	mov	r2, r0
 80088fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008900:	e6c0      	b.n	8008684 <_dtoa_r+0x34>
 8008902:	2301      	movs	r3, #1
 8008904:	e7df      	b.n	80088c6 <_dtoa_r+0x276>
 8008906:	bf00      	nop
 8008908:	636f4361 	.word	0x636f4361
 800890c:	3fd287a7 	.word	0x3fd287a7
 8008910:	8b60c8b3 	.word	0x8b60c8b3
 8008914:	3fc68a28 	.word	0x3fc68a28
 8008918:	509f79fb 	.word	0x509f79fb
 800891c:	3fd34413 	.word	0x3fd34413
 8008920:	0800b5ee 	.word	0x0800b5ee
 8008924:	0800b605 	.word	0x0800b605
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	0800b5ea 	.word	0x0800b5ea
 8008930:	0800b5e1 	.word	0x0800b5e1
 8008934:	0800b465 	.word	0x0800b465
 8008938:	3ff80000 	.word	0x3ff80000
 800893c:	0800b770 	.word	0x0800b770
 8008940:	0800b660 	.word	0x0800b660
 8008944:	2501      	movs	r5, #1
 8008946:	2300      	movs	r3, #0
 8008948:	9306      	str	r3, [sp, #24]
 800894a:	9508      	str	r5, [sp, #32]
 800894c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008950:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	2312      	movs	r3, #18
 8008958:	e7b0      	b.n	80088bc <_dtoa_r+0x26c>
 800895a:	2301      	movs	r3, #1
 800895c:	9308      	str	r3, [sp, #32]
 800895e:	e7f5      	b.n	800894c <_dtoa_r+0x2fc>
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008966:	e7b8      	b.n	80088da <_dtoa_r+0x28a>
 8008968:	3101      	adds	r1, #1
 800896a:	6041      	str	r1, [r0, #4]
 800896c:	0052      	lsls	r2, r2, #1
 800896e:	e7b8      	b.n	80088e2 <_dtoa_r+0x292>
 8008970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008972:	9a01      	ldr	r2, [sp, #4]
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	2b0e      	cmp	r3, #14
 800897a:	f200 809d 	bhi.w	8008ab8 <_dtoa_r+0x468>
 800897e:	2d00      	cmp	r5, #0
 8008980:	f000 809a 	beq.w	8008ab8 <_dtoa_r+0x468>
 8008984:	9b00      	ldr	r3, [sp, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	dd32      	ble.n	80089f0 <_dtoa_r+0x3a0>
 800898a:	4ab7      	ldr	r2, [pc, #732]	; (8008c68 <_dtoa_r+0x618>)
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008998:	9b00      	ldr	r3, [sp, #0]
 800899a:	05d8      	lsls	r0, r3, #23
 800899c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80089a0:	d516      	bpl.n	80089d0 <_dtoa_r+0x380>
 80089a2:	4bb2      	ldr	r3, [pc, #712]	; (8008c6c <_dtoa_r+0x61c>)
 80089a4:	ec51 0b19 	vmov	r0, r1, d9
 80089a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089ac:	f7f7 ff56 	bl	800085c <__aeabi_ddiv>
 80089b0:	f007 070f 	and.w	r7, r7, #15
 80089b4:	4682      	mov	sl, r0
 80089b6:	468b      	mov	fp, r1
 80089b8:	2503      	movs	r5, #3
 80089ba:	4eac      	ldr	r6, [pc, #688]	; (8008c6c <_dtoa_r+0x61c>)
 80089bc:	b957      	cbnz	r7, 80089d4 <_dtoa_r+0x384>
 80089be:	4642      	mov	r2, r8
 80089c0:	464b      	mov	r3, r9
 80089c2:	4650      	mov	r0, sl
 80089c4:	4659      	mov	r1, fp
 80089c6:	f7f7 ff49 	bl	800085c <__aeabi_ddiv>
 80089ca:	4682      	mov	sl, r0
 80089cc:	468b      	mov	fp, r1
 80089ce:	e028      	b.n	8008a22 <_dtoa_r+0x3d2>
 80089d0:	2502      	movs	r5, #2
 80089d2:	e7f2      	b.n	80089ba <_dtoa_r+0x36a>
 80089d4:	07f9      	lsls	r1, r7, #31
 80089d6:	d508      	bpl.n	80089ea <_dtoa_r+0x39a>
 80089d8:	4640      	mov	r0, r8
 80089da:	4649      	mov	r1, r9
 80089dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089e0:	f7f7 fe12 	bl	8000608 <__aeabi_dmul>
 80089e4:	3501      	adds	r5, #1
 80089e6:	4680      	mov	r8, r0
 80089e8:	4689      	mov	r9, r1
 80089ea:	107f      	asrs	r7, r7, #1
 80089ec:	3608      	adds	r6, #8
 80089ee:	e7e5      	b.n	80089bc <_dtoa_r+0x36c>
 80089f0:	f000 809b 	beq.w	8008b2a <_dtoa_r+0x4da>
 80089f4:	9b00      	ldr	r3, [sp, #0]
 80089f6:	4f9d      	ldr	r7, [pc, #628]	; (8008c6c <_dtoa_r+0x61c>)
 80089f8:	425e      	negs	r6, r3
 80089fa:	4b9b      	ldr	r3, [pc, #620]	; (8008c68 <_dtoa_r+0x618>)
 80089fc:	f006 020f 	and.w	r2, r6, #15
 8008a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	ec51 0b19 	vmov	r0, r1, d9
 8008a0c:	f7f7 fdfc 	bl	8000608 <__aeabi_dmul>
 8008a10:	1136      	asrs	r6, r6, #4
 8008a12:	4682      	mov	sl, r0
 8008a14:	468b      	mov	fp, r1
 8008a16:	2300      	movs	r3, #0
 8008a18:	2502      	movs	r5, #2
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	d17a      	bne.n	8008b14 <_dtoa_r+0x4c4>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1d3      	bne.n	80089ca <_dtoa_r+0x37a>
 8008a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8082 	beq.w	8008b2e <_dtoa_r+0x4de>
 8008a2a:	4b91      	ldr	r3, [pc, #580]	; (8008c70 <_dtoa_r+0x620>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4650      	mov	r0, sl
 8008a30:	4659      	mov	r1, fp
 8008a32:	f7f8 f85b 	bl	8000aec <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d079      	beq.n	8008b2e <_dtoa_r+0x4de>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d076      	beq.n	8008b2e <_dtoa_r+0x4de>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dd36      	ble.n	8008ab4 <_dtoa_r+0x464>
 8008a46:	9b00      	ldr	r3, [sp, #0]
 8008a48:	4650      	mov	r0, sl
 8008a4a:	4659      	mov	r1, fp
 8008a4c:	1e5f      	subs	r7, r3, #1
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4b88      	ldr	r3, [pc, #544]	; (8008c74 <_dtoa_r+0x624>)
 8008a52:	f7f7 fdd9 	bl	8000608 <__aeabi_dmul>
 8008a56:	9e02      	ldr	r6, [sp, #8]
 8008a58:	4682      	mov	sl, r0
 8008a5a:	468b      	mov	fp, r1
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7f7 fd68 	bl	8000534 <__aeabi_i2d>
 8008a64:	4652      	mov	r2, sl
 8008a66:	465b      	mov	r3, fp
 8008a68:	f7f7 fdce 	bl	8000608 <__aeabi_dmul>
 8008a6c:	4b82      	ldr	r3, [pc, #520]	; (8008c78 <_dtoa_r+0x628>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f7f7 fc14 	bl	800029c <__adddf3>
 8008a74:	46d0      	mov	r8, sl
 8008a76:	46d9      	mov	r9, fp
 8008a78:	4682      	mov	sl, r0
 8008a7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a7e:	2e00      	cmp	r6, #0
 8008a80:	d158      	bne.n	8008b34 <_dtoa_r+0x4e4>
 8008a82:	4b7e      	ldr	r3, [pc, #504]	; (8008c7c <_dtoa_r+0x62c>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	4640      	mov	r0, r8
 8008a88:	4649      	mov	r1, r9
 8008a8a:	f7f7 fc05 	bl	8000298 <__aeabi_dsub>
 8008a8e:	4652      	mov	r2, sl
 8008a90:	465b      	mov	r3, fp
 8008a92:	4680      	mov	r8, r0
 8008a94:	4689      	mov	r9, r1
 8008a96:	f7f8 f847 	bl	8000b28 <__aeabi_dcmpgt>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	f040 8295 	bne.w	8008fca <_dtoa_r+0x97a>
 8008aa0:	4652      	mov	r2, sl
 8008aa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	f7f8 f81f 	bl	8000aec <__aeabi_dcmplt>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f040 8289 	bne.w	8008fc6 <_dtoa_r+0x976>
 8008ab4:	ec5b ab19 	vmov	sl, fp, d9
 8008ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f2c0 8148 	blt.w	8008d50 <_dtoa_r+0x700>
 8008ac0:	9a00      	ldr	r2, [sp, #0]
 8008ac2:	2a0e      	cmp	r2, #14
 8008ac4:	f300 8144 	bgt.w	8008d50 <_dtoa_r+0x700>
 8008ac8:	4b67      	ldr	r3, [pc, #412]	; (8008c68 <_dtoa_r+0x618>)
 8008aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ace:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f280 80d5 	bge.w	8008c84 <_dtoa_r+0x634>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f300 80d1 	bgt.w	8008c84 <_dtoa_r+0x634>
 8008ae2:	f040 826f 	bne.w	8008fc4 <_dtoa_r+0x974>
 8008ae6:	4b65      	ldr	r3, [pc, #404]	; (8008c7c <_dtoa_r+0x62c>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f7 fd8b 	bl	8000608 <__aeabi_dmul>
 8008af2:	4652      	mov	r2, sl
 8008af4:	465b      	mov	r3, fp
 8008af6:	f7f8 f80d 	bl	8000b14 <__aeabi_dcmpge>
 8008afa:	9e03      	ldr	r6, [sp, #12]
 8008afc:	4637      	mov	r7, r6
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f040 8245 	bne.w	8008f8e <_dtoa_r+0x93e>
 8008b04:	9d01      	ldr	r5, [sp, #4]
 8008b06:	2331      	movs	r3, #49	; 0x31
 8008b08:	f805 3b01 	strb.w	r3, [r5], #1
 8008b0c:	9b00      	ldr	r3, [sp, #0]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	e240      	b.n	8008f96 <_dtoa_r+0x946>
 8008b14:	07f2      	lsls	r2, r6, #31
 8008b16:	d505      	bpl.n	8008b24 <_dtoa_r+0x4d4>
 8008b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1c:	f7f7 fd74 	bl	8000608 <__aeabi_dmul>
 8008b20:	3501      	adds	r5, #1
 8008b22:	2301      	movs	r3, #1
 8008b24:	1076      	asrs	r6, r6, #1
 8008b26:	3708      	adds	r7, #8
 8008b28:	e777      	b.n	8008a1a <_dtoa_r+0x3ca>
 8008b2a:	2502      	movs	r5, #2
 8008b2c:	e779      	b.n	8008a22 <_dtoa_r+0x3d2>
 8008b2e:	9f00      	ldr	r7, [sp, #0]
 8008b30:	9e03      	ldr	r6, [sp, #12]
 8008b32:	e794      	b.n	8008a5e <_dtoa_r+0x40e>
 8008b34:	9901      	ldr	r1, [sp, #4]
 8008b36:	4b4c      	ldr	r3, [pc, #304]	; (8008c68 <_dtoa_r+0x618>)
 8008b38:	4431      	add	r1, r6
 8008b3a:	910d      	str	r1, [sp, #52]	; 0x34
 8008b3c:	9908      	ldr	r1, [sp, #32]
 8008b3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b46:	2900      	cmp	r1, #0
 8008b48:	d043      	beq.n	8008bd2 <_dtoa_r+0x582>
 8008b4a:	494d      	ldr	r1, [pc, #308]	; (8008c80 <_dtoa_r+0x630>)
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f7f7 fe85 	bl	800085c <__aeabi_ddiv>
 8008b52:	4652      	mov	r2, sl
 8008b54:	465b      	mov	r3, fp
 8008b56:	f7f7 fb9f 	bl	8000298 <__aeabi_dsub>
 8008b5a:	9d01      	ldr	r5, [sp, #4]
 8008b5c:	4682      	mov	sl, r0
 8008b5e:	468b      	mov	fp, r1
 8008b60:	4649      	mov	r1, r9
 8008b62:	4640      	mov	r0, r8
 8008b64:	f7f8 f800 	bl	8000b68 <__aeabi_d2iz>
 8008b68:	4606      	mov	r6, r0
 8008b6a:	f7f7 fce3 	bl	8000534 <__aeabi_i2d>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4640      	mov	r0, r8
 8008b74:	4649      	mov	r1, r9
 8008b76:	f7f7 fb8f 	bl	8000298 <__aeabi_dsub>
 8008b7a:	3630      	adds	r6, #48	; 0x30
 8008b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b80:	4652      	mov	r2, sl
 8008b82:	465b      	mov	r3, fp
 8008b84:	4680      	mov	r8, r0
 8008b86:	4689      	mov	r9, r1
 8008b88:	f7f7 ffb0 	bl	8000aec <__aeabi_dcmplt>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d163      	bne.n	8008c58 <_dtoa_r+0x608>
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	4936      	ldr	r1, [pc, #216]	; (8008c70 <_dtoa_r+0x620>)
 8008b96:	2000      	movs	r0, #0
 8008b98:	f7f7 fb7e 	bl	8000298 <__aeabi_dsub>
 8008b9c:	4652      	mov	r2, sl
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	f7f7 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	f040 80b5 	bne.w	8008d14 <_dtoa_r+0x6c4>
 8008baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bac:	429d      	cmp	r5, r3
 8008bae:	d081      	beq.n	8008ab4 <_dtoa_r+0x464>
 8008bb0:	4b30      	ldr	r3, [pc, #192]	; (8008c74 <_dtoa_r+0x624>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	4659      	mov	r1, fp
 8008bb8:	f7f7 fd26 	bl	8000608 <__aeabi_dmul>
 8008bbc:	4b2d      	ldr	r3, [pc, #180]	; (8008c74 <_dtoa_r+0x624>)
 8008bbe:	4682      	mov	sl, r0
 8008bc0:	468b      	mov	fp, r1
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f7f7 fd1e 	bl	8000608 <__aeabi_dmul>
 8008bcc:	4680      	mov	r8, r0
 8008bce:	4689      	mov	r9, r1
 8008bd0:	e7c6      	b.n	8008b60 <_dtoa_r+0x510>
 8008bd2:	4650      	mov	r0, sl
 8008bd4:	4659      	mov	r1, fp
 8008bd6:	f7f7 fd17 	bl	8000608 <__aeabi_dmul>
 8008bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bdc:	9d01      	ldr	r5, [sp, #4]
 8008bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8008be0:	4682      	mov	sl, r0
 8008be2:	468b      	mov	fp, r1
 8008be4:	4649      	mov	r1, r9
 8008be6:	4640      	mov	r0, r8
 8008be8:	f7f7 ffbe 	bl	8000b68 <__aeabi_d2iz>
 8008bec:	4606      	mov	r6, r0
 8008bee:	f7f7 fca1 	bl	8000534 <__aeabi_i2d>
 8008bf2:	3630      	adds	r6, #48	; 0x30
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	f7f7 fb4c 	bl	8000298 <__aeabi_dsub>
 8008c00:	f805 6b01 	strb.w	r6, [r5], #1
 8008c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c06:	429d      	cmp	r5, r3
 8008c08:	4680      	mov	r8, r0
 8008c0a:	4689      	mov	r9, r1
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	d124      	bne.n	8008c5c <_dtoa_r+0x60c>
 8008c12:	4b1b      	ldr	r3, [pc, #108]	; (8008c80 <_dtoa_r+0x630>)
 8008c14:	4650      	mov	r0, sl
 8008c16:	4659      	mov	r1, fp
 8008c18:	f7f7 fb40 	bl	800029c <__adddf3>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 ff80 	bl	8000b28 <__aeabi_dcmpgt>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d173      	bne.n	8008d14 <_dtoa_r+0x6c4>
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	465b      	mov	r3, fp
 8008c30:	4913      	ldr	r1, [pc, #76]	; (8008c80 <_dtoa_r+0x630>)
 8008c32:	2000      	movs	r0, #0
 8008c34:	f7f7 fb30 	bl	8000298 <__aeabi_dsub>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4640      	mov	r0, r8
 8008c3e:	4649      	mov	r1, r9
 8008c40:	f7f7 ff54 	bl	8000aec <__aeabi_dcmplt>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f43f af35 	beq.w	8008ab4 <_dtoa_r+0x464>
 8008c4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c4c:	1e6b      	subs	r3, r5, #1
 8008c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c54:	2b30      	cmp	r3, #48	; 0x30
 8008c56:	d0f8      	beq.n	8008c4a <_dtoa_r+0x5fa>
 8008c58:	9700      	str	r7, [sp, #0]
 8008c5a:	e049      	b.n	8008cf0 <_dtoa_r+0x6a0>
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <_dtoa_r+0x624>)
 8008c5e:	f7f7 fcd3 	bl	8000608 <__aeabi_dmul>
 8008c62:	4680      	mov	r8, r0
 8008c64:	4689      	mov	r9, r1
 8008c66:	e7bd      	b.n	8008be4 <_dtoa_r+0x594>
 8008c68:	0800b770 	.word	0x0800b770
 8008c6c:	0800b748 	.word	0x0800b748
 8008c70:	3ff00000 	.word	0x3ff00000
 8008c74:	40240000 	.word	0x40240000
 8008c78:	401c0000 	.word	0x401c0000
 8008c7c:	40140000 	.word	0x40140000
 8008c80:	3fe00000 	.word	0x3fe00000
 8008c84:	9d01      	ldr	r5, [sp, #4]
 8008c86:	4656      	mov	r6, sl
 8008c88:	465f      	mov	r7, fp
 8008c8a:	4642      	mov	r2, r8
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 fde3 	bl	800085c <__aeabi_ddiv>
 8008c96:	f7f7 ff67 	bl	8000b68 <__aeabi_d2iz>
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	f7f7 fc4a 	bl	8000534 <__aeabi_i2d>
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	f7f7 fcb0 	bl	8000608 <__aeabi_dmul>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008cb4:	f7f7 faf0 	bl	8000298 <__aeabi_dsub>
 8008cb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008cbc:	9e01      	ldr	r6, [sp, #4]
 8008cbe:	9f03      	ldr	r7, [sp, #12]
 8008cc0:	1bae      	subs	r6, r5, r6
 8008cc2:	42b7      	cmp	r7, r6
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	d135      	bne.n	8008d36 <_dtoa_r+0x6e6>
 8008cca:	f7f7 fae7 	bl	800029c <__adddf3>
 8008cce:	4642      	mov	r2, r8
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	f7f7 ff27 	bl	8000b28 <__aeabi_dcmpgt>
 8008cda:	b9d0      	cbnz	r0, 8008d12 <_dtoa_r+0x6c2>
 8008cdc:	4642      	mov	r2, r8
 8008cde:	464b      	mov	r3, r9
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	f7f7 fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ce8:	b110      	cbz	r0, 8008cf0 <_dtoa_r+0x6a0>
 8008cea:	f01a 0f01 	tst.w	sl, #1
 8008cee:	d110      	bne.n	8008d12 <_dtoa_r+0x6c2>
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	ee18 1a10 	vmov	r1, s16
 8008cf6:	f000 fe67 	bl	80099c8 <_Bfree>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9800      	ldr	r0, [sp, #0]
 8008cfe:	702b      	strb	r3, [r5, #0]
 8008d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d02:	3001      	adds	r0, #1
 8008d04:	6018      	str	r0, [r3, #0]
 8008d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f43f acf1 	beq.w	80086f0 <_dtoa_r+0xa0>
 8008d0e:	601d      	str	r5, [r3, #0]
 8008d10:	e4ee      	b.n	80086f0 <_dtoa_r+0xa0>
 8008d12:	9f00      	ldr	r7, [sp, #0]
 8008d14:	462b      	mov	r3, r5
 8008d16:	461d      	mov	r5, r3
 8008d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d1c:	2a39      	cmp	r2, #57	; 0x39
 8008d1e:	d106      	bne.n	8008d2e <_dtoa_r+0x6de>
 8008d20:	9a01      	ldr	r2, [sp, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d1f7      	bne.n	8008d16 <_dtoa_r+0x6c6>
 8008d26:	9901      	ldr	r1, [sp, #4]
 8008d28:	2230      	movs	r2, #48	; 0x30
 8008d2a:	3701      	adds	r7, #1
 8008d2c:	700a      	strb	r2, [r1, #0]
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	3201      	adds	r2, #1
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	e790      	b.n	8008c58 <_dtoa_r+0x608>
 8008d36:	4ba6      	ldr	r3, [pc, #664]	; (8008fd0 <_dtoa_r+0x980>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f7f7 fc65 	bl	8000608 <__aeabi_dmul>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2300      	movs	r3, #0
 8008d42:	4606      	mov	r6, r0
 8008d44:	460f      	mov	r7, r1
 8008d46:	f7f7 fec7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d09d      	beq.n	8008c8a <_dtoa_r+0x63a>
 8008d4e:	e7cf      	b.n	8008cf0 <_dtoa_r+0x6a0>
 8008d50:	9a08      	ldr	r2, [sp, #32]
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	f000 80d7 	beq.w	8008f06 <_dtoa_r+0x8b6>
 8008d58:	9a06      	ldr	r2, [sp, #24]
 8008d5a:	2a01      	cmp	r2, #1
 8008d5c:	f300 80ba 	bgt.w	8008ed4 <_dtoa_r+0x884>
 8008d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	f000 80b2 	beq.w	8008ecc <_dtoa_r+0x87c>
 8008d68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d6c:	9e07      	ldr	r6, [sp, #28]
 8008d6e:	9d04      	ldr	r5, [sp, #16]
 8008d70:	9a04      	ldr	r2, [sp, #16]
 8008d72:	441a      	add	r2, r3
 8008d74:	9204      	str	r2, [sp, #16]
 8008d76:	9a05      	ldr	r2, [sp, #20]
 8008d78:	2101      	movs	r1, #1
 8008d7a:	441a      	add	r2, r3
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	9205      	str	r2, [sp, #20]
 8008d80:	f000 ff24 	bl	8009bcc <__i2b>
 8008d84:	4607      	mov	r7, r0
 8008d86:	2d00      	cmp	r5, #0
 8008d88:	dd0c      	ble.n	8008da4 <_dtoa_r+0x754>
 8008d8a:	9b05      	ldr	r3, [sp, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dd09      	ble.n	8008da4 <_dtoa_r+0x754>
 8008d90:	42ab      	cmp	r3, r5
 8008d92:	9a04      	ldr	r2, [sp, #16]
 8008d94:	bfa8      	it	ge
 8008d96:	462b      	movge	r3, r5
 8008d98:	1ad2      	subs	r2, r2, r3
 8008d9a:	9204      	str	r2, [sp, #16]
 8008d9c:	9a05      	ldr	r2, [sp, #20]
 8008d9e:	1aed      	subs	r5, r5, r3
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	9305      	str	r3, [sp, #20]
 8008da4:	9b07      	ldr	r3, [sp, #28]
 8008da6:	b31b      	cbz	r3, 8008df0 <_dtoa_r+0x7a0>
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 80af 	beq.w	8008f0e <_dtoa_r+0x8be>
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	dd13      	ble.n	8008ddc <_dtoa_r+0x78c>
 8008db4:	4639      	mov	r1, r7
 8008db6:	4632      	mov	r2, r6
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 ffc7 	bl	8009d4c <__pow5mult>
 8008dbe:	ee18 2a10 	vmov	r2, s16
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 ff16 	bl	8009bf8 <__multiply>
 8008dcc:	ee18 1a10 	vmov	r1, s16
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f000 fdf8 	bl	80099c8 <_Bfree>
 8008dd8:	ee08 8a10 	vmov	s16, r8
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	1b9a      	subs	r2, r3, r6
 8008de0:	d006      	beq.n	8008df0 <_dtoa_r+0x7a0>
 8008de2:	ee18 1a10 	vmov	r1, s16
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 ffb0 	bl	8009d4c <__pow5mult>
 8008dec:	ee08 0a10 	vmov	s16, r0
 8008df0:	2101      	movs	r1, #1
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 feea 	bl	8009bcc <__i2b>
 8008df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	f340 8088 	ble.w	8008f12 <_dtoa_r+0x8c2>
 8008e02:	461a      	mov	r2, r3
 8008e04:	4601      	mov	r1, r0
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 ffa0 	bl	8009d4c <__pow5mult>
 8008e0c:	9b06      	ldr	r3, [sp, #24]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	4606      	mov	r6, r0
 8008e12:	f340 8081 	ble.w	8008f18 <_dtoa_r+0x8c8>
 8008e16:	f04f 0800 	mov.w	r8, #0
 8008e1a:	6933      	ldr	r3, [r6, #16]
 8008e1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e20:	6918      	ldr	r0, [r3, #16]
 8008e22:	f000 fe83 	bl	8009b2c <__hi0bits>
 8008e26:	f1c0 0020 	rsb	r0, r0, #32
 8008e2a:	9b05      	ldr	r3, [sp, #20]
 8008e2c:	4418      	add	r0, r3
 8008e2e:	f010 001f 	ands.w	r0, r0, #31
 8008e32:	f000 8092 	beq.w	8008f5a <_dtoa_r+0x90a>
 8008e36:	f1c0 0320 	rsb	r3, r0, #32
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	f340 808a 	ble.w	8008f54 <_dtoa_r+0x904>
 8008e40:	f1c0 001c 	rsb	r0, r0, #28
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	4403      	add	r3, r0
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	9b05      	ldr	r3, [sp, #20]
 8008e4c:	4403      	add	r3, r0
 8008e4e:	4405      	add	r5, r0
 8008e50:	9305      	str	r3, [sp, #20]
 8008e52:	9b04      	ldr	r3, [sp, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dd07      	ble.n	8008e68 <_dtoa_r+0x818>
 8008e58:	ee18 1a10 	vmov	r1, s16
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 ffce 	bl	8009e00 <__lshift>
 8008e64:	ee08 0a10 	vmov	s16, r0
 8008e68:	9b05      	ldr	r3, [sp, #20]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dd05      	ble.n	8008e7a <_dtoa_r+0x82a>
 8008e6e:	4631      	mov	r1, r6
 8008e70:	461a      	mov	r2, r3
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 ffc4 	bl	8009e00 <__lshift>
 8008e78:	4606      	mov	r6, r0
 8008e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d06e      	beq.n	8008f5e <_dtoa_r+0x90e>
 8008e80:	ee18 0a10 	vmov	r0, s16
 8008e84:	4631      	mov	r1, r6
 8008e86:	f001 f82b 	bl	8009ee0 <__mcmp>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	da67      	bge.n	8008f5e <_dtoa_r+0x90e>
 8008e8e:	9b00      	ldr	r3, [sp, #0]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	220a      	movs	r2, #10
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 fdb5 	bl	8009a0c <__multadd>
 8008ea2:	9b08      	ldr	r3, [sp, #32]
 8008ea4:	ee08 0a10 	vmov	s16, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 81b1 	beq.w	8009210 <_dtoa_r+0xbc0>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4639      	mov	r1, r7
 8008eb2:	220a      	movs	r2, #10
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 fda9 	bl	8009a0c <__multadd>
 8008eba:	9b02      	ldr	r3, [sp, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	4607      	mov	r7, r0
 8008ec0:	f300 808e 	bgt.w	8008fe0 <_dtoa_r+0x990>
 8008ec4:	9b06      	ldr	r3, [sp, #24]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	dc51      	bgt.n	8008f6e <_dtoa_r+0x91e>
 8008eca:	e089      	b.n	8008fe0 <_dtoa_r+0x990>
 8008ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ed2:	e74b      	b.n	8008d6c <_dtoa_r+0x71c>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	1e5e      	subs	r6, r3, #1
 8008ed8:	9b07      	ldr	r3, [sp, #28]
 8008eda:	42b3      	cmp	r3, r6
 8008edc:	bfbf      	itttt	lt
 8008ede:	9b07      	ldrlt	r3, [sp, #28]
 8008ee0:	9607      	strlt	r6, [sp, #28]
 8008ee2:	1af2      	sublt	r2, r6, r3
 8008ee4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ee6:	bfb6      	itet	lt
 8008ee8:	189b      	addlt	r3, r3, r2
 8008eea:	1b9e      	subge	r6, r3, r6
 8008eec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	bfb8      	it	lt
 8008ef2:	2600      	movlt	r6, #0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bfb7      	itett	lt
 8008ef8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008efc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008f00:	1a9d      	sublt	r5, r3, r2
 8008f02:	2300      	movlt	r3, #0
 8008f04:	e734      	b.n	8008d70 <_dtoa_r+0x720>
 8008f06:	9e07      	ldr	r6, [sp, #28]
 8008f08:	9d04      	ldr	r5, [sp, #16]
 8008f0a:	9f08      	ldr	r7, [sp, #32]
 8008f0c:	e73b      	b.n	8008d86 <_dtoa_r+0x736>
 8008f0e:	9a07      	ldr	r2, [sp, #28]
 8008f10:	e767      	b.n	8008de2 <_dtoa_r+0x792>
 8008f12:	9b06      	ldr	r3, [sp, #24]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	dc18      	bgt.n	8008f4a <_dtoa_r+0x8fa>
 8008f18:	f1ba 0f00 	cmp.w	sl, #0
 8008f1c:	d115      	bne.n	8008f4a <_dtoa_r+0x8fa>
 8008f1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f22:	b993      	cbnz	r3, 8008f4a <_dtoa_r+0x8fa>
 8008f24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f28:	0d1b      	lsrs	r3, r3, #20
 8008f2a:	051b      	lsls	r3, r3, #20
 8008f2c:	b183      	cbz	r3, 8008f50 <_dtoa_r+0x900>
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	3301      	adds	r3, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	9b05      	ldr	r3, [sp, #20]
 8008f36:	3301      	adds	r3, #1
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	f04f 0801 	mov.w	r8, #1
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f47f af6a 	bne.w	8008e1a <_dtoa_r+0x7ca>
 8008f46:	2001      	movs	r0, #1
 8008f48:	e76f      	b.n	8008e2a <_dtoa_r+0x7da>
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	e7f6      	b.n	8008f3e <_dtoa_r+0x8ee>
 8008f50:	4698      	mov	r8, r3
 8008f52:	e7f4      	b.n	8008f3e <_dtoa_r+0x8ee>
 8008f54:	f43f af7d 	beq.w	8008e52 <_dtoa_r+0x802>
 8008f58:	4618      	mov	r0, r3
 8008f5a:	301c      	adds	r0, #28
 8008f5c:	e772      	b.n	8008e44 <_dtoa_r+0x7f4>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dc37      	bgt.n	8008fd4 <_dtoa_r+0x984>
 8008f64:	9b06      	ldr	r3, [sp, #24]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	dd34      	ble.n	8008fd4 <_dtoa_r+0x984>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	9302      	str	r3, [sp, #8]
 8008f6e:	9b02      	ldr	r3, [sp, #8]
 8008f70:	b96b      	cbnz	r3, 8008f8e <_dtoa_r+0x93e>
 8008f72:	4631      	mov	r1, r6
 8008f74:	2205      	movs	r2, #5
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 fd48 	bl	8009a0c <__multadd>
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4606      	mov	r6, r0
 8008f80:	ee18 0a10 	vmov	r0, s16
 8008f84:	f000 ffac 	bl	8009ee0 <__mcmp>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	f73f adbb 	bgt.w	8008b04 <_dtoa_r+0x4b4>
 8008f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f90:	9d01      	ldr	r5, [sp, #4]
 8008f92:	43db      	mvns	r3, r3
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	f04f 0800 	mov.w	r8, #0
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 fd13 	bl	80099c8 <_Bfree>
 8008fa2:	2f00      	cmp	r7, #0
 8008fa4:	f43f aea4 	beq.w	8008cf0 <_dtoa_r+0x6a0>
 8008fa8:	f1b8 0f00 	cmp.w	r8, #0
 8008fac:	d005      	beq.n	8008fba <_dtoa_r+0x96a>
 8008fae:	45b8      	cmp	r8, r7
 8008fb0:	d003      	beq.n	8008fba <_dtoa_r+0x96a>
 8008fb2:	4641      	mov	r1, r8
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fd07 	bl	80099c8 <_Bfree>
 8008fba:	4639      	mov	r1, r7
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fd03 	bl	80099c8 <_Bfree>
 8008fc2:	e695      	b.n	8008cf0 <_dtoa_r+0x6a0>
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	4637      	mov	r7, r6
 8008fc8:	e7e1      	b.n	8008f8e <_dtoa_r+0x93e>
 8008fca:	9700      	str	r7, [sp, #0]
 8008fcc:	4637      	mov	r7, r6
 8008fce:	e599      	b.n	8008b04 <_dtoa_r+0x4b4>
 8008fd0:	40240000 	.word	0x40240000
 8008fd4:	9b08      	ldr	r3, [sp, #32]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 80ca 	beq.w	8009170 <_dtoa_r+0xb20>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	9302      	str	r3, [sp, #8]
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	dd05      	ble.n	8008ff0 <_dtoa_r+0x9a0>
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 ff09 	bl	8009e00 <__lshift>
 8008fee:	4607      	mov	r7, r0
 8008ff0:	f1b8 0f00 	cmp.w	r8, #0
 8008ff4:	d05b      	beq.n	80090ae <_dtoa_r+0xa5e>
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 fca5 	bl	8009948 <_Balloc>
 8008ffe:	4605      	mov	r5, r0
 8009000:	b928      	cbnz	r0, 800900e <_dtoa_r+0x9be>
 8009002:	4b87      	ldr	r3, [pc, #540]	; (8009220 <_dtoa_r+0xbd0>)
 8009004:	4602      	mov	r2, r0
 8009006:	f240 21ea 	movw	r1, #746	; 0x2ea
 800900a:	f7ff bb3b 	b.w	8008684 <_dtoa_r+0x34>
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	3202      	adds	r2, #2
 8009012:	0092      	lsls	r2, r2, #2
 8009014:	f107 010c 	add.w	r1, r7, #12
 8009018:	300c      	adds	r0, #12
 800901a:	f7fd fd29 	bl	8006a70 <memcpy>
 800901e:	2201      	movs	r2, #1
 8009020:	4629      	mov	r1, r5
 8009022:	4620      	mov	r0, r4
 8009024:	f000 feec 	bl	8009e00 <__lshift>
 8009028:	9b01      	ldr	r3, [sp, #4]
 800902a:	f103 0901 	add.w	r9, r3, #1
 800902e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009032:	4413      	add	r3, r2
 8009034:	9305      	str	r3, [sp, #20]
 8009036:	f00a 0301 	and.w	r3, sl, #1
 800903a:	46b8      	mov	r8, r7
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	4607      	mov	r7, r0
 8009040:	4631      	mov	r1, r6
 8009042:	ee18 0a10 	vmov	r0, s16
 8009046:	f7ff fa77 	bl	8008538 <quorem>
 800904a:	4641      	mov	r1, r8
 800904c:	9002      	str	r0, [sp, #8]
 800904e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009052:	ee18 0a10 	vmov	r0, s16
 8009056:	f000 ff43 	bl	8009ee0 <__mcmp>
 800905a:	463a      	mov	r2, r7
 800905c:	9003      	str	r0, [sp, #12]
 800905e:	4631      	mov	r1, r6
 8009060:	4620      	mov	r0, r4
 8009062:	f000 ff59 	bl	8009f18 <__mdiff>
 8009066:	68c2      	ldr	r2, [r0, #12]
 8009068:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800906c:	4605      	mov	r5, r0
 800906e:	bb02      	cbnz	r2, 80090b2 <_dtoa_r+0xa62>
 8009070:	4601      	mov	r1, r0
 8009072:	ee18 0a10 	vmov	r0, s16
 8009076:	f000 ff33 	bl	8009ee0 <__mcmp>
 800907a:	4602      	mov	r2, r0
 800907c:	4629      	mov	r1, r5
 800907e:	4620      	mov	r0, r4
 8009080:	9207      	str	r2, [sp, #28]
 8009082:	f000 fca1 	bl	80099c8 <_Bfree>
 8009086:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800908a:	ea43 0102 	orr.w	r1, r3, r2
 800908e:	9b04      	ldr	r3, [sp, #16]
 8009090:	430b      	orrs	r3, r1
 8009092:	464d      	mov	r5, r9
 8009094:	d10f      	bne.n	80090b6 <_dtoa_r+0xa66>
 8009096:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800909a:	d02a      	beq.n	80090f2 <_dtoa_r+0xaa2>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dd02      	ble.n	80090a8 <_dtoa_r+0xa58>
 80090a2:	9b02      	ldr	r3, [sp, #8]
 80090a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80090a8:	f88b a000 	strb.w	sl, [fp]
 80090ac:	e775      	b.n	8008f9a <_dtoa_r+0x94a>
 80090ae:	4638      	mov	r0, r7
 80090b0:	e7ba      	b.n	8009028 <_dtoa_r+0x9d8>
 80090b2:	2201      	movs	r2, #1
 80090b4:	e7e2      	b.n	800907c <_dtoa_r+0xa2c>
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	db04      	blt.n	80090c6 <_dtoa_r+0xa76>
 80090bc:	9906      	ldr	r1, [sp, #24]
 80090be:	430b      	orrs	r3, r1
 80090c0:	9904      	ldr	r1, [sp, #16]
 80090c2:	430b      	orrs	r3, r1
 80090c4:	d122      	bne.n	800910c <_dtoa_r+0xabc>
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	ddee      	ble.n	80090a8 <_dtoa_r+0xa58>
 80090ca:	ee18 1a10 	vmov	r1, s16
 80090ce:	2201      	movs	r2, #1
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fe95 	bl	8009e00 <__lshift>
 80090d6:	4631      	mov	r1, r6
 80090d8:	ee08 0a10 	vmov	s16, r0
 80090dc:	f000 ff00 	bl	8009ee0 <__mcmp>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	dc03      	bgt.n	80090ec <_dtoa_r+0xa9c>
 80090e4:	d1e0      	bne.n	80090a8 <_dtoa_r+0xa58>
 80090e6:	f01a 0f01 	tst.w	sl, #1
 80090ea:	d0dd      	beq.n	80090a8 <_dtoa_r+0xa58>
 80090ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80090f0:	d1d7      	bne.n	80090a2 <_dtoa_r+0xa52>
 80090f2:	2339      	movs	r3, #57	; 0x39
 80090f4:	f88b 3000 	strb.w	r3, [fp]
 80090f8:	462b      	mov	r3, r5
 80090fa:	461d      	mov	r5, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009102:	2a39      	cmp	r2, #57	; 0x39
 8009104:	d071      	beq.n	80091ea <_dtoa_r+0xb9a>
 8009106:	3201      	adds	r2, #1
 8009108:	701a      	strb	r2, [r3, #0]
 800910a:	e746      	b.n	8008f9a <_dtoa_r+0x94a>
 800910c:	2a00      	cmp	r2, #0
 800910e:	dd07      	ble.n	8009120 <_dtoa_r+0xad0>
 8009110:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009114:	d0ed      	beq.n	80090f2 <_dtoa_r+0xaa2>
 8009116:	f10a 0301 	add.w	r3, sl, #1
 800911a:	f88b 3000 	strb.w	r3, [fp]
 800911e:	e73c      	b.n	8008f9a <_dtoa_r+0x94a>
 8009120:	9b05      	ldr	r3, [sp, #20]
 8009122:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009126:	4599      	cmp	r9, r3
 8009128:	d047      	beq.n	80091ba <_dtoa_r+0xb6a>
 800912a:	ee18 1a10 	vmov	r1, s16
 800912e:	2300      	movs	r3, #0
 8009130:	220a      	movs	r2, #10
 8009132:	4620      	mov	r0, r4
 8009134:	f000 fc6a 	bl	8009a0c <__multadd>
 8009138:	45b8      	cmp	r8, r7
 800913a:	ee08 0a10 	vmov	s16, r0
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	f04f 020a 	mov.w	r2, #10
 8009146:	4641      	mov	r1, r8
 8009148:	4620      	mov	r0, r4
 800914a:	d106      	bne.n	800915a <_dtoa_r+0xb0a>
 800914c:	f000 fc5e 	bl	8009a0c <__multadd>
 8009150:	4680      	mov	r8, r0
 8009152:	4607      	mov	r7, r0
 8009154:	f109 0901 	add.w	r9, r9, #1
 8009158:	e772      	b.n	8009040 <_dtoa_r+0x9f0>
 800915a:	f000 fc57 	bl	8009a0c <__multadd>
 800915e:	4639      	mov	r1, r7
 8009160:	4680      	mov	r8, r0
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	4620      	mov	r0, r4
 8009168:	f000 fc50 	bl	8009a0c <__multadd>
 800916c:	4607      	mov	r7, r0
 800916e:	e7f1      	b.n	8009154 <_dtoa_r+0xb04>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	9302      	str	r3, [sp, #8]
 8009174:	9d01      	ldr	r5, [sp, #4]
 8009176:	ee18 0a10 	vmov	r0, s16
 800917a:	4631      	mov	r1, r6
 800917c:	f7ff f9dc 	bl	8008538 <quorem>
 8009180:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009184:	9b01      	ldr	r3, [sp, #4]
 8009186:	f805 ab01 	strb.w	sl, [r5], #1
 800918a:	1aea      	subs	r2, r5, r3
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	4293      	cmp	r3, r2
 8009190:	dd09      	ble.n	80091a6 <_dtoa_r+0xb56>
 8009192:	ee18 1a10 	vmov	r1, s16
 8009196:	2300      	movs	r3, #0
 8009198:	220a      	movs	r2, #10
 800919a:	4620      	mov	r0, r4
 800919c:	f000 fc36 	bl	8009a0c <__multadd>
 80091a0:	ee08 0a10 	vmov	s16, r0
 80091a4:	e7e7      	b.n	8009176 <_dtoa_r+0xb26>
 80091a6:	9b02      	ldr	r3, [sp, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	bfc8      	it	gt
 80091ac:	461d      	movgt	r5, r3
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	bfd8      	it	le
 80091b2:	2501      	movle	r5, #1
 80091b4:	441d      	add	r5, r3
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	ee18 1a10 	vmov	r1, s16
 80091be:	2201      	movs	r2, #1
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fe1d 	bl	8009e00 <__lshift>
 80091c6:	4631      	mov	r1, r6
 80091c8:	ee08 0a10 	vmov	s16, r0
 80091cc:	f000 fe88 	bl	8009ee0 <__mcmp>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	dc91      	bgt.n	80090f8 <_dtoa_r+0xaa8>
 80091d4:	d102      	bne.n	80091dc <_dtoa_r+0xb8c>
 80091d6:	f01a 0f01 	tst.w	sl, #1
 80091da:	d18d      	bne.n	80090f8 <_dtoa_r+0xaa8>
 80091dc:	462b      	mov	r3, r5
 80091de:	461d      	mov	r5, r3
 80091e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091e4:	2a30      	cmp	r2, #48	; 0x30
 80091e6:	d0fa      	beq.n	80091de <_dtoa_r+0xb8e>
 80091e8:	e6d7      	b.n	8008f9a <_dtoa_r+0x94a>
 80091ea:	9a01      	ldr	r2, [sp, #4]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d184      	bne.n	80090fa <_dtoa_r+0xaaa>
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	2331      	movs	r3, #49	; 0x31
 80091f8:	7013      	strb	r3, [r2, #0]
 80091fa:	e6ce      	b.n	8008f9a <_dtoa_r+0x94a>
 80091fc:	4b09      	ldr	r3, [pc, #36]	; (8009224 <_dtoa_r+0xbd4>)
 80091fe:	f7ff ba95 	b.w	800872c <_dtoa_r+0xdc>
 8009202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009204:	2b00      	cmp	r3, #0
 8009206:	f47f aa6e 	bne.w	80086e6 <_dtoa_r+0x96>
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <_dtoa_r+0xbd8>)
 800920c:	f7ff ba8e 	b.w	800872c <_dtoa_r+0xdc>
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	dcae      	bgt.n	8009174 <_dtoa_r+0xb24>
 8009216:	9b06      	ldr	r3, [sp, #24]
 8009218:	2b02      	cmp	r3, #2
 800921a:	f73f aea8 	bgt.w	8008f6e <_dtoa_r+0x91e>
 800921e:	e7a9      	b.n	8009174 <_dtoa_r+0xb24>
 8009220:	0800b660 	.word	0x0800b660
 8009224:	0800b464 	.word	0x0800b464
 8009228:	0800b5e1 	.word	0x0800b5e1

0800922c <rshift>:
 800922c:	6903      	ldr	r3, [r0, #16]
 800922e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800923a:	f100 0414 	add.w	r4, r0, #20
 800923e:	dd45      	ble.n	80092cc <rshift+0xa0>
 8009240:	f011 011f 	ands.w	r1, r1, #31
 8009244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800924c:	d10c      	bne.n	8009268 <rshift+0x3c>
 800924e:	f100 0710 	add.w	r7, r0, #16
 8009252:	4629      	mov	r1, r5
 8009254:	42b1      	cmp	r1, r6
 8009256:	d334      	bcc.n	80092c2 <rshift+0x96>
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	1eea      	subs	r2, r5, #3
 800925e:	4296      	cmp	r6, r2
 8009260:	bf38      	it	cc
 8009262:	2300      	movcc	r3, #0
 8009264:	4423      	add	r3, r4
 8009266:	e015      	b.n	8009294 <rshift+0x68>
 8009268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800926c:	f1c1 0820 	rsb	r8, r1, #32
 8009270:	40cf      	lsrs	r7, r1
 8009272:	f105 0e04 	add.w	lr, r5, #4
 8009276:	46a1      	mov	r9, r4
 8009278:	4576      	cmp	r6, lr
 800927a:	46f4      	mov	ip, lr
 800927c:	d815      	bhi.n	80092aa <rshift+0x7e>
 800927e:	1a9a      	subs	r2, r3, r2
 8009280:	0092      	lsls	r2, r2, #2
 8009282:	3a04      	subs	r2, #4
 8009284:	3501      	adds	r5, #1
 8009286:	42ae      	cmp	r6, r5
 8009288:	bf38      	it	cc
 800928a:	2200      	movcc	r2, #0
 800928c:	18a3      	adds	r3, r4, r2
 800928e:	50a7      	str	r7, [r4, r2]
 8009290:	b107      	cbz	r7, 8009294 <rshift+0x68>
 8009292:	3304      	adds	r3, #4
 8009294:	1b1a      	subs	r2, r3, r4
 8009296:	42a3      	cmp	r3, r4
 8009298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800929c:	bf08      	it	eq
 800929e:	2300      	moveq	r3, #0
 80092a0:	6102      	str	r2, [r0, #16]
 80092a2:	bf08      	it	eq
 80092a4:	6143      	streq	r3, [r0, #20]
 80092a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092aa:	f8dc c000 	ldr.w	ip, [ip]
 80092ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80092b2:	ea4c 0707 	orr.w	r7, ip, r7
 80092b6:	f849 7b04 	str.w	r7, [r9], #4
 80092ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092be:	40cf      	lsrs	r7, r1
 80092c0:	e7da      	b.n	8009278 <rshift+0x4c>
 80092c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ca:	e7c3      	b.n	8009254 <rshift+0x28>
 80092cc:	4623      	mov	r3, r4
 80092ce:	e7e1      	b.n	8009294 <rshift+0x68>

080092d0 <__hexdig_fun>:
 80092d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d802      	bhi.n	80092de <__hexdig_fun+0xe>
 80092d8:	3820      	subs	r0, #32
 80092da:	b2c0      	uxtb	r0, r0
 80092dc:	4770      	bx	lr
 80092de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d801      	bhi.n	80092ea <__hexdig_fun+0x1a>
 80092e6:	3847      	subs	r0, #71	; 0x47
 80092e8:	e7f7      	b.n	80092da <__hexdig_fun+0xa>
 80092ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d801      	bhi.n	80092f6 <__hexdig_fun+0x26>
 80092f2:	3827      	subs	r0, #39	; 0x27
 80092f4:	e7f1      	b.n	80092da <__hexdig_fun+0xa>
 80092f6:	2000      	movs	r0, #0
 80092f8:	4770      	bx	lr
	...

080092fc <__gethex>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	ed2d 8b02 	vpush	{d8}
 8009304:	b089      	sub	sp, #36	; 0x24
 8009306:	ee08 0a10 	vmov	s16, r0
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	4bb4      	ldr	r3, [pc, #720]	; (80095e0 <__gethex+0x2e4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	4618      	mov	r0, r3
 8009314:	468b      	mov	fp, r1
 8009316:	4690      	mov	r8, r2
 8009318:	f7f6 ff62 	bl	80001e0 <strlen>
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	f8db 2000 	ldr.w	r2, [fp]
 8009322:	4403      	add	r3, r0
 8009324:	4682      	mov	sl, r0
 8009326:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800932a:	9305      	str	r3, [sp, #20]
 800932c:	1c93      	adds	r3, r2, #2
 800932e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009332:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009336:	32fe      	adds	r2, #254	; 0xfe
 8009338:	18d1      	adds	r1, r2, r3
 800933a:	461f      	mov	r7, r3
 800933c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009340:	9100      	str	r1, [sp, #0]
 8009342:	2830      	cmp	r0, #48	; 0x30
 8009344:	d0f8      	beq.n	8009338 <__gethex+0x3c>
 8009346:	f7ff ffc3 	bl	80092d0 <__hexdig_fun>
 800934a:	4604      	mov	r4, r0
 800934c:	2800      	cmp	r0, #0
 800934e:	d13a      	bne.n	80093c6 <__gethex+0xca>
 8009350:	9901      	ldr	r1, [sp, #4]
 8009352:	4652      	mov	r2, sl
 8009354:	4638      	mov	r0, r7
 8009356:	f001 fa23 	bl	800a7a0 <strncmp>
 800935a:	4605      	mov	r5, r0
 800935c:	2800      	cmp	r0, #0
 800935e:	d168      	bne.n	8009432 <__gethex+0x136>
 8009360:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009364:	eb07 060a 	add.w	r6, r7, sl
 8009368:	f7ff ffb2 	bl	80092d0 <__hexdig_fun>
 800936c:	2800      	cmp	r0, #0
 800936e:	d062      	beq.n	8009436 <__gethex+0x13a>
 8009370:	4633      	mov	r3, r6
 8009372:	7818      	ldrb	r0, [r3, #0]
 8009374:	2830      	cmp	r0, #48	; 0x30
 8009376:	461f      	mov	r7, r3
 8009378:	f103 0301 	add.w	r3, r3, #1
 800937c:	d0f9      	beq.n	8009372 <__gethex+0x76>
 800937e:	f7ff ffa7 	bl	80092d0 <__hexdig_fun>
 8009382:	2301      	movs	r3, #1
 8009384:	fab0 f480 	clz	r4, r0
 8009388:	0964      	lsrs	r4, r4, #5
 800938a:	4635      	mov	r5, r6
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	463a      	mov	r2, r7
 8009390:	4616      	mov	r6, r2
 8009392:	3201      	adds	r2, #1
 8009394:	7830      	ldrb	r0, [r6, #0]
 8009396:	f7ff ff9b 	bl	80092d0 <__hexdig_fun>
 800939a:	2800      	cmp	r0, #0
 800939c:	d1f8      	bne.n	8009390 <__gethex+0x94>
 800939e:	9901      	ldr	r1, [sp, #4]
 80093a0:	4652      	mov	r2, sl
 80093a2:	4630      	mov	r0, r6
 80093a4:	f001 f9fc 	bl	800a7a0 <strncmp>
 80093a8:	b980      	cbnz	r0, 80093cc <__gethex+0xd0>
 80093aa:	b94d      	cbnz	r5, 80093c0 <__gethex+0xc4>
 80093ac:	eb06 050a 	add.w	r5, r6, sl
 80093b0:	462a      	mov	r2, r5
 80093b2:	4616      	mov	r6, r2
 80093b4:	3201      	adds	r2, #1
 80093b6:	7830      	ldrb	r0, [r6, #0]
 80093b8:	f7ff ff8a 	bl	80092d0 <__hexdig_fun>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d1f8      	bne.n	80093b2 <__gethex+0xb6>
 80093c0:	1bad      	subs	r5, r5, r6
 80093c2:	00ad      	lsls	r5, r5, #2
 80093c4:	e004      	b.n	80093d0 <__gethex+0xd4>
 80093c6:	2400      	movs	r4, #0
 80093c8:	4625      	mov	r5, r4
 80093ca:	e7e0      	b.n	800938e <__gethex+0x92>
 80093cc:	2d00      	cmp	r5, #0
 80093ce:	d1f7      	bne.n	80093c0 <__gethex+0xc4>
 80093d0:	7833      	ldrb	r3, [r6, #0]
 80093d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093d6:	2b50      	cmp	r3, #80	; 0x50
 80093d8:	d13b      	bne.n	8009452 <__gethex+0x156>
 80093da:	7873      	ldrb	r3, [r6, #1]
 80093dc:	2b2b      	cmp	r3, #43	; 0x2b
 80093de:	d02c      	beq.n	800943a <__gethex+0x13e>
 80093e0:	2b2d      	cmp	r3, #45	; 0x2d
 80093e2:	d02e      	beq.n	8009442 <__gethex+0x146>
 80093e4:	1c71      	adds	r1, r6, #1
 80093e6:	f04f 0900 	mov.w	r9, #0
 80093ea:	7808      	ldrb	r0, [r1, #0]
 80093ec:	f7ff ff70 	bl	80092d0 <__hexdig_fun>
 80093f0:	1e43      	subs	r3, r0, #1
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b18      	cmp	r3, #24
 80093f6:	d82c      	bhi.n	8009452 <__gethex+0x156>
 80093f8:	f1a0 0210 	sub.w	r2, r0, #16
 80093fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009400:	f7ff ff66 	bl	80092d0 <__hexdig_fun>
 8009404:	1e43      	subs	r3, r0, #1
 8009406:	b2db      	uxtb	r3, r3
 8009408:	2b18      	cmp	r3, #24
 800940a:	d91d      	bls.n	8009448 <__gethex+0x14c>
 800940c:	f1b9 0f00 	cmp.w	r9, #0
 8009410:	d000      	beq.n	8009414 <__gethex+0x118>
 8009412:	4252      	negs	r2, r2
 8009414:	4415      	add	r5, r2
 8009416:	f8cb 1000 	str.w	r1, [fp]
 800941a:	b1e4      	cbz	r4, 8009456 <__gethex+0x15a>
 800941c:	9b00      	ldr	r3, [sp, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	bf14      	ite	ne
 8009422:	2700      	movne	r7, #0
 8009424:	2706      	moveq	r7, #6
 8009426:	4638      	mov	r0, r7
 8009428:	b009      	add	sp, #36	; 0x24
 800942a:	ecbd 8b02 	vpop	{d8}
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	463e      	mov	r6, r7
 8009434:	4625      	mov	r5, r4
 8009436:	2401      	movs	r4, #1
 8009438:	e7ca      	b.n	80093d0 <__gethex+0xd4>
 800943a:	f04f 0900 	mov.w	r9, #0
 800943e:	1cb1      	adds	r1, r6, #2
 8009440:	e7d3      	b.n	80093ea <__gethex+0xee>
 8009442:	f04f 0901 	mov.w	r9, #1
 8009446:	e7fa      	b.n	800943e <__gethex+0x142>
 8009448:	230a      	movs	r3, #10
 800944a:	fb03 0202 	mla	r2, r3, r2, r0
 800944e:	3a10      	subs	r2, #16
 8009450:	e7d4      	b.n	80093fc <__gethex+0x100>
 8009452:	4631      	mov	r1, r6
 8009454:	e7df      	b.n	8009416 <__gethex+0x11a>
 8009456:	1bf3      	subs	r3, r6, r7
 8009458:	3b01      	subs	r3, #1
 800945a:	4621      	mov	r1, r4
 800945c:	2b07      	cmp	r3, #7
 800945e:	dc0b      	bgt.n	8009478 <__gethex+0x17c>
 8009460:	ee18 0a10 	vmov	r0, s16
 8009464:	f000 fa70 	bl	8009948 <_Balloc>
 8009468:	4604      	mov	r4, r0
 800946a:	b940      	cbnz	r0, 800947e <__gethex+0x182>
 800946c:	4b5d      	ldr	r3, [pc, #372]	; (80095e4 <__gethex+0x2e8>)
 800946e:	4602      	mov	r2, r0
 8009470:	21de      	movs	r1, #222	; 0xde
 8009472:	485d      	ldr	r0, [pc, #372]	; (80095e8 <__gethex+0x2ec>)
 8009474:	f001 f9b6 	bl	800a7e4 <__assert_func>
 8009478:	3101      	adds	r1, #1
 800947a:	105b      	asrs	r3, r3, #1
 800947c:	e7ee      	b.n	800945c <__gethex+0x160>
 800947e:	f100 0914 	add.w	r9, r0, #20
 8009482:	f04f 0b00 	mov.w	fp, #0
 8009486:	f1ca 0301 	rsb	r3, sl, #1
 800948a:	f8cd 9008 	str.w	r9, [sp, #8]
 800948e:	f8cd b000 	str.w	fp, [sp]
 8009492:	9306      	str	r3, [sp, #24]
 8009494:	42b7      	cmp	r7, r6
 8009496:	d340      	bcc.n	800951a <__gethex+0x21e>
 8009498:	9802      	ldr	r0, [sp, #8]
 800949a:	9b00      	ldr	r3, [sp, #0]
 800949c:	f840 3b04 	str.w	r3, [r0], #4
 80094a0:	eba0 0009 	sub.w	r0, r0, r9
 80094a4:	1080      	asrs	r0, r0, #2
 80094a6:	0146      	lsls	r6, r0, #5
 80094a8:	6120      	str	r0, [r4, #16]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fb3e 	bl	8009b2c <__hi0bits>
 80094b0:	1a30      	subs	r0, r6, r0
 80094b2:	f8d8 6000 	ldr.w	r6, [r8]
 80094b6:	42b0      	cmp	r0, r6
 80094b8:	dd63      	ble.n	8009582 <__gethex+0x286>
 80094ba:	1b87      	subs	r7, r0, r6
 80094bc:	4639      	mov	r1, r7
 80094be:	4620      	mov	r0, r4
 80094c0:	f000 fee2 	bl	800a288 <__any_on>
 80094c4:	4682      	mov	sl, r0
 80094c6:	b1a8      	cbz	r0, 80094f4 <__gethex+0x1f8>
 80094c8:	1e7b      	subs	r3, r7, #1
 80094ca:	1159      	asrs	r1, r3, #5
 80094cc:	f003 021f 	and.w	r2, r3, #31
 80094d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094d4:	f04f 0a01 	mov.w	sl, #1
 80094d8:	fa0a f202 	lsl.w	r2, sl, r2
 80094dc:	420a      	tst	r2, r1
 80094de:	d009      	beq.n	80094f4 <__gethex+0x1f8>
 80094e0:	4553      	cmp	r3, sl
 80094e2:	dd05      	ble.n	80094f0 <__gethex+0x1f4>
 80094e4:	1eb9      	subs	r1, r7, #2
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fece 	bl	800a288 <__any_on>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d145      	bne.n	800957c <__gethex+0x280>
 80094f0:	f04f 0a02 	mov.w	sl, #2
 80094f4:	4639      	mov	r1, r7
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff fe98 	bl	800922c <rshift>
 80094fc:	443d      	add	r5, r7
 80094fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009502:	42ab      	cmp	r3, r5
 8009504:	da4c      	bge.n	80095a0 <__gethex+0x2a4>
 8009506:	ee18 0a10 	vmov	r0, s16
 800950a:	4621      	mov	r1, r4
 800950c:	f000 fa5c 	bl	80099c8 <_Bfree>
 8009510:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009512:	2300      	movs	r3, #0
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	27a3      	movs	r7, #163	; 0xa3
 8009518:	e785      	b.n	8009426 <__gethex+0x12a>
 800951a:	1e73      	subs	r3, r6, #1
 800951c:	9a05      	ldr	r2, [sp, #20]
 800951e:	9303      	str	r3, [sp, #12]
 8009520:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009524:	4293      	cmp	r3, r2
 8009526:	d019      	beq.n	800955c <__gethex+0x260>
 8009528:	f1bb 0f20 	cmp.w	fp, #32
 800952c:	d107      	bne.n	800953e <__gethex+0x242>
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	9a00      	ldr	r2, [sp, #0]
 8009532:	f843 2b04 	str.w	r2, [r3], #4
 8009536:	9302      	str	r3, [sp, #8]
 8009538:	2300      	movs	r3, #0
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	469b      	mov	fp, r3
 800953e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009542:	f7ff fec5 	bl	80092d0 <__hexdig_fun>
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	f000 000f 	and.w	r0, r0, #15
 800954c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009550:	4303      	orrs	r3, r0
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	f10b 0b04 	add.w	fp, fp, #4
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	e00d      	b.n	8009578 <__gethex+0x27c>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	9a06      	ldr	r2, [sp, #24]
 8009560:	4413      	add	r3, r2
 8009562:	42bb      	cmp	r3, r7
 8009564:	d3e0      	bcc.n	8009528 <__gethex+0x22c>
 8009566:	4618      	mov	r0, r3
 8009568:	9901      	ldr	r1, [sp, #4]
 800956a:	9307      	str	r3, [sp, #28]
 800956c:	4652      	mov	r2, sl
 800956e:	f001 f917 	bl	800a7a0 <strncmp>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	2800      	cmp	r0, #0
 8009576:	d1d7      	bne.n	8009528 <__gethex+0x22c>
 8009578:	461e      	mov	r6, r3
 800957a:	e78b      	b.n	8009494 <__gethex+0x198>
 800957c:	f04f 0a03 	mov.w	sl, #3
 8009580:	e7b8      	b.n	80094f4 <__gethex+0x1f8>
 8009582:	da0a      	bge.n	800959a <__gethex+0x29e>
 8009584:	1a37      	subs	r7, r6, r0
 8009586:	4621      	mov	r1, r4
 8009588:	ee18 0a10 	vmov	r0, s16
 800958c:	463a      	mov	r2, r7
 800958e:	f000 fc37 	bl	8009e00 <__lshift>
 8009592:	1bed      	subs	r5, r5, r7
 8009594:	4604      	mov	r4, r0
 8009596:	f100 0914 	add.w	r9, r0, #20
 800959a:	f04f 0a00 	mov.w	sl, #0
 800959e:	e7ae      	b.n	80094fe <__gethex+0x202>
 80095a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80095a4:	42a8      	cmp	r0, r5
 80095a6:	dd72      	ble.n	800968e <__gethex+0x392>
 80095a8:	1b45      	subs	r5, r0, r5
 80095aa:	42ae      	cmp	r6, r5
 80095ac:	dc36      	bgt.n	800961c <__gethex+0x320>
 80095ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d02a      	beq.n	800960c <__gethex+0x310>
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d02c      	beq.n	8009614 <__gethex+0x318>
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d11c      	bne.n	80095f8 <__gethex+0x2fc>
 80095be:	42ae      	cmp	r6, r5
 80095c0:	d11a      	bne.n	80095f8 <__gethex+0x2fc>
 80095c2:	2e01      	cmp	r6, #1
 80095c4:	d112      	bne.n	80095ec <__gethex+0x2f0>
 80095c6:	9a04      	ldr	r2, [sp, #16]
 80095c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	2301      	movs	r3, #1
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	f8c9 3000 	str.w	r3, [r9]
 80095d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095d8:	2762      	movs	r7, #98	; 0x62
 80095da:	601c      	str	r4, [r3, #0]
 80095dc:	e723      	b.n	8009426 <__gethex+0x12a>
 80095de:	bf00      	nop
 80095e0:	0800b6d8 	.word	0x0800b6d8
 80095e4:	0800b660 	.word	0x0800b660
 80095e8:	0800b671 	.word	0x0800b671
 80095ec:	1e71      	subs	r1, r6, #1
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fe4a 	bl	800a288 <__any_on>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1e6      	bne.n	80095c6 <__gethex+0x2ca>
 80095f8:	ee18 0a10 	vmov	r0, s16
 80095fc:	4621      	mov	r1, r4
 80095fe:	f000 f9e3 	bl	80099c8 <_Bfree>
 8009602:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009604:	2300      	movs	r3, #0
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	2750      	movs	r7, #80	; 0x50
 800960a:	e70c      	b.n	8009426 <__gethex+0x12a>
 800960c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1f2      	bne.n	80095f8 <__gethex+0x2fc>
 8009612:	e7d8      	b.n	80095c6 <__gethex+0x2ca>
 8009614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1d5      	bne.n	80095c6 <__gethex+0x2ca>
 800961a:	e7ed      	b.n	80095f8 <__gethex+0x2fc>
 800961c:	1e6f      	subs	r7, r5, #1
 800961e:	f1ba 0f00 	cmp.w	sl, #0
 8009622:	d131      	bne.n	8009688 <__gethex+0x38c>
 8009624:	b127      	cbz	r7, 8009630 <__gethex+0x334>
 8009626:	4639      	mov	r1, r7
 8009628:	4620      	mov	r0, r4
 800962a:	f000 fe2d 	bl	800a288 <__any_on>
 800962e:	4682      	mov	sl, r0
 8009630:	117b      	asrs	r3, r7, #5
 8009632:	2101      	movs	r1, #1
 8009634:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009638:	f007 071f 	and.w	r7, r7, #31
 800963c:	fa01 f707 	lsl.w	r7, r1, r7
 8009640:	421f      	tst	r7, r3
 8009642:	4629      	mov	r1, r5
 8009644:	4620      	mov	r0, r4
 8009646:	bf18      	it	ne
 8009648:	f04a 0a02 	orrne.w	sl, sl, #2
 800964c:	1b76      	subs	r6, r6, r5
 800964e:	f7ff fded 	bl	800922c <rshift>
 8009652:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009656:	2702      	movs	r7, #2
 8009658:	f1ba 0f00 	cmp.w	sl, #0
 800965c:	d048      	beq.n	80096f0 <__gethex+0x3f4>
 800965e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d015      	beq.n	8009692 <__gethex+0x396>
 8009666:	2b03      	cmp	r3, #3
 8009668:	d017      	beq.n	800969a <__gethex+0x39e>
 800966a:	2b01      	cmp	r3, #1
 800966c:	d109      	bne.n	8009682 <__gethex+0x386>
 800966e:	f01a 0f02 	tst.w	sl, #2
 8009672:	d006      	beq.n	8009682 <__gethex+0x386>
 8009674:	f8d9 0000 	ldr.w	r0, [r9]
 8009678:	ea4a 0a00 	orr.w	sl, sl, r0
 800967c:	f01a 0f01 	tst.w	sl, #1
 8009680:	d10e      	bne.n	80096a0 <__gethex+0x3a4>
 8009682:	f047 0710 	orr.w	r7, r7, #16
 8009686:	e033      	b.n	80096f0 <__gethex+0x3f4>
 8009688:	f04f 0a01 	mov.w	sl, #1
 800968c:	e7d0      	b.n	8009630 <__gethex+0x334>
 800968e:	2701      	movs	r7, #1
 8009690:	e7e2      	b.n	8009658 <__gethex+0x35c>
 8009692:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009694:	f1c3 0301 	rsb	r3, r3, #1
 8009698:	9315      	str	r3, [sp, #84]	; 0x54
 800969a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800969c:	2b00      	cmp	r3, #0
 800969e:	d0f0      	beq.n	8009682 <__gethex+0x386>
 80096a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096a4:	f104 0314 	add.w	r3, r4, #20
 80096a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096b0:	f04f 0c00 	mov.w	ip, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80096be:	d01c      	beq.n	80096fa <__gethex+0x3fe>
 80096c0:	3201      	adds	r2, #1
 80096c2:	6002      	str	r2, [r0, #0]
 80096c4:	2f02      	cmp	r7, #2
 80096c6:	f104 0314 	add.w	r3, r4, #20
 80096ca:	d13f      	bne.n	800974c <__gethex+0x450>
 80096cc:	f8d8 2000 	ldr.w	r2, [r8]
 80096d0:	3a01      	subs	r2, #1
 80096d2:	42b2      	cmp	r2, r6
 80096d4:	d10a      	bne.n	80096ec <__gethex+0x3f0>
 80096d6:	1171      	asrs	r1, r6, #5
 80096d8:	2201      	movs	r2, #1
 80096da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096de:	f006 061f 	and.w	r6, r6, #31
 80096e2:	fa02 f606 	lsl.w	r6, r2, r6
 80096e6:	421e      	tst	r6, r3
 80096e8:	bf18      	it	ne
 80096ea:	4617      	movne	r7, r2
 80096ec:	f047 0720 	orr.w	r7, r7, #32
 80096f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096f2:	601c      	str	r4, [r3, #0]
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	601d      	str	r5, [r3, #0]
 80096f8:	e695      	b.n	8009426 <__gethex+0x12a>
 80096fa:	4299      	cmp	r1, r3
 80096fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009700:	d8d8      	bhi.n	80096b4 <__gethex+0x3b8>
 8009702:	68a3      	ldr	r3, [r4, #8]
 8009704:	459b      	cmp	fp, r3
 8009706:	db19      	blt.n	800973c <__gethex+0x440>
 8009708:	6861      	ldr	r1, [r4, #4]
 800970a:	ee18 0a10 	vmov	r0, s16
 800970e:	3101      	adds	r1, #1
 8009710:	f000 f91a 	bl	8009948 <_Balloc>
 8009714:	4681      	mov	r9, r0
 8009716:	b918      	cbnz	r0, 8009720 <__gethex+0x424>
 8009718:	4b1a      	ldr	r3, [pc, #104]	; (8009784 <__gethex+0x488>)
 800971a:	4602      	mov	r2, r0
 800971c:	2184      	movs	r1, #132	; 0x84
 800971e:	e6a8      	b.n	8009472 <__gethex+0x176>
 8009720:	6922      	ldr	r2, [r4, #16]
 8009722:	3202      	adds	r2, #2
 8009724:	f104 010c 	add.w	r1, r4, #12
 8009728:	0092      	lsls	r2, r2, #2
 800972a:	300c      	adds	r0, #12
 800972c:	f7fd f9a0 	bl	8006a70 <memcpy>
 8009730:	4621      	mov	r1, r4
 8009732:	ee18 0a10 	vmov	r0, s16
 8009736:	f000 f947 	bl	80099c8 <_Bfree>
 800973a:	464c      	mov	r4, r9
 800973c:	6923      	ldr	r3, [r4, #16]
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009744:	6122      	str	r2, [r4, #16]
 8009746:	2201      	movs	r2, #1
 8009748:	615a      	str	r2, [r3, #20]
 800974a:	e7bb      	b.n	80096c4 <__gethex+0x3c8>
 800974c:	6922      	ldr	r2, [r4, #16]
 800974e:	455a      	cmp	r2, fp
 8009750:	dd0b      	ble.n	800976a <__gethex+0x46e>
 8009752:	2101      	movs	r1, #1
 8009754:	4620      	mov	r0, r4
 8009756:	f7ff fd69 	bl	800922c <rshift>
 800975a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800975e:	3501      	adds	r5, #1
 8009760:	42ab      	cmp	r3, r5
 8009762:	f6ff aed0 	blt.w	8009506 <__gethex+0x20a>
 8009766:	2701      	movs	r7, #1
 8009768:	e7c0      	b.n	80096ec <__gethex+0x3f0>
 800976a:	f016 061f 	ands.w	r6, r6, #31
 800976e:	d0fa      	beq.n	8009766 <__gethex+0x46a>
 8009770:	4453      	add	r3, sl
 8009772:	f1c6 0620 	rsb	r6, r6, #32
 8009776:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800977a:	f000 f9d7 	bl	8009b2c <__hi0bits>
 800977e:	42b0      	cmp	r0, r6
 8009780:	dbe7      	blt.n	8009752 <__gethex+0x456>
 8009782:	e7f0      	b.n	8009766 <__gethex+0x46a>
 8009784:	0800b660 	.word	0x0800b660

08009788 <L_shift>:
 8009788:	f1c2 0208 	rsb	r2, r2, #8
 800978c:	0092      	lsls	r2, r2, #2
 800978e:	b570      	push	{r4, r5, r6, lr}
 8009790:	f1c2 0620 	rsb	r6, r2, #32
 8009794:	6843      	ldr	r3, [r0, #4]
 8009796:	6804      	ldr	r4, [r0, #0]
 8009798:	fa03 f506 	lsl.w	r5, r3, r6
 800979c:	432c      	orrs	r4, r5
 800979e:	40d3      	lsrs	r3, r2
 80097a0:	6004      	str	r4, [r0, #0]
 80097a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80097a6:	4288      	cmp	r0, r1
 80097a8:	d3f4      	bcc.n	8009794 <L_shift+0xc>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}

080097ac <__match>:
 80097ac:	b530      	push	{r4, r5, lr}
 80097ae:	6803      	ldr	r3, [r0, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b6:	b914      	cbnz	r4, 80097be <__match+0x12>
 80097b8:	6003      	str	r3, [r0, #0]
 80097ba:	2001      	movs	r0, #1
 80097bc:	bd30      	pop	{r4, r5, pc}
 80097be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097c6:	2d19      	cmp	r5, #25
 80097c8:	bf98      	it	ls
 80097ca:	3220      	addls	r2, #32
 80097cc:	42a2      	cmp	r2, r4
 80097ce:	d0f0      	beq.n	80097b2 <__match+0x6>
 80097d0:	2000      	movs	r0, #0
 80097d2:	e7f3      	b.n	80097bc <__match+0x10>

080097d4 <__hexnan>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	680b      	ldr	r3, [r1, #0]
 80097da:	115e      	asrs	r6, r3, #5
 80097dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097e0:	f013 031f 	ands.w	r3, r3, #31
 80097e4:	b087      	sub	sp, #28
 80097e6:	bf18      	it	ne
 80097e8:	3604      	addne	r6, #4
 80097ea:	2500      	movs	r5, #0
 80097ec:	1f37      	subs	r7, r6, #4
 80097ee:	4690      	mov	r8, r2
 80097f0:	6802      	ldr	r2, [r0, #0]
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	4682      	mov	sl, r0
 80097f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097fa:	46b9      	mov	r9, r7
 80097fc:	463c      	mov	r4, r7
 80097fe:	9502      	str	r5, [sp, #8]
 8009800:	46ab      	mov	fp, r5
 8009802:	7851      	ldrb	r1, [r2, #1]
 8009804:	1c53      	adds	r3, r2, #1
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	b341      	cbz	r1, 800985c <__hexnan+0x88>
 800980a:	4608      	mov	r0, r1
 800980c:	9205      	str	r2, [sp, #20]
 800980e:	9104      	str	r1, [sp, #16]
 8009810:	f7ff fd5e 	bl	80092d0 <__hexdig_fun>
 8009814:	2800      	cmp	r0, #0
 8009816:	d14f      	bne.n	80098b8 <__hexnan+0xe4>
 8009818:	9904      	ldr	r1, [sp, #16]
 800981a:	9a05      	ldr	r2, [sp, #20]
 800981c:	2920      	cmp	r1, #32
 800981e:	d818      	bhi.n	8009852 <__hexnan+0x7e>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	459b      	cmp	fp, r3
 8009824:	dd13      	ble.n	800984e <__hexnan+0x7a>
 8009826:	454c      	cmp	r4, r9
 8009828:	d206      	bcs.n	8009838 <__hexnan+0x64>
 800982a:	2d07      	cmp	r5, #7
 800982c:	dc04      	bgt.n	8009838 <__hexnan+0x64>
 800982e:	462a      	mov	r2, r5
 8009830:	4649      	mov	r1, r9
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff ffa8 	bl	8009788 <L_shift>
 8009838:	4544      	cmp	r4, r8
 800983a:	d950      	bls.n	80098de <__hexnan+0x10a>
 800983c:	2300      	movs	r3, #0
 800983e:	f1a4 0904 	sub.w	r9, r4, #4
 8009842:	f844 3c04 	str.w	r3, [r4, #-4]
 8009846:	f8cd b008 	str.w	fp, [sp, #8]
 800984a:	464c      	mov	r4, r9
 800984c:	461d      	mov	r5, r3
 800984e:	9a03      	ldr	r2, [sp, #12]
 8009850:	e7d7      	b.n	8009802 <__hexnan+0x2e>
 8009852:	2929      	cmp	r1, #41	; 0x29
 8009854:	d156      	bne.n	8009904 <__hexnan+0x130>
 8009856:	3202      	adds	r2, #2
 8009858:	f8ca 2000 	str.w	r2, [sl]
 800985c:	f1bb 0f00 	cmp.w	fp, #0
 8009860:	d050      	beq.n	8009904 <__hexnan+0x130>
 8009862:	454c      	cmp	r4, r9
 8009864:	d206      	bcs.n	8009874 <__hexnan+0xa0>
 8009866:	2d07      	cmp	r5, #7
 8009868:	dc04      	bgt.n	8009874 <__hexnan+0xa0>
 800986a:	462a      	mov	r2, r5
 800986c:	4649      	mov	r1, r9
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff ff8a 	bl	8009788 <L_shift>
 8009874:	4544      	cmp	r4, r8
 8009876:	d934      	bls.n	80098e2 <__hexnan+0x10e>
 8009878:	f1a8 0204 	sub.w	r2, r8, #4
 800987c:	4623      	mov	r3, r4
 800987e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009882:	f842 1f04 	str.w	r1, [r2, #4]!
 8009886:	429f      	cmp	r7, r3
 8009888:	d2f9      	bcs.n	800987e <__hexnan+0xaa>
 800988a:	1b3b      	subs	r3, r7, r4
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	3304      	adds	r3, #4
 8009892:	3401      	adds	r4, #1
 8009894:	3e03      	subs	r6, #3
 8009896:	42b4      	cmp	r4, r6
 8009898:	bf88      	it	hi
 800989a:	2304      	movhi	r3, #4
 800989c:	4443      	add	r3, r8
 800989e:	2200      	movs	r2, #0
 80098a0:	f843 2b04 	str.w	r2, [r3], #4
 80098a4:	429f      	cmp	r7, r3
 80098a6:	d2fb      	bcs.n	80098a0 <__hexnan+0xcc>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	b91b      	cbnz	r3, 80098b4 <__hexnan+0xe0>
 80098ac:	4547      	cmp	r7, r8
 80098ae:	d127      	bne.n	8009900 <__hexnan+0x12c>
 80098b0:	2301      	movs	r3, #1
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	2005      	movs	r0, #5
 80098b6:	e026      	b.n	8009906 <__hexnan+0x132>
 80098b8:	3501      	adds	r5, #1
 80098ba:	2d08      	cmp	r5, #8
 80098bc:	f10b 0b01 	add.w	fp, fp, #1
 80098c0:	dd06      	ble.n	80098d0 <__hexnan+0xfc>
 80098c2:	4544      	cmp	r4, r8
 80098c4:	d9c3      	bls.n	800984e <__hexnan+0x7a>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80098cc:	2501      	movs	r5, #1
 80098ce:	3c04      	subs	r4, #4
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	f000 000f 	and.w	r0, r0, #15
 80098d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098da:	6022      	str	r2, [r4, #0]
 80098dc:	e7b7      	b.n	800984e <__hexnan+0x7a>
 80098de:	2508      	movs	r5, #8
 80098e0:	e7b5      	b.n	800984e <__hexnan+0x7a>
 80098e2:	9b01      	ldr	r3, [sp, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0df      	beq.n	80098a8 <__hexnan+0xd4>
 80098e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098ec:	f1c3 0320 	rsb	r3, r3, #32
 80098f0:	fa22 f303 	lsr.w	r3, r2, r3
 80098f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098f8:	401a      	ands	r2, r3
 80098fa:	f846 2c04 	str.w	r2, [r6, #-4]
 80098fe:	e7d3      	b.n	80098a8 <__hexnan+0xd4>
 8009900:	3f04      	subs	r7, #4
 8009902:	e7d1      	b.n	80098a8 <__hexnan+0xd4>
 8009904:	2004      	movs	r0, #4
 8009906:	b007      	add	sp, #28
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800990c <_localeconv_r>:
 800990c:	4800      	ldr	r0, [pc, #0]	; (8009910 <_localeconv_r+0x4>)
 800990e:	4770      	bx	lr
 8009910:	20000168 	.word	0x20000168

08009914 <malloc>:
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <malloc+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f000 bd59 	b.w	800a3d0 <_malloc_r>
 800991e:	bf00      	nop
 8009920:	20000010 	.word	0x20000010

08009924 <__ascii_mbtowc>:
 8009924:	b082      	sub	sp, #8
 8009926:	b901      	cbnz	r1, 800992a <__ascii_mbtowc+0x6>
 8009928:	a901      	add	r1, sp, #4
 800992a:	b142      	cbz	r2, 800993e <__ascii_mbtowc+0x1a>
 800992c:	b14b      	cbz	r3, 8009942 <__ascii_mbtowc+0x1e>
 800992e:	7813      	ldrb	r3, [r2, #0]
 8009930:	600b      	str	r3, [r1, #0]
 8009932:	7812      	ldrb	r2, [r2, #0]
 8009934:	1e10      	subs	r0, r2, #0
 8009936:	bf18      	it	ne
 8009938:	2001      	movne	r0, #1
 800993a:	b002      	add	sp, #8
 800993c:	4770      	bx	lr
 800993e:	4610      	mov	r0, r2
 8009940:	e7fb      	b.n	800993a <__ascii_mbtowc+0x16>
 8009942:	f06f 0001 	mvn.w	r0, #1
 8009946:	e7f8      	b.n	800993a <__ascii_mbtowc+0x16>

08009948 <_Balloc>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800994c:	4604      	mov	r4, r0
 800994e:	460d      	mov	r5, r1
 8009950:	b976      	cbnz	r6, 8009970 <_Balloc+0x28>
 8009952:	2010      	movs	r0, #16
 8009954:	f7ff ffde 	bl	8009914 <malloc>
 8009958:	4602      	mov	r2, r0
 800995a:	6260      	str	r0, [r4, #36]	; 0x24
 800995c:	b920      	cbnz	r0, 8009968 <_Balloc+0x20>
 800995e:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <_Balloc+0x78>)
 8009960:	4818      	ldr	r0, [pc, #96]	; (80099c4 <_Balloc+0x7c>)
 8009962:	2166      	movs	r1, #102	; 0x66
 8009964:	f000 ff3e 	bl	800a7e4 <__assert_func>
 8009968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800996c:	6006      	str	r6, [r0, #0]
 800996e:	60c6      	str	r6, [r0, #12]
 8009970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009972:	68f3      	ldr	r3, [r6, #12]
 8009974:	b183      	cbz	r3, 8009998 <_Balloc+0x50>
 8009976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800997e:	b9b8      	cbnz	r0, 80099b0 <_Balloc+0x68>
 8009980:	2101      	movs	r1, #1
 8009982:	fa01 f605 	lsl.w	r6, r1, r5
 8009986:	1d72      	adds	r2, r6, #5
 8009988:	0092      	lsls	r2, r2, #2
 800998a:	4620      	mov	r0, r4
 800998c:	f000 fc9d 	bl	800a2ca <_calloc_r>
 8009990:	b160      	cbz	r0, 80099ac <_Balloc+0x64>
 8009992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009996:	e00e      	b.n	80099b6 <_Balloc+0x6e>
 8009998:	2221      	movs	r2, #33	; 0x21
 800999a:	2104      	movs	r1, #4
 800999c:	4620      	mov	r0, r4
 800999e:	f000 fc94 	bl	800a2ca <_calloc_r>
 80099a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a4:	60f0      	str	r0, [r6, #12]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e4      	bne.n	8009976 <_Balloc+0x2e>
 80099ac:	2000      	movs	r0, #0
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	6802      	ldr	r2, [r0, #0]
 80099b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099b6:	2300      	movs	r3, #0
 80099b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099bc:	e7f7      	b.n	80099ae <_Balloc+0x66>
 80099be:	bf00      	nop
 80099c0:	0800b5ee 	.word	0x0800b5ee
 80099c4:	0800b6ec 	.word	0x0800b6ec

080099c8 <_Bfree>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099cc:	4605      	mov	r5, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	b976      	cbnz	r6, 80099f0 <_Bfree+0x28>
 80099d2:	2010      	movs	r0, #16
 80099d4:	f7ff ff9e 	bl	8009914 <malloc>
 80099d8:	4602      	mov	r2, r0
 80099da:	6268      	str	r0, [r5, #36]	; 0x24
 80099dc:	b920      	cbnz	r0, 80099e8 <_Bfree+0x20>
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <_Bfree+0x3c>)
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <_Bfree+0x40>)
 80099e2:	218a      	movs	r1, #138	; 0x8a
 80099e4:	f000 fefe 	bl	800a7e4 <__assert_func>
 80099e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099ec:	6006      	str	r6, [r0, #0]
 80099ee:	60c6      	str	r6, [r0, #12]
 80099f0:	b13c      	cbz	r4, 8009a02 <_Bfree+0x3a>
 80099f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80099f4:	6862      	ldr	r2, [r4, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099fc:	6021      	str	r1, [r4, #0]
 80099fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a02:	bd70      	pop	{r4, r5, r6, pc}
 8009a04:	0800b5ee 	.word	0x0800b5ee
 8009a08:	0800b6ec 	.word	0x0800b6ec

08009a0c <__multadd>:
 8009a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a10:	690d      	ldr	r5, [r1, #16]
 8009a12:	4607      	mov	r7, r0
 8009a14:	460c      	mov	r4, r1
 8009a16:	461e      	mov	r6, r3
 8009a18:	f101 0c14 	add.w	ip, r1, #20
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009a22:	b299      	uxth	r1, r3
 8009a24:	fb02 6101 	mla	r1, r2, r1, r6
 8009a28:	0c1e      	lsrs	r6, r3, #16
 8009a2a:	0c0b      	lsrs	r3, r1, #16
 8009a2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009a30:	b289      	uxth	r1, r1
 8009a32:	3001      	adds	r0, #1
 8009a34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a38:	4285      	cmp	r5, r0
 8009a3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a42:	dcec      	bgt.n	8009a1e <__multadd+0x12>
 8009a44:	b30e      	cbz	r6, 8009a8a <__multadd+0x7e>
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	42ab      	cmp	r3, r5
 8009a4a:	dc19      	bgt.n	8009a80 <__multadd+0x74>
 8009a4c:	6861      	ldr	r1, [r4, #4]
 8009a4e:	4638      	mov	r0, r7
 8009a50:	3101      	adds	r1, #1
 8009a52:	f7ff ff79 	bl	8009948 <_Balloc>
 8009a56:	4680      	mov	r8, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <__multadd+0x5a>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <__multadd+0x84>)
 8009a5e:	480d      	ldr	r0, [pc, #52]	; (8009a94 <__multadd+0x88>)
 8009a60:	21b5      	movs	r1, #181	; 0xb5
 8009a62:	f000 febf 	bl	800a7e4 <__assert_func>
 8009a66:	6922      	ldr	r2, [r4, #16]
 8009a68:	3202      	adds	r2, #2
 8009a6a:	f104 010c 	add.w	r1, r4, #12
 8009a6e:	0092      	lsls	r2, r2, #2
 8009a70:	300c      	adds	r0, #12
 8009a72:	f7fc fffd 	bl	8006a70 <memcpy>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7ff ffa5 	bl	80099c8 <_Bfree>
 8009a7e:	4644      	mov	r4, r8
 8009a80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a84:	3501      	adds	r5, #1
 8009a86:	615e      	str	r6, [r3, #20]
 8009a88:	6125      	str	r5, [r4, #16]
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a90:	0800b660 	.word	0x0800b660
 8009a94:	0800b6ec 	.word	0x0800b6ec

08009a98 <__s2b>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	4615      	mov	r5, r2
 8009aa0:	461f      	mov	r7, r3
 8009aa2:	2209      	movs	r2, #9
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aac:	2100      	movs	r1, #0
 8009aae:	2201      	movs	r2, #1
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	db09      	blt.n	8009ac8 <__s2b+0x30>
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff ff47 	bl	8009948 <_Balloc>
 8009aba:	b940      	cbnz	r0, 8009ace <__s2b+0x36>
 8009abc:	4602      	mov	r2, r0
 8009abe:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <__s2b+0x8c>)
 8009ac0:	4819      	ldr	r0, [pc, #100]	; (8009b28 <__s2b+0x90>)
 8009ac2:	21ce      	movs	r1, #206	; 0xce
 8009ac4:	f000 fe8e 	bl	800a7e4 <__assert_func>
 8009ac8:	0052      	lsls	r2, r2, #1
 8009aca:	3101      	adds	r1, #1
 8009acc:	e7f0      	b.n	8009ab0 <__s2b+0x18>
 8009ace:	9b08      	ldr	r3, [sp, #32]
 8009ad0:	6143      	str	r3, [r0, #20]
 8009ad2:	2d09      	cmp	r5, #9
 8009ad4:	f04f 0301 	mov.w	r3, #1
 8009ad8:	6103      	str	r3, [r0, #16]
 8009ada:	dd16      	ble.n	8009b0a <__s2b+0x72>
 8009adc:	f104 0909 	add.w	r9, r4, #9
 8009ae0:	46c8      	mov	r8, r9
 8009ae2:	442c      	add	r4, r5
 8009ae4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ae8:	4601      	mov	r1, r0
 8009aea:	3b30      	subs	r3, #48	; 0x30
 8009aec:	220a      	movs	r2, #10
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7ff ff8c 	bl	8009a0c <__multadd>
 8009af4:	45a0      	cmp	r8, r4
 8009af6:	d1f5      	bne.n	8009ae4 <__s2b+0x4c>
 8009af8:	f1a5 0408 	sub.w	r4, r5, #8
 8009afc:	444c      	add	r4, r9
 8009afe:	1b2d      	subs	r5, r5, r4
 8009b00:	1963      	adds	r3, r4, r5
 8009b02:	42bb      	cmp	r3, r7
 8009b04:	db04      	blt.n	8009b10 <__s2b+0x78>
 8009b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	340a      	adds	r4, #10
 8009b0c:	2509      	movs	r5, #9
 8009b0e:	e7f6      	b.n	8009afe <__s2b+0x66>
 8009b10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b14:	4601      	mov	r1, r0
 8009b16:	3b30      	subs	r3, #48	; 0x30
 8009b18:	220a      	movs	r2, #10
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7ff ff76 	bl	8009a0c <__multadd>
 8009b20:	e7ee      	b.n	8009b00 <__s2b+0x68>
 8009b22:	bf00      	nop
 8009b24:	0800b660 	.word	0x0800b660
 8009b28:	0800b6ec 	.word	0x0800b6ec

08009b2c <__hi0bits>:
 8009b2c:	0c03      	lsrs	r3, r0, #16
 8009b2e:	041b      	lsls	r3, r3, #16
 8009b30:	b9d3      	cbnz	r3, 8009b68 <__hi0bits+0x3c>
 8009b32:	0400      	lsls	r0, r0, #16
 8009b34:	2310      	movs	r3, #16
 8009b36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b3a:	bf04      	itt	eq
 8009b3c:	0200      	lsleq	r0, r0, #8
 8009b3e:	3308      	addeq	r3, #8
 8009b40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b44:	bf04      	itt	eq
 8009b46:	0100      	lsleq	r0, r0, #4
 8009b48:	3304      	addeq	r3, #4
 8009b4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b4e:	bf04      	itt	eq
 8009b50:	0080      	lsleq	r0, r0, #2
 8009b52:	3302      	addeq	r3, #2
 8009b54:	2800      	cmp	r0, #0
 8009b56:	db05      	blt.n	8009b64 <__hi0bits+0x38>
 8009b58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b5c:	f103 0301 	add.w	r3, r3, #1
 8009b60:	bf08      	it	eq
 8009b62:	2320      	moveq	r3, #32
 8009b64:	4618      	mov	r0, r3
 8009b66:	4770      	bx	lr
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e7e4      	b.n	8009b36 <__hi0bits+0xa>

08009b6c <__lo0bits>:
 8009b6c:	6803      	ldr	r3, [r0, #0]
 8009b6e:	f013 0207 	ands.w	r2, r3, #7
 8009b72:	4601      	mov	r1, r0
 8009b74:	d00b      	beq.n	8009b8e <__lo0bits+0x22>
 8009b76:	07da      	lsls	r2, r3, #31
 8009b78:	d423      	bmi.n	8009bc2 <__lo0bits+0x56>
 8009b7a:	0798      	lsls	r0, r3, #30
 8009b7c:	bf49      	itett	mi
 8009b7e:	085b      	lsrmi	r3, r3, #1
 8009b80:	089b      	lsrpl	r3, r3, #2
 8009b82:	2001      	movmi	r0, #1
 8009b84:	600b      	strmi	r3, [r1, #0]
 8009b86:	bf5c      	itt	pl
 8009b88:	600b      	strpl	r3, [r1, #0]
 8009b8a:	2002      	movpl	r0, #2
 8009b8c:	4770      	bx	lr
 8009b8e:	b298      	uxth	r0, r3
 8009b90:	b9a8      	cbnz	r0, 8009bbe <__lo0bits+0x52>
 8009b92:	0c1b      	lsrs	r3, r3, #16
 8009b94:	2010      	movs	r0, #16
 8009b96:	b2da      	uxtb	r2, r3
 8009b98:	b90a      	cbnz	r2, 8009b9e <__lo0bits+0x32>
 8009b9a:	3008      	adds	r0, #8
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	071a      	lsls	r2, r3, #28
 8009ba0:	bf04      	itt	eq
 8009ba2:	091b      	lsreq	r3, r3, #4
 8009ba4:	3004      	addeq	r0, #4
 8009ba6:	079a      	lsls	r2, r3, #30
 8009ba8:	bf04      	itt	eq
 8009baa:	089b      	lsreq	r3, r3, #2
 8009bac:	3002      	addeq	r0, #2
 8009bae:	07da      	lsls	r2, r3, #31
 8009bb0:	d403      	bmi.n	8009bba <__lo0bits+0x4e>
 8009bb2:	085b      	lsrs	r3, r3, #1
 8009bb4:	f100 0001 	add.w	r0, r0, #1
 8009bb8:	d005      	beq.n	8009bc6 <__lo0bits+0x5a>
 8009bba:	600b      	str	r3, [r1, #0]
 8009bbc:	4770      	bx	lr
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	e7e9      	b.n	8009b96 <__lo0bits+0x2a>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	4770      	bx	lr
 8009bc6:	2020      	movs	r0, #32
 8009bc8:	4770      	bx	lr
	...

08009bcc <__i2b>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	460c      	mov	r4, r1
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	f7ff feb9 	bl	8009948 <_Balloc>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	b928      	cbnz	r0, 8009be6 <__i2b+0x1a>
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <__i2b+0x24>)
 8009bdc:	4805      	ldr	r0, [pc, #20]	; (8009bf4 <__i2b+0x28>)
 8009bde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009be2:	f000 fdff 	bl	800a7e4 <__assert_func>
 8009be6:	2301      	movs	r3, #1
 8009be8:	6144      	str	r4, [r0, #20]
 8009bea:	6103      	str	r3, [r0, #16]
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	bf00      	nop
 8009bf0:	0800b660 	.word	0x0800b660
 8009bf4:	0800b6ec 	.word	0x0800b6ec

08009bf8 <__multiply>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	4691      	mov	r9, r2
 8009bfe:	690a      	ldr	r2, [r1, #16]
 8009c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	bfb8      	it	lt
 8009c08:	460b      	movlt	r3, r1
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	bfbc      	itt	lt
 8009c0e:	464c      	movlt	r4, r9
 8009c10:	4699      	movlt	r9, r3
 8009c12:	6927      	ldr	r7, [r4, #16]
 8009c14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c18:	68a3      	ldr	r3, [r4, #8]
 8009c1a:	6861      	ldr	r1, [r4, #4]
 8009c1c:	eb07 060a 	add.w	r6, r7, sl
 8009c20:	42b3      	cmp	r3, r6
 8009c22:	b085      	sub	sp, #20
 8009c24:	bfb8      	it	lt
 8009c26:	3101      	addlt	r1, #1
 8009c28:	f7ff fe8e 	bl	8009948 <_Balloc>
 8009c2c:	b930      	cbnz	r0, 8009c3c <__multiply+0x44>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	4b44      	ldr	r3, [pc, #272]	; (8009d44 <__multiply+0x14c>)
 8009c32:	4845      	ldr	r0, [pc, #276]	; (8009d48 <__multiply+0x150>)
 8009c34:	f240 115d 	movw	r1, #349	; 0x15d
 8009c38:	f000 fdd4 	bl	800a7e4 <__assert_func>
 8009c3c:	f100 0514 	add.w	r5, r0, #20
 8009c40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c44:	462b      	mov	r3, r5
 8009c46:	2200      	movs	r2, #0
 8009c48:	4543      	cmp	r3, r8
 8009c4a:	d321      	bcc.n	8009c90 <__multiply+0x98>
 8009c4c:	f104 0314 	add.w	r3, r4, #20
 8009c50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c54:	f109 0314 	add.w	r3, r9, #20
 8009c58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c5c:	9202      	str	r2, [sp, #8]
 8009c5e:	1b3a      	subs	r2, r7, r4
 8009c60:	3a15      	subs	r2, #21
 8009c62:	f022 0203 	bic.w	r2, r2, #3
 8009c66:	3204      	adds	r2, #4
 8009c68:	f104 0115 	add.w	r1, r4, #21
 8009c6c:	428f      	cmp	r7, r1
 8009c6e:	bf38      	it	cc
 8009c70:	2204      	movcc	r2, #4
 8009c72:	9201      	str	r2, [sp, #4]
 8009c74:	9a02      	ldr	r2, [sp, #8]
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d80c      	bhi.n	8009c96 <__multiply+0x9e>
 8009c7c:	2e00      	cmp	r6, #0
 8009c7e:	dd03      	ble.n	8009c88 <__multiply+0x90>
 8009c80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d05a      	beq.n	8009d3e <__multiply+0x146>
 8009c88:	6106      	str	r6, [r0, #16]
 8009c8a:	b005      	add	sp, #20
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	f843 2b04 	str.w	r2, [r3], #4
 8009c94:	e7d8      	b.n	8009c48 <__multiply+0x50>
 8009c96:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c9a:	f1ba 0f00 	cmp.w	sl, #0
 8009c9e:	d024      	beq.n	8009cea <__multiply+0xf2>
 8009ca0:	f104 0e14 	add.w	lr, r4, #20
 8009ca4:	46a9      	mov	r9, r5
 8009ca6:	f04f 0c00 	mov.w	ip, #0
 8009caa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cae:	f8d9 1000 	ldr.w	r1, [r9]
 8009cb2:	fa1f fb82 	uxth.w	fp, r2
 8009cb6:	b289      	uxth	r1, r1
 8009cb8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cc0:	f8d9 2000 	ldr.w	r2, [r9]
 8009cc4:	4461      	add	r1, ip
 8009cc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cca:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cd2:	b289      	uxth	r1, r1
 8009cd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cd8:	4577      	cmp	r7, lr
 8009cda:	f849 1b04 	str.w	r1, [r9], #4
 8009cde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ce2:	d8e2      	bhi.n	8009caa <__multiply+0xb2>
 8009ce4:	9a01      	ldr	r2, [sp, #4]
 8009ce6:	f845 c002 	str.w	ip, [r5, r2]
 8009cea:	9a03      	ldr	r2, [sp, #12]
 8009cec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	f1b9 0f00 	cmp.w	r9, #0
 8009cf6:	d020      	beq.n	8009d3a <__multiply+0x142>
 8009cf8:	6829      	ldr	r1, [r5, #0]
 8009cfa:	f104 0c14 	add.w	ip, r4, #20
 8009cfe:	46ae      	mov	lr, r5
 8009d00:	f04f 0a00 	mov.w	sl, #0
 8009d04:	f8bc b000 	ldrh.w	fp, [ip]
 8009d08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d0c:	fb09 220b 	mla	r2, r9, fp, r2
 8009d10:	4492      	add	sl, r2
 8009d12:	b289      	uxth	r1, r1
 8009d14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d18:	f84e 1b04 	str.w	r1, [lr], #4
 8009d1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d20:	f8be 1000 	ldrh.w	r1, [lr]
 8009d24:	0c12      	lsrs	r2, r2, #16
 8009d26:	fb09 1102 	mla	r1, r9, r2, r1
 8009d2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d2e:	4567      	cmp	r7, ip
 8009d30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d34:	d8e6      	bhi.n	8009d04 <__multiply+0x10c>
 8009d36:	9a01      	ldr	r2, [sp, #4]
 8009d38:	50a9      	str	r1, [r5, r2]
 8009d3a:	3504      	adds	r5, #4
 8009d3c:	e79a      	b.n	8009c74 <__multiply+0x7c>
 8009d3e:	3e01      	subs	r6, #1
 8009d40:	e79c      	b.n	8009c7c <__multiply+0x84>
 8009d42:	bf00      	nop
 8009d44:	0800b660 	.word	0x0800b660
 8009d48:	0800b6ec 	.word	0x0800b6ec

08009d4c <__pow5mult>:
 8009d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4615      	mov	r5, r2
 8009d52:	f012 0203 	ands.w	r2, r2, #3
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	d007      	beq.n	8009d6c <__pow5mult+0x20>
 8009d5c:	4c25      	ldr	r4, [pc, #148]	; (8009df4 <__pow5mult+0xa8>)
 8009d5e:	3a01      	subs	r2, #1
 8009d60:	2300      	movs	r3, #0
 8009d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d66:	f7ff fe51 	bl	8009a0c <__multadd>
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	10ad      	asrs	r5, r5, #2
 8009d6e:	d03d      	beq.n	8009dec <__pow5mult+0xa0>
 8009d70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d72:	b97c      	cbnz	r4, 8009d94 <__pow5mult+0x48>
 8009d74:	2010      	movs	r0, #16
 8009d76:	f7ff fdcd 	bl	8009914 <malloc>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d7e:	b928      	cbnz	r0, 8009d8c <__pow5mult+0x40>
 8009d80:	4b1d      	ldr	r3, [pc, #116]	; (8009df8 <__pow5mult+0xac>)
 8009d82:	481e      	ldr	r0, [pc, #120]	; (8009dfc <__pow5mult+0xb0>)
 8009d84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d88:	f000 fd2c 	bl	800a7e4 <__assert_func>
 8009d8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d90:	6004      	str	r4, [r0, #0]
 8009d92:	60c4      	str	r4, [r0, #12]
 8009d94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d9c:	b94c      	cbnz	r4, 8009db2 <__pow5mult+0x66>
 8009d9e:	f240 2171 	movw	r1, #625	; 0x271
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ff12 	bl	8009bcc <__i2b>
 8009da8:	2300      	movs	r3, #0
 8009daa:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dae:	4604      	mov	r4, r0
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	f04f 0900 	mov.w	r9, #0
 8009db6:	07eb      	lsls	r3, r5, #31
 8009db8:	d50a      	bpl.n	8009dd0 <__pow5mult+0x84>
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7ff ff1a 	bl	8009bf8 <__multiply>
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f7ff fdfd 	bl	80099c8 <_Bfree>
 8009dce:	4647      	mov	r7, r8
 8009dd0:	106d      	asrs	r5, r5, #1
 8009dd2:	d00b      	beq.n	8009dec <__pow5mult+0xa0>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	b938      	cbnz	r0, 8009de8 <__pow5mult+0x9c>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4621      	mov	r1, r4
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f7ff ff0b 	bl	8009bf8 <__multiply>
 8009de2:	6020      	str	r0, [r4, #0]
 8009de4:	f8c0 9000 	str.w	r9, [r0]
 8009de8:	4604      	mov	r4, r0
 8009dea:	e7e4      	b.n	8009db6 <__pow5mult+0x6a>
 8009dec:	4638      	mov	r0, r7
 8009dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df2:	bf00      	nop
 8009df4:	0800b838 	.word	0x0800b838
 8009df8:	0800b5ee 	.word	0x0800b5ee
 8009dfc:	0800b6ec 	.word	0x0800b6ec

08009e00 <__lshift>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	460c      	mov	r4, r1
 8009e06:	6849      	ldr	r1, [r1, #4]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	4607      	mov	r7, r0
 8009e12:	4691      	mov	r9, r2
 8009e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e18:	f108 0601 	add.w	r6, r8, #1
 8009e1c:	42b3      	cmp	r3, r6
 8009e1e:	db0b      	blt.n	8009e38 <__lshift+0x38>
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff fd91 	bl	8009948 <_Balloc>
 8009e26:	4605      	mov	r5, r0
 8009e28:	b948      	cbnz	r0, 8009e3e <__lshift+0x3e>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4b2a      	ldr	r3, [pc, #168]	; (8009ed8 <__lshift+0xd8>)
 8009e2e:	482b      	ldr	r0, [pc, #172]	; (8009edc <__lshift+0xdc>)
 8009e30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e34:	f000 fcd6 	bl	800a7e4 <__assert_func>
 8009e38:	3101      	adds	r1, #1
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	e7ee      	b.n	8009e1c <__lshift+0x1c>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f100 0114 	add.w	r1, r0, #20
 8009e44:	f100 0210 	add.w	r2, r0, #16
 8009e48:	4618      	mov	r0, r3
 8009e4a:	4553      	cmp	r3, sl
 8009e4c:	db37      	blt.n	8009ebe <__lshift+0xbe>
 8009e4e:	6920      	ldr	r0, [r4, #16]
 8009e50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e54:	f104 0314 	add.w	r3, r4, #20
 8009e58:	f019 091f 	ands.w	r9, r9, #31
 8009e5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e64:	d02f      	beq.n	8009ec6 <__lshift+0xc6>
 8009e66:	f1c9 0e20 	rsb	lr, r9, #32
 8009e6a:	468a      	mov	sl, r1
 8009e6c:	f04f 0c00 	mov.w	ip, #0
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	fa02 f209 	lsl.w	r2, r2, r9
 8009e76:	ea42 020c 	orr.w	r2, r2, ip
 8009e7a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e82:	4298      	cmp	r0, r3
 8009e84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e88:	d8f2      	bhi.n	8009e70 <__lshift+0x70>
 8009e8a:	1b03      	subs	r3, r0, r4
 8009e8c:	3b15      	subs	r3, #21
 8009e8e:	f023 0303 	bic.w	r3, r3, #3
 8009e92:	3304      	adds	r3, #4
 8009e94:	f104 0215 	add.w	r2, r4, #21
 8009e98:	4290      	cmp	r0, r2
 8009e9a:	bf38      	it	cc
 8009e9c:	2304      	movcc	r3, #4
 8009e9e:	f841 c003 	str.w	ip, [r1, r3]
 8009ea2:	f1bc 0f00 	cmp.w	ip, #0
 8009ea6:	d001      	beq.n	8009eac <__lshift+0xac>
 8009ea8:	f108 0602 	add.w	r6, r8, #2
 8009eac:	3e01      	subs	r6, #1
 8009eae:	4638      	mov	r0, r7
 8009eb0:	612e      	str	r6, [r5, #16]
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f7ff fd88 	bl	80099c8 <_Bfree>
 8009eb8:	4628      	mov	r0, r5
 8009eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ebe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	e7c1      	b.n	8009e4a <__lshift+0x4a>
 8009ec6:	3904      	subs	r1, #4
 8009ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ecc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ed0:	4298      	cmp	r0, r3
 8009ed2:	d8f9      	bhi.n	8009ec8 <__lshift+0xc8>
 8009ed4:	e7ea      	b.n	8009eac <__lshift+0xac>
 8009ed6:	bf00      	nop
 8009ed8:	0800b660 	.word	0x0800b660
 8009edc:	0800b6ec 	.word	0x0800b6ec

08009ee0 <__mcmp>:
 8009ee0:	b530      	push	{r4, r5, lr}
 8009ee2:	6902      	ldr	r2, [r0, #16]
 8009ee4:	690c      	ldr	r4, [r1, #16]
 8009ee6:	1b12      	subs	r2, r2, r4
 8009ee8:	d10e      	bne.n	8009f08 <__mcmp+0x28>
 8009eea:	f100 0314 	add.w	r3, r0, #20
 8009eee:	3114      	adds	r1, #20
 8009ef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009efc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f00:	42a5      	cmp	r5, r4
 8009f02:	d003      	beq.n	8009f0c <__mcmp+0x2c>
 8009f04:	d305      	bcc.n	8009f12 <__mcmp+0x32>
 8009f06:	2201      	movs	r2, #1
 8009f08:	4610      	mov	r0, r2
 8009f0a:	bd30      	pop	{r4, r5, pc}
 8009f0c:	4283      	cmp	r3, r0
 8009f0e:	d3f3      	bcc.n	8009ef8 <__mcmp+0x18>
 8009f10:	e7fa      	b.n	8009f08 <__mcmp+0x28>
 8009f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f16:	e7f7      	b.n	8009f08 <__mcmp+0x28>

08009f18 <__mdiff>:
 8009f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	4606      	mov	r6, r0
 8009f20:	4611      	mov	r1, r2
 8009f22:	4620      	mov	r0, r4
 8009f24:	4690      	mov	r8, r2
 8009f26:	f7ff ffdb 	bl	8009ee0 <__mcmp>
 8009f2a:	1e05      	subs	r5, r0, #0
 8009f2c:	d110      	bne.n	8009f50 <__mdiff+0x38>
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7ff fd09 	bl	8009948 <_Balloc>
 8009f36:	b930      	cbnz	r0, 8009f46 <__mdiff+0x2e>
 8009f38:	4b3a      	ldr	r3, [pc, #232]	; (800a024 <__mdiff+0x10c>)
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	f240 2132 	movw	r1, #562	; 0x232
 8009f40:	4839      	ldr	r0, [pc, #228]	; (800a028 <__mdiff+0x110>)
 8009f42:	f000 fc4f 	bl	800a7e4 <__assert_func>
 8009f46:	2301      	movs	r3, #1
 8009f48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f50:	bfa4      	itt	ge
 8009f52:	4643      	movge	r3, r8
 8009f54:	46a0      	movge	r8, r4
 8009f56:	4630      	mov	r0, r6
 8009f58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f5c:	bfa6      	itte	ge
 8009f5e:	461c      	movge	r4, r3
 8009f60:	2500      	movge	r5, #0
 8009f62:	2501      	movlt	r5, #1
 8009f64:	f7ff fcf0 	bl	8009948 <_Balloc>
 8009f68:	b920      	cbnz	r0, 8009f74 <__mdiff+0x5c>
 8009f6a:	4b2e      	ldr	r3, [pc, #184]	; (800a024 <__mdiff+0x10c>)
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f72:	e7e5      	b.n	8009f40 <__mdiff+0x28>
 8009f74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f78:	6926      	ldr	r6, [r4, #16]
 8009f7a:	60c5      	str	r5, [r0, #12]
 8009f7c:	f104 0914 	add.w	r9, r4, #20
 8009f80:	f108 0514 	add.w	r5, r8, #20
 8009f84:	f100 0e14 	add.w	lr, r0, #20
 8009f88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f90:	f108 0210 	add.w	r2, r8, #16
 8009f94:	46f2      	mov	sl, lr
 8009f96:	2100      	movs	r1, #0
 8009f98:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fa0:	fa1f f883 	uxth.w	r8, r3
 8009fa4:	fa11 f18b 	uxtah	r1, r1, fp
 8009fa8:	0c1b      	lsrs	r3, r3, #16
 8009faa:	eba1 0808 	sub.w	r8, r1, r8
 8009fae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fb6:	fa1f f888 	uxth.w	r8, r8
 8009fba:	1419      	asrs	r1, r3, #16
 8009fbc:	454e      	cmp	r6, r9
 8009fbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fc2:	f84a 3b04 	str.w	r3, [sl], #4
 8009fc6:	d8e7      	bhi.n	8009f98 <__mdiff+0x80>
 8009fc8:	1b33      	subs	r3, r6, r4
 8009fca:	3b15      	subs	r3, #21
 8009fcc:	f023 0303 	bic.w	r3, r3, #3
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	3415      	adds	r4, #21
 8009fd4:	42a6      	cmp	r6, r4
 8009fd6:	bf38      	it	cc
 8009fd8:	2304      	movcc	r3, #4
 8009fda:	441d      	add	r5, r3
 8009fdc:	4473      	add	r3, lr
 8009fde:	469e      	mov	lr, r3
 8009fe0:	462e      	mov	r6, r5
 8009fe2:	4566      	cmp	r6, ip
 8009fe4:	d30e      	bcc.n	800a004 <__mdiff+0xec>
 8009fe6:	f10c 0203 	add.w	r2, ip, #3
 8009fea:	1b52      	subs	r2, r2, r5
 8009fec:	f022 0203 	bic.w	r2, r2, #3
 8009ff0:	3d03      	subs	r5, #3
 8009ff2:	45ac      	cmp	ip, r5
 8009ff4:	bf38      	it	cc
 8009ff6:	2200      	movcc	r2, #0
 8009ff8:	441a      	add	r2, r3
 8009ffa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ffe:	b17b      	cbz	r3, 800a020 <__mdiff+0x108>
 800a000:	6107      	str	r7, [r0, #16]
 800a002:	e7a3      	b.n	8009f4c <__mdiff+0x34>
 800a004:	f856 8b04 	ldr.w	r8, [r6], #4
 800a008:	fa11 f288 	uxtah	r2, r1, r8
 800a00c:	1414      	asrs	r4, r2, #16
 800a00e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a012:	b292      	uxth	r2, r2
 800a014:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a018:	f84e 2b04 	str.w	r2, [lr], #4
 800a01c:	1421      	asrs	r1, r4, #16
 800a01e:	e7e0      	b.n	8009fe2 <__mdiff+0xca>
 800a020:	3f01      	subs	r7, #1
 800a022:	e7ea      	b.n	8009ffa <__mdiff+0xe2>
 800a024:	0800b660 	.word	0x0800b660
 800a028:	0800b6ec 	.word	0x0800b6ec

0800a02c <__ulp>:
 800a02c:	b082      	sub	sp, #8
 800a02e:	ed8d 0b00 	vstr	d0, [sp]
 800a032:	9b01      	ldr	r3, [sp, #4]
 800a034:	4912      	ldr	r1, [pc, #72]	; (800a080 <__ulp+0x54>)
 800a036:	4019      	ands	r1, r3
 800a038:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a03c:	2900      	cmp	r1, #0
 800a03e:	dd05      	ble.n	800a04c <__ulp+0x20>
 800a040:	2200      	movs	r2, #0
 800a042:	460b      	mov	r3, r1
 800a044:	ec43 2b10 	vmov	d0, r2, r3
 800a048:	b002      	add	sp, #8
 800a04a:	4770      	bx	lr
 800a04c:	4249      	negs	r1, r1
 800a04e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a052:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a056:	f04f 0200 	mov.w	r2, #0
 800a05a:	f04f 0300 	mov.w	r3, #0
 800a05e:	da04      	bge.n	800a06a <__ulp+0x3e>
 800a060:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a064:	fa41 f300 	asr.w	r3, r1, r0
 800a068:	e7ec      	b.n	800a044 <__ulp+0x18>
 800a06a:	f1a0 0114 	sub.w	r1, r0, #20
 800a06e:	291e      	cmp	r1, #30
 800a070:	bfda      	itte	le
 800a072:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a076:	fa20 f101 	lsrle.w	r1, r0, r1
 800a07a:	2101      	movgt	r1, #1
 800a07c:	460a      	mov	r2, r1
 800a07e:	e7e1      	b.n	800a044 <__ulp+0x18>
 800a080:	7ff00000 	.word	0x7ff00000

0800a084 <__b2d>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	6905      	ldr	r5, [r0, #16]
 800a088:	f100 0714 	add.w	r7, r0, #20
 800a08c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a090:	1f2e      	subs	r6, r5, #4
 800a092:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a096:	4620      	mov	r0, r4
 800a098:	f7ff fd48 	bl	8009b2c <__hi0bits>
 800a09c:	f1c0 0320 	rsb	r3, r0, #32
 800a0a0:	280a      	cmp	r0, #10
 800a0a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a120 <__b2d+0x9c>
 800a0a6:	600b      	str	r3, [r1, #0]
 800a0a8:	dc14      	bgt.n	800a0d4 <__b2d+0x50>
 800a0aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800a0ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800a0b2:	42b7      	cmp	r7, r6
 800a0b4:	ea41 030c 	orr.w	r3, r1, ip
 800a0b8:	bf34      	ite	cc
 800a0ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0be:	2100      	movcs	r1, #0
 800a0c0:	3015      	adds	r0, #21
 800a0c2:	fa04 f000 	lsl.w	r0, r4, r0
 800a0c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a0ca:	ea40 0201 	orr.w	r2, r0, r1
 800a0ce:	ec43 2b10 	vmov	d0, r2, r3
 800a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d4:	42b7      	cmp	r7, r6
 800a0d6:	bf3a      	itte	cc
 800a0d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a0dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a0e0:	2100      	movcs	r1, #0
 800a0e2:	380b      	subs	r0, #11
 800a0e4:	d017      	beq.n	800a116 <__b2d+0x92>
 800a0e6:	f1c0 0c20 	rsb	ip, r0, #32
 800a0ea:	fa04 f500 	lsl.w	r5, r4, r0
 800a0ee:	42be      	cmp	r6, r7
 800a0f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a0f4:	ea45 0504 	orr.w	r5, r5, r4
 800a0f8:	bf8c      	ite	hi
 800a0fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a0fe:	2400      	movls	r4, #0
 800a100:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a104:	fa01 f000 	lsl.w	r0, r1, r0
 800a108:	fa24 f40c 	lsr.w	r4, r4, ip
 800a10c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a110:	ea40 0204 	orr.w	r2, r0, r4
 800a114:	e7db      	b.n	800a0ce <__b2d+0x4a>
 800a116:	ea44 030c 	orr.w	r3, r4, ip
 800a11a:	460a      	mov	r2, r1
 800a11c:	e7d7      	b.n	800a0ce <__b2d+0x4a>
 800a11e:	bf00      	nop
 800a120:	3ff00000 	.word	0x3ff00000

0800a124 <__d2b>:
 800a124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a128:	4689      	mov	r9, r1
 800a12a:	2101      	movs	r1, #1
 800a12c:	ec57 6b10 	vmov	r6, r7, d0
 800a130:	4690      	mov	r8, r2
 800a132:	f7ff fc09 	bl	8009948 <_Balloc>
 800a136:	4604      	mov	r4, r0
 800a138:	b930      	cbnz	r0, 800a148 <__d2b+0x24>
 800a13a:	4602      	mov	r2, r0
 800a13c:	4b25      	ldr	r3, [pc, #148]	; (800a1d4 <__d2b+0xb0>)
 800a13e:	4826      	ldr	r0, [pc, #152]	; (800a1d8 <__d2b+0xb4>)
 800a140:	f240 310a 	movw	r1, #778	; 0x30a
 800a144:	f000 fb4e 	bl	800a7e4 <__assert_func>
 800a148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a14c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a150:	bb35      	cbnz	r5, 800a1a0 <__d2b+0x7c>
 800a152:	2e00      	cmp	r6, #0
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	d028      	beq.n	800a1aa <__d2b+0x86>
 800a158:	4668      	mov	r0, sp
 800a15a:	9600      	str	r6, [sp, #0]
 800a15c:	f7ff fd06 	bl	8009b6c <__lo0bits>
 800a160:	9900      	ldr	r1, [sp, #0]
 800a162:	b300      	cbz	r0, 800a1a6 <__d2b+0x82>
 800a164:	9a01      	ldr	r2, [sp, #4]
 800a166:	f1c0 0320 	rsb	r3, r0, #32
 800a16a:	fa02 f303 	lsl.w	r3, r2, r3
 800a16e:	430b      	orrs	r3, r1
 800a170:	40c2      	lsrs	r2, r0
 800a172:	6163      	str	r3, [r4, #20]
 800a174:	9201      	str	r2, [sp, #4]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	61a3      	str	r3, [r4, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	bf14      	ite	ne
 800a17e:	2202      	movne	r2, #2
 800a180:	2201      	moveq	r2, #1
 800a182:	6122      	str	r2, [r4, #16]
 800a184:	b1d5      	cbz	r5, 800a1bc <__d2b+0x98>
 800a186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a18a:	4405      	add	r5, r0
 800a18c:	f8c9 5000 	str.w	r5, [r9]
 800a190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a194:	f8c8 0000 	str.w	r0, [r8]
 800a198:	4620      	mov	r0, r4
 800a19a:	b003      	add	sp, #12
 800a19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1a4:	e7d5      	b.n	800a152 <__d2b+0x2e>
 800a1a6:	6161      	str	r1, [r4, #20]
 800a1a8:	e7e5      	b.n	800a176 <__d2b+0x52>
 800a1aa:	a801      	add	r0, sp, #4
 800a1ac:	f7ff fcde 	bl	8009b6c <__lo0bits>
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	6163      	str	r3, [r4, #20]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	6122      	str	r2, [r4, #16]
 800a1b8:	3020      	adds	r0, #32
 800a1ba:	e7e3      	b.n	800a184 <__d2b+0x60>
 800a1bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1c4:	f8c9 0000 	str.w	r0, [r9]
 800a1c8:	6918      	ldr	r0, [r3, #16]
 800a1ca:	f7ff fcaf 	bl	8009b2c <__hi0bits>
 800a1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1d2:	e7df      	b.n	800a194 <__d2b+0x70>
 800a1d4:	0800b660 	.word	0x0800b660
 800a1d8:	0800b6ec 	.word	0x0800b6ec

0800a1dc <__ratio>:
 800a1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	4688      	mov	r8, r1
 800a1e2:	4669      	mov	r1, sp
 800a1e4:	4681      	mov	r9, r0
 800a1e6:	f7ff ff4d 	bl	800a084 <__b2d>
 800a1ea:	a901      	add	r1, sp, #4
 800a1ec:	4640      	mov	r0, r8
 800a1ee:	ec55 4b10 	vmov	r4, r5, d0
 800a1f2:	f7ff ff47 	bl	800a084 <__b2d>
 800a1f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1fe:	eba3 0c02 	sub.w	ip, r3, r2
 800a202:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a206:	1a9b      	subs	r3, r3, r2
 800a208:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a20c:	ec51 0b10 	vmov	r0, r1, d0
 800a210:	2b00      	cmp	r3, #0
 800a212:	bfd6      	itet	le
 800a214:	460a      	movle	r2, r1
 800a216:	462a      	movgt	r2, r5
 800a218:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a21c:	468b      	mov	fp, r1
 800a21e:	462f      	mov	r7, r5
 800a220:	bfd4      	ite	le
 800a222:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a226:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a22a:	4620      	mov	r0, r4
 800a22c:	ee10 2a10 	vmov	r2, s0
 800a230:	465b      	mov	r3, fp
 800a232:	4639      	mov	r1, r7
 800a234:	f7f6 fb12 	bl	800085c <__aeabi_ddiv>
 800a238:	ec41 0b10 	vmov	d0, r0, r1
 800a23c:	b003      	add	sp, #12
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a242 <__copybits>:
 800a242:	3901      	subs	r1, #1
 800a244:	b570      	push	{r4, r5, r6, lr}
 800a246:	1149      	asrs	r1, r1, #5
 800a248:	6914      	ldr	r4, [r2, #16]
 800a24a:	3101      	adds	r1, #1
 800a24c:	f102 0314 	add.w	r3, r2, #20
 800a250:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a254:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a258:	1f05      	subs	r5, r0, #4
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	d30c      	bcc.n	800a278 <__copybits+0x36>
 800a25e:	1aa3      	subs	r3, r4, r2
 800a260:	3b11      	subs	r3, #17
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	3211      	adds	r2, #17
 800a268:	42a2      	cmp	r2, r4
 800a26a:	bf88      	it	hi
 800a26c:	2300      	movhi	r3, #0
 800a26e:	4418      	add	r0, r3
 800a270:	2300      	movs	r3, #0
 800a272:	4288      	cmp	r0, r1
 800a274:	d305      	bcc.n	800a282 <__copybits+0x40>
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	f853 6b04 	ldr.w	r6, [r3], #4
 800a27c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a280:	e7eb      	b.n	800a25a <__copybits+0x18>
 800a282:	f840 3b04 	str.w	r3, [r0], #4
 800a286:	e7f4      	b.n	800a272 <__copybits+0x30>

0800a288 <__any_on>:
 800a288:	f100 0214 	add.w	r2, r0, #20
 800a28c:	6900      	ldr	r0, [r0, #16]
 800a28e:	114b      	asrs	r3, r1, #5
 800a290:	4298      	cmp	r0, r3
 800a292:	b510      	push	{r4, lr}
 800a294:	db11      	blt.n	800a2ba <__any_on+0x32>
 800a296:	dd0a      	ble.n	800a2ae <__any_on+0x26>
 800a298:	f011 011f 	ands.w	r1, r1, #31
 800a29c:	d007      	beq.n	800a2ae <__any_on+0x26>
 800a29e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2a2:	fa24 f001 	lsr.w	r0, r4, r1
 800a2a6:	fa00 f101 	lsl.w	r1, r0, r1
 800a2aa:	428c      	cmp	r4, r1
 800a2ac:	d10b      	bne.n	800a2c6 <__any_on+0x3e>
 800a2ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d803      	bhi.n	800a2be <__any_on+0x36>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	e7f7      	b.n	800a2ae <__any_on+0x26>
 800a2be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2c2:	2900      	cmp	r1, #0
 800a2c4:	d0f5      	beq.n	800a2b2 <__any_on+0x2a>
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	e7f6      	b.n	800a2b8 <__any_on+0x30>

0800a2ca <_calloc_r>:
 800a2ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2cc:	fba1 2402 	umull	r2, r4, r1, r2
 800a2d0:	b94c      	cbnz	r4, 800a2e6 <_calloc_r+0x1c>
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	9201      	str	r2, [sp, #4]
 800a2d6:	f000 f87b 	bl	800a3d0 <_malloc_r>
 800a2da:	9a01      	ldr	r2, [sp, #4]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	b930      	cbnz	r0, 800a2ee <_calloc_r+0x24>
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	b003      	add	sp, #12
 800a2e4:	bd30      	pop	{r4, r5, pc}
 800a2e6:	220c      	movs	r2, #12
 800a2e8:	6002      	str	r2, [r0, #0]
 800a2ea:	2500      	movs	r5, #0
 800a2ec:	e7f8      	b.n	800a2e0 <_calloc_r+0x16>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	f7fc fbcc 	bl	8006a8c <memset>
 800a2f4:	e7f4      	b.n	800a2e0 <_calloc_r+0x16>
	...

0800a2f8 <_free_r>:
 800a2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2fa:	2900      	cmp	r1, #0
 800a2fc:	d044      	beq.n	800a388 <_free_r+0x90>
 800a2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a302:	9001      	str	r0, [sp, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	f1a1 0404 	sub.w	r4, r1, #4
 800a30a:	bfb8      	it	lt
 800a30c:	18e4      	addlt	r4, r4, r3
 800a30e:	f000 fab3 	bl	800a878 <__malloc_lock>
 800a312:	4a1e      	ldr	r2, [pc, #120]	; (800a38c <_free_r+0x94>)
 800a314:	9801      	ldr	r0, [sp, #4]
 800a316:	6813      	ldr	r3, [r2, #0]
 800a318:	b933      	cbnz	r3, 800a328 <_free_r+0x30>
 800a31a:	6063      	str	r3, [r4, #4]
 800a31c:	6014      	str	r4, [r2, #0]
 800a31e:	b003      	add	sp, #12
 800a320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a324:	f000 baae 	b.w	800a884 <__malloc_unlock>
 800a328:	42a3      	cmp	r3, r4
 800a32a:	d908      	bls.n	800a33e <_free_r+0x46>
 800a32c:	6825      	ldr	r5, [r4, #0]
 800a32e:	1961      	adds	r1, r4, r5
 800a330:	428b      	cmp	r3, r1
 800a332:	bf01      	itttt	eq
 800a334:	6819      	ldreq	r1, [r3, #0]
 800a336:	685b      	ldreq	r3, [r3, #4]
 800a338:	1949      	addeq	r1, r1, r5
 800a33a:	6021      	streq	r1, [r4, #0]
 800a33c:	e7ed      	b.n	800a31a <_free_r+0x22>
 800a33e:	461a      	mov	r2, r3
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	b10b      	cbz	r3, 800a348 <_free_r+0x50>
 800a344:	42a3      	cmp	r3, r4
 800a346:	d9fa      	bls.n	800a33e <_free_r+0x46>
 800a348:	6811      	ldr	r1, [r2, #0]
 800a34a:	1855      	adds	r5, r2, r1
 800a34c:	42a5      	cmp	r5, r4
 800a34e:	d10b      	bne.n	800a368 <_free_r+0x70>
 800a350:	6824      	ldr	r4, [r4, #0]
 800a352:	4421      	add	r1, r4
 800a354:	1854      	adds	r4, r2, r1
 800a356:	42a3      	cmp	r3, r4
 800a358:	6011      	str	r1, [r2, #0]
 800a35a:	d1e0      	bne.n	800a31e <_free_r+0x26>
 800a35c:	681c      	ldr	r4, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	6053      	str	r3, [r2, #4]
 800a362:	4421      	add	r1, r4
 800a364:	6011      	str	r1, [r2, #0]
 800a366:	e7da      	b.n	800a31e <_free_r+0x26>
 800a368:	d902      	bls.n	800a370 <_free_r+0x78>
 800a36a:	230c      	movs	r3, #12
 800a36c:	6003      	str	r3, [r0, #0]
 800a36e:	e7d6      	b.n	800a31e <_free_r+0x26>
 800a370:	6825      	ldr	r5, [r4, #0]
 800a372:	1961      	adds	r1, r4, r5
 800a374:	428b      	cmp	r3, r1
 800a376:	bf04      	itt	eq
 800a378:	6819      	ldreq	r1, [r3, #0]
 800a37a:	685b      	ldreq	r3, [r3, #4]
 800a37c:	6063      	str	r3, [r4, #4]
 800a37e:	bf04      	itt	eq
 800a380:	1949      	addeq	r1, r1, r5
 800a382:	6021      	streq	r1, [r4, #0]
 800a384:	6054      	str	r4, [r2, #4]
 800a386:	e7ca      	b.n	800a31e <_free_r+0x26>
 800a388:	b003      	add	sp, #12
 800a38a:	bd30      	pop	{r4, r5, pc}
 800a38c:	20004c04 	.word	0x20004c04

0800a390 <sbrk_aligned>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	4e0e      	ldr	r6, [pc, #56]	; (800a3cc <sbrk_aligned+0x3c>)
 800a394:	460c      	mov	r4, r1
 800a396:	6831      	ldr	r1, [r6, #0]
 800a398:	4605      	mov	r5, r0
 800a39a:	b911      	cbnz	r1, 800a3a2 <sbrk_aligned+0x12>
 800a39c:	f000 f9f0 	bl	800a780 <_sbrk_r>
 800a3a0:	6030      	str	r0, [r6, #0]
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	f000 f9eb 	bl	800a780 <_sbrk_r>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d00a      	beq.n	800a3c4 <sbrk_aligned+0x34>
 800a3ae:	1cc4      	adds	r4, r0, #3
 800a3b0:	f024 0403 	bic.w	r4, r4, #3
 800a3b4:	42a0      	cmp	r0, r4
 800a3b6:	d007      	beq.n	800a3c8 <sbrk_aligned+0x38>
 800a3b8:	1a21      	subs	r1, r4, r0
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f000 f9e0 	bl	800a780 <_sbrk_r>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d101      	bne.n	800a3c8 <sbrk_aligned+0x38>
 800a3c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	20004c08 	.word	0x20004c08

0800a3d0 <_malloc_r>:
 800a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	1ccd      	adds	r5, r1, #3
 800a3d6:	f025 0503 	bic.w	r5, r5, #3
 800a3da:	3508      	adds	r5, #8
 800a3dc:	2d0c      	cmp	r5, #12
 800a3de:	bf38      	it	cc
 800a3e0:	250c      	movcc	r5, #12
 800a3e2:	2d00      	cmp	r5, #0
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	db01      	blt.n	800a3ec <_malloc_r+0x1c>
 800a3e8:	42a9      	cmp	r1, r5
 800a3ea:	d905      	bls.n	800a3f8 <_malloc_r+0x28>
 800a3ec:	230c      	movs	r3, #12
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	2600      	movs	r6, #0
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f8:	4e2e      	ldr	r6, [pc, #184]	; (800a4b4 <_malloc_r+0xe4>)
 800a3fa:	f000 fa3d 	bl	800a878 <__malloc_lock>
 800a3fe:	6833      	ldr	r3, [r6, #0]
 800a400:	461c      	mov	r4, r3
 800a402:	bb34      	cbnz	r4, 800a452 <_malloc_r+0x82>
 800a404:	4629      	mov	r1, r5
 800a406:	4638      	mov	r0, r7
 800a408:	f7ff ffc2 	bl	800a390 <sbrk_aligned>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	4604      	mov	r4, r0
 800a410:	d14d      	bne.n	800a4ae <_malloc_r+0xde>
 800a412:	6834      	ldr	r4, [r6, #0]
 800a414:	4626      	mov	r6, r4
 800a416:	2e00      	cmp	r6, #0
 800a418:	d140      	bne.n	800a49c <_malloc_r+0xcc>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	4631      	mov	r1, r6
 800a41e:	4638      	mov	r0, r7
 800a420:	eb04 0803 	add.w	r8, r4, r3
 800a424:	f000 f9ac 	bl	800a780 <_sbrk_r>
 800a428:	4580      	cmp	r8, r0
 800a42a:	d13a      	bne.n	800a4a2 <_malloc_r+0xd2>
 800a42c:	6821      	ldr	r1, [r4, #0]
 800a42e:	3503      	adds	r5, #3
 800a430:	1a6d      	subs	r5, r5, r1
 800a432:	f025 0503 	bic.w	r5, r5, #3
 800a436:	3508      	adds	r5, #8
 800a438:	2d0c      	cmp	r5, #12
 800a43a:	bf38      	it	cc
 800a43c:	250c      	movcc	r5, #12
 800a43e:	4629      	mov	r1, r5
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff ffa5 	bl	800a390 <sbrk_aligned>
 800a446:	3001      	adds	r0, #1
 800a448:	d02b      	beq.n	800a4a2 <_malloc_r+0xd2>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	442b      	add	r3, r5
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	e00e      	b.n	800a470 <_malloc_r+0xa0>
 800a452:	6822      	ldr	r2, [r4, #0]
 800a454:	1b52      	subs	r2, r2, r5
 800a456:	d41e      	bmi.n	800a496 <_malloc_r+0xc6>
 800a458:	2a0b      	cmp	r2, #11
 800a45a:	d916      	bls.n	800a48a <_malloc_r+0xba>
 800a45c:	1961      	adds	r1, r4, r5
 800a45e:	42a3      	cmp	r3, r4
 800a460:	6025      	str	r5, [r4, #0]
 800a462:	bf18      	it	ne
 800a464:	6059      	strne	r1, [r3, #4]
 800a466:	6863      	ldr	r3, [r4, #4]
 800a468:	bf08      	it	eq
 800a46a:	6031      	streq	r1, [r6, #0]
 800a46c:	5162      	str	r2, [r4, r5]
 800a46e:	604b      	str	r3, [r1, #4]
 800a470:	4638      	mov	r0, r7
 800a472:	f104 060b 	add.w	r6, r4, #11
 800a476:	f000 fa05 	bl	800a884 <__malloc_unlock>
 800a47a:	f026 0607 	bic.w	r6, r6, #7
 800a47e:	1d23      	adds	r3, r4, #4
 800a480:	1af2      	subs	r2, r6, r3
 800a482:	d0b6      	beq.n	800a3f2 <_malloc_r+0x22>
 800a484:	1b9b      	subs	r3, r3, r6
 800a486:	50a3      	str	r3, [r4, r2]
 800a488:	e7b3      	b.n	800a3f2 <_malloc_r+0x22>
 800a48a:	6862      	ldr	r2, [r4, #4]
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	bf0c      	ite	eq
 800a490:	6032      	streq	r2, [r6, #0]
 800a492:	605a      	strne	r2, [r3, #4]
 800a494:	e7ec      	b.n	800a470 <_malloc_r+0xa0>
 800a496:	4623      	mov	r3, r4
 800a498:	6864      	ldr	r4, [r4, #4]
 800a49a:	e7b2      	b.n	800a402 <_malloc_r+0x32>
 800a49c:	4634      	mov	r4, r6
 800a49e:	6876      	ldr	r6, [r6, #4]
 800a4a0:	e7b9      	b.n	800a416 <_malloc_r+0x46>
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	f000 f9ec 	bl	800a884 <__malloc_unlock>
 800a4ac:	e7a1      	b.n	800a3f2 <_malloc_r+0x22>
 800a4ae:	6025      	str	r5, [r4, #0]
 800a4b0:	e7de      	b.n	800a470 <_malloc_r+0xa0>
 800a4b2:	bf00      	nop
 800a4b4:	20004c04 	.word	0x20004c04

0800a4b8 <__ssputs_r>:
 800a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	688e      	ldr	r6, [r1, #8]
 800a4be:	429e      	cmp	r6, r3
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	4690      	mov	r8, r2
 800a4c6:	461f      	mov	r7, r3
 800a4c8:	d838      	bhi.n	800a53c <__ssputs_r+0x84>
 800a4ca:	898a      	ldrh	r2, [r1, #12]
 800a4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4d0:	d032      	beq.n	800a538 <__ssputs_r+0x80>
 800a4d2:	6825      	ldr	r5, [r4, #0]
 800a4d4:	6909      	ldr	r1, [r1, #16]
 800a4d6:	eba5 0901 	sub.w	r9, r5, r1
 800a4da:	6965      	ldr	r5, [r4, #20]
 800a4dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	444b      	add	r3, r9
 800a4e8:	106d      	asrs	r5, r5, #1
 800a4ea:	429d      	cmp	r5, r3
 800a4ec:	bf38      	it	cc
 800a4ee:	461d      	movcc	r5, r3
 800a4f0:	0553      	lsls	r3, r2, #21
 800a4f2:	d531      	bpl.n	800a558 <__ssputs_r+0xa0>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	f7ff ff6b 	bl	800a3d0 <_malloc_r>
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	b950      	cbnz	r0, 800a514 <__ssputs_r+0x5c>
 800a4fe:	230c      	movs	r3, #12
 800a500:	f8ca 3000 	str.w	r3, [sl]
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a514:	6921      	ldr	r1, [r4, #16]
 800a516:	464a      	mov	r2, r9
 800a518:	f7fc faaa 	bl	8006a70 <memcpy>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	6126      	str	r6, [r4, #16]
 800a52a:	6165      	str	r5, [r4, #20]
 800a52c:	444e      	add	r6, r9
 800a52e:	eba5 0509 	sub.w	r5, r5, r9
 800a532:	6026      	str	r6, [r4, #0]
 800a534:	60a5      	str	r5, [r4, #8]
 800a536:	463e      	mov	r6, r7
 800a538:	42be      	cmp	r6, r7
 800a53a:	d900      	bls.n	800a53e <__ssputs_r+0x86>
 800a53c:	463e      	mov	r6, r7
 800a53e:	6820      	ldr	r0, [r4, #0]
 800a540:	4632      	mov	r2, r6
 800a542:	4641      	mov	r1, r8
 800a544:	f000 f97e 	bl	800a844 <memmove>
 800a548:	68a3      	ldr	r3, [r4, #8]
 800a54a:	1b9b      	subs	r3, r3, r6
 800a54c:	60a3      	str	r3, [r4, #8]
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	4433      	add	r3, r6
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	2000      	movs	r0, #0
 800a556:	e7db      	b.n	800a510 <__ssputs_r+0x58>
 800a558:	462a      	mov	r2, r5
 800a55a:	f000 f999 	bl	800a890 <_realloc_r>
 800a55e:	4606      	mov	r6, r0
 800a560:	2800      	cmp	r0, #0
 800a562:	d1e1      	bne.n	800a528 <__ssputs_r+0x70>
 800a564:	6921      	ldr	r1, [r4, #16]
 800a566:	4650      	mov	r0, sl
 800a568:	f7ff fec6 	bl	800a2f8 <_free_r>
 800a56c:	e7c7      	b.n	800a4fe <__ssputs_r+0x46>
	...

0800a570 <_svfiprintf_r>:
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	4698      	mov	r8, r3
 800a576:	898b      	ldrh	r3, [r1, #12]
 800a578:	061b      	lsls	r3, r3, #24
 800a57a:	b09d      	sub	sp, #116	; 0x74
 800a57c:	4607      	mov	r7, r0
 800a57e:	460d      	mov	r5, r1
 800a580:	4614      	mov	r4, r2
 800a582:	d50e      	bpl.n	800a5a2 <_svfiprintf_r+0x32>
 800a584:	690b      	ldr	r3, [r1, #16]
 800a586:	b963      	cbnz	r3, 800a5a2 <_svfiprintf_r+0x32>
 800a588:	2140      	movs	r1, #64	; 0x40
 800a58a:	f7ff ff21 	bl	800a3d0 <_malloc_r>
 800a58e:	6028      	str	r0, [r5, #0]
 800a590:	6128      	str	r0, [r5, #16]
 800a592:	b920      	cbnz	r0, 800a59e <_svfiprintf_r+0x2e>
 800a594:	230c      	movs	r3, #12
 800a596:	603b      	str	r3, [r7, #0]
 800a598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a59c:	e0d1      	b.n	800a742 <_svfiprintf_r+0x1d2>
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	616b      	str	r3, [r5, #20]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a6:	2320      	movs	r3, #32
 800a5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b0:	2330      	movs	r3, #48	; 0x30
 800a5b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a75c <_svfiprintf_r+0x1ec>
 800a5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ba:	f04f 0901 	mov.w	r9, #1
 800a5be:	4623      	mov	r3, r4
 800a5c0:	469a      	mov	sl, r3
 800a5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c6:	b10a      	cbz	r2, 800a5cc <_svfiprintf_r+0x5c>
 800a5c8:	2a25      	cmp	r2, #37	; 0x25
 800a5ca:	d1f9      	bne.n	800a5c0 <_svfiprintf_r+0x50>
 800a5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d0:	d00b      	beq.n	800a5ea <_svfiprintf_r+0x7a>
 800a5d2:	465b      	mov	r3, fp
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f7ff ff6d 	bl	800a4b8 <__ssputs_r>
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f000 80aa 	beq.w	800a738 <_svfiprintf_r+0x1c8>
 800a5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e6:	445a      	add	r2, fp
 800a5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800a5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 80a2 	beq.w	800a738 <_svfiprintf_r+0x1c8>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5fe:	f10a 0a01 	add.w	sl, sl, #1
 800a602:	9304      	str	r3, [sp, #16]
 800a604:	9307      	str	r3, [sp, #28]
 800a606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a60a:	931a      	str	r3, [sp, #104]	; 0x68
 800a60c:	4654      	mov	r4, sl
 800a60e:	2205      	movs	r2, #5
 800a610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a614:	4851      	ldr	r0, [pc, #324]	; (800a75c <_svfiprintf_r+0x1ec>)
 800a616:	f7f5 fdeb 	bl	80001f0 <memchr>
 800a61a:	9a04      	ldr	r2, [sp, #16]
 800a61c:	b9d8      	cbnz	r0, 800a656 <_svfiprintf_r+0xe6>
 800a61e:	06d0      	lsls	r0, r2, #27
 800a620:	bf44      	itt	mi
 800a622:	2320      	movmi	r3, #32
 800a624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a628:	0711      	lsls	r1, r2, #28
 800a62a:	bf44      	itt	mi
 800a62c:	232b      	movmi	r3, #43	; 0x2b
 800a62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a632:	f89a 3000 	ldrb.w	r3, [sl]
 800a636:	2b2a      	cmp	r3, #42	; 0x2a
 800a638:	d015      	beq.n	800a666 <_svfiprintf_r+0xf6>
 800a63a:	9a07      	ldr	r2, [sp, #28]
 800a63c:	4654      	mov	r4, sl
 800a63e:	2000      	movs	r0, #0
 800a640:	f04f 0c0a 	mov.w	ip, #10
 800a644:	4621      	mov	r1, r4
 800a646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a64a:	3b30      	subs	r3, #48	; 0x30
 800a64c:	2b09      	cmp	r3, #9
 800a64e:	d94e      	bls.n	800a6ee <_svfiprintf_r+0x17e>
 800a650:	b1b0      	cbz	r0, 800a680 <_svfiprintf_r+0x110>
 800a652:	9207      	str	r2, [sp, #28]
 800a654:	e014      	b.n	800a680 <_svfiprintf_r+0x110>
 800a656:	eba0 0308 	sub.w	r3, r0, r8
 800a65a:	fa09 f303 	lsl.w	r3, r9, r3
 800a65e:	4313      	orrs	r3, r2
 800a660:	9304      	str	r3, [sp, #16]
 800a662:	46a2      	mov	sl, r4
 800a664:	e7d2      	b.n	800a60c <_svfiprintf_r+0x9c>
 800a666:	9b03      	ldr	r3, [sp, #12]
 800a668:	1d19      	adds	r1, r3, #4
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	9103      	str	r1, [sp, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bfbb      	ittet	lt
 800a672:	425b      	neglt	r3, r3
 800a674:	f042 0202 	orrlt.w	r2, r2, #2
 800a678:	9307      	strge	r3, [sp, #28]
 800a67a:	9307      	strlt	r3, [sp, #28]
 800a67c:	bfb8      	it	lt
 800a67e:	9204      	strlt	r2, [sp, #16]
 800a680:	7823      	ldrb	r3, [r4, #0]
 800a682:	2b2e      	cmp	r3, #46	; 0x2e
 800a684:	d10c      	bne.n	800a6a0 <_svfiprintf_r+0x130>
 800a686:	7863      	ldrb	r3, [r4, #1]
 800a688:	2b2a      	cmp	r3, #42	; 0x2a
 800a68a:	d135      	bne.n	800a6f8 <_svfiprintf_r+0x188>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	1d1a      	adds	r2, r3, #4
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	9203      	str	r2, [sp, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	bfb8      	it	lt
 800a698:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a69c:	3402      	adds	r4, #2
 800a69e:	9305      	str	r3, [sp, #20]
 800a6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a76c <_svfiprintf_r+0x1fc>
 800a6a4:	7821      	ldrb	r1, [r4, #0]
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	4650      	mov	r0, sl
 800a6aa:	f7f5 fda1 	bl	80001f0 <memchr>
 800a6ae:	b140      	cbz	r0, 800a6c2 <_svfiprintf_r+0x152>
 800a6b0:	2340      	movs	r3, #64	; 0x40
 800a6b2:	eba0 000a 	sub.w	r0, r0, sl
 800a6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ba:	9b04      	ldr	r3, [sp, #16]
 800a6bc:	4303      	orrs	r3, r0
 800a6be:	3401      	adds	r4, #1
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c6:	4826      	ldr	r0, [pc, #152]	; (800a760 <_svfiprintf_r+0x1f0>)
 800a6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6cc:	2206      	movs	r2, #6
 800a6ce:	f7f5 fd8f 	bl	80001f0 <memchr>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d038      	beq.n	800a748 <_svfiprintf_r+0x1d8>
 800a6d6:	4b23      	ldr	r3, [pc, #140]	; (800a764 <_svfiprintf_r+0x1f4>)
 800a6d8:	bb1b      	cbnz	r3, 800a722 <_svfiprintf_r+0x1b2>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	3307      	adds	r3, #7
 800a6de:	f023 0307 	bic.w	r3, r3, #7
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	9303      	str	r3, [sp, #12]
 800a6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e8:	4433      	add	r3, r6
 800a6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ec:	e767      	b.n	800a5be <_svfiprintf_r+0x4e>
 800a6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	2001      	movs	r0, #1
 800a6f6:	e7a5      	b.n	800a644 <_svfiprintf_r+0xd4>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	3401      	adds	r4, #1
 800a6fc:	9305      	str	r3, [sp, #20]
 800a6fe:	4619      	mov	r1, r3
 800a700:	f04f 0c0a 	mov.w	ip, #10
 800a704:	4620      	mov	r0, r4
 800a706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a70a:	3a30      	subs	r2, #48	; 0x30
 800a70c:	2a09      	cmp	r2, #9
 800a70e:	d903      	bls.n	800a718 <_svfiprintf_r+0x1a8>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0c5      	beq.n	800a6a0 <_svfiprintf_r+0x130>
 800a714:	9105      	str	r1, [sp, #20]
 800a716:	e7c3      	b.n	800a6a0 <_svfiprintf_r+0x130>
 800a718:	fb0c 2101 	mla	r1, ip, r1, r2
 800a71c:	4604      	mov	r4, r0
 800a71e:	2301      	movs	r3, #1
 800a720:	e7f0      	b.n	800a704 <_svfiprintf_r+0x194>
 800a722:	ab03      	add	r3, sp, #12
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	462a      	mov	r2, r5
 800a728:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <_svfiprintf_r+0x1f8>)
 800a72a:	a904      	add	r1, sp, #16
 800a72c:	4638      	mov	r0, r7
 800a72e:	f7fc fa55 	bl	8006bdc <_printf_float>
 800a732:	1c42      	adds	r2, r0, #1
 800a734:	4606      	mov	r6, r0
 800a736:	d1d6      	bne.n	800a6e6 <_svfiprintf_r+0x176>
 800a738:	89ab      	ldrh	r3, [r5, #12]
 800a73a:	065b      	lsls	r3, r3, #25
 800a73c:	f53f af2c 	bmi.w	800a598 <_svfiprintf_r+0x28>
 800a740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a742:	b01d      	add	sp, #116	; 0x74
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	ab03      	add	r3, sp, #12
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	462a      	mov	r2, r5
 800a74e:	4b06      	ldr	r3, [pc, #24]	; (800a768 <_svfiprintf_r+0x1f8>)
 800a750:	a904      	add	r1, sp, #16
 800a752:	4638      	mov	r0, r7
 800a754:	f7fc fce6 	bl	8007124 <_printf_i>
 800a758:	e7eb      	b.n	800a732 <_svfiprintf_r+0x1c2>
 800a75a:	bf00      	nop
 800a75c:	0800b844 	.word	0x0800b844
 800a760:	0800b84e 	.word	0x0800b84e
 800a764:	08006bdd 	.word	0x08006bdd
 800a768:	0800a4b9 	.word	0x0800a4b9
 800a76c:	0800b84a 	.word	0x0800b84a

0800a770 <nan>:
 800a770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a778 <nan+0x8>
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	00000000 	.word	0x00000000
 800a77c:	7ff80000 	.word	0x7ff80000

0800a780 <_sbrk_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d06      	ldr	r5, [pc, #24]	; (800a79c <_sbrk_r+0x1c>)
 800a784:	2300      	movs	r3, #0
 800a786:	4604      	mov	r4, r0
 800a788:	4608      	mov	r0, r1
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	f7f6 ffb4 	bl	80016f8 <_sbrk>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_sbrk_r+0x1a>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_sbrk_r+0x1a>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20004c0c 	.word	0x20004c0c

0800a7a0 <strncmp>:
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	b17a      	cbz	r2, 800a7c4 <strncmp+0x24>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	3901      	subs	r1, #1
 800a7a8:	1884      	adds	r4, r0, r2
 800a7aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7b2:	4290      	cmp	r0, r2
 800a7b4:	d101      	bne.n	800a7ba <strncmp+0x1a>
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	d101      	bne.n	800a7be <strncmp+0x1e>
 800a7ba:	1a80      	subs	r0, r0, r2
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d1f3      	bne.n	800a7aa <strncmp+0xa>
 800a7c2:	e7fa      	b.n	800a7ba <strncmp+0x1a>
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	e7f9      	b.n	800a7bc <strncmp+0x1c>

0800a7c8 <__ascii_wctomb>:
 800a7c8:	b149      	cbz	r1, 800a7de <__ascii_wctomb+0x16>
 800a7ca:	2aff      	cmp	r2, #255	; 0xff
 800a7cc:	bf85      	ittet	hi
 800a7ce:	238a      	movhi	r3, #138	; 0x8a
 800a7d0:	6003      	strhi	r3, [r0, #0]
 800a7d2:	700a      	strbls	r2, [r1, #0]
 800a7d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a7d8:	bf98      	it	ls
 800a7da:	2001      	movls	r0, #1
 800a7dc:	4770      	bx	lr
 800a7de:	4608      	mov	r0, r1
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <__assert_func>:
 800a7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7e6:	4614      	mov	r4, r2
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	4b09      	ldr	r3, [pc, #36]	; (800a810 <__assert_func+0x2c>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	68d8      	ldr	r0, [r3, #12]
 800a7f2:	b14c      	cbz	r4, 800a808 <__assert_func+0x24>
 800a7f4:	4b07      	ldr	r3, [pc, #28]	; (800a814 <__assert_func+0x30>)
 800a7f6:	9100      	str	r1, [sp, #0]
 800a7f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7fc:	4906      	ldr	r1, [pc, #24]	; (800a818 <__assert_func+0x34>)
 800a7fe:	462b      	mov	r3, r5
 800a800:	f000 f80e 	bl	800a820 <fiprintf>
 800a804:	f000 fa8c 	bl	800ad20 <abort>
 800a808:	4b04      	ldr	r3, [pc, #16]	; (800a81c <__assert_func+0x38>)
 800a80a:	461c      	mov	r4, r3
 800a80c:	e7f3      	b.n	800a7f6 <__assert_func+0x12>
 800a80e:	bf00      	nop
 800a810:	20000010 	.word	0x20000010
 800a814:	0800b855 	.word	0x0800b855
 800a818:	0800b862 	.word	0x0800b862
 800a81c:	0800b890 	.word	0x0800b890

0800a820 <fiprintf>:
 800a820:	b40e      	push	{r1, r2, r3}
 800a822:	b503      	push	{r0, r1, lr}
 800a824:	4601      	mov	r1, r0
 800a826:	ab03      	add	r3, sp, #12
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <fiprintf+0x20>)
 800a82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a82e:	6800      	ldr	r0, [r0, #0]
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	f000 f885 	bl	800a940 <_vfiprintf_r>
 800a836:	b002      	add	sp, #8
 800a838:	f85d eb04 	ldr.w	lr, [sp], #4
 800a83c:	b003      	add	sp, #12
 800a83e:	4770      	bx	lr
 800a840:	20000010 	.word	0x20000010

0800a844 <memmove>:
 800a844:	4288      	cmp	r0, r1
 800a846:	b510      	push	{r4, lr}
 800a848:	eb01 0402 	add.w	r4, r1, r2
 800a84c:	d902      	bls.n	800a854 <memmove+0x10>
 800a84e:	4284      	cmp	r4, r0
 800a850:	4623      	mov	r3, r4
 800a852:	d807      	bhi.n	800a864 <memmove+0x20>
 800a854:	1e43      	subs	r3, r0, #1
 800a856:	42a1      	cmp	r1, r4
 800a858:	d008      	beq.n	800a86c <memmove+0x28>
 800a85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a862:	e7f8      	b.n	800a856 <memmove+0x12>
 800a864:	4402      	add	r2, r0
 800a866:	4601      	mov	r1, r0
 800a868:	428a      	cmp	r2, r1
 800a86a:	d100      	bne.n	800a86e <memmove+0x2a>
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a876:	e7f7      	b.n	800a868 <memmove+0x24>

0800a878 <__malloc_lock>:
 800a878:	4801      	ldr	r0, [pc, #4]	; (800a880 <__malloc_lock+0x8>)
 800a87a:	f000 bc11 	b.w	800b0a0 <__retarget_lock_acquire_recursive>
 800a87e:	bf00      	nop
 800a880:	20004c10 	.word	0x20004c10

0800a884 <__malloc_unlock>:
 800a884:	4801      	ldr	r0, [pc, #4]	; (800a88c <__malloc_unlock+0x8>)
 800a886:	f000 bc0c 	b.w	800b0a2 <__retarget_lock_release_recursive>
 800a88a:	bf00      	nop
 800a88c:	20004c10 	.word	0x20004c10

0800a890 <_realloc_r>:
 800a890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a894:	4680      	mov	r8, r0
 800a896:	4614      	mov	r4, r2
 800a898:	460e      	mov	r6, r1
 800a89a:	b921      	cbnz	r1, 800a8a6 <_realloc_r+0x16>
 800a89c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	f7ff bd95 	b.w	800a3d0 <_malloc_r>
 800a8a6:	b92a      	cbnz	r2, 800a8b4 <_realloc_r+0x24>
 800a8a8:	f7ff fd26 	bl	800a2f8 <_free_r>
 800a8ac:	4625      	mov	r5, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	f000 fc5c 	bl	800b170 <_malloc_usable_size_r>
 800a8b8:	4284      	cmp	r4, r0
 800a8ba:	4607      	mov	r7, r0
 800a8bc:	d802      	bhi.n	800a8c4 <_realloc_r+0x34>
 800a8be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8c2:	d812      	bhi.n	800a8ea <_realloc_r+0x5a>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	f7ff fd82 	bl	800a3d0 <_malloc_r>
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0ed      	beq.n	800a8ae <_realloc_r+0x1e>
 800a8d2:	42bc      	cmp	r4, r7
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	bf28      	it	cs
 800a8da:	463a      	movcs	r2, r7
 800a8dc:	f7fc f8c8 	bl	8006a70 <memcpy>
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f7ff fd08 	bl	800a2f8 <_free_r>
 800a8e8:	e7e1      	b.n	800a8ae <_realloc_r+0x1e>
 800a8ea:	4635      	mov	r5, r6
 800a8ec:	e7df      	b.n	800a8ae <_realloc_r+0x1e>

0800a8ee <__sfputc_r>:
 800a8ee:	6893      	ldr	r3, [r2, #8]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	b410      	push	{r4}
 800a8f6:	6093      	str	r3, [r2, #8]
 800a8f8:	da08      	bge.n	800a90c <__sfputc_r+0x1e>
 800a8fa:	6994      	ldr	r4, [r2, #24]
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	db01      	blt.n	800a904 <__sfputc_r+0x16>
 800a900:	290a      	cmp	r1, #10
 800a902:	d103      	bne.n	800a90c <__sfputc_r+0x1e>
 800a904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a908:	f000 b94a 	b.w	800aba0 <__swbuf_r>
 800a90c:	6813      	ldr	r3, [r2, #0]
 800a90e:	1c58      	adds	r0, r3, #1
 800a910:	6010      	str	r0, [r2, #0]
 800a912:	7019      	strb	r1, [r3, #0]
 800a914:	4608      	mov	r0, r1
 800a916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <__sfputs_r>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	4606      	mov	r6, r0
 800a920:	460f      	mov	r7, r1
 800a922:	4614      	mov	r4, r2
 800a924:	18d5      	adds	r5, r2, r3
 800a926:	42ac      	cmp	r4, r5
 800a928:	d101      	bne.n	800a92e <__sfputs_r+0x12>
 800a92a:	2000      	movs	r0, #0
 800a92c:	e007      	b.n	800a93e <__sfputs_r+0x22>
 800a92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a932:	463a      	mov	r2, r7
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff ffda 	bl	800a8ee <__sfputc_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	d1f3      	bne.n	800a926 <__sfputs_r+0xa>
 800a93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a940 <_vfiprintf_r>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	460d      	mov	r5, r1
 800a946:	b09d      	sub	sp, #116	; 0x74
 800a948:	4614      	mov	r4, r2
 800a94a:	4698      	mov	r8, r3
 800a94c:	4606      	mov	r6, r0
 800a94e:	b118      	cbz	r0, 800a958 <_vfiprintf_r+0x18>
 800a950:	6983      	ldr	r3, [r0, #24]
 800a952:	b90b      	cbnz	r3, 800a958 <_vfiprintf_r+0x18>
 800a954:	f000 fb06 	bl	800af64 <__sinit>
 800a958:	4b89      	ldr	r3, [pc, #548]	; (800ab80 <_vfiprintf_r+0x240>)
 800a95a:	429d      	cmp	r5, r3
 800a95c:	d11b      	bne.n	800a996 <_vfiprintf_r+0x56>
 800a95e:	6875      	ldr	r5, [r6, #4]
 800a960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a962:	07d9      	lsls	r1, r3, #31
 800a964:	d405      	bmi.n	800a972 <_vfiprintf_r+0x32>
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	059a      	lsls	r2, r3, #22
 800a96a:	d402      	bmi.n	800a972 <_vfiprintf_r+0x32>
 800a96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a96e:	f000 fb97 	bl	800b0a0 <__retarget_lock_acquire_recursive>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	071b      	lsls	r3, r3, #28
 800a976:	d501      	bpl.n	800a97c <_vfiprintf_r+0x3c>
 800a978:	692b      	ldr	r3, [r5, #16]
 800a97a:	b9eb      	cbnz	r3, 800a9b8 <_vfiprintf_r+0x78>
 800a97c:	4629      	mov	r1, r5
 800a97e:	4630      	mov	r0, r6
 800a980:	f000 f960 	bl	800ac44 <__swsetup_r>
 800a984:	b1c0      	cbz	r0, 800a9b8 <_vfiprintf_r+0x78>
 800a986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a988:	07dc      	lsls	r4, r3, #31
 800a98a:	d50e      	bpl.n	800a9aa <_vfiprintf_r+0x6a>
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a990:	b01d      	add	sp, #116	; 0x74
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a996:	4b7b      	ldr	r3, [pc, #492]	; (800ab84 <_vfiprintf_r+0x244>)
 800a998:	429d      	cmp	r5, r3
 800a99a:	d101      	bne.n	800a9a0 <_vfiprintf_r+0x60>
 800a99c:	68b5      	ldr	r5, [r6, #8]
 800a99e:	e7df      	b.n	800a960 <_vfiprintf_r+0x20>
 800a9a0:	4b79      	ldr	r3, [pc, #484]	; (800ab88 <_vfiprintf_r+0x248>)
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	bf08      	it	eq
 800a9a6:	68f5      	ldreq	r5, [r6, #12]
 800a9a8:	e7da      	b.n	800a960 <_vfiprintf_r+0x20>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	0598      	lsls	r0, r3, #22
 800a9ae:	d4ed      	bmi.n	800a98c <_vfiprintf_r+0x4c>
 800a9b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9b2:	f000 fb76 	bl	800b0a2 <__retarget_lock_release_recursive>
 800a9b6:	e7e9      	b.n	800a98c <_vfiprintf_r+0x4c>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a9bc:	2320      	movs	r3, #32
 800a9be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9c6:	2330      	movs	r3, #48	; 0x30
 800a9c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab8c <_vfiprintf_r+0x24c>
 800a9cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d0:	f04f 0901 	mov.w	r9, #1
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	469a      	mov	sl, r3
 800a9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9dc:	b10a      	cbz	r2, 800a9e2 <_vfiprintf_r+0xa2>
 800a9de:	2a25      	cmp	r2, #37	; 0x25
 800a9e0:	d1f9      	bne.n	800a9d6 <_vfiprintf_r+0x96>
 800a9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e6:	d00b      	beq.n	800aa00 <_vfiprintf_r+0xc0>
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ff94 	bl	800a91c <__sfputs_r>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f000 80aa 	beq.w	800ab4e <_vfiprintf_r+0x20e>
 800a9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9fc:	445a      	add	r2, fp
 800a9fe:	9209      	str	r2, [sp, #36]	; 0x24
 800aa00:	f89a 3000 	ldrb.w	r3, [sl]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80a2 	beq.w	800ab4e <_vfiprintf_r+0x20e>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa14:	f10a 0a01 	add.w	sl, sl, #1
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa20:	931a      	str	r3, [sp, #104]	; 0x68
 800aa22:	4654      	mov	r4, sl
 800aa24:	2205      	movs	r2, #5
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	4858      	ldr	r0, [pc, #352]	; (800ab8c <_vfiprintf_r+0x24c>)
 800aa2c:	f7f5 fbe0 	bl	80001f0 <memchr>
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	b9d8      	cbnz	r0, 800aa6c <_vfiprintf_r+0x12c>
 800aa34:	06d1      	lsls	r1, r2, #27
 800aa36:	bf44      	itt	mi
 800aa38:	2320      	movmi	r3, #32
 800aa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa3e:	0713      	lsls	r3, r2, #28
 800aa40:	bf44      	itt	mi
 800aa42:	232b      	movmi	r3, #43	; 0x2b
 800aa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa48:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4e:	d015      	beq.n	800aa7c <_vfiprintf_r+0x13c>
 800aa50:	9a07      	ldr	r2, [sp, #28]
 800aa52:	4654      	mov	r4, sl
 800aa54:	2000      	movs	r0, #0
 800aa56:	f04f 0c0a 	mov.w	ip, #10
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa60:	3b30      	subs	r3, #48	; 0x30
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	d94e      	bls.n	800ab04 <_vfiprintf_r+0x1c4>
 800aa66:	b1b0      	cbz	r0, 800aa96 <_vfiprintf_r+0x156>
 800aa68:	9207      	str	r2, [sp, #28]
 800aa6a:	e014      	b.n	800aa96 <_vfiprintf_r+0x156>
 800aa6c:	eba0 0308 	sub.w	r3, r0, r8
 800aa70:	fa09 f303 	lsl.w	r3, r9, r3
 800aa74:	4313      	orrs	r3, r2
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	46a2      	mov	sl, r4
 800aa7a:	e7d2      	b.n	800aa22 <_vfiprintf_r+0xe2>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	1d19      	adds	r1, r3, #4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	9103      	str	r1, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfbb      	ittet	lt
 800aa88:	425b      	neglt	r3, r3
 800aa8a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa8e:	9307      	strge	r3, [sp, #28]
 800aa90:	9307      	strlt	r3, [sp, #28]
 800aa92:	bfb8      	it	lt
 800aa94:	9204      	strlt	r2, [sp, #16]
 800aa96:	7823      	ldrb	r3, [r4, #0]
 800aa98:	2b2e      	cmp	r3, #46	; 0x2e
 800aa9a:	d10c      	bne.n	800aab6 <_vfiprintf_r+0x176>
 800aa9c:	7863      	ldrb	r3, [r4, #1]
 800aa9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa0:	d135      	bne.n	800ab0e <_vfiprintf_r+0x1ce>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	9203      	str	r2, [sp, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bfb8      	it	lt
 800aaae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aab2:	3402      	adds	r4, #2
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab9c <_vfiprintf_r+0x25c>
 800aaba:	7821      	ldrb	r1, [r4, #0]
 800aabc:	2203      	movs	r2, #3
 800aabe:	4650      	mov	r0, sl
 800aac0:	f7f5 fb96 	bl	80001f0 <memchr>
 800aac4:	b140      	cbz	r0, 800aad8 <_vfiprintf_r+0x198>
 800aac6:	2340      	movs	r3, #64	; 0x40
 800aac8:	eba0 000a 	sub.w	r0, r0, sl
 800aacc:	fa03 f000 	lsl.w	r0, r3, r0
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	4303      	orrs	r3, r0
 800aad4:	3401      	adds	r4, #1
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aadc:	482c      	ldr	r0, [pc, #176]	; (800ab90 <_vfiprintf_r+0x250>)
 800aade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aae2:	2206      	movs	r2, #6
 800aae4:	f7f5 fb84 	bl	80001f0 <memchr>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d03f      	beq.n	800ab6c <_vfiprintf_r+0x22c>
 800aaec:	4b29      	ldr	r3, [pc, #164]	; (800ab94 <_vfiprintf_r+0x254>)
 800aaee:	bb1b      	cbnz	r3, 800ab38 <_vfiprintf_r+0x1f8>
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	3307      	adds	r3, #7
 800aaf4:	f023 0307 	bic.w	r3, r3, #7
 800aaf8:	3308      	adds	r3, #8
 800aafa:	9303      	str	r3, [sp, #12]
 800aafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafe:	443b      	add	r3, r7
 800ab00:	9309      	str	r3, [sp, #36]	; 0x24
 800ab02:	e767      	b.n	800a9d4 <_vfiprintf_r+0x94>
 800ab04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab08:	460c      	mov	r4, r1
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	e7a5      	b.n	800aa5a <_vfiprintf_r+0x11a>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	3401      	adds	r4, #1
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	4619      	mov	r1, r3
 800ab16:	f04f 0c0a 	mov.w	ip, #10
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab20:	3a30      	subs	r2, #48	; 0x30
 800ab22:	2a09      	cmp	r2, #9
 800ab24:	d903      	bls.n	800ab2e <_vfiprintf_r+0x1ee>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d0c5      	beq.n	800aab6 <_vfiprintf_r+0x176>
 800ab2a:	9105      	str	r1, [sp, #20]
 800ab2c:	e7c3      	b.n	800aab6 <_vfiprintf_r+0x176>
 800ab2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab32:	4604      	mov	r4, r0
 800ab34:	2301      	movs	r3, #1
 800ab36:	e7f0      	b.n	800ab1a <_vfiprintf_r+0x1da>
 800ab38:	ab03      	add	r3, sp, #12
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4b16      	ldr	r3, [pc, #88]	; (800ab98 <_vfiprintf_r+0x258>)
 800ab40:	a904      	add	r1, sp, #16
 800ab42:	4630      	mov	r0, r6
 800ab44:	f7fc f84a 	bl	8006bdc <_printf_float>
 800ab48:	4607      	mov	r7, r0
 800ab4a:	1c78      	adds	r0, r7, #1
 800ab4c:	d1d6      	bne.n	800aafc <_vfiprintf_r+0x1bc>
 800ab4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab50:	07d9      	lsls	r1, r3, #31
 800ab52:	d405      	bmi.n	800ab60 <_vfiprintf_r+0x220>
 800ab54:	89ab      	ldrh	r3, [r5, #12]
 800ab56:	059a      	lsls	r2, r3, #22
 800ab58:	d402      	bmi.n	800ab60 <_vfiprintf_r+0x220>
 800ab5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab5c:	f000 faa1 	bl	800b0a2 <__retarget_lock_release_recursive>
 800ab60:	89ab      	ldrh	r3, [r5, #12]
 800ab62:	065b      	lsls	r3, r3, #25
 800ab64:	f53f af12 	bmi.w	800a98c <_vfiprintf_r+0x4c>
 800ab68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab6a:	e711      	b.n	800a990 <_vfiprintf_r+0x50>
 800ab6c:	ab03      	add	r3, sp, #12
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	462a      	mov	r2, r5
 800ab72:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <_vfiprintf_r+0x258>)
 800ab74:	a904      	add	r1, sp, #16
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7fc fad4 	bl	8007124 <_printf_i>
 800ab7c:	e7e4      	b.n	800ab48 <_vfiprintf_r+0x208>
 800ab7e:	bf00      	nop
 800ab80:	0800b8b4 	.word	0x0800b8b4
 800ab84:	0800b8d4 	.word	0x0800b8d4
 800ab88:	0800b894 	.word	0x0800b894
 800ab8c:	0800b844 	.word	0x0800b844
 800ab90:	0800b84e 	.word	0x0800b84e
 800ab94:	08006bdd 	.word	0x08006bdd
 800ab98:	0800a91d 	.word	0x0800a91d
 800ab9c:	0800b84a 	.word	0x0800b84a

0800aba0 <__swbuf_r>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	460e      	mov	r6, r1
 800aba4:	4614      	mov	r4, r2
 800aba6:	4605      	mov	r5, r0
 800aba8:	b118      	cbz	r0, 800abb2 <__swbuf_r+0x12>
 800abaa:	6983      	ldr	r3, [r0, #24]
 800abac:	b90b      	cbnz	r3, 800abb2 <__swbuf_r+0x12>
 800abae:	f000 f9d9 	bl	800af64 <__sinit>
 800abb2:	4b21      	ldr	r3, [pc, #132]	; (800ac38 <__swbuf_r+0x98>)
 800abb4:	429c      	cmp	r4, r3
 800abb6:	d12b      	bne.n	800ac10 <__swbuf_r+0x70>
 800abb8:	686c      	ldr	r4, [r5, #4]
 800abba:	69a3      	ldr	r3, [r4, #24]
 800abbc:	60a3      	str	r3, [r4, #8]
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	071a      	lsls	r2, r3, #28
 800abc2:	d52f      	bpl.n	800ac24 <__swbuf_r+0x84>
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	b36b      	cbz	r3, 800ac24 <__swbuf_r+0x84>
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	6820      	ldr	r0, [r4, #0]
 800abcc:	1ac0      	subs	r0, r0, r3
 800abce:	6963      	ldr	r3, [r4, #20]
 800abd0:	b2f6      	uxtb	r6, r6
 800abd2:	4283      	cmp	r3, r0
 800abd4:	4637      	mov	r7, r6
 800abd6:	dc04      	bgt.n	800abe2 <__swbuf_r+0x42>
 800abd8:	4621      	mov	r1, r4
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f92e 	bl	800ae3c <_fflush_r>
 800abe0:	bb30      	cbnz	r0, 800ac30 <__swbuf_r+0x90>
 800abe2:	68a3      	ldr	r3, [r4, #8]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	60a3      	str	r3, [r4, #8]
 800abe8:	6823      	ldr	r3, [r4, #0]
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	6022      	str	r2, [r4, #0]
 800abee:	701e      	strb	r6, [r3, #0]
 800abf0:	6963      	ldr	r3, [r4, #20]
 800abf2:	3001      	adds	r0, #1
 800abf4:	4283      	cmp	r3, r0
 800abf6:	d004      	beq.n	800ac02 <__swbuf_r+0x62>
 800abf8:	89a3      	ldrh	r3, [r4, #12]
 800abfa:	07db      	lsls	r3, r3, #31
 800abfc:	d506      	bpl.n	800ac0c <__swbuf_r+0x6c>
 800abfe:	2e0a      	cmp	r6, #10
 800ac00:	d104      	bne.n	800ac0c <__swbuf_r+0x6c>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4628      	mov	r0, r5
 800ac06:	f000 f919 	bl	800ae3c <_fflush_r>
 800ac0a:	b988      	cbnz	r0, 800ac30 <__swbuf_r+0x90>
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <__swbuf_r+0x9c>)
 800ac12:	429c      	cmp	r4, r3
 800ac14:	d101      	bne.n	800ac1a <__swbuf_r+0x7a>
 800ac16:	68ac      	ldr	r4, [r5, #8]
 800ac18:	e7cf      	b.n	800abba <__swbuf_r+0x1a>
 800ac1a:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <__swbuf_r+0xa0>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	bf08      	it	eq
 800ac20:	68ec      	ldreq	r4, [r5, #12]
 800ac22:	e7ca      	b.n	800abba <__swbuf_r+0x1a>
 800ac24:	4621      	mov	r1, r4
 800ac26:	4628      	mov	r0, r5
 800ac28:	f000 f80c 	bl	800ac44 <__swsetup_r>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	d0cb      	beq.n	800abc8 <__swbuf_r+0x28>
 800ac30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac34:	e7ea      	b.n	800ac0c <__swbuf_r+0x6c>
 800ac36:	bf00      	nop
 800ac38:	0800b8b4 	.word	0x0800b8b4
 800ac3c:	0800b8d4 	.word	0x0800b8d4
 800ac40:	0800b894 	.word	0x0800b894

0800ac44 <__swsetup_r>:
 800ac44:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <__swsetup_r+0xcc>)
 800ac46:	b570      	push	{r4, r5, r6, lr}
 800ac48:	681d      	ldr	r5, [r3, #0]
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	b125      	cbz	r5, 800ac5a <__swsetup_r+0x16>
 800ac50:	69ab      	ldr	r3, [r5, #24]
 800ac52:	b913      	cbnz	r3, 800ac5a <__swsetup_r+0x16>
 800ac54:	4628      	mov	r0, r5
 800ac56:	f000 f985 	bl	800af64 <__sinit>
 800ac5a:	4b2e      	ldr	r3, [pc, #184]	; (800ad14 <__swsetup_r+0xd0>)
 800ac5c:	429c      	cmp	r4, r3
 800ac5e:	d10f      	bne.n	800ac80 <__swsetup_r+0x3c>
 800ac60:	686c      	ldr	r4, [r5, #4]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac68:	0719      	lsls	r1, r3, #28
 800ac6a:	d42c      	bmi.n	800acc6 <__swsetup_r+0x82>
 800ac6c:	06dd      	lsls	r5, r3, #27
 800ac6e:	d411      	bmi.n	800ac94 <__swsetup_r+0x50>
 800ac70:	2309      	movs	r3, #9
 800ac72:	6033      	str	r3, [r6, #0]
 800ac74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac7e:	e03e      	b.n	800acfe <__swsetup_r+0xba>
 800ac80:	4b25      	ldr	r3, [pc, #148]	; (800ad18 <__swsetup_r+0xd4>)
 800ac82:	429c      	cmp	r4, r3
 800ac84:	d101      	bne.n	800ac8a <__swsetup_r+0x46>
 800ac86:	68ac      	ldr	r4, [r5, #8]
 800ac88:	e7eb      	b.n	800ac62 <__swsetup_r+0x1e>
 800ac8a:	4b24      	ldr	r3, [pc, #144]	; (800ad1c <__swsetup_r+0xd8>)
 800ac8c:	429c      	cmp	r4, r3
 800ac8e:	bf08      	it	eq
 800ac90:	68ec      	ldreq	r4, [r5, #12]
 800ac92:	e7e6      	b.n	800ac62 <__swsetup_r+0x1e>
 800ac94:	0758      	lsls	r0, r3, #29
 800ac96:	d512      	bpl.n	800acbe <__swsetup_r+0x7a>
 800ac98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac9a:	b141      	cbz	r1, 800acae <__swsetup_r+0x6a>
 800ac9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aca0:	4299      	cmp	r1, r3
 800aca2:	d002      	beq.n	800acaa <__swsetup_r+0x66>
 800aca4:	4630      	mov	r0, r6
 800aca6:	f7ff fb27 	bl	800a2f8 <_free_r>
 800acaa:	2300      	movs	r3, #0
 800acac:	6363      	str	r3, [r4, #52]	; 0x34
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	2300      	movs	r3, #0
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f043 0308 	orr.w	r3, r3, #8
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	6923      	ldr	r3, [r4, #16]
 800acc8:	b94b      	cbnz	r3, 800acde <__swsetup_r+0x9a>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acd4:	d003      	beq.n	800acde <__swsetup_r+0x9a>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4630      	mov	r0, r6
 800acda:	f000 fa09 	bl	800b0f0 <__smakebuf_r>
 800acde:	89a0      	ldrh	r0, [r4, #12]
 800ace0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ace4:	f010 0301 	ands.w	r3, r0, #1
 800ace8:	d00a      	beq.n	800ad00 <__swsetup_r+0xbc>
 800acea:	2300      	movs	r3, #0
 800acec:	60a3      	str	r3, [r4, #8]
 800acee:	6963      	ldr	r3, [r4, #20]
 800acf0:	425b      	negs	r3, r3
 800acf2:	61a3      	str	r3, [r4, #24]
 800acf4:	6923      	ldr	r3, [r4, #16]
 800acf6:	b943      	cbnz	r3, 800ad0a <__swsetup_r+0xc6>
 800acf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acfc:	d1ba      	bne.n	800ac74 <__swsetup_r+0x30>
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	0781      	lsls	r1, r0, #30
 800ad02:	bf58      	it	pl
 800ad04:	6963      	ldrpl	r3, [r4, #20]
 800ad06:	60a3      	str	r3, [r4, #8]
 800ad08:	e7f4      	b.n	800acf4 <__swsetup_r+0xb0>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e7f7      	b.n	800acfe <__swsetup_r+0xba>
 800ad0e:	bf00      	nop
 800ad10:	20000010 	.word	0x20000010
 800ad14:	0800b8b4 	.word	0x0800b8b4
 800ad18:	0800b8d4 	.word	0x0800b8d4
 800ad1c:	0800b894 	.word	0x0800b894

0800ad20 <abort>:
 800ad20:	b508      	push	{r3, lr}
 800ad22:	2006      	movs	r0, #6
 800ad24:	f000 fa54 	bl	800b1d0 <raise>
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f7f6 fc6e 	bl	800160a <_exit>
	...

0800ad30 <__sflush_r>:
 800ad30:	898a      	ldrh	r2, [r1, #12]
 800ad32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad36:	4605      	mov	r5, r0
 800ad38:	0710      	lsls	r0, r2, #28
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	d458      	bmi.n	800adf0 <__sflush_r+0xc0>
 800ad3e:	684b      	ldr	r3, [r1, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dc05      	bgt.n	800ad50 <__sflush_r+0x20>
 800ad44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dc02      	bgt.n	800ad50 <__sflush_r+0x20>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	d0f9      	beq.n	800ad4a <__sflush_r+0x1a>
 800ad56:	2300      	movs	r3, #0
 800ad58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad5c:	682f      	ldr	r7, [r5, #0]
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	d032      	beq.n	800adc8 <__sflush_r+0x98>
 800ad62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	075a      	lsls	r2, r3, #29
 800ad68:	d505      	bpl.n	800ad76 <__sflush_r+0x46>
 800ad6a:	6863      	ldr	r3, [r4, #4]
 800ad6c:	1ac0      	subs	r0, r0, r3
 800ad6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad70:	b10b      	cbz	r3, 800ad76 <__sflush_r+0x46>
 800ad72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad74:	1ac0      	subs	r0, r0, r3
 800ad76:	2300      	movs	r3, #0
 800ad78:	4602      	mov	r2, r0
 800ad7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad7c:	6a21      	ldr	r1, [r4, #32]
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b0      	blx	r6
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	d106      	bne.n	800ad96 <__sflush_r+0x66>
 800ad88:	6829      	ldr	r1, [r5, #0]
 800ad8a:	291d      	cmp	r1, #29
 800ad8c:	d82c      	bhi.n	800ade8 <__sflush_r+0xb8>
 800ad8e:	4a2a      	ldr	r2, [pc, #168]	; (800ae38 <__sflush_r+0x108>)
 800ad90:	40ca      	lsrs	r2, r1
 800ad92:	07d6      	lsls	r6, r2, #31
 800ad94:	d528      	bpl.n	800ade8 <__sflush_r+0xb8>
 800ad96:	2200      	movs	r2, #0
 800ad98:	6062      	str	r2, [r4, #4]
 800ad9a:	04d9      	lsls	r1, r3, #19
 800ad9c:	6922      	ldr	r2, [r4, #16]
 800ad9e:	6022      	str	r2, [r4, #0]
 800ada0:	d504      	bpl.n	800adac <__sflush_r+0x7c>
 800ada2:	1c42      	adds	r2, r0, #1
 800ada4:	d101      	bne.n	800adaa <__sflush_r+0x7a>
 800ada6:	682b      	ldr	r3, [r5, #0]
 800ada8:	b903      	cbnz	r3, 800adac <__sflush_r+0x7c>
 800adaa:	6560      	str	r0, [r4, #84]	; 0x54
 800adac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adae:	602f      	str	r7, [r5, #0]
 800adb0:	2900      	cmp	r1, #0
 800adb2:	d0ca      	beq.n	800ad4a <__sflush_r+0x1a>
 800adb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adb8:	4299      	cmp	r1, r3
 800adba:	d002      	beq.n	800adc2 <__sflush_r+0x92>
 800adbc:	4628      	mov	r0, r5
 800adbe:	f7ff fa9b 	bl	800a2f8 <_free_r>
 800adc2:	2000      	movs	r0, #0
 800adc4:	6360      	str	r0, [r4, #52]	; 0x34
 800adc6:	e7c1      	b.n	800ad4c <__sflush_r+0x1c>
 800adc8:	6a21      	ldr	r1, [r4, #32]
 800adca:	2301      	movs	r3, #1
 800adcc:	4628      	mov	r0, r5
 800adce:	47b0      	blx	r6
 800add0:	1c41      	adds	r1, r0, #1
 800add2:	d1c7      	bne.n	800ad64 <__sflush_r+0x34>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0c4      	beq.n	800ad64 <__sflush_r+0x34>
 800adda:	2b1d      	cmp	r3, #29
 800addc:	d001      	beq.n	800ade2 <__sflush_r+0xb2>
 800adde:	2b16      	cmp	r3, #22
 800ade0:	d101      	bne.n	800ade6 <__sflush_r+0xb6>
 800ade2:	602f      	str	r7, [r5, #0]
 800ade4:	e7b1      	b.n	800ad4a <__sflush_r+0x1a>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adec:	81a3      	strh	r3, [r4, #12]
 800adee:	e7ad      	b.n	800ad4c <__sflush_r+0x1c>
 800adf0:	690f      	ldr	r7, [r1, #16]
 800adf2:	2f00      	cmp	r7, #0
 800adf4:	d0a9      	beq.n	800ad4a <__sflush_r+0x1a>
 800adf6:	0793      	lsls	r3, r2, #30
 800adf8:	680e      	ldr	r6, [r1, #0]
 800adfa:	bf08      	it	eq
 800adfc:	694b      	ldreq	r3, [r1, #20]
 800adfe:	600f      	str	r7, [r1, #0]
 800ae00:	bf18      	it	ne
 800ae02:	2300      	movne	r3, #0
 800ae04:	eba6 0807 	sub.w	r8, r6, r7
 800ae08:	608b      	str	r3, [r1, #8]
 800ae0a:	f1b8 0f00 	cmp.w	r8, #0
 800ae0e:	dd9c      	ble.n	800ad4a <__sflush_r+0x1a>
 800ae10:	6a21      	ldr	r1, [r4, #32]
 800ae12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae14:	4643      	mov	r3, r8
 800ae16:	463a      	mov	r2, r7
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b0      	blx	r6
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	dc06      	bgt.n	800ae2e <__sflush_r+0xfe>
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae2c:	e78e      	b.n	800ad4c <__sflush_r+0x1c>
 800ae2e:	4407      	add	r7, r0
 800ae30:	eba8 0800 	sub.w	r8, r8, r0
 800ae34:	e7e9      	b.n	800ae0a <__sflush_r+0xda>
 800ae36:	bf00      	nop
 800ae38:	20400001 	.word	0x20400001

0800ae3c <_fflush_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	690b      	ldr	r3, [r1, #16]
 800ae40:	4605      	mov	r5, r0
 800ae42:	460c      	mov	r4, r1
 800ae44:	b913      	cbnz	r3, 800ae4c <_fflush_r+0x10>
 800ae46:	2500      	movs	r5, #0
 800ae48:	4628      	mov	r0, r5
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	b118      	cbz	r0, 800ae56 <_fflush_r+0x1a>
 800ae4e:	6983      	ldr	r3, [r0, #24]
 800ae50:	b90b      	cbnz	r3, 800ae56 <_fflush_r+0x1a>
 800ae52:	f000 f887 	bl	800af64 <__sinit>
 800ae56:	4b14      	ldr	r3, [pc, #80]	; (800aea8 <_fflush_r+0x6c>)
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	d11b      	bne.n	800ae94 <_fflush_r+0x58>
 800ae5c:	686c      	ldr	r4, [r5, #4]
 800ae5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0ef      	beq.n	800ae46 <_fflush_r+0xa>
 800ae66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae68:	07d0      	lsls	r0, r2, #31
 800ae6a:	d404      	bmi.n	800ae76 <_fflush_r+0x3a>
 800ae6c:	0599      	lsls	r1, r3, #22
 800ae6e:	d402      	bmi.n	800ae76 <_fflush_r+0x3a>
 800ae70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae72:	f000 f915 	bl	800b0a0 <__retarget_lock_acquire_recursive>
 800ae76:	4628      	mov	r0, r5
 800ae78:	4621      	mov	r1, r4
 800ae7a:	f7ff ff59 	bl	800ad30 <__sflush_r>
 800ae7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae80:	07da      	lsls	r2, r3, #31
 800ae82:	4605      	mov	r5, r0
 800ae84:	d4e0      	bmi.n	800ae48 <_fflush_r+0xc>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	059b      	lsls	r3, r3, #22
 800ae8a:	d4dd      	bmi.n	800ae48 <_fflush_r+0xc>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8e:	f000 f908 	bl	800b0a2 <__retarget_lock_release_recursive>
 800ae92:	e7d9      	b.n	800ae48 <_fflush_r+0xc>
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <_fflush_r+0x70>)
 800ae96:	429c      	cmp	r4, r3
 800ae98:	d101      	bne.n	800ae9e <_fflush_r+0x62>
 800ae9a:	68ac      	ldr	r4, [r5, #8]
 800ae9c:	e7df      	b.n	800ae5e <_fflush_r+0x22>
 800ae9e:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <_fflush_r+0x74>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	bf08      	it	eq
 800aea4:	68ec      	ldreq	r4, [r5, #12]
 800aea6:	e7da      	b.n	800ae5e <_fflush_r+0x22>
 800aea8:	0800b8b4 	.word	0x0800b8b4
 800aeac:	0800b8d4 	.word	0x0800b8d4
 800aeb0:	0800b894 	.word	0x0800b894

0800aeb4 <std>:
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	4604      	mov	r4, r0
 800aeba:	e9c0 3300 	strd	r3, r3, [r0]
 800aebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aec2:	6083      	str	r3, [r0, #8]
 800aec4:	8181      	strh	r1, [r0, #12]
 800aec6:	6643      	str	r3, [r0, #100]	; 0x64
 800aec8:	81c2      	strh	r2, [r0, #14]
 800aeca:	6183      	str	r3, [r0, #24]
 800aecc:	4619      	mov	r1, r3
 800aece:	2208      	movs	r2, #8
 800aed0:	305c      	adds	r0, #92	; 0x5c
 800aed2:	f7fb fddb 	bl	8006a8c <memset>
 800aed6:	4b05      	ldr	r3, [pc, #20]	; (800aeec <std+0x38>)
 800aed8:	6263      	str	r3, [r4, #36]	; 0x24
 800aeda:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <std+0x3c>)
 800aedc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aede:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <std+0x40>)
 800aee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aee2:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <std+0x44>)
 800aee4:	6224      	str	r4, [r4, #32]
 800aee6:	6323      	str	r3, [r4, #48]	; 0x30
 800aee8:	bd10      	pop	{r4, pc}
 800aeea:	bf00      	nop
 800aeec:	0800b209 	.word	0x0800b209
 800aef0:	0800b22b 	.word	0x0800b22b
 800aef4:	0800b263 	.word	0x0800b263
 800aef8:	0800b287 	.word	0x0800b287

0800aefc <_cleanup_r>:
 800aefc:	4901      	ldr	r1, [pc, #4]	; (800af04 <_cleanup_r+0x8>)
 800aefe:	f000 b8af 	b.w	800b060 <_fwalk_reent>
 800af02:	bf00      	nop
 800af04:	0800ae3d 	.word	0x0800ae3d

0800af08 <__sfmoreglue>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	2268      	movs	r2, #104	; 0x68
 800af0c:	1e4d      	subs	r5, r1, #1
 800af0e:	4355      	muls	r5, r2
 800af10:	460e      	mov	r6, r1
 800af12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af16:	f7ff fa5b 	bl	800a3d0 <_malloc_r>
 800af1a:	4604      	mov	r4, r0
 800af1c:	b140      	cbz	r0, 800af30 <__sfmoreglue+0x28>
 800af1e:	2100      	movs	r1, #0
 800af20:	e9c0 1600 	strd	r1, r6, [r0]
 800af24:	300c      	adds	r0, #12
 800af26:	60a0      	str	r0, [r4, #8]
 800af28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af2c:	f7fb fdae 	bl	8006a8c <memset>
 800af30:	4620      	mov	r0, r4
 800af32:	bd70      	pop	{r4, r5, r6, pc}

0800af34 <__sfp_lock_acquire>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__sfp_lock_acquire+0x8>)
 800af36:	f000 b8b3 	b.w	800b0a0 <__retarget_lock_acquire_recursive>
 800af3a:	bf00      	nop
 800af3c:	20004c11 	.word	0x20004c11

0800af40 <__sfp_lock_release>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__sfp_lock_release+0x8>)
 800af42:	f000 b8ae 	b.w	800b0a2 <__retarget_lock_release_recursive>
 800af46:	bf00      	nop
 800af48:	20004c11 	.word	0x20004c11

0800af4c <__sinit_lock_acquire>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sinit_lock_acquire+0x8>)
 800af4e:	f000 b8a7 	b.w	800b0a0 <__retarget_lock_acquire_recursive>
 800af52:	bf00      	nop
 800af54:	20004c12 	.word	0x20004c12

0800af58 <__sinit_lock_release>:
 800af58:	4801      	ldr	r0, [pc, #4]	; (800af60 <__sinit_lock_release+0x8>)
 800af5a:	f000 b8a2 	b.w	800b0a2 <__retarget_lock_release_recursive>
 800af5e:	bf00      	nop
 800af60:	20004c12 	.word	0x20004c12

0800af64 <__sinit>:
 800af64:	b510      	push	{r4, lr}
 800af66:	4604      	mov	r4, r0
 800af68:	f7ff fff0 	bl	800af4c <__sinit_lock_acquire>
 800af6c:	69a3      	ldr	r3, [r4, #24]
 800af6e:	b11b      	cbz	r3, 800af78 <__sinit+0x14>
 800af70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af74:	f7ff bff0 	b.w	800af58 <__sinit_lock_release>
 800af78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af7c:	6523      	str	r3, [r4, #80]	; 0x50
 800af7e:	4b13      	ldr	r3, [pc, #76]	; (800afcc <__sinit+0x68>)
 800af80:	4a13      	ldr	r2, [pc, #76]	; (800afd0 <__sinit+0x6c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	62a2      	str	r2, [r4, #40]	; 0x28
 800af86:	42a3      	cmp	r3, r4
 800af88:	bf04      	itt	eq
 800af8a:	2301      	moveq	r3, #1
 800af8c:	61a3      	streq	r3, [r4, #24]
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 f820 	bl	800afd4 <__sfp>
 800af94:	6060      	str	r0, [r4, #4]
 800af96:	4620      	mov	r0, r4
 800af98:	f000 f81c 	bl	800afd4 <__sfp>
 800af9c:	60a0      	str	r0, [r4, #8]
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 f818 	bl	800afd4 <__sfp>
 800afa4:	2200      	movs	r2, #0
 800afa6:	60e0      	str	r0, [r4, #12]
 800afa8:	2104      	movs	r1, #4
 800afaa:	6860      	ldr	r0, [r4, #4]
 800afac:	f7ff ff82 	bl	800aeb4 <std>
 800afb0:	68a0      	ldr	r0, [r4, #8]
 800afb2:	2201      	movs	r2, #1
 800afb4:	2109      	movs	r1, #9
 800afb6:	f7ff ff7d 	bl	800aeb4 <std>
 800afba:	68e0      	ldr	r0, [r4, #12]
 800afbc:	2202      	movs	r2, #2
 800afbe:	2112      	movs	r1, #18
 800afc0:	f7ff ff78 	bl	800aeb4 <std>
 800afc4:	2301      	movs	r3, #1
 800afc6:	61a3      	str	r3, [r4, #24]
 800afc8:	e7d2      	b.n	800af70 <__sinit+0xc>
 800afca:	bf00      	nop
 800afcc:	0800b450 	.word	0x0800b450
 800afd0:	0800aefd 	.word	0x0800aefd

0800afd4 <__sfp>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	4607      	mov	r7, r0
 800afd8:	f7ff ffac 	bl	800af34 <__sfp_lock_acquire>
 800afdc:	4b1e      	ldr	r3, [pc, #120]	; (800b058 <__sfp+0x84>)
 800afde:	681e      	ldr	r6, [r3, #0]
 800afe0:	69b3      	ldr	r3, [r6, #24]
 800afe2:	b913      	cbnz	r3, 800afea <__sfp+0x16>
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7ff ffbd 	bl	800af64 <__sinit>
 800afea:	3648      	adds	r6, #72	; 0x48
 800afec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	d503      	bpl.n	800affc <__sfp+0x28>
 800aff4:	6833      	ldr	r3, [r6, #0]
 800aff6:	b30b      	cbz	r3, 800b03c <__sfp+0x68>
 800aff8:	6836      	ldr	r6, [r6, #0]
 800affa:	e7f7      	b.n	800afec <__sfp+0x18>
 800affc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b000:	b9d5      	cbnz	r5, 800b038 <__sfp+0x64>
 800b002:	4b16      	ldr	r3, [pc, #88]	; (800b05c <__sfp+0x88>)
 800b004:	60e3      	str	r3, [r4, #12]
 800b006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b00a:	6665      	str	r5, [r4, #100]	; 0x64
 800b00c:	f000 f847 	bl	800b09e <__retarget_lock_init_recursive>
 800b010:	f7ff ff96 	bl	800af40 <__sfp_lock_release>
 800b014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b01c:	6025      	str	r5, [r4, #0]
 800b01e:	61a5      	str	r5, [r4, #24]
 800b020:	2208      	movs	r2, #8
 800b022:	4629      	mov	r1, r5
 800b024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b028:	f7fb fd30 	bl	8006a8c <memset>
 800b02c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b034:	4620      	mov	r0, r4
 800b036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b038:	3468      	adds	r4, #104	; 0x68
 800b03a:	e7d9      	b.n	800aff0 <__sfp+0x1c>
 800b03c:	2104      	movs	r1, #4
 800b03e:	4638      	mov	r0, r7
 800b040:	f7ff ff62 	bl	800af08 <__sfmoreglue>
 800b044:	4604      	mov	r4, r0
 800b046:	6030      	str	r0, [r6, #0]
 800b048:	2800      	cmp	r0, #0
 800b04a:	d1d5      	bne.n	800aff8 <__sfp+0x24>
 800b04c:	f7ff ff78 	bl	800af40 <__sfp_lock_release>
 800b050:	230c      	movs	r3, #12
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	e7ee      	b.n	800b034 <__sfp+0x60>
 800b056:	bf00      	nop
 800b058:	0800b450 	.word	0x0800b450
 800b05c:	ffff0001 	.word	0xffff0001

0800b060 <_fwalk_reent>:
 800b060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b064:	4606      	mov	r6, r0
 800b066:	4688      	mov	r8, r1
 800b068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b06c:	2700      	movs	r7, #0
 800b06e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b072:	f1b9 0901 	subs.w	r9, r9, #1
 800b076:	d505      	bpl.n	800b084 <_fwalk_reent+0x24>
 800b078:	6824      	ldr	r4, [r4, #0]
 800b07a:	2c00      	cmp	r4, #0
 800b07c:	d1f7      	bne.n	800b06e <_fwalk_reent+0xe>
 800b07e:	4638      	mov	r0, r7
 800b080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b084:	89ab      	ldrh	r3, [r5, #12]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d907      	bls.n	800b09a <_fwalk_reent+0x3a>
 800b08a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b08e:	3301      	adds	r3, #1
 800b090:	d003      	beq.n	800b09a <_fwalk_reent+0x3a>
 800b092:	4629      	mov	r1, r5
 800b094:	4630      	mov	r0, r6
 800b096:	47c0      	blx	r8
 800b098:	4307      	orrs	r7, r0
 800b09a:	3568      	adds	r5, #104	; 0x68
 800b09c:	e7e9      	b.n	800b072 <_fwalk_reent+0x12>

0800b09e <__retarget_lock_init_recursive>:
 800b09e:	4770      	bx	lr

0800b0a0 <__retarget_lock_acquire_recursive>:
 800b0a0:	4770      	bx	lr

0800b0a2 <__retarget_lock_release_recursive>:
 800b0a2:	4770      	bx	lr

0800b0a4 <__swhatbuf_r>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	460e      	mov	r6, r1
 800b0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	b096      	sub	sp, #88	; 0x58
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	461d      	mov	r5, r3
 800b0b4:	da08      	bge.n	800b0c8 <__swhatbuf_r+0x24>
 800b0b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	602a      	str	r2, [r5, #0]
 800b0be:	061a      	lsls	r2, r3, #24
 800b0c0:	d410      	bmi.n	800b0e4 <__swhatbuf_r+0x40>
 800b0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c6:	e00e      	b.n	800b0e6 <__swhatbuf_r+0x42>
 800b0c8:	466a      	mov	r2, sp
 800b0ca:	f000 f903 	bl	800b2d4 <_fstat_r>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	dbf1      	blt.n	800b0b6 <__swhatbuf_r+0x12>
 800b0d2:	9a01      	ldr	r2, [sp, #4]
 800b0d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0dc:	425a      	negs	r2, r3
 800b0de:	415a      	adcs	r2, r3
 800b0e0:	602a      	str	r2, [r5, #0]
 800b0e2:	e7ee      	b.n	800b0c2 <__swhatbuf_r+0x1e>
 800b0e4:	2340      	movs	r3, #64	; 0x40
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	b016      	add	sp, #88	; 0x58
 800b0ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0f0 <__smakebuf_r>:
 800b0f0:	898b      	ldrh	r3, [r1, #12]
 800b0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f4:	079d      	lsls	r5, r3, #30
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	d507      	bpl.n	800b10c <__smakebuf_r+0x1c>
 800b0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	2301      	movs	r3, #1
 800b106:	6163      	str	r3, [r4, #20]
 800b108:	b002      	add	sp, #8
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	ab01      	add	r3, sp, #4
 800b10e:	466a      	mov	r2, sp
 800b110:	f7ff ffc8 	bl	800b0a4 <__swhatbuf_r>
 800b114:	9900      	ldr	r1, [sp, #0]
 800b116:	4605      	mov	r5, r0
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff f959 	bl	800a3d0 <_malloc_r>
 800b11e:	b948      	cbnz	r0, 800b134 <__smakebuf_r+0x44>
 800b120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b124:	059a      	lsls	r2, r3, #22
 800b126:	d4ef      	bmi.n	800b108 <__smakebuf_r+0x18>
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	f043 0302 	orr.w	r3, r3, #2
 800b130:	81a3      	strh	r3, [r4, #12]
 800b132:	e7e3      	b.n	800b0fc <__smakebuf_r+0xc>
 800b134:	4b0d      	ldr	r3, [pc, #52]	; (800b16c <__smakebuf_r+0x7c>)
 800b136:	62b3      	str	r3, [r6, #40]	; 0x28
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	6020      	str	r0, [r4, #0]
 800b13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	9b00      	ldr	r3, [sp, #0]
 800b144:	6163      	str	r3, [r4, #20]
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	6120      	str	r0, [r4, #16]
 800b14a:	b15b      	cbz	r3, 800b164 <__smakebuf_r+0x74>
 800b14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b150:	4630      	mov	r0, r6
 800b152:	f000 f8d1 	bl	800b2f8 <_isatty_r>
 800b156:	b128      	cbz	r0, 800b164 <__smakebuf_r+0x74>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	f043 0301 	orr.w	r3, r3, #1
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	89a0      	ldrh	r0, [r4, #12]
 800b166:	4305      	orrs	r5, r0
 800b168:	81a5      	strh	r5, [r4, #12]
 800b16a:	e7cd      	b.n	800b108 <__smakebuf_r+0x18>
 800b16c:	0800aefd 	.word	0x0800aefd

0800b170 <_malloc_usable_size_r>:
 800b170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b174:	1f18      	subs	r0, r3, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfbc      	itt	lt
 800b17a:	580b      	ldrlt	r3, [r1, r0]
 800b17c:	18c0      	addlt	r0, r0, r3
 800b17e:	4770      	bx	lr

0800b180 <_raise_r>:
 800b180:	291f      	cmp	r1, #31
 800b182:	b538      	push	{r3, r4, r5, lr}
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	d904      	bls.n	800b194 <_raise_r+0x14>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b196:	b112      	cbz	r2, 800b19e <_raise_r+0x1e>
 800b198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b19c:	b94b      	cbnz	r3, 800b1b2 <_raise_r+0x32>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 f830 	bl	800b204 <_getpid_r>
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ae:	f000 b817 	b.w	800b1e0 <_kill_r>
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d00a      	beq.n	800b1cc <_raise_r+0x4c>
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	d103      	bne.n	800b1c2 <_raise_r+0x42>
 800b1ba:	2316      	movs	r3, #22
 800b1bc:	6003      	str	r3, [r0, #0]
 800b1be:	2001      	movs	r0, #1
 800b1c0:	e7e7      	b.n	800b192 <_raise_r+0x12>
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	4798      	blx	r3
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7e0      	b.n	800b192 <_raise_r+0x12>

0800b1d0 <raise>:
 800b1d0:	4b02      	ldr	r3, [pc, #8]	; (800b1dc <raise+0xc>)
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	f7ff bfd3 	b.w	800b180 <_raise_r>
 800b1da:	bf00      	nop
 800b1dc:	20000010 	.word	0x20000010

0800b1e0 <_kill_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d07      	ldr	r5, [pc, #28]	; (800b200 <_kill_r+0x20>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f7f6 f9fc 	bl	80015ea <_kill>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_kill_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_kill_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	20004c0c 	.word	0x20004c0c

0800b204 <_getpid_r>:
 800b204:	f7f6 b9e9 	b.w	80015da <_getpid>

0800b208 <__sread>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	460c      	mov	r4, r1
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	f000 f894 	bl	800b33c <_read_r>
 800b214:	2800      	cmp	r0, #0
 800b216:	bfab      	itete	ge
 800b218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b21a:	89a3      	ldrhlt	r3, [r4, #12]
 800b21c:	181b      	addge	r3, r3, r0
 800b21e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b222:	bfac      	ite	ge
 800b224:	6563      	strge	r3, [r4, #84]	; 0x54
 800b226:	81a3      	strhlt	r3, [r4, #12]
 800b228:	bd10      	pop	{r4, pc}

0800b22a <__swrite>:
 800b22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	461f      	mov	r7, r3
 800b230:	898b      	ldrh	r3, [r1, #12]
 800b232:	05db      	lsls	r3, r3, #23
 800b234:	4605      	mov	r5, r0
 800b236:	460c      	mov	r4, r1
 800b238:	4616      	mov	r6, r2
 800b23a:	d505      	bpl.n	800b248 <__swrite+0x1e>
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	2302      	movs	r3, #2
 800b242:	2200      	movs	r2, #0
 800b244:	f000 f868 	bl	800b318 <_lseek_r>
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b24e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b252:	81a3      	strh	r3, [r4, #12]
 800b254:	4632      	mov	r2, r6
 800b256:	463b      	mov	r3, r7
 800b258:	4628      	mov	r0, r5
 800b25a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b25e:	f000 b817 	b.w	800b290 <_write_r>

0800b262 <__sseek>:
 800b262:	b510      	push	{r4, lr}
 800b264:	460c      	mov	r4, r1
 800b266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b26a:	f000 f855 	bl	800b318 <_lseek_r>
 800b26e:	1c43      	adds	r3, r0, #1
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	bf15      	itete	ne
 800b274:	6560      	strne	r0, [r4, #84]	; 0x54
 800b276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b27a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b27e:	81a3      	strheq	r3, [r4, #12]
 800b280:	bf18      	it	ne
 800b282:	81a3      	strhne	r3, [r4, #12]
 800b284:	bd10      	pop	{r4, pc}

0800b286 <__sclose>:
 800b286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b28a:	f000 b813 	b.w	800b2b4 <_close_r>
	...

0800b290 <_write_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d07      	ldr	r5, [pc, #28]	; (800b2b0 <_write_r+0x20>)
 800b294:	4604      	mov	r4, r0
 800b296:	4608      	mov	r0, r1
 800b298:	4611      	mov	r1, r2
 800b29a:	2200      	movs	r2, #0
 800b29c:	602a      	str	r2, [r5, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f7f6 f9da 	bl	8001658 <_write>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_write_r+0x1e>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_write_r+0x1e>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	20004c0c 	.word	0x20004c0c

0800b2b4 <_close_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	4d06      	ldr	r5, [pc, #24]	; (800b2d0 <_close_r+0x1c>)
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	602b      	str	r3, [r5, #0]
 800b2c0:	f7f6 f9e6 	bl	8001690 <_close>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_close_r+0x1a>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_close_r+0x1a>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	20004c0c 	.word	0x20004c0c

0800b2d4 <_fstat_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d07      	ldr	r5, [pc, #28]	; (800b2f4 <_fstat_r+0x20>)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4604      	mov	r4, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	4611      	mov	r1, r2
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	f7f6 f9e1 	bl	80016a8 <_fstat>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	d102      	bne.n	800b2f0 <_fstat_r+0x1c>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	b103      	cbz	r3, 800b2f0 <_fstat_r+0x1c>
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20004c0c 	.word	0x20004c0c

0800b2f8 <_isatty_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d06      	ldr	r5, [pc, #24]	; (800b314 <_isatty_r+0x1c>)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f7f6 f9e0 	bl	80016c8 <_isatty>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_isatty_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_isatty_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	20004c0c 	.word	0x20004c0c

0800b318 <_lseek_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d07      	ldr	r5, [pc, #28]	; (800b338 <_lseek_r+0x20>)
 800b31c:	4604      	mov	r4, r0
 800b31e:	4608      	mov	r0, r1
 800b320:	4611      	mov	r1, r2
 800b322:	2200      	movs	r2, #0
 800b324:	602a      	str	r2, [r5, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	f7f6 f9d9 	bl	80016de <_lseek>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	d102      	bne.n	800b336 <_lseek_r+0x1e>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	b103      	cbz	r3, 800b336 <_lseek_r+0x1e>
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	20004c0c 	.word	0x20004c0c

0800b33c <_read_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d07      	ldr	r5, [pc, #28]	; (800b35c <_read_r+0x20>)
 800b340:	4604      	mov	r4, r0
 800b342:	4608      	mov	r0, r1
 800b344:	4611      	mov	r1, r2
 800b346:	2200      	movs	r2, #0
 800b348:	602a      	str	r2, [r5, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	f7f6 f967 	bl	800161e <_read>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_read_r+0x1e>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_read_r+0x1e>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	20004c0c 	.word	0x20004c0c

0800b360 <_init>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	bf00      	nop
 800b364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b366:	bc08      	pop	{r3}
 800b368:	469e      	mov	lr, r3
 800b36a:	4770      	bx	lr

0800b36c <_fini>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr
