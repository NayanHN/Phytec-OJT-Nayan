
aht25_expr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800b998  0800b998  0001b998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf04  0800bf04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf0c  0800bf0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf0c  0800bf0c  0001bf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf10  0800bf10  0001bf10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bf14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a78  200001e4  0800c0f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c5c  0800c0f8  00024c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a515  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f8  00000000  00000000  0003a729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0003dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  0003f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ad2  00000000  00000000  00040938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193d8  00000000  00000000  0004540a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c16b  00000000  00000000  0005e7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa94d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000783c  00000000  00000000  000fa9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b980 	.word	0x0800b980

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b980 	.word	0x0800b980

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <read_sensor_values>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float temperature, humidity;

void read_sensor_values(float *temperature, float *humidity)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af02      	add	r7, sp, #8
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
    uint8_t data[6];
    uint8_t cmd = AHT25_MEASURE_CMD;
 8001012:	23ac      	movs	r3, #172	; 0xac
 8001014:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(&hi2c2, AHT25_ADDR,&cmd, 1, HAL_MAX_DELAY);
 8001016:	f107 020f 	add.w	r2, r7, #15
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2170      	movs	r1, #112	; 0x70
 8001024:	4836      	ldr	r0, [pc, #216]	; (8001100 <read_sensor_values+0xf8>)
 8001026:	f001 f867 	bl	80020f8 <HAL_I2C_Master_Transmit>
    HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 fc96 	bl	800195c <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2,0x71, data, 6, HAL_MAX_DELAY);
 8001030:	f107 0210 	add.w	r2, r7, #16
 8001034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	2306      	movs	r3, #6
 800103c:	2171      	movs	r1, #113	; 0x71
 800103e:	4830      	ldr	r0, [pc, #192]	; (8001100 <read_sensor_values+0xf8>)
 8001040:	f001 f958 	bl	80022f4 <HAL_I2C_Master_Receive>

    *humidity = ((float)((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))) / 1048576.0 * 100.0;
 8001044:	7c7b      	ldrb	r3, [r7, #17]
 8001046:	031a      	lsls	r2, r3, #12
 8001048:	7cbb      	ldrb	r3, [r7, #18]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4313      	orrs	r3, r2
 800104e:	7cfa      	ldrb	r2, [r7, #19]
 8001050:	0912      	lsrs	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	4313      	orrs	r3, r2
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa79 	bl	8000558 <__aeabi_f2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <read_sensor_values+0xfc>)
 800106c:	f7ff fbf6 	bl	800085c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b22      	ldr	r3, [pc, #136]	; (8001108 <read_sensor_values+0x100>)
 800107e:	f7ff fac3 	bl	8000608 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fdb5 	bl	8000bf8 <__aeabi_d2f>
 800108e:	4602      	mov	r2, r0
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	601a      	str	r2, [r3, #0]
    *temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0 * 200.0 - 50.0;
 8001094:	7cfb      	ldrb	r3, [r7, #19]
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800109c:	7d3b      	ldrb	r3, [r7, #20]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	7d7a      	ldrb	r2, [r7, #21]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <read_sensor_values+0xfc>)
 80010bc:	f7ff fbce 	bl	800085c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <read_sensor_values+0x104>)
 80010ce:	f7ff fa9b 	bl	8000608 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <read_sensor_values+0x108>)
 80010e0:	f7ff f8da 	bl	8000298 <__aeabi_dsub>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fd84 	bl	8000bf8 <__aeabi_d2f>
 80010f0:	4602      	mov	r2, r0
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]


}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000200 	.word	0x20000200
 8001104:	41300000 	.word	0x41300000
 8001108:	40590000 	.word	0x40590000
 800110c:	40690000 	.word	0x40690000
 8001110:	40490000 	.word	0x40490000

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fbde 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f834 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f8f4 	bl	800130c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001124:	f000 f8c8 	bl	80012b8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001128:	f000 f898 	bl	800125c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800112c:	f003 f986 	bl	800443c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <main+0x54>)
 8001132:	2102      	movs	r1, #2
 8001134:	2010      	movs	r0, #16
 8001136:	f003 fa78 	bl	800462a <osMessageQueueNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <main+0x58>)
 800113e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <main+0x5c>)
 8001142:	2100      	movs	r1, #0
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <main+0x60>)
 8001146:	f003 f9c3 	bl	80044d0 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <main+0x64>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <main+0x68>)
 8001152:	2100      	movs	r1, #0
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <main+0x6c>)
 8001156:	f003 f9bb 	bl	80044d0 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <main+0x70>)
 800115e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001160:	f003 f990 	bl	8004484 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x50>
 8001166:	bf00      	nop
 8001168:	0800ba2c 	.word	0x0800ba2c
 800116c:	200002a0 	.word	0x200002a0
 8001170:	0800b9e4 	.word	0x0800b9e4
 8001174:	0800135d 	.word	0x0800135d
 8001178:	20000298 	.word	0x20000298
 800117c:	0800ba08 	.word	0x0800ba08
 8001180:	08001381 	.word	0x08001381
 8001184:	2000029c 	.word	0x2000029c

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 ff88 	bl	80070ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemClock_Config+0xd0>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011f8:	2310      	movs	r3, #16
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001202:	2304      	movs	r3, #4
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001206:	2304      	movs	r3, #4
 8001208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fdc4 	bl	8002d9c <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800121a:	f000 f8eb 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2102      	movs	r1, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f002 f826 	bl	800328c <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001246:	f000 f8d5 	bl	80013f4 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C2_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_I2C2_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C2_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_I2C2_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C2_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2C2_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_I2C2_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C2_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2C2_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C2_Init+0x50>)
 800129a:	f000 fde9 	bl	8001e70 <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f8a6 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000200 	.word	0x20000200
 80012b0:	40005800 	.word	0x40005800
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_USART2_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f002 fc9e 	bl	8003c30 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 f87b 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000254 	.word	0x20000254
 8001308:	40004400 	.word	0x40004400

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <MX_GPIO_Init+0x4c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_GPIO_Init+0x4c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  read_sensor_values(&temperature, &humidity);
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <StartTask1+0x1c>)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <StartTask1+0x20>)
 8001368:	f7ff fe4e 	bl	8001008 <read_sensor_values>
    osDelay(1000);
 800136c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001370:	f003 f940 	bl	80045f4 <osDelay>
	  read_sensor_values(&temperature, &humidity);
 8001374:	e7f6      	b.n	8001364 <StartTask1+0x8>
 8001376:	bf00      	nop
 8001378:	200002a8 	.word	0x200002a8
 800137c:	200002a4 	.word	0x200002a4

08001380 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b09c      	sub	sp, #112	; 0x70
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  char buffer[100];
	 	  sprintf(buffer, "Temperature: %.2f°C\r", temperature);
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <StartTask2+0x44>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8e3 	bl	8000558 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	f107 000c 	add.w	r0, r7, #12
 800139a:	490b      	ldr	r1, [pc, #44]	; (80013c8 <StartTask2+0x48>)
 800139c:	f006 fd0e 	bl	8007dbc <siprintf>
	 	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff1b 	bl	80001e0 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f107 010c 	add.w	r1, r7, #12
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <StartTask2+0x4c>)
 80013b8:	f002 fc87 	bl	8003cca <HAL_UART_Transmit>
    osDelay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f003 f919 	bl	80045f4 <osDelay>
  {
 80013c2:	e7e1      	b.n	8001388 <StartTask2+0x8>
 80013c4:	200002a4 	.word	0x200002a4
 80013c8:	0800b9b4 	.word	0x0800b9b4
 80013cc:	20000254 	.word	0x20000254

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e2:	f000 fa9b 	bl	800191c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000800 	.word	0x40000800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_MspInit+0x54>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_MspInit+0x54>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_MspInit+0x54>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_MspInit+0x54>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_MspInit+0x54>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_MspInit+0x54>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	210f      	movs	r1, #15
 8001442:	f06f 0001 	mvn.w	r0, #1
 8001446:	f000 fb65 	bl	8001b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a22      	ldr	r2, [pc, #136]	; (8001500 <HAL_I2C_MspInit+0xa8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d13d      	bne.n	80014f6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_I2C_MspInit+0xac>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a20      	ldr	r2, [pc, #128]	; (8001504 <HAL_I2C_MspInit+0xac>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <HAL_I2C_MspInit+0xac>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014a8:	2304      	movs	r3, #4
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4815      	ldr	r0, [pc, #84]	; (8001508 <HAL_I2C_MspInit+0xb0>)
 80014b4:	f000 fb58 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014ca:	2309      	movs	r3, #9
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <HAL_I2C_MspInit+0xb0>)
 80014d6:	f000 fb47 	bl	8001b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_I2C_MspInit+0xac>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_I2C_MspInit+0xac>)
 80014e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_I2C_MspInit+0xac>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40005800 	.word	0x40005800
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_UART_MspInit+0x84>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12b      	bne.n	8001586 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_UART_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_UART_MspInit+0x88>)
 8001538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_UART_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_UART_MspInit+0x88>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_UART_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001566:	230c      	movs	r3, #12
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001576:	2307      	movs	r3, #7
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_UART_MspInit+0x8c>)
 8001582:	f000 faf1 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004400 	.word	0x40004400
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000

0800159c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_InitTick+0xe4>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_InitTick+0xe4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_InitTick+0xe4>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c8:	f107 0210 	add.w	r2, r7, #16
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 f87a 	bl	80036cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d103      	bne.n	80015ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e2:	f002 f84b 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 80015e6:	6378      	str	r0, [r7, #52]	; 0x34
 80015e8:	e004      	b.n	80015f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015ea:	f002 f847 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 80015ee:	4603      	mov	r3, r0
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_InitTick+0xe8>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	0c9b      	lsrs	r3, r3, #18
 80015fe:	3b01      	subs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_InitTick+0xec>)
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_InitTick+0xf0>)
 8001606:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_InitTick+0xec>)
 800160a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_InitTick+0xec>)
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_InitTick+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_InitTick+0xec>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_InitTick+0xec>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001628:	4817      	ldr	r0, [pc, #92]	; (8001688 <HAL_InitTick+0xec>)
 800162a:	f002 f881 	bl	8003730 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001634:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11b      	bne.n	8001674 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800163c:	4812      	ldr	r0, [pc, #72]	; (8001688 <HAL_InitTick+0xec>)
 800163e:	f002 f8d1 	bl	80037e4 <HAL_TIM_Base_Start_IT>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800164c:	2b00      	cmp	r3, #0
 800164e:	d111      	bne.n	8001674 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001650:	201e      	movs	r0, #30
 8001652:	f000 fa7b 	bl	8001b4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d808      	bhi.n	800166e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	201e      	movs	r0, #30
 8001662:	f000 fa57 	bl	8001b14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_InitTick+0xf4>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e002      	b.n	8001674 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001678:	4618      	mov	r0, r3
 800167a:	3738      	adds	r7, #56	; 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	431bde83 	.word	0x431bde83
 8001688:	200002ac 	.word	0x200002ac
 800168c:	40000800 	.word	0x40000800
 8001690:	20000004 	.word	0x20000004

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIM4_IRQHandler+0x10>)
 80016c6:	f002 f8ef 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002ac 	.word	0x200002ac

080016d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ee:	f005 fca5 	bl	800703c <__errno>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2216      	movs	r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_exit>:

void _exit (int status)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800170c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001716:	e7fe      	b.n	8001716 <_exit+0x12>

08001718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e00a      	b.n	8001740 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172a:	f3af 8000 	nop.w
 800172e:	4601      	mov	r1, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf0      	blt.n	800172a <_read+0x12>
  }

  return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf1      	blt.n	8001764 <_write+0x12>
  }
  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f005 fc0a 	bl	800703c <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	200002f4 	.word	0x200002f4
 800185c:	20004c60 	.word	0x20004c60

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f005 fbc9 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff fc2d 	bl	8001114 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80018c8:	0800bf14 	.word	0x0800bf14
  ldr r2, =_sbss
 80018cc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80018d0:	20004c5c 	.word	0x20004c5c

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f8fc 	bl	8001afe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	200f      	movs	r0, #15
 8001908:	f7ff fe48 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fd78 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x20>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <HAL_IncTick+0x24>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008
 8001940:	200002f8 	.word	0x200002f8

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetTick+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	200002f8 	.word	0x200002f8

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ffee 	bl	8001944 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffde 	bl	8001944 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff4c 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b26:	f7ff ff61 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	68b9      	ldr	r1, [r7, #8]
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f7ff ffb1 	bl	8001a98 <NVIC_EncodePriority>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff80 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff54 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e159      	b.n	8001e38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8148 	bne.w	8001e32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d005      	beq.n	8001bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d130      	bne.n	8001c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d017      	beq.n	8001c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d123      	bne.n	8001cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a2 	beq.w	8001e32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b54      	ldr	r3, [pc, #336]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_GPIO_Init+0x2ec>)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a49      	ldr	r2, [pc, #292]	; (8001e58 <HAL_GPIO_Init+0x2f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d019      	beq.n	8001d6a <HAL_GPIO_Init+0x202>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_GPIO_Init+0x2f4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x1fe>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <HAL_GPIO_Init+0x2f8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <HAL_GPIO_Init+0x2fc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x1f6>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x1f2>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x204>
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x204>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x204>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x204>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x204>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	; (8001e54 <HAL_GPIO_Init+0x2ec>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e02:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e2c:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <HAL_GPIO_Init+0x304>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f aea2 	bls.w	8001b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40013c00 	.word	0x40013c00

08001e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e12b      	b.n	80020da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fade 	bl	8001458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2224      	movs	r2, #36	; 0x24
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed4:	f001 fbd2 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	4a81      	ldr	r2, [pc, #516]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d807      	bhi.n	8001ef4 <HAL_I2C_Init+0x84>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4a80      	ldr	r2, [pc, #512]	; (80020e8 <HAL_I2C_Init+0x278>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf94      	ite	ls
 8001eec:	2301      	movls	r3, #1
 8001eee:	2300      	movhi	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e006      	b.n	8001f02 <HAL_I2C_Init+0x92>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_I2C_Init+0x27c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf94      	ite	ls
 8001efc:	2301      	movls	r3, #1
 8001efe:	2300      	movhi	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0e7      	b.n	80020da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4a78      	ldr	r2, [pc, #480]	; (80020f0 <HAL_I2C_Init+0x280>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	0c9b      	lsrs	r3, r3, #18
 8001f14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d802      	bhi.n	8001f44 <HAL_I2C_Init+0xd4>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	e009      	b.n	8001f58 <HAL_I2C_Init+0xe8>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a69      	ldr	r2, [pc, #420]	; (80020f4 <HAL_I2C_Init+0x284>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	495c      	ldr	r1, [pc, #368]	; (80020e4 <HAL_I2C_Init+0x274>)
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d819      	bhi.n	8001fac <HAL_I2C_Init+0x13c>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1e59      	subs	r1, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f86:	1c59      	adds	r1, r3, #1
 8001f88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_I2C_Init+0x138>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e59      	subs	r1, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa6:	e051      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e04f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d111      	bne.n	8001fd8 <HAL_I2C_Init+0x168>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e012      	b.n	8001ffe <HAL_I2C_Init+0x18e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	0099      	lsls	r1, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Init+0x196>
 8002002:	2301      	movs	r3, #1
 8002004:	e022      	b.n	800204c <HAL_I2C_Init+0x1dc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <HAL_I2C_Init+0x1bc>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1e58      	subs	r0, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	440b      	add	r3, r1
 800201c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800202a:	e00f      	b.n	800204c <HAL_I2C_Init+0x1dc>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	6809      	ldr	r1, [r1, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800207a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6911      	ldr	r1, [r2, #16]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68d2      	ldr	r2, [r2, #12]
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	000186a0 	.word	0x000186a0
 80020e8:	001e847f 	.word	0x001e847f
 80020ec:	003d08ff 	.word	0x003d08ff
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	817b      	strh	r3, [r7, #10]
 8002108:	4613      	mov	r3, r2
 800210a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fc1a 	bl	8001944 <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	f040 80e0 	bne.w	80022e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2319      	movs	r3, #25
 8002126:	2201      	movs	r2, #1
 8002128:	4970      	ldr	r1, [pc, #448]	; (80022ec <HAL_I2C_Master_Transmit+0x1f4>)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fc58 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e0d3      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x50>
 8002144:	2302      	movs	r3, #2
 8002146:	e0cc      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d007      	beq.n	800216e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2221      	movs	r2, #33	; 0x21
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2210      	movs	r2, #16
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fac2 	bl	8002740 <I2C_MasterRequestWrite>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e08d      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021dc:	e066      	b.n	80022ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	6a39      	ldr	r1, [r7, #32]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fcd2 	bl	8002b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d107      	bne.n	8002206 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002204:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b04      	cmp	r3, #4
 8002246:	d11b      	bne.n	8002280 <HAL_I2C_Master_Transmit+0x188>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	6a39      	ldr	r1, [r7, #32]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 fcc2 	bl	8002c0e <I2C_WaitOnBTFFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	2b04      	cmp	r3, #4
 8002296:	d107      	bne.n	80022a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e01a      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d194      	bne.n	80021de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	00100002 	.word	0x00100002
 80022f0:	ffff0000 	.word	0xffff0000

080022f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	; 0x30
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	460b      	mov	r3, r1
 8002302:	817b      	strh	r3, [r7, #10]
 8002304:	4613      	mov	r3, r2
 8002306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff fb1c 	bl	8001944 <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	f040 820b 	bne.w	8002732 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2319      	movs	r3, #25
 8002322:	2201      	movs	r2, #1
 8002324:	497c      	ldr	r1, [pc, #496]	; (8002518 <HAL_I2C_Master_Receive+0x224>)
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fb5a 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e1fe      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_I2C_Master_Receive+0x50>
 8002340:	2302      	movs	r3, #2
 8002342:	e1f7      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d007      	beq.n	800236a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2222      	movs	r2, #34	; 0x22
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2210      	movs	r2, #16
 8002386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	893a      	ldrh	r2, [r7, #8]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a5c      	ldr	r2, [pc, #368]	; (800251c <HAL_I2C_Master_Receive+0x228>)
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fa46 	bl	8002844 <I2C_MasterRequestRead>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1b8      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d113      	bne.n	80023f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	623b      	str	r3, [r7, #32]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e18c      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d11b      	bne.n	8002432 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e16c      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	2b02      	cmp	r3, #2
 8002438:	d11b      	bne.n	8002472 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002448:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	e14c      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002498:	e138      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b03      	cmp	r3, #3
 80024a0:	f200 80f1 	bhi.w	8002686 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d123      	bne.n	80024f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fbed 	bl	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e139      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f2:	e10b      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d14e      	bne.n	800259a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002502:	2200      	movs	r2, #0
 8002504:	4906      	ldr	r1, [pc, #24]	; (8002520 <HAL_I2C_Master_Receive+0x22c>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa6a 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e10e      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000
 8002520:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002598:	e0b8      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	2200      	movs	r2, #0
 80025a2:	4966      	ldr	r1, [pc, #408]	; (800273c <HAL_I2C_Master_Receive+0x448>)
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fa1b 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0bf      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	2200      	movs	r2, #0
 80025fe:	494f      	ldr	r1, [pc, #316]	; (800273c <HAL_I2C_Master_Receive+0x448>)
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f9ed 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e091      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002684:	e042      	b.n	800270c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fb00 	bl	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e04c      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d118      	bne.n	800270c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f aec2 	bne.w	800249a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3728      	adds	r7, #40	; 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	00010004 	.word	0x00010004

08002740 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	460b      	mov	r3, r1
 800274e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d006      	beq.n	800276a <I2C_MasterRequestWrite+0x2a>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d003      	beq.n	800276a <I2C_MasterRequestWrite+0x2a>
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002768:	d108      	bne.n	800277c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e00b      	b.n	8002794 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b12      	cmp	r3, #18
 8002782:	d107      	bne.n	8002794 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002792:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f91d 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ba:	d103      	bne.n	80027c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e035      	b.n	8002834 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d0:	d108      	bne.n	80027e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	e01b      	b.n	800281c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e4:	897b      	ldrh	r3, [r7, #10]
 80027e6:	11db      	asrs	r3, r3, #7
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 0306 	and.w	r3, r3, #6
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f063 030f 	orn	r3, r3, #15
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <I2C_MasterRequestWrite+0xfc>)
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f943 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e010      	b.n	8002834 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <I2C_MasterRequestWrite+0x100>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f933 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	00010008 	.word	0x00010008
 8002840:	00010002 	.word	0x00010002

08002844 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	460b      	mov	r3, r1
 8002852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002868:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d006      	beq.n	800287e <I2C_MasterRequestRead+0x3a>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d003      	beq.n	800287e <I2C_MasterRequestRead+0x3a>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800287c:	d108      	bne.n	8002890 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e00b      	b.n	80028a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	2b11      	cmp	r3, #17
 8002896:	d107      	bne.n	80028a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f893 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ce:	d103      	bne.n	80028d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e079      	b.n	80029d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e4:	d108      	bne.n	80028f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028e6:	897b      	ldrh	r3, [r7, #10]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]
 80028f6:	e05f      	b.n	80029b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028f8:	897b      	ldrh	r3, [r7, #10]
 80028fa:	11db      	asrs	r3, r3, #7
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 0306 	and.w	r3, r3, #6
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f063 030f 	orn	r3, r3, #15
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4930      	ldr	r1, [pc, #192]	; (80029d8 <I2C_MasterRequestRead+0x194>)
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8b9 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e054      	b.n	80029d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4929      	ldr	r1, [pc, #164]	; (80029dc <I2C_MasterRequestRead+0x198>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f8a9 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e044      	b.n	80029d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f831 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002992:	d103      	bne.n	800299c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e017      	b.n	80029d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	11db      	asrs	r3, r3, #7
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f003 0306 	and.w	r3, r3, #6
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f063 030e 	orn	r3, r3, #14
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <I2C_MasterRequestRead+0x198>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f865 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010008 	.word	0x00010008
 80029dc:	00010002 	.word	0x00010002

080029e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f0:	e025      	b.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f8:	d021      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe ffa3 	bl	8001944 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e023      	b.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10d      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	e00c      	b.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d0b6      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a9c:	e051      	b.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d123      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e046      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002afc:	d021      	beq.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7fe ff21 	bl	8001944 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e020      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10c      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e00b      	b.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d18d      	bne.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f8ce 	bl	8002d3c <I2C_IsAcknowledgeFailed>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e02d      	b.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb0:	d021      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe fec7 	bl	8001944 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e007      	b.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d1ca      	bne.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c1a:	e02d      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f88d 	bl	8002d3c <I2C_IsAcknowledgeFailed>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e02d      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c32:	d021      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7fe fe86 	bl	8001944 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d1ca      	bne.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c9c:	e042      	b.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d119      	bne.n	8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0210 	mvn.w	r2, #16
 8002cb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e029      	b.n	8002d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe fe30 	bl	8001944 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e007      	b.n	8002d34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d1b5      	bne.n	8002c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d52:	d11b      	bne.n	8002d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e267      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d075      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dba:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d00c      	beq.n	8002de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dc6:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d112      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd2:	4b82      	ldr	r3, [pc, #520]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de0:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x108>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d157      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e242      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e00:	d106      	bne.n	8002e10 <HAL_RCC_OscConfig+0x74>
 8002e02:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a75      	ldr	r2, [pc, #468]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e01d      	b.n	8002e4c <HAL_RCC_OscConfig+0xb0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCC_OscConfig+0x98>
 8002e1a:	4b70      	ldr	r3, [pc, #448]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a6f      	ldr	r2, [pc, #444]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a6c      	ldr	r2, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0xb0>
 8002e34:	4b69      	ldr	r3, [pc, #420]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a68      	ldr	r2, [pc, #416]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b66      	ldr	r3, [pc, #408]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a65      	ldr	r2, [pc, #404]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fd76 	bl	8001944 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fd72 	bl	8001944 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e207      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0xc0>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fd62 	bl	8001944 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fe fd5e 	bl	8001944 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1f3      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	4b51      	ldr	r3, [pc, #324]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0xe8>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d063      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d11c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eca:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d116      	bne.n	8002f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_RCC_OscConfig+0x152>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e1c7      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4937      	ldr	r1, [pc, #220]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	e03a      	b.n	8002f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_OscConfig+0x244>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe fd17 	bl	8001944 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1a:	f7fe fd13 	bl	8001944 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e1a8      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4925      	ldr	r1, [pc, #148]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
 8002f4c:	e015      	b.n	8002f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_OscConfig+0x244>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe fcf6 	bl	8001944 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fcf2 	bl	8001944 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e187      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d036      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_RCC_OscConfig+0x248>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe fcd6 	bl	8001944 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fcd2 	bl	8001944 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e167      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x240>)
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x200>
 8002fba:	e01b      	b.n	8002ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_OscConfig+0x248>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fcbf 	bl	8001944 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc8:	e00e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fca:	f7fe fcbb 	bl	8001944 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d907      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e150      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	42470000 	.word	0x42470000
 8002fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1ea      	bne.n	8002fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8097 	beq.w	8003130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003006:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	4b7d      	ldr	r3, [pc, #500]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a7c      	ldr	r2, [pc, #496]	; (800320c <HAL_RCC_OscConfig+0x470>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b7a      	ldr	r3, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	4b77      	ldr	r3, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x474>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d118      	bne.n	8003070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303e:	4b74      	ldr	r3, [pc, #464]	; (8003210 <HAL_RCC_OscConfig+0x474>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a73      	ldr	r2, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x474>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304a:	f7fe fc7b 	bl	8001944 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7fe fc77 	bl	8001944 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e10c      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCC_OscConfig+0x474>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x2ea>
 8003078:	4b64      	ldr	r3, [pc, #400]	; (800320c <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a63      	ldr	r2, [pc, #396]	; (800320c <HAL_RCC_OscConfig+0x470>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	e01c      	b.n	80030c0 <HAL_RCC_OscConfig+0x324>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b05      	cmp	r3, #5
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x30c>
 800308e:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a5e      	ldr	r2, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
 800309a:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a5b      	ldr	r2, [pc, #364]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0x324>
 80030a8:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
 80030b4:	4b55      	ldr	r3, [pc, #340]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	4a54      	ldr	r2, [pc, #336]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fc3c 	bl	8001944 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe fc38 	bl	8001944 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0cb      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	4b49      	ldr	r3, [pc, #292]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ee      	beq.n	80030d0 <HAL_RCC_OscConfig+0x334>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7fe fc26 	bl	8001944 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe fc22 	bl	8001944 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0b5      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003112:	4b3e      	ldr	r3, [pc, #248]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ee      	bne.n	80030fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b39      	ldr	r3, [pc, #228]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4a38      	ldr	r2, [pc, #224]	; (800320c <HAL_RCC_OscConfig+0x470>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a1 	beq.w	800327c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313a:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_RCC_OscConfig+0x470>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b08      	cmp	r3, #8
 8003144:	d05c      	beq.n	8003200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d141      	bne.n	80031d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b31      	ldr	r3, [pc, #196]	; (8003214 <HAL_RCC_OscConfig+0x478>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe fbf6 	bl	8001944 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe fbf2 	bl	8001944 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e087      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_RCC_OscConfig+0x470>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	3b01      	subs	r3, #1
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	491b      	ldr	r1, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_RCC_OscConfig+0x478>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fe fbcb 	bl	8001944 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe fbc7 	bl	8001944 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e05c      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x416>
 80031d0:	e054      	b.n	800327c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_RCC_OscConfig+0x478>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe fbb4 	bl	8001944 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e0:	f7fe fbb0 	bl	8001944 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e045      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_OscConfig+0x470>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x444>
 80031fe:	e03d      	b.n	800327c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e038      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000
 8003214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x4ec>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d028      	beq.n	8003278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d121      	bne.n	8003278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d11a      	bne.n	8003278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003250:	4293      	cmp	r3, r2
 8003252:	d111      	bne.n	8003278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	085b      	lsrs	r3, r3, #1
 8003260:	3b01      	subs	r3, #1
 8003262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d107      	bne.n	8003278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800

0800328c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0cc      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b68      	ldr	r3, [pc, #416]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d90c      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d044      	beq.n	80033ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d119      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d003      	beq.n	800334a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	2b03      	cmp	r3, #3
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b3f      	ldr	r3, [pc, #252]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e067      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4934      	ldr	r1, [pc, #208]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7fe fae2 	bl	8001944 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fe fade 	bl	8001944 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e04f      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d20c      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490a      	ldr	r1, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f8b2 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023c00 	.word	0x40023c00
 8003448:	40023800 	.word	0x40023800
 800344c:	0800ba44 	.word	0x0800ba44
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800345c:	b094      	sub	sp, #80	; 0x50
 800345e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	647b      	str	r3, [r7, #68]	; 0x44
 8003464:	2300      	movs	r3, #0
 8003466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003468:	2300      	movs	r3, #0
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003470:	4b79      	ldr	r3, [pc, #484]	; (8003658 <HAL_RCC_GetSysClockFreq+0x200>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d00d      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x40>
 800347c:	2b08      	cmp	r3, #8
 800347e:	f200 80e1 	bhi.w	8003644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003486:	2b04      	cmp	r3, #4
 8003488:	d003      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x3a>
 800348a:	e0db      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <HAL_RCC_GetSysClockFreq+0x204>)
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003490:	e0db      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003492:	4b73      	ldr	r3, [pc, #460]	; (8003660 <HAL_RCC_GetSysClockFreq+0x208>)
 8003494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003496:	e0d8      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003498:	4b6f      	ldr	r3, [pc, #444]	; (8003658 <HAL_RCC_GetSysClockFreq+0x200>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a2:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d063      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ae:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	099b      	lsrs	r3, r3, #6
 80034b4:	2200      	movs	r2, #0
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
 80034c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ca:	4622      	mov	r2, r4
 80034cc:	462b      	mov	r3, r5
 80034ce:	f04f 0000 	mov.w	r0, #0
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	0159      	lsls	r1, r3, #5
 80034d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034dc:	0150      	lsls	r0, r2, #5
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4621      	mov	r1, r4
 80034e4:	1a51      	subs	r1, r2, r1
 80034e6:	6139      	str	r1, [r7, #16]
 80034e8:	4629      	mov	r1, r5
 80034ea:	eb63 0301 	sbc.w	r3, r3, r1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034fc:	4659      	mov	r1, fp
 80034fe:	018b      	lsls	r3, r1, #6
 8003500:	4651      	mov	r1, sl
 8003502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003506:	4651      	mov	r1, sl
 8003508:	018a      	lsls	r2, r1, #6
 800350a:	4651      	mov	r1, sl
 800350c:	ebb2 0801 	subs.w	r8, r2, r1
 8003510:	4659      	mov	r1, fp
 8003512:	eb63 0901 	sbc.w	r9, r3, r1
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800352a:	4690      	mov	r8, r2
 800352c:	4699      	mov	r9, r3
 800352e:	4623      	mov	r3, r4
 8003530:	eb18 0303 	adds.w	r3, r8, r3
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	462b      	mov	r3, r5
 8003538:	eb49 0303 	adc.w	r3, r9, r3
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800354a:	4629      	mov	r1, r5
 800354c:	024b      	lsls	r3, r1, #9
 800354e:	4621      	mov	r1, r4
 8003550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003554:	4621      	mov	r1, r4
 8003556:	024a      	lsls	r2, r1, #9
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355e:	2200      	movs	r2, #0
 8003560:	62bb      	str	r3, [r7, #40]	; 0x28
 8003562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003568:	f7fd fb96 	bl	8000c98 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	e058      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_RCC_GetSysClockFreq+0x200>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	099b      	lsrs	r3, r3, #6
 800357c:	2200      	movs	r2, #0
 800357e:	4618      	mov	r0, r3
 8003580:	4611      	mov	r1, r2
 8003582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	0159      	lsls	r1, r3, #5
 800359e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a2:	0150      	lsls	r0, r2, #5
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4641      	mov	r1, r8
 80035aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ae:	4649      	mov	r1, r9
 80035b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035c8:	ebb2 040a 	subs.w	r4, r2, sl
 80035cc:	eb63 050b 	sbc.w	r5, r3, fp
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	00eb      	lsls	r3, r5, #3
 80035da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035de:	00e2      	lsls	r2, r4, #3
 80035e0:	4614      	mov	r4, r2
 80035e2:	461d      	mov	r5, r3
 80035e4:	4643      	mov	r3, r8
 80035e6:	18e3      	adds	r3, r4, r3
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	464b      	mov	r3, r9
 80035ec:	eb45 0303 	adc.w	r3, r5, r3
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035fe:	4629      	mov	r1, r5
 8003600:	028b      	lsls	r3, r1, #10
 8003602:	4621      	mov	r1, r4
 8003604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003608:	4621      	mov	r1, r4
 800360a:	028a      	lsls	r2, r1, #10
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003612:	2200      	movs	r2, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	61fa      	str	r2, [r7, #28]
 8003618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800361c:	f7fd fb3c 	bl	8000c98 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_GetSysClockFreq+0x200>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	3301      	adds	r3, #1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800363a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003642:	e002      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetSysClockFreq+0x204>)
 8003646:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800364c:	4618      	mov	r0, r3
 800364e:	3750      	adds	r7, #80	; 0x50
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	00f42400 	.word	0x00f42400
 8003660:	007a1200 	.word	0x007a1200

08003664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000000 	.word	0x20000000

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003680:	f7ff fff0 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	0800ba54 	.word	0x0800ba54

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a8:	f7ff ffdc 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0b5b      	lsrs	r3, r3, #13
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	0800ba54 	.word	0x0800ba54

080036cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	220f      	movs	r2, #15
 80036da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036dc:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0203 	and.w	r2, r3, #3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_RCC_GetClockConfig+0x60>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0207 	and.w	r2, r3, #7
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	40023c00 	.word	0x40023c00

08003730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e041      	b.n	80037c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f839 	bl	80037ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 f9ca 	bl	8003b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e044      	b.n	8003886 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xb0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003826:	d013      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_TIM_Base_Start_IT+0xb4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_TIM_Base_Start_IT+0xb8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x6c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b06      	cmp	r3, #6
 8003860:	d010      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003872:	e007      	b.n	8003884 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40014000 	.word	0x40014000

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0202 	mvn.w	r2, #2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8ee 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8e0 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8f1 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0204 	mvn.w	r2, #4
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8c4 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8b6 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8c7 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0208 	mvn.w	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f89a 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f88c 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f89d 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0210 	mvn.w	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f870 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f862 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f873 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0201 	mvn.w	r2, #1
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fcd2 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8e2 	bl	8003c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f838 	bl	8003af4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d10e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d107      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0220 	mvn.w	r2, #32
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8ac 	bl	8003c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a34      	ldr	r2, [pc, #208]	; (8003bec <TIM_Base_SetConfig+0xe4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00f      	beq.n	8003b40 <TIM_Base_SetConfig+0x38>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d00b      	beq.n	8003b40 <TIM_Base_SetConfig+0x38>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a31      	ldr	r2, [pc, #196]	; (8003bf0 <TIM_Base_SetConfig+0xe8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <TIM_Base_SetConfig+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a30      	ldr	r2, [pc, #192]	; (8003bf4 <TIM_Base_SetConfig+0xec>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <TIM_Base_SetConfig+0xf0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d108      	bne.n	8003b52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <TIM_Base_SetConfig+0xe4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d01b      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d017      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <TIM_Base_SetConfig+0xe8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d013      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <TIM_Base_SetConfig+0xec>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <TIM_Base_SetConfig+0xf0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <TIM_Base_SetConfig+0xf4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <TIM_Base_SetConfig+0xf8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <TIM_Base_SetConfig+0xfc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <TIM_Base_SetConfig+0xe4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d103      	bne.n	8003bd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	615a      	str	r2, [r3, #20]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800

08003c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e03f      	b.n	8003cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fc58 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f929 	bl	8003ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08a      	sub	sp, #40	; 0x28
 8003cce:	af02      	add	r7, sp, #8
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d17c      	bne.n	8003de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_Transmit+0x2c>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e075      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Transmit+0x3e>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e06e      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2221      	movs	r2, #33	; 0x21
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1e:	f7fd fe11 	bl	8001944 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	88fa      	ldrh	r2, [r7, #6]
 8003d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d38:	d108      	bne.n	8003d4c <HAL_UART_Transmit+0x82>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d104      	bne.n	8003d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	e003      	b.n	8003d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d5c:	e02a      	b.n	8003db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f840 	bl	8003dee <UART_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e036      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	3302      	adds	r3, #2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e007      	b.n	8003da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1cf      	bne.n	8003d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f810 	bl	8003dee <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b090      	sub	sp, #64	; 0x40
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	603b      	str	r3, [r7, #0]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfe:	e050      	b.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e06:	d04c      	beq.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	f7fd fd99 	bl	8001944 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d241      	bcs.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	330c      	adds	r3, #12
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e3e:	637a      	str	r2, [r7, #52]	; 0x34
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e5      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	613b      	str	r3, [r7, #16]
   return(result);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e72:	623a      	str	r2, [r7, #32]
 8003e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	69f9      	ldr	r1, [r7, #28]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e5      	bne.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e00f      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d09f      	beq.n	8003e00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3740      	adds	r7, #64	; 0x40
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed0:	b0c0      	sub	sp, #256	; 0x100
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	68d9      	ldr	r1, [r3, #12]
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	ea40 0301 	orr.w	r3, r0, r1
 8003ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f24:	f021 010c 	bic.w	r1, r1, #12
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f32:	430b      	orrs	r3, r1
 8003f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	6999      	ldr	r1, [r3, #24]
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	ea40 0301 	orr.w	r3, r0, r1
 8003f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b8f      	ldr	r3, [pc, #572]	; (8004198 <UART_SetConfig+0x2cc>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d005      	beq.n	8003f6c <UART_SetConfig+0xa0>
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b8d      	ldr	r3, [pc, #564]	; (800419c <UART_SetConfig+0x2d0>)
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d104      	bne.n	8003f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f6c:	f7ff fb9a 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8003f70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f74:	e003      	b.n	8003f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f76:	f7ff fb81 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8003f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f88:	f040 810c 	bne.w	80041a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f90:	2200      	movs	r2, #0
 8003f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	1891      	adds	r1, r2, r2
 8003fa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fae:	4621      	mov	r1, r4
 8003fb0:	eb12 0801 	adds.w	r8, r2, r1
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb43 0901 	adc.w	r9, r3, r1
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fce:	4690      	mov	r8, r2
 8003fd0:	4699      	mov	r9, r3
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	eb18 0303 	adds.w	r3, r8, r3
 8003fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fdc:	462b      	mov	r3, r5
 8003fde:	eb49 0303 	adc.w	r3, r9, r3
 8003fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	18db      	adds	r3, r3, r3
 8003ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8004000:	4613      	mov	r3, r2
 8004002:	eb42 0303 	adc.w	r3, r2, r3
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
 8004008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800400c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004010:	f7fc fe42 	bl	8000c98 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <UART_SetConfig+0x2d4>)
 800401a:	fba3 2302 	umull	r2, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	011c      	lsls	r4, r3, #4
 8004022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004026:	2200      	movs	r2, #0
 8004028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800402c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	1891      	adds	r1, r2, r2
 800403a:	64b9      	str	r1, [r7, #72]	; 0x48
 800403c:	415b      	adcs	r3, r3
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004044:	4641      	mov	r1, r8
 8004046:	eb12 0a01 	adds.w	sl, r2, r1
 800404a:	4649      	mov	r1, r9
 800404c:	eb43 0b01 	adc.w	fp, r3, r1
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800405c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004064:	4692      	mov	sl, r2
 8004066:	469b      	mov	fp, r3
 8004068:	4643      	mov	r3, r8
 800406a:	eb1a 0303 	adds.w	r3, sl, r3
 800406e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004072:	464b      	mov	r3, r9
 8004074:	eb4b 0303 	adc.w	r3, fp, r3
 8004078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004088:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800408c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004090:	460b      	mov	r3, r1
 8004092:	18db      	adds	r3, r3, r3
 8004094:	643b      	str	r3, [r7, #64]	; 0x40
 8004096:	4613      	mov	r3, r2
 8004098:	eb42 0303 	adc.w	r3, r2, r3
 800409c:	647b      	str	r3, [r7, #68]	; 0x44
 800409e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040a6:	f7fc fdf7 	bl	8000c98 <__aeabi_uldivmod>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <UART_SetConfig+0x2d4>)
 80040b2:	fba3 2301 	umull	r2, r3, r3, r1
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2264      	movs	r2, #100	; 0x64
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	1acb      	subs	r3, r1, r3
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040c6:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <UART_SetConfig+0x2d4>)
 80040c8:	fba3 2302 	umull	r2, r3, r3, r2
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040d4:	441c      	add	r4, r3
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80040f0:	415b      	adcs	r3, r3
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040f8:	4641      	mov	r1, r8
 80040fa:	1851      	adds	r1, r2, r1
 80040fc:	6339      	str	r1, [r7, #48]	; 0x30
 80040fe:	4649      	mov	r1, r9
 8004100:	414b      	adcs	r3, r1
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004110:	4659      	mov	r1, fp
 8004112:	00cb      	lsls	r3, r1, #3
 8004114:	4651      	mov	r1, sl
 8004116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800411a:	4651      	mov	r1, sl
 800411c:	00ca      	lsls	r2, r1, #3
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	4603      	mov	r3, r0
 8004124:	4642      	mov	r2, r8
 8004126:	189b      	adds	r3, r3, r2
 8004128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800412c:	464b      	mov	r3, r9
 800412e:	460a      	mov	r2, r1
 8004130:	eb42 0303 	adc.w	r3, r2, r3
 8004134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004144:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800414c:	460b      	mov	r3, r1
 800414e:	18db      	adds	r3, r3, r3
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
 8004152:	4613      	mov	r3, r2
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800415e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004162:	f7fc fd99 	bl	8000c98 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <UART_SetConfig+0x2d4>)
 800416c:	fba3 1302 	umull	r1, r3, r3, r2
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	2164      	movs	r1, #100	; 0x64
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	3332      	adds	r3, #50	; 0x32
 800417e:	4a08      	ldr	r2, [pc, #32]	; (80041a0 <UART_SetConfig+0x2d4>)
 8004180:	fba2 2303 	umull	r2, r3, r2, r3
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	f003 0207 	and.w	r2, r3, #7
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4422      	add	r2, r4
 8004192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004194:	e105      	b.n	80043a2 <UART_SetConfig+0x4d6>
 8004196:	bf00      	nop
 8004198:	40011000 	.word	0x40011000
 800419c:	40011400 	.word	0x40011400
 80041a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a8:	2200      	movs	r2, #0
 80041aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041b6:	4642      	mov	r2, r8
 80041b8:	464b      	mov	r3, r9
 80041ba:	1891      	adds	r1, r2, r2
 80041bc:	6239      	str	r1, [r7, #32]
 80041be:	415b      	adcs	r3, r3
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041c6:	4641      	mov	r1, r8
 80041c8:	1854      	adds	r4, r2, r1
 80041ca:	4649      	mov	r1, r9
 80041cc:	eb43 0501 	adc.w	r5, r3, r1
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	00eb      	lsls	r3, r5, #3
 80041da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	18e3      	adds	r3, r4, r3
 80041e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041ec:	464b      	mov	r3, r9
 80041ee:	eb45 0303 	adc.w	r3, r5, r3
 80041f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004212:	4629      	mov	r1, r5
 8004214:	008b      	lsls	r3, r1, #2
 8004216:	4621      	mov	r1, r4
 8004218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421c:	4621      	mov	r1, r4
 800421e:	008a      	lsls	r2, r1, #2
 8004220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004224:	f7fc fd38 	bl	8000c98 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4b60      	ldr	r3, [pc, #384]	; (80043b0 <UART_SetConfig+0x4e4>)
 800422e:	fba3 2302 	umull	r2, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	011c      	lsls	r4, r3, #4
 8004236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	1891      	adds	r1, r2, r2
 800424e:	61b9      	str	r1, [r7, #24]
 8004250:	415b      	adcs	r3, r3
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004258:	4641      	mov	r1, r8
 800425a:	1851      	adds	r1, r2, r1
 800425c:	6139      	str	r1, [r7, #16]
 800425e:	4649      	mov	r1, r9
 8004260:	414b      	adcs	r3, r1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004270:	4659      	mov	r1, fp
 8004272:	00cb      	lsls	r3, r1, #3
 8004274:	4651      	mov	r1, sl
 8004276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427a:	4651      	mov	r1, sl
 800427c:	00ca      	lsls	r2, r1, #3
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	4603      	mov	r3, r0
 8004284:	4642      	mov	r2, r8
 8004286:	189b      	adds	r3, r3, r2
 8004288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800428c:	464b      	mov	r3, r9
 800428e:	460a      	mov	r2, r1
 8004290:	eb42 0303 	adc.w	r3, r2, r3
 8004294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80042a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042b0:	4649      	mov	r1, r9
 80042b2:	008b      	lsls	r3, r1, #2
 80042b4:	4641      	mov	r1, r8
 80042b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ba:	4641      	mov	r1, r8
 80042bc:	008a      	lsls	r2, r1, #2
 80042be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042c2:	f7fc fce9 	bl	8000c98 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4b39      	ldr	r3, [pc, #228]	; (80043b0 <UART_SetConfig+0x4e4>)
 80042cc:	fba3 1302 	umull	r1, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2164      	movs	r1, #100	; 0x64
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	3332      	adds	r3, #50	; 0x32
 80042de:	4a34      	ldr	r2, [pc, #208]	; (80043b0 <UART_SetConfig+0x4e4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ea:	441c      	add	r4, r3
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	673b      	str	r3, [r7, #112]	; 0x70
 80042f4:	677a      	str	r2, [r7, #116]	; 0x74
 80042f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042fa:	4642      	mov	r2, r8
 80042fc:	464b      	mov	r3, r9
 80042fe:	1891      	adds	r1, r2, r2
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	415b      	adcs	r3, r3
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800430a:	4641      	mov	r1, r8
 800430c:	1851      	adds	r1, r2, r1
 800430e:	6039      	str	r1, [r7, #0]
 8004310:	4649      	mov	r1, r9
 8004312:	414b      	adcs	r3, r1
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004322:	4659      	mov	r1, fp
 8004324:	00cb      	lsls	r3, r1, #3
 8004326:	4651      	mov	r1, sl
 8004328:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432c:	4651      	mov	r1, sl
 800432e:	00ca      	lsls	r2, r1, #3
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	4603      	mov	r3, r0
 8004336:	4642      	mov	r2, r8
 8004338:	189b      	adds	r3, r3, r2
 800433a:	66bb      	str	r3, [r7, #104]	; 0x68
 800433c:	464b      	mov	r3, r9
 800433e:	460a      	mov	r2, r1
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	663b      	str	r3, [r7, #96]	; 0x60
 8004350:	667a      	str	r2, [r7, #100]	; 0x64
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800435e:	4649      	mov	r1, r9
 8004360:	008b      	lsls	r3, r1, #2
 8004362:	4641      	mov	r1, r8
 8004364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004368:	4641      	mov	r1, r8
 800436a:	008a      	lsls	r2, r1, #2
 800436c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004370:	f7fc fc92 	bl	8000c98 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <UART_SetConfig+0x4e4>)
 800437a:	fba3 1302 	umull	r1, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2164      	movs	r1, #100	; 0x64
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	3332      	adds	r3, #50	; 0x32
 800438c:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <UART_SetConfig+0x4e4>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	f003 020f 	and.w	r2, r3, #15
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4422      	add	r2, r4
 80043a0:	609a      	str	r2, [r3, #8]
}
 80043a2:	bf00      	nop
 80043a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	51eb851f 	.word	0x51eb851f

080043b4 <__NVIC_SetPriority>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	6039      	str	r1, [r7, #0]
 80043be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	db0a      	blt.n	80043de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	490c      	ldr	r1, [pc, #48]	; (8004400 <__NVIC_SetPriority+0x4c>)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	0112      	lsls	r2, r2, #4
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	440b      	add	r3, r1
 80043d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043dc:	e00a      	b.n	80043f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	4908      	ldr	r1, [pc, #32]	; (8004404 <__NVIC_SetPriority+0x50>)
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	3b04      	subs	r3, #4
 80043ec:	0112      	lsls	r2, r2, #4
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	440b      	add	r3, r1
 80043f2:	761a      	strb	r2, [r3, #24]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	e000e100 	.word	0xe000e100
 8004404:	e000ed00 	.word	0xe000ed00

08004408 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <SysTick_Handler+0x1c>)
 800440e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004410:	f001 fdaa 	bl	8005f68 <xTaskGetSchedulerState>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800441a:	f002 fb95 	bl	8006b48 <xPortSysTickHandler>
  }
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	e000e010 	.word	0xe000e010

08004428 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800442c:	2100      	movs	r1, #0
 800442e:	f06f 0004 	mvn.w	r0, #4
 8004432:	f7ff ffbf 	bl	80043b4 <__NVIC_SetPriority>
#endif
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	603b      	str	r3, [r7, #0]
  return(result);
 8004448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800444e:	f06f 0305 	mvn.w	r3, #5
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e00c      	b.n	8004470 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <osKernelInitialize+0x44>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <osKernelInitialize+0x44>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004464:	2300      	movs	r3, #0
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	e002      	b.n	8004470 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800446e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004470:	687b      	ldr	r3, [r7, #4]
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	200002fc 	.word	0x200002fc

08004484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800448a:	f3ef 8305 	mrs	r3, IPSR
 800448e:	603b      	str	r3, [r7, #0]
  return(result);
 8004490:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004496:	f06f 0305 	mvn.w	r3, #5
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	e010      	b.n	80044c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <osKernelStart+0x48>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d109      	bne.n	80044ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044a6:	f7ff ffbf 	bl	8004428 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <osKernelStart+0x48>)
 80044ac:	2202      	movs	r2, #2
 80044ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044b0:	f001 f912 	bl	80056d8 <vTaskStartScheduler>
      stat = osOK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e002      	b.n	80044c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044c0:	687b      	ldr	r3, [r7, #4]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200002fc 	.word	0x200002fc

080044d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af04      	add	r7, sp, #16
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e0:	f3ef 8305 	mrs	r3, IPSR
 80044e4:	617b      	str	r3, [r7, #20]
  return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d17e      	bne.n	80045ea <osThreadNew+0x11a>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d07b      	beq.n	80045ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044f6:	2318      	movs	r3, #24
 80044f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004502:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d045      	beq.n	8004596 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <osThreadNew+0x48>
        name = attr->name;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <osThreadNew+0x6e>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b38      	cmp	r3, #56	; 0x38
 8004530:	d805      	bhi.n	800453e <osThreadNew+0x6e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <osThreadNew+0x72>
        return (NULL);
 800453e:	2300      	movs	r3, #0
 8004540:	e054      	b.n	80045ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <osThreadNew+0xa8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b5b      	cmp	r3, #91	; 0x5b
 8004560:	d90a      	bls.n	8004578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <osThreadNew+0xa8>
        mem = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e010      	b.n	800459a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10c      	bne.n	800459a <osThreadNew+0xca>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d108      	bne.n	800459a <osThreadNew+0xca>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <osThreadNew+0xca>
          mem = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e001      	b.n	800459a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d110      	bne.n	80045c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045a8:	9202      	str	r2, [sp, #8]
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 feb8 	bl	800532c <xTaskCreateStatic>
 80045bc:	4603      	mov	r3, r0
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e013      	b.n	80045ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d110      	bne.n	80045ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	f107 0310 	add.w	r3, r7, #16
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 ff03 	bl	80053e6 <xTaskCreate>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d001      	beq.n	80045ea <osThreadNew+0x11a>
            hTask = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045ea:	693b      	ldr	r3, [r7, #16]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3728      	adds	r7, #40	; 0x28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045fc:	f3ef 8305 	mrs	r3, IPSR
 8004600:	60bb      	str	r3, [r7, #8]
  return(result);
 8004602:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <osDelay+0x1c>
    stat = osErrorISR;
 8004608:	f06f 0305 	mvn.w	r3, #5
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e007      	b.n	8004620 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <osDelay+0x2c>
      vTaskDelay(ticks);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 f828 	bl	8005670 <vTaskDelay>
    }
  }

  return (stat);
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800462a:	b580      	push	{r7, lr}
 800462c:	b08a      	sub	sp, #40	; 0x28
 800462e:	af02      	add	r7, sp, #8
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	613b      	str	r3, [r7, #16]
  return(result);
 8004640:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004642:	2b00      	cmp	r3, #0
 8004644:	d15f      	bne.n	8004706 <osMessageQueueNew+0xdc>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d05c      	beq.n	8004706 <osMessageQueueNew+0xdc>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d059      	beq.n	8004706 <osMessageQueueNew+0xdc>
    mem = -1;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d029      	beq.n	80046b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <osMessageQueueNew+0x62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b4f      	cmp	r3, #79	; 0x4f
 800466c:	d90e      	bls.n	800468c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <osMessageQueueNew+0x62>
        mem = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e014      	b.n	80046b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d110      	bne.n	80046b6 <osMessageQueueNew+0x8c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <osMessageQueueNew+0x8c>
          mem = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e001      	b.n	80046b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10b      	bne.n	80046d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2100      	movs	r1, #0
 80046c6:	9100      	str	r1, [sp, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f970 	bl	80049b0 <xQueueGenericCreateStatic>
 80046d0:	61f8      	str	r0, [r7, #28]
 80046d2:	e008      	b.n	80046e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80046da:	2200      	movs	r2, #0
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f9de 	bl	8004aa0 <xQueueGenericCreate>
 80046e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00c      	beq.n	8004706 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <osMessageQueueNew+0xd0>
        name = attr->name;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e001      	b.n	80046fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80046fe:	6979      	ldr	r1, [r7, #20]
 8004700:	69f8      	ldr	r0, [r7, #28]
 8004702:	f000 fdb5 	bl	8005270 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004706:	69fb      	ldr	r3, [r7, #28]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3720      	adds	r7, #32
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a07      	ldr	r2, [pc, #28]	; (800473c <vApplicationGetIdleTaskMemory+0x2c>)
 8004720:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4a06      	ldr	r2, [pc, #24]	; (8004740 <vApplicationGetIdleTaskMemory+0x30>)
 8004726:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	601a      	str	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000300 	.word	0x20000300
 8004740:	2000035c 	.word	0x2000035c

08004744 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a07      	ldr	r2, [pc, #28]	; (8004770 <vApplicationGetTimerTaskMemory+0x2c>)
 8004754:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a06      	ldr	r2, [pc, #24]	; (8004774 <vApplicationGetTimerTaskMemory+0x30>)
 800475a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	2000055c 	.word	0x2000055c
 8004774:	200005b8 	.word	0x200005b8

08004778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f103 0208 	add.w	r2, r3, #8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f103 0208 	add.w	r2, r3, #8
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f103 0208 	add.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004830:	d103      	bne.n	800483a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00c      	b.n	8004854 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3308      	adds	r3, #8
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e002      	b.n	8004848 <vListInsert+0x2e>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d2f6      	bcs.n	8004842 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6892      	ldr	r2, [r2, #8]
 80048a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6852      	ldr	r2, [r2, #4]
 80048ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d103      	bne.n	80048c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800490a:	f002 f88b 	bl	8006a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	441a      	add	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493a:	3b01      	subs	r3, #1
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	22ff      	movs	r2, #255	; 0xff
 800494e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	22ff      	movs	r2, #255	; 0xff
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d114      	bne.n	800498a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01a      	beq.n	800499e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3310      	adds	r3, #16
 800496c:	4618      	mov	r0, r3
 800496e:	f001 f93d 	bl	8005bec <xTaskRemoveFromEventList>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <xQueueGenericReset+0xcc>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	e009      	b.n	800499e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3310      	adds	r3, #16
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fef2 	bl	8004778 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3324      	adds	r3, #36	; 0x24
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff feed 	bl	8004778 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800499e:	f002 f871 	bl	8006a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08e      	sub	sp, #56	; 0x38
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10a      	bne.n	80049da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <xQueueGenericCreateStatic+0x52>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <xQueueGenericCreateStatic+0x56>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <xQueueGenericCreateStatic+0x58>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <xQueueGenericCreateStatic+0x7e>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <xQueueGenericCreateStatic+0x82>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericCreateStatic+0x84>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	61fb      	str	r3, [r7, #28]
}
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a4e:	2350      	movs	r3, #80	; 0x50
 8004a50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b50      	cmp	r3, #80	; 0x50
 8004a56:	d00a      	beq.n	8004a6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61bb      	str	r3, [r7, #24]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f83f 	bl	8004b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3730      	adds	r7, #48	; 0x30
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	613b      	str	r3, [r7, #16]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3350      	adds	r3, #80	; 0x50
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f002 f8c5 	bl	8006c68 <pvPortMalloc>
 8004ade:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d011      	beq.n	8004b0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3350      	adds	r3, #80	; 0x50
 8004aee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004af8:	79fa      	ldrb	r2, [r7, #7]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f805 	bl	8004b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e002      	b.n	8004b36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b42:	2101      	movs	r1, #1
 8004b44:	69b8      	ldr	r0, [r7, #24]
 8004b46:	f7ff fecb 	bl	80048e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08e      	sub	sp, #56	; 0x38
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <xQueueGenericSend+0x32>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <xQueueGenericSend+0x40>
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <xQueueGenericSend+0x44>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <xQueueGenericSend+0x46>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <xQueueGenericSend+0x60>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d103      	bne.n	8004bca <xQueueGenericSend+0x6e>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericSend+0x72>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericSend+0x74>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericSend+0x8e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	623b      	str	r3, [r7, #32]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bea:	f001 f9bd 	bl	8005f68 <xTaskGetSchedulerState>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <xQueueGenericSend+0x9e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <xQueueGenericSend+0xa2>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <xQueueGenericSend+0xa4>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericSend+0xbe>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	61fb      	str	r3, [r7, #28]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c1a:	f001 ff03 	bl	8006a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <xQueueGenericSend+0xd4>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d129      	bne.n	8004c84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c36:	f000 fa0b 	bl	8005050 <prvCopyDataToQueue>
 8004c3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d010      	beq.n	8004c66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	3324      	adds	r3, #36	; 0x24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 ffcf 	bl	8005bec <xTaskRemoveFromEventList>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c54:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <xQueueGenericSend+0x1f8>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	e00a      	b.n	8004c7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <xQueueGenericSend+0x1f8>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c7c:	f001 ff02 	bl	8006a84 <vPortExitCritical>
				return pdPASS;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e063      	b.n	8004d4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c8a:	f001 fefb 	bl	8006a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e05c      	b.n	8004d4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 f809 	bl	8005cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ca6:	f001 feed 	bl	8006a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004caa:	f000 fd7b 	bl	80057a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cae:	f001 feb9 	bl	8006a24 <vPortEnterCritical>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	d103      	bne.n	8004cc8 <xQueueGenericSend+0x16c>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd4:	d103      	bne.n	8004cde <xQueueGenericSend+0x182>
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cde:	f001 fed1 	bl	8006a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce2:	1d3a      	adds	r2, r7, #4
 8004ce4:	f107 0314 	add.w	r3, r7, #20
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fff8 	bl	8005ce0 <xTaskCheckForTimeOut>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d124      	bne.n	8004d40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf8:	f000 faa2 	bl	8005240 <prvIsQueueFull>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	3310      	adds	r3, #16
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 ff1e 	bl	8005b4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d12:	f000 fa2d 	bl	8005170 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d16:	f000 fd53 	bl	80057c0 <xTaskResumeAll>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f af7c 	bne.w	8004c1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004d22:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <xQueueGenericSend+0x1f8>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	e772      	b.n	8004c1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d36:	f000 fa1b 	bl	8005170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d3a:	f000 fd41 	bl	80057c0 <xTaskResumeAll>
 8004d3e:	e76c      	b.n	8004c1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d42:	f000 fa15 	bl	8005170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d46:	f000 fd3b 	bl	80057c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3738      	adds	r7, #56	; 0x38
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b090      	sub	sp, #64	; 0x40
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <xQueueGenericSendFromISR+0x3c>
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <xQueueGenericSendFromISR+0x40>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <xQueueGenericSendFromISR+0x42>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d103      	bne.n	8004dc2 <xQueueGenericSendFromISR+0x6a>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <xQueueGenericSendFromISR+0x6e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <xQueueGenericSendFromISR+0x70>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	623b      	str	r3, [r7, #32]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004de2:	f001 ff01 	bl	8006be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004de6:	f3ef 8211 	mrs	r2, BASEPRI
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	61fa      	str	r2, [r7, #28]
 8004dfc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <xQueueGenericSendFromISR+0xbc>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d12f      	bne.n	8004e74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e2a:	f000 f911 	bl	8005050 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e36:	d112      	bne.n	8004e5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d016      	beq.n	8004e6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	3324      	adds	r3, #36	; 0x24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fed1 	bl	8005bec <xTaskRemoveFromEventList>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e007      	b.n	8004e6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e62:	3301      	adds	r3, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	b25a      	sxtb	r2, r3
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e72:	e001      	b.n	8004e78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3740      	adds	r7, #64	; 0x40
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	; 0x30
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <xQueueReceive+0x30>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	623b      	str	r3, [r7, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <xQueueReceive+0x3e>
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <xQueueReceive+0x42>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <xQueueReceive+0x44>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xQueueReceive+0x5e>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	61fb      	str	r3, [r7, #28]
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eee:	f001 f83b 	bl	8005f68 <xTaskGetSchedulerState>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <xQueueReceive+0x6e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueReceive+0x72>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueReceive+0x74>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueReceive+0x8e>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	61bb      	str	r3, [r7, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f1e:	f001 fd81 	bl	8006a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01f      	beq.n	8004f6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f32:	f000 f8f7 	bl	8005124 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1e5a      	subs	r2, r3, #1
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00f      	beq.n	8004f66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	3310      	adds	r3, #16
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fe4e 	bl	8005bec <xTaskRemoveFromEventList>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f56:	4b3d      	ldr	r3, [pc, #244]	; (800504c <xQueueReceive+0x1bc>)
 8004f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f66:	f001 fd8d 	bl	8006a84 <vPortExitCritical>
				return pdPASS;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e069      	b.n	8005042 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f74:	f001 fd86 	bl	8006a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e062      	b.n	8005042 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fe94 	bl	8005cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f90:	f001 fd78 	bl	8006a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f94:	f000 fc06 	bl	80057a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f98:	f001 fd44 	bl	8006a24 <vPortEnterCritical>
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa2:	b25b      	sxtb	r3, r3
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa8:	d103      	bne.n	8004fb2 <xQueueReceive+0x122>
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fbe:	d103      	bne.n	8004fc8 <xQueueReceive+0x138>
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc8:	f001 fd5c 	bl	8006a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fcc:	1d3a      	adds	r2, r7, #4
 8004fce:	f107 0310 	add.w	r3, r7, #16
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fe83 	bl	8005ce0 <xTaskCheckForTimeOut>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d123      	bne.n	8005028 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe2:	f000 f917 	bl	8005214 <prvIsQueueEmpty>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	3324      	adds	r3, #36	; 0x24
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fda9 	bl	8005b4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffc:	f000 f8b8 	bl	8005170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005000:	f000 fbde 	bl	80057c0 <xTaskResumeAll>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d189      	bne.n	8004f1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <xQueueReceive+0x1bc>)
 800500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	e780      	b.n	8004f1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800501c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800501e:	f000 f8a7 	bl	8005170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005022:	f000 fbcd 	bl	80057c0 <xTaskResumeAll>
 8005026:	e77a      	b.n	8004f1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800502a:	f000 f8a1 	bl	8005170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800502e:	f000 fbc7 	bl	80057c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005034:	f000 f8ee 	bl	8005214 <prvIsQueueEmpty>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	f43f af6f 	beq.w	8004f1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005040:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005042:	4618      	mov	r0, r3
 8005044:	3730      	adds	r7, #48	; 0x30
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	e000ed04 	.word	0xe000ed04

08005050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d14d      	bne.n	8005112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 ff92 	bl	8005fa4 <xTaskPriorityDisinherit>
 8005080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	e043      	b.n	8005112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d119      	bne.n	80050c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6858      	ldr	r0, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	461a      	mov	r2, r3
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	f001 fff8 	bl	8007090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	441a      	add	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d32b      	bcc.n	8005112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e026      	b.n	8005112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68d8      	ldr	r0, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	461a      	mov	r2, r3
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	f001 ffde 	bl	8007090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	425b      	negs	r3, r3
 80050de:	441a      	add	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d207      	bcs.n	8005100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	425b      	negs	r3, r3
 80050fa:	441a      	add	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d105      	bne.n	8005112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3b01      	subs	r3, #1
 8005110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800511a:	697b      	ldr	r3, [r7, #20]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d018      	beq.n	8005168 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	441a      	add	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	d303      	bcc.n	8005158 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68d9      	ldr	r1, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	461a      	mov	r2, r3
 8005162:	6838      	ldr	r0, [r7, #0]
 8005164:	f001 ff94 	bl	8007090 <memcpy>
	}
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005178:	f001 fc54 	bl	8006a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005184:	e011      	b.n	80051aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d012      	beq.n	80051b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3324      	adds	r3, #36	; 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd2a 	bl	8005bec <xTaskRemoveFromEventList>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800519e:	f000 fe01 	bl	8005da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dce9      	bgt.n	8005186 <prvUnlockQueue+0x16>
 80051b2:	e000      	b.n	80051b6 <prvUnlockQueue+0x46>
					break;
 80051b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	22ff      	movs	r2, #255	; 0xff
 80051ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051be:	f001 fc61 	bl	8006a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051c2:	f001 fc2f 	bl	8006a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ce:	e011      	b.n	80051f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3310      	adds	r3, #16
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fd05 	bl	8005bec <xTaskRemoveFromEventList>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051e8:	f000 fddc 	bl	8005da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dce9      	bgt.n	80051d0 <prvUnlockQueue+0x60>
 80051fc:	e000      	b.n	8005200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	22ff      	movs	r2, #255	; 0xff
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005208:	f001 fc3c 	bl	8006a84 <vPortExitCritical>
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800521c:	f001 fc02 	bl	8006a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e001      	b.n	8005232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005232:	f001 fc27 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005248:	f001 fbec 	bl	8006a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	429a      	cmp	r2, r3
 8005256:	d102      	bne.n	800525e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e001      	b.n	8005262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f001 fc0f 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e014      	b.n	80052aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005280:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <vQueueAddToRegistry+0x50>)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800528c:	490c      	ldr	r1, [pc, #48]	; (80052c0 <vQueueAddToRegistry+0x50>)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <vQueueAddToRegistry+0x50>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052a2:	e006      	b.n	80052b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b07      	cmp	r3, #7
 80052ae:	d9e7      	bls.n	8005280 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	200009b8 	.word	0x200009b8

080052c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052d4:	f001 fba6 	bl	8006a24 <vPortEnterCritical>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052de:	b25b      	sxtb	r3, r3
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e4:	d103      	bne.n	80052ee <vQueueWaitForMessageRestricted+0x2a>
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f4:	b25b      	sxtb	r3, r3
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fa:	d103      	bne.n	8005304 <vQueueWaitForMessageRestricted+0x40>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005304:	f001 fbbe 	bl	8006a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3324      	adds	r3, #36	; 0x24
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fc3b 	bl	8005b94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	f7ff ff26 	bl	8005170 <prvUnlockQueue>
	}
 8005324:	bf00      	nop
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08e      	sub	sp, #56	; 0x38
 8005330:	af04      	add	r7, sp, #16
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	623b      	str	r3, [r7, #32]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xTaskCreateStatic+0x46>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	61fb      	str	r3, [r7, #28]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005372:	235c      	movs	r3, #92	; 0x5c
 8005374:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b5c      	cmp	r3, #92	; 0x5c
 800537a:	d00a      	beq.n	8005392 <xTaskCreateStatic+0x66>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	61bb      	str	r3, [r7, #24]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005392:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01e      	beq.n	80053d8 <xTaskCreateStatic+0xac>
 800539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053b2:	2300      	movs	r3, #0
 80053b4:	9303      	str	r3, [sp, #12]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	9302      	str	r3, [sp, #8]
 80053ba:	f107 0314 	add.w	r3, r7, #20
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f850 	bl	8005470 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053d2:	f000 f8dd 	bl	8005590 <prvAddNewTaskToReadyList>
 80053d6:	e001      	b.n	80053dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
	}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b08c      	sub	sp, #48	; 0x30
 80053ea:	af04      	add	r7, sp, #16
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 fc34 	bl	8006c68 <pvPortMalloc>
 8005400:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00e      	beq.n	8005426 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005408:	205c      	movs	r0, #92	; 0x5c
 800540a:	f001 fc2d 	bl	8006c68 <pvPortMalloc>
 800540e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
 800541c:	e005      	b.n	800542a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800541e:	6978      	ldr	r0, [r7, #20]
 8005420:	f001 fcee 	bl	8006e00 <vPortFree>
 8005424:	e001      	b.n	800542a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d017      	beq.n	8005460 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005438:	88fa      	ldrh	r2, [r7, #6]
 800543a:	2300      	movs	r3, #0
 800543c:	9303      	str	r3, [sp, #12]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	9302      	str	r3, [sp, #8]
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f80e 	bl	8005470 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005454:	69f8      	ldr	r0, [r7, #28]
 8005456:	f000 f89b 	bl	8005590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e002      	b.n	8005466 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005464:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005466:	69bb      	ldr	r3, [r7, #24]
	}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	461a      	mov	r2, r3
 8005488:	21a5      	movs	r1, #165	; 0xa5
 800548a:	f001 fe0f 	bl	80070ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005498:	3b01      	subs	r3, #1
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	617b      	str	r3, [r7, #20]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01f      	beq.n	800550e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e012      	b.n	80054fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	7819      	ldrb	r1, [r3, #0]
 80054dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	3334      	adds	r3, #52	; 0x34
 80054e4:	460a      	mov	r2, r1
 80054e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d006      	beq.n	8005502 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b0f      	cmp	r3, #15
 80054fe:	d9e9      	bls.n	80054d4 <prvInitialiseNewTask+0x64>
 8005500:	e000      	b.n	8005504 <prvInitialiseNewTask+0x94>
			{
				break;
 8005502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800550c:	e003      	b.n	8005516 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b37      	cmp	r3, #55	; 0x37
 800551a:	d901      	bls.n	8005520 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800551c:	2337      	movs	r3, #55	; 0x37
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005524:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	3304      	adds	r3, #4
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff f93e 	bl	80047b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	3318      	adds	r3, #24
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff f939 	bl	80047b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	69b8      	ldr	r0, [r7, #24]
 8005570:	f001 f928 	bl	80067c4 <pxPortInitialiseStack>
 8005574:	4602      	mov	r2, r0
 8005576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005586:	bf00      	nop
 8005588:	3720      	adds	r7, #32
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005598:	f001 fa44 	bl	8006a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800559c:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <prvAddNewTaskToReadyList+0xc4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <prvAddNewTaskToReadyList+0xc4>)
 80055a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055a6:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ae:	4a2a      	ldr	r2, [pc, #168]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055b4:	4b27      	ldr	r3, [pc, #156]	; (8005654 <prvAddNewTaskToReadyList+0xc4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d110      	bne.n	80055de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055bc:	f000 fc16 	bl	8005dec <prvInitialiseTaskLists>
 80055c0:	e00d      	b.n	80055de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055c2:	4b26      	ldr	r3, [pc, #152]	; (800565c <prvAddNewTaskToReadyList+0xcc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ca:	4b23      	ldr	r3, [pc, #140]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d802      	bhi.n	80055de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055de:	4b20      	ldr	r3, [pc, #128]	; (8005660 <prvAddNewTaskToReadyList+0xd0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3301      	adds	r3, #1
 80055e4:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <prvAddNewTaskToReadyList+0xd0>)
 80055e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <prvAddNewTaskToReadyList+0xd0>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <prvAddNewTaskToReadyList+0xd4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d903      	bls.n	8005604 <prvAddNewTaskToReadyList+0x74>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <prvAddNewTaskToReadyList+0xd4>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <prvAddNewTaskToReadyList+0xd8>)
 8005612:	441a      	add	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7ff f8d9 	bl	80047d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005620:	f001 fa30 	bl	8006a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <prvAddNewTaskToReadyList+0xcc>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <prvAddNewTaskToReadyList+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	429a      	cmp	r2, r3
 8005638:	d207      	bcs.n	800564a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <prvAddNewTaskToReadyList+0xdc>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000ecc 	.word	0x20000ecc
 8005658:	200009f8 	.word	0x200009f8
 800565c:	20000ed8 	.word	0x20000ed8
 8005660:	20000ee8 	.word	0x20000ee8
 8005664:	20000ed4 	.word	0x20000ed4
 8005668:	200009fc 	.word	0x200009fc
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d017      	beq.n	80056b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005682:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <vTaskDelay+0x60>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <vTaskDelay+0x30>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60bb      	str	r3, [r7, #8]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056a0:	f000 f880 	bl	80057a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056a4:	2100      	movs	r1, #0
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fcea 	bl	8006080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056ac:	f000 f888 	bl	80057c0 <xTaskResumeAll>
 80056b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d107      	bne.n	80056c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vTaskDelay+0x64>)
 80056ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000ef4 	.word	0x20000ef4
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056e6:	463a      	mov	r2, r7
 80056e8:	1d39      	adds	r1, r7, #4
 80056ea:	f107 0308 	add.w	r3, r7, #8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff f80e 	bl	8004710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	9202      	str	r2, [sp, #8]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	2300      	movs	r3, #0
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	2300      	movs	r3, #0
 8005704:	460a      	mov	r2, r1
 8005706:	4921      	ldr	r1, [pc, #132]	; (800578c <vTaskStartScheduler+0xb4>)
 8005708:	4821      	ldr	r0, [pc, #132]	; (8005790 <vTaskStartScheduler+0xb8>)
 800570a:	f7ff fe0f 	bl	800532c <xTaskCreateStatic>
 800570e:	4603      	mov	r3, r0
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <vTaskStartScheduler+0xbc>)
 8005712:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005714:	4b1f      	ldr	r3, [pc, #124]	; (8005794 <vTaskStartScheduler+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800571c:	2301      	movs	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e001      	b.n	8005726 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005722:	2300      	movs	r3, #0
 8005724:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d102      	bne.n	8005732 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800572c:	f000 fcfc 	bl	8006128 <xTimerCreateTimerTask>
 8005730:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d116      	bne.n	8005766 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <vTaskStartScheduler+0xc0>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005752:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005754:	4b11      	ldr	r3, [pc, #68]	; (800579c <vTaskStartScheduler+0xc4>)
 8005756:	2201      	movs	r2, #1
 8005758:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <vTaskStartScheduler+0xc8>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005760:	f001 f8be 	bl	80068e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005764:	e00e      	b.n	8005784 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576c:	d10a      	bne.n	8005784 <vTaskStartScheduler+0xac>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60fb      	str	r3, [r7, #12]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <vTaskStartScheduler+0xaa>
}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	0800b9cc 	.word	0x0800b9cc
 8005790:	08005dbd 	.word	0x08005dbd
 8005794:	20000ef0 	.word	0x20000ef0
 8005798:	20000eec 	.word	0x20000eec
 800579c:	20000ed8 	.word	0x20000ed8
 80057a0:	20000ed0 	.word	0x20000ed0

080057a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <vTaskSuspendAll+0x18>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	4a03      	ldr	r2, [pc, #12]	; (80057bc <vTaskSuspendAll+0x18>)
 80057b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	20000ef4 	.word	0x20000ef4

080057c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057ce:	4b42      	ldr	r3, [pc, #264]	; (80058d8 <xTaskResumeAll+0x118>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <xTaskResumeAll+0x2c>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	603b      	str	r3, [r7, #0]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057ec:	f001 f91a 	bl	8006a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057f0:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <xTaskResumeAll+0x118>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	4a38      	ldr	r2, [pc, #224]	; (80058d8 <xTaskResumeAll+0x118>)
 80057f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fa:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <xTaskResumeAll+0x118>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d162      	bne.n	80058c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <xTaskResumeAll+0x11c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d05e      	beq.n	80058c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800580a:	e02f      	b.n	800586c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <xTaskResumeAll+0x120>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3318      	adds	r3, #24
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff f837 	bl	800488c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3304      	adds	r3, #4
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff f832 	bl	800488c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <xTaskResumeAll+0x124>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d903      	bls.n	800583c <xTaskResumeAll+0x7c>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <xTaskResumeAll+0x124>)
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <xTaskResumeAll+0x128>)
 800584a:	441a      	add	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f7fe ffbd 	bl	80047d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <xTaskResumeAll+0x12c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005866:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <xTaskResumeAll+0x130>)
 8005868:	2201      	movs	r2, #1
 800586a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <xTaskResumeAll+0x120>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1cb      	bne.n	800580c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800587a:	f000 fb55 	bl	8005f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <xTaskResumeAll+0x134>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d010      	beq.n	80058ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800588a:	f000 f847 	bl	800591c <xTaskIncrementTick>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005894:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <xTaskResumeAll+0x130>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3b01      	subs	r3, #1
 800589e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f1      	bne.n	800588a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058a6:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <xTaskResumeAll+0x134>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <xTaskResumeAll+0x130>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <xTaskResumeAll+0x138>)
 80058ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058c8:	f001 f8dc 	bl	8006a84 <vPortExitCritical>

	return xAlreadyYielded;
 80058cc:	68bb      	ldr	r3, [r7, #8]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000ef4 	.word	0x20000ef4
 80058dc:	20000ecc 	.word	0x20000ecc
 80058e0:	20000e8c 	.word	0x20000e8c
 80058e4:	20000ed4 	.word	0x20000ed4
 80058e8:	200009fc 	.word	0x200009fc
 80058ec:	200009f8 	.word	0x200009f8
 80058f0:	20000ee0 	.word	0x20000ee0
 80058f4:	20000edc 	.word	0x20000edc
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <xTaskGetTickCount+0x1c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005908:	687b      	ldr	r3, [r7, #4]
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000ed0 	.word	0x20000ed0

0800591c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005926:	4b4f      	ldr	r3, [pc, #316]	; (8005a64 <xTaskIncrementTick+0x148>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f040 808f 	bne.w	8005a4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005930:	4b4d      	ldr	r3, [pc, #308]	; (8005a68 <xTaskIncrementTick+0x14c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005938:	4a4b      	ldr	r2, [pc, #300]	; (8005a68 <xTaskIncrementTick+0x14c>)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d120      	bne.n	8005986 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005944:	4b49      	ldr	r3, [pc, #292]	; (8005a6c <xTaskIncrementTick+0x150>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <xTaskIncrementTick+0x48>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	603b      	str	r3, [r7, #0]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <xTaskIncrementTick+0x46>
 8005964:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <xTaskIncrementTick+0x150>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <xTaskIncrementTick+0x154>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3f      	ldr	r2, [pc, #252]	; (8005a6c <xTaskIncrementTick+0x150>)
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4a3f      	ldr	r2, [pc, #252]	; (8005a70 <xTaskIncrementTick+0x154>)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	4b3e      	ldr	r3, [pc, #248]	; (8005a74 <xTaskIncrementTick+0x158>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	4a3d      	ldr	r2, [pc, #244]	; (8005a74 <xTaskIncrementTick+0x158>)
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	f000 fad1 	bl	8005f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005986:	4b3c      	ldr	r3, [pc, #240]	; (8005a78 <xTaskIncrementTick+0x15c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	429a      	cmp	r2, r3
 800598e:	d349      	bcc.n	8005a24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005990:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <xTaskIncrementTick+0x150>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800599a:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <xTaskIncrementTick+0x15c>)
 800599c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059a0:	601a      	str	r2, [r3, #0]
					break;
 80059a2:	e03f      	b.n	8005a24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a4:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <xTaskIncrementTick+0x150>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d203      	bcs.n	80059c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059bc:	4a2e      	ldr	r2, [pc, #184]	; (8005a78 <xTaskIncrementTick+0x15c>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059c2:	e02f      	b.n	8005a24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe ff5f 	bl	800488c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3318      	adds	r3, #24
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe ff56 	bl	800488c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <xTaskIncrementTick+0x160>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d903      	bls.n	80059f4 <xTaskIncrementTick+0xd8>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <xTaskIncrementTick+0x160>)
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <xTaskIncrementTick+0x164>)
 8005a02:	441a      	add	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f7fe fee1 	bl	80047d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <xTaskIncrementTick+0x168>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d3b8      	bcc.n	8005990 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a22:	e7b5      	b.n	8005990 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a24:	4b17      	ldr	r3, [pc, #92]	; (8005a84 <xTaskIncrementTick+0x168>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4915      	ldr	r1, [pc, #84]	; (8005a80 <xTaskIncrementTick+0x164>)
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d901      	bls.n	8005a40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a40:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <xTaskIncrementTick+0x16c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e004      	b.n	8005a58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <xTaskIncrementTick+0x170>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <xTaskIncrementTick+0x170>)
 8005a56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a58:	697b      	ldr	r3, [r7, #20]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000ef4 	.word	0x20000ef4
 8005a68:	20000ed0 	.word	0x20000ed0
 8005a6c:	20000e84 	.word	0x20000e84
 8005a70:	20000e88 	.word	0x20000e88
 8005a74:	20000ee4 	.word	0x20000ee4
 8005a78:	20000eec 	.word	0x20000eec
 8005a7c:	20000ed4 	.word	0x20000ed4
 8005a80:	200009fc 	.word	0x200009fc
 8005a84:	200009f8 	.word	0x200009f8
 8005a88:	20000ee0 	.word	0x20000ee0
 8005a8c:	20000edc 	.word	0x20000edc

08005a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a96:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <vTaskSwitchContext+0xa8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a9e:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <vTaskSwitchContext+0xac>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005aa4:	e041      	b.n	8005b2a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005aa6:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <vTaskSwitchContext+0xac>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aac:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <vTaskSwitchContext+0xb0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e010      	b.n	8005ad6 <vTaskSwitchContext+0x46>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	607b      	str	r3, [r7, #4]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <vTaskSwitchContext+0x3e>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	491b      	ldr	r1, [pc, #108]	; (8005b44 <vTaskSwitchContext+0xb4>)
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0e4      	beq.n	8005ab4 <vTaskSwitchContext+0x24>
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <vTaskSwitchContext+0xb4>)
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	605a      	str	r2, [r3, #4]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d104      	bne.n	8005b1a <vTaskSwitchContext+0x8a>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <vTaskSwitchContext+0xb8>)
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vTaskSwitchContext+0xb0>)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6013      	str	r3, [r2, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000ef4 	.word	0x20000ef4
 8005b3c:	20000ee0 	.word	0x20000ee0
 8005b40:	20000ed4 	.word	0x20000ed4
 8005b44:	200009fc 	.word	0x200009fc
 8005b48:	200009f8 	.word	0x200009f8

08005b4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60fb      	str	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <vTaskPlaceOnEventList+0x44>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3318      	adds	r3, #24
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe fe4d 	bl	800481a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b80:	2101      	movs	r1, #1
 8005b82:	6838      	ldr	r0, [r7, #0]
 8005b84:	f000 fa7c 	bl	8006080 <prvAddCurrentTaskToDelayedList>
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200009f8 	.word	0x200009f8

08005b94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	617b      	str	r3, [r7, #20]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7fe fe04 	bl	80047d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	68b8      	ldr	r0, [r7, #8]
 8005bda:	f000 fa51 	bl	8006080 <prvAddCurrentTaskToDelayedList>
	}
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	200009f8 	.word	0x200009f8

08005bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60fb      	str	r3, [r7, #12]
}
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3318      	adds	r3, #24
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fe35 	bl	800488c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c22:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <xTaskRemoveFromEventList+0xb0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11d      	bne.n	8005c66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fe2c 	bl	800488c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <xTaskRemoveFromEventList+0xb4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <xTaskRemoveFromEventList+0x5c>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <xTaskRemoveFromEventList+0xb4>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a13      	ldr	r2, [pc, #76]	; (8005ca4 <xTaskRemoveFromEventList+0xb8>)
 8005c56:	441a      	add	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe fdb7 	bl	80047d2 <vListInsertEnd>
 8005c64:	e005      	b.n	8005c72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	480e      	ldr	r0, [pc, #56]	; (8005ca8 <xTaskRemoveFromEventList+0xbc>)
 8005c6e:	f7fe fdb0 	bl	80047d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <xTaskRemoveFromEventList+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d905      	bls.n	8005c8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <xTaskRemoveFromEventList+0xc4>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e001      	b.n	8005c90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c90:	697b      	ldr	r3, [r7, #20]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000ef4 	.word	0x20000ef4
 8005ca0:	20000ed4 	.word	0x20000ed4
 8005ca4:	200009fc 	.word	0x200009fc
 8005ca8:	20000e8c 	.word	0x20000e8c
 8005cac:	200009f8 	.word	0x200009f8
 8005cb0:	20000ee0 	.word	0x20000ee0

08005cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <vTaskInternalSetTimeOutState+0x24>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <vTaskInternalSetTimeOutState+0x28>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	20000ee4 	.word	0x20000ee4
 8005cdc:	20000ed0 	.word	0x20000ed0

08005ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d22:	f000 fe7f 	bl	8006a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <xTaskCheckForTimeOut+0xbc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d3e:	d102      	bne.n	8005d46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e023      	b.n	8005d8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b15      	ldr	r3, [pc, #84]	; (8005da0 <xTaskCheckForTimeOut+0xc0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d007      	beq.n	8005d62 <xTaskCheckForTimeOut+0x82>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e015      	b.n	8005d8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d20b      	bcs.n	8005d84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff9b 	bl	8005cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e004      	b.n	8005d8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d8e:	f000 fe79 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 8005d92:	69fb      	ldr	r3, [r7, #28]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000ed0 	.word	0x20000ed0
 8005da0:	20000ee4 	.word	0x20000ee4

08005da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005da8:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <vTaskMissedYield+0x14>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
}
 8005dae:	bf00      	nop
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	20000ee0 	.word	0x20000ee0

08005dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dc4:	f000 f852 	bl	8005e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dc8:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <prvIdleTask+0x28>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d9f9      	bls.n	8005dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dd0:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <prvIdleTask+0x2c>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005de0:	e7f0      	b.n	8005dc4 <prvIdleTask+0x8>
 8005de2:	bf00      	nop
 8005de4:	200009fc 	.word	0x200009fc
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	e00c      	b.n	8005e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <prvInitialiseTaskLists+0x60>)
 8005e04:	4413      	add	r3, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fcb6 	bl	8004778 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b37      	cmp	r3, #55	; 0x37
 8005e16:	d9ef      	bls.n	8005df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <prvInitialiseTaskLists+0x64>)
 8005e1a:	f7fe fcad 	bl	8004778 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e1e:	480d      	ldr	r0, [pc, #52]	; (8005e54 <prvInitialiseTaskLists+0x68>)
 8005e20:	f7fe fcaa 	bl	8004778 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e24:	480c      	ldr	r0, [pc, #48]	; (8005e58 <prvInitialiseTaskLists+0x6c>)
 8005e26:	f7fe fca7 	bl	8004778 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e2a:	480c      	ldr	r0, [pc, #48]	; (8005e5c <prvInitialiseTaskLists+0x70>)
 8005e2c:	f7fe fca4 	bl	8004778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e30:	480b      	ldr	r0, [pc, #44]	; (8005e60 <prvInitialiseTaskLists+0x74>)
 8005e32:	f7fe fca1 	bl	8004778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <prvInitialiseTaskLists+0x78>)
 8005e38:	4a05      	ldr	r2, [pc, #20]	; (8005e50 <prvInitialiseTaskLists+0x64>)
 8005e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <prvInitialiseTaskLists+0x7c>)
 8005e3e:	4a05      	ldr	r2, [pc, #20]	; (8005e54 <prvInitialiseTaskLists+0x68>)
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200009fc 	.word	0x200009fc
 8005e50:	20000e5c 	.word	0x20000e5c
 8005e54:	20000e70 	.word	0x20000e70
 8005e58:	20000e8c 	.word	0x20000e8c
 8005e5c:	20000ea0 	.word	0x20000ea0
 8005e60:	20000eb8 	.word	0x20000eb8
 8005e64:	20000e84 	.word	0x20000e84
 8005e68:	20000e88 	.word	0x20000e88

08005e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e72:	e019      	b.n	8005ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e74:	f000 fdd6 	bl	8006a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <prvCheckTasksWaitingTermination+0x50>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fd01 	bl	800488c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <prvCheckTasksWaitingTermination+0x54>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <prvCheckTasksWaitingTermination+0x54>)
 8005e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e9e:	f000 fdf1 	bl	8006a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f810 	bl	8005ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e1      	bne.n	8005e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000ea0 	.word	0x20000ea0
 8005ec0:	20000ecc 	.word	0x20000ecc
 8005ec4:	20000eb4 	.word	0x20000eb4

08005ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d108      	bne.n	8005eec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 ff8e 	bl	8006e00 <vPortFree>
				vPortFree( pxTCB );
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 ff8b 	bl	8006e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005eea:	e018      	b.n	8005f1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d103      	bne.n	8005efe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 ff82 	bl	8006e00 <vPortFree>
	}
 8005efc:	e00f      	b.n	8005f1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d00a      	beq.n	8005f1e <prvDeleteTCB+0x56>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	60fb      	str	r3, [r7, #12]
}
 8005f1a:	bf00      	nop
 8005f1c:	e7fe      	b.n	8005f1c <prvDeleteTCB+0x54>
	}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f2e:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <prvResetNextTaskUnblockTime+0x38>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvResetNextTaskUnblockTime+0x3c>)
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f40:	e008      	b.n	8005f54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f42:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <prvResetNextTaskUnblockTime+0x38>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <prvResetNextTaskUnblockTime+0x3c>)
 8005f52:	6013      	str	r3, [r2, #0]
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	20000e84 	.word	0x20000e84
 8005f64:	20000eec 	.word	0x20000eec

08005f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <xTaskGetSchedulerState+0x34>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f76:	2301      	movs	r3, #1
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e008      	b.n	8005f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <xTaskGetSchedulerState+0x38>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f84:	2302      	movs	r3, #2
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	e001      	b.n	8005f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f8e:	687b      	ldr	r3, [r7, #4]
	}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	20000ed8 	.word	0x20000ed8
 8005fa0:	20000ef4 	.word	0x20000ef4

08005fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d056      	beq.n	8006068 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fba:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <xTaskPriorityDisinherit+0xd0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d00a      	beq.n	8005fda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60fb      	str	r3, [r7, #12]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600a:	429a      	cmp	r2, r3
 800600c:	d02c      	beq.n	8006068 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006012:	2b00      	cmp	r3, #0
 8006014:	d128      	bne.n	8006068 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3304      	adds	r3, #4
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fc36 	bl	800488c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <xTaskPriorityDisinherit+0xd4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d903      	bls.n	8006048 <xTaskPriorityDisinherit+0xa4>
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <xTaskPriorityDisinherit+0xd4>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a09      	ldr	r2, [pc, #36]	; (800607c <xTaskPriorityDisinherit+0xd8>)
 8006056:	441a      	add	r2, r3
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe fbb7 	bl	80047d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006068:	697b      	ldr	r3, [r7, #20]
	}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200009f8 	.word	0x200009f8
 8006078:	20000ed4 	.word	0x20000ed4
 800607c:	200009fc 	.word	0x200009fc

08006080 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800608a:	4b21      	ldr	r3, [pc, #132]	; (8006110 <prvAddCurrentTaskToDelayedList+0x90>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006090:	4b20      	ldr	r3, [pc, #128]	; (8006114 <prvAddCurrentTaskToDelayedList+0x94>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3304      	adds	r3, #4
 8006096:	4618      	mov	r0, r3
 8006098:	f7fe fbf8 	bl	800488c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a2:	d10a      	bne.n	80060ba <prvAddCurrentTaskToDelayedList+0x3a>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060aa:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <prvAddCurrentTaskToDelayedList+0x94>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4819      	ldr	r0, [pc, #100]	; (8006118 <prvAddCurrentTaskToDelayedList+0x98>)
 80060b4:	f7fe fb8d 	bl	80047d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060b8:	e026      	b.n	8006108 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4413      	add	r3, r2
 80060c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d209      	bcs.n	80060e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <prvAddCurrentTaskToDelayedList+0x9c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <prvAddCurrentTaskToDelayedList+0x94>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fe fb9b 	bl	800481a <vListInsert>
}
 80060e4:	e010      	b.n	8006108 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e6:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <prvAddCurrentTaskToDelayedList+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fb91 	bl	800481a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d202      	bcs.n	8006108 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006102:	4a08      	ldr	r2, [pc, #32]	; (8006124 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000ed0 	.word	0x20000ed0
 8006114:	200009f8 	.word	0x200009f8
 8006118:	20000eb8 	.word	0x20000eb8
 800611c:	20000e88 	.word	0x20000e88
 8006120:	20000e84 	.word	0x20000e84
 8006124:	20000eec 	.word	0x20000eec

08006128 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	; 0x28
 800612c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006132:	f000 fb07 	bl	8006744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006136:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <xTimerCreateTimerTask+0x80>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d021      	beq.n	8006182 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006146:	1d3a      	adds	r2, r7, #4
 8006148:	f107 0108 	add.w	r1, r7, #8
 800614c:	f107 030c 	add.w	r3, r7, #12
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe faf7 	bl	8004744 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	9202      	str	r2, [sp, #8]
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	2302      	movs	r3, #2
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	460a      	mov	r2, r1
 8006168:	4910      	ldr	r1, [pc, #64]	; (80061ac <xTimerCreateTimerTask+0x84>)
 800616a:	4811      	ldr	r0, [pc, #68]	; (80061b0 <xTimerCreateTimerTask+0x88>)
 800616c:	f7ff f8de 	bl	800532c <xTaskCreateStatic>
 8006170:	4603      	mov	r3, r0
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <xTimerCreateTimerTask+0x8c>)
 8006174:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006176:	4b0f      	ldr	r3, [pc, #60]	; (80061b4 <xTimerCreateTimerTask+0x8c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800617e:	2301      	movs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	613b      	str	r3, [r7, #16]
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800619e:	697b      	ldr	r3, [r7, #20]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000f28 	.word	0x20000f28
 80061ac:	0800b9d4 	.word	0x0800b9d4
 80061b0:	080062ed 	.word	0x080062ed
 80061b4:	20000f2c 	.word	0x20000f2c

080061b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	; 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	623b      	str	r3, [r7, #32]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <xTimerGenericCommand+0x98>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d02a      	beq.n	8006244 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	dc18      	bgt.n	8006232 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006200:	f7ff feb2 	bl	8005f68 <xTaskGetSchedulerState>
 8006204:	4603      	mov	r3, r0
 8006206:	2b02      	cmp	r3, #2
 8006208:	d109      	bne.n	800621e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <xTimerGenericCommand+0x98>)
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f107 0110 	add.w	r1, r7, #16
 8006212:	2300      	movs	r3, #0
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	f7fe fca1 	bl	8004b5c <xQueueGenericSend>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
 800621c:	e012      	b.n	8006244 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <xTimerGenericCommand+0x98>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	f107 0110 	add.w	r1, r7, #16
 8006226:	2300      	movs	r3, #0
 8006228:	2200      	movs	r2, #0
 800622a:	f7fe fc97 	bl	8004b5c <xQueueGenericSend>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24
 8006230:	e008      	b.n	8006244 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <xTimerGenericCommand+0x98>)
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	f107 0110 	add.w	r1, r7, #16
 800623a:	2300      	movs	r3, #0
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	f7fe fd8b 	bl	8004d58 <xQueueGenericSendFromISR>
 8006242:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006246:	4618      	mov	r0, r3
 8006248:	3728      	adds	r7, #40	; 0x28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000f28 	.word	0x20000f28

08006254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625e:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <prvProcessExpiredTimer+0x94>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3304      	adds	r3, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fb0d 	bl	800488c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d022      	beq.n	80062c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	18d1      	adds	r1, r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	6978      	ldr	r0, [r7, #20]
 800628e:	f000 f8d1 	bl	8006434 <prvInsertTimerInActiveList>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01f      	beq.n	80062d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006298:	2300      	movs	r3, #0
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	2300      	movs	r3, #0
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	2100      	movs	r1, #0
 80062a2:	6978      	ldr	r0, [r7, #20]
 80062a4:	f7ff ff88 	bl	80061b8 <xTimerGenericCommand>
 80062a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d113      	bne.n	80062d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	6978      	ldr	r0, [r7, #20]
 80062de:	4798      	blx	r3
}
 80062e0:	bf00      	nop
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000f20 	.word	0x20000f20

080062ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f4:	f107 0308 	add.w	r3, r7, #8
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 f857 	bl	80063ac <prvGetNextExpireTime>
 80062fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4619      	mov	r1, r3
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f803 	bl	8006310 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800630a:	f000 f8d5 	bl	80064b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800630e:	e7f1      	b.n	80062f4 <prvTimerTask+0x8>

08006310 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800631a:	f7ff fa43 	bl	80057a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800631e:	f107 0308 	add.w	r3, r7, #8
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f866 	bl	80063f4 <prvSampleTimeNow>
 8006328:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d130      	bne.n	8006392 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10a      	bne.n	800634c <prvProcessTimerOrBlockTask+0x3c>
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	429a      	cmp	r2, r3
 800633c:	d806      	bhi.n	800634c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800633e:	f7ff fa3f 	bl	80057c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff ff85 	bl	8006254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800634a:	e024      	b.n	8006396 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d008      	beq.n	8006364 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <prvProcessTimerOrBlockTask+0x90>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <prvProcessTimerOrBlockTask+0x50>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <prvProcessTimerOrBlockTask+0x52>
 8006360:	2300      	movs	r3, #0
 8006362:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <prvProcessTimerOrBlockTask+0x94>)
 8006366:	6818      	ldr	r0, [r3, #0]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	4619      	mov	r1, r3
 8006372:	f7fe ffa7 	bl	80052c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006376:	f7ff fa23 	bl	80057c0 <xTaskResumeAll>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006380:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <prvProcessTimerOrBlockTask+0x98>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
}
 8006390:	e001      	b.n	8006396 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006392:	f7ff fa15 	bl	80057c0 <xTaskResumeAll>
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000f24 	.word	0x20000f24
 80063a4:	20000f28 	.word	0x20000f28
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063b4:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <prvGetNextExpireTime+0x44>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <prvGetNextExpireTime+0x16>
 80063be:	2201      	movs	r2, #1
 80063c0:	e000      	b.n	80063c4 <prvGetNextExpireTime+0x18>
 80063c2:	2200      	movs	r2, #0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <prvGetNextExpireTime+0x44>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e001      	b.n	80063e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063e0:	68fb      	ldr	r3, [r7, #12]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000f20 	.word	0x20000f20

080063f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063fc:	f7ff fa7e 	bl	80058fc <xTaskGetTickCount>
 8006400:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006402:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <prvSampleTimeNow+0x3c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d205      	bcs.n	8006418 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800640c:	f000 f936 	bl	800667c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	e002      	b.n	800641e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800641e:	4a04      	ldr	r2, [pc, #16]	; (8006430 <prvSampleTimeNow+0x3c>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000f30 	.word	0x20000f30

08006434 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d812      	bhi.n	8006480 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006468:	2301      	movs	r3, #1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e01b      	b.n	80064a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <prvInsertTimerInActiveList+0x7c>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fe f9ce 	bl	800481a <vListInsert>
 800647e:	e012      	b.n	80064a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d206      	bcs.n	8006496 <prvInsertTimerInActiveList+0x62>
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	e007      	b.n	80064a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <prvInsertTimerInActiveList+0x80>)
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3304      	adds	r3, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f7fe f9ba 	bl	800481a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064a6:	697b      	ldr	r3, [r7, #20]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000f24 	.word	0x20000f24
 80064b4:	20000f20 	.word	0x20000f20

080064b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08e      	sub	sp, #56	; 0x38
 80064bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064be:	e0ca      	b.n	8006656 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da18      	bge.n	80064f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	3304      	adds	r3, #4
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	61fb      	str	r3, [r7, #28]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ee:	6850      	ldr	r0, [r2, #4]
 80064f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f2:	6892      	ldr	r2, [r2, #8]
 80064f4:	4611      	mov	r1, r2
 80064f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f2c0 80aa 	blt.w	8006654 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	3304      	adds	r3, #4
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe f9bb 	bl	800488c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006516:	463b      	mov	r3, r7
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ff6b 	bl	80063f4 <prvSampleTimeNow>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b09      	cmp	r3, #9
 8006524:	f200 8097 	bhi.w	8006656 <prvProcessReceivedCommands+0x19e>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <prvProcessReceivedCommands+0x78>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006559 	.word	0x08006559
 8006534:	08006559 	.word	0x08006559
 8006538:	08006559 	.word	0x08006559
 800653c:	080065cd 	.word	0x080065cd
 8006540:	080065e1 	.word	0x080065e1
 8006544:	0800662b 	.word	0x0800662b
 8006548:	08006559 	.word	0x08006559
 800654c:	08006559 	.word	0x08006559
 8006550:	080065cd 	.word	0x080065cd
 8006554:	080065e1 	.word	0x080065e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	18d1      	adds	r1, r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006578:	f7ff ff5c 	bl	8006434 <prvInsertTimerInActiveList>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d069      	beq.n	8006656 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006588:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05e      	beq.n	8006656 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	441a      	add	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	2100      	movs	r1, #0
 80065a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065aa:	f7ff fe05 	bl	80061b8 <xTimerGenericCommand>
 80065ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d14f      	bne.n	8006656 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61bb      	str	r3, [r7, #24]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065de:	e03a      	b.n	8006656 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	617b      	str	r3, [r7, #20]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	18d1      	adds	r1, r2, r3
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006624:	f7ff ff06 	bl	8006434 <prvInsertTimerInActiveList>
					break;
 8006628:	e015      	b.n	8006656 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663a:	f000 fbe1 	bl	8006e00 <vPortFree>
 800663e:	e00a      	b.n	8006656 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006652:	e000      	b.n	8006656 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006654:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006656:	4b08      	ldr	r3, [pc, #32]	; (8006678 <prvProcessReceivedCommands+0x1c0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	1d39      	adds	r1, r7, #4
 800665c:	2200      	movs	r2, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fc16 	bl	8004e90 <xQueueReceive>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	f47f af2a 	bne.w	80064c0 <prvProcessReceivedCommands+0x8>
	}
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	3730      	adds	r7, #48	; 0x30
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000f28 	.word	0x20000f28

0800667c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006682:	e048      	b.n	8006716 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006684:	4b2d      	ldr	r3, [pc, #180]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668e:	4b2b      	ldr	r3, [pc, #172]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe f8f5 	bl	800488c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02e      	beq.n	8006716 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d90e      	bls.n	80066e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066d6:	4b19      	ldr	r3, [pc, #100]	; (800673c <prvSwitchTimerLists+0xc0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7fe f89a 	bl	800481a <vListInsert>
 80066e6:	e016      	b.n	8006716 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066e8:	2300      	movs	r3, #0
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	2300      	movs	r3, #0
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	2100      	movs	r1, #0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fd60 	bl	80061b8 <xTimerGenericCommand>
 80066f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	603b      	str	r3, [r7, #0]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1b1      	bne.n	8006684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <prvSwitchTimerLists+0xc4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a04      	ldr	r2, [pc, #16]	; (800673c <prvSwitchTimerLists+0xc0>)
 800672c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800672e:	4a04      	ldr	r2, [pc, #16]	; (8006740 <prvSwitchTimerLists+0xc4>)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	6013      	str	r3, [r2, #0]
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000f20 	.word	0x20000f20
 8006740:	20000f24 	.word	0x20000f24

08006744 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800674a:	f000 f96b 	bl	8006a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d120      	bne.n	8006798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006756:	4814      	ldr	r0, [pc, #80]	; (80067a8 <prvCheckForValidListAndQueue+0x64>)
 8006758:	f7fe f80e 	bl	8004778 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800675c:	4813      	ldr	r0, [pc, #76]	; (80067ac <prvCheckForValidListAndQueue+0x68>)
 800675e:	f7fe f80b 	bl	8004778 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006762:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <prvCheckForValidListAndQueue+0x6c>)
 8006764:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <prvCheckForValidListAndQueue+0x64>)
 8006766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <prvCheckForValidListAndQueue+0x70>)
 800676a:	4a10      	ldr	r2, [pc, #64]	; (80067ac <prvCheckForValidListAndQueue+0x68>)
 800676c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800676e:	2300      	movs	r3, #0
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <prvCheckForValidListAndQueue+0x74>)
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <prvCheckForValidListAndQueue+0x78>)
 8006776:	2110      	movs	r1, #16
 8006778:	200a      	movs	r0, #10
 800677a:	f7fe f919 	bl	80049b0 <xQueueGenericCreateStatic>
 800677e:	4603      	mov	r3, r0
 8006780:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 8006782:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	490b      	ldr	r1, [pc, #44]	; (80067c0 <prvCheckForValidListAndQueue+0x7c>)
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fd6c 	bl	8005270 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006798:	f000 f974 	bl	8006a84 <vPortExitCritical>
}
 800679c:	bf00      	nop
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000f28 	.word	0x20000f28
 80067a8:	20000ef8 	.word	0x20000ef8
 80067ac:	20000f0c 	.word	0x20000f0c
 80067b0:	20000f20 	.word	0x20000f20
 80067b4:	20000f24 	.word	0x20000f24
 80067b8:	20000fd4 	.word	0x20000fd4
 80067bc:	20000f34 	.word	0x20000f34
 80067c0:	0800b9dc 	.word	0x0800b9dc

080067c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b04      	subs	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3b04      	subs	r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067f4:	4a0c      	ldr	r2, [pc, #48]	; (8006828 <pxPortInitialiseStack+0x64>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3b14      	subs	r3, #20
 80067fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3b04      	subs	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f06f 0202 	mvn.w	r2, #2
 8006812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b20      	subs	r3, #32
 8006818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	0800682d 	.word	0x0800682d

0800682c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <prvTaskExitError+0x54>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800683e:	d00a      	beq.n	8006856 <prvTaskExitError+0x2a>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60fb      	str	r3, [r7, #12]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <prvTaskExitError+0x28>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800686a:	bf00      	nop
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0fc      	beq.n	800686c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	2000000c 	.word	0x2000000c
	...

08006890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <pxCurrentTCBConst2>)
 8006892:	6819      	ldr	r1, [r3, #0]
 8006894:	6808      	ldr	r0, [r1, #0]
 8006896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	f380 8809 	msr	PSP, r0
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8811 	msr	BASEPRI, r0
 80068aa:	4770      	bx	lr
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst2>:
 80068b0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068b8:	4808      	ldr	r0, [pc, #32]	; (80068dc <prvPortStartFirstTask+0x24>)
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	f380 8808 	msr	MSP, r0
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8814 	msr	CONTROL, r0
 80068ca:	b662      	cpsie	i
 80068cc:	b661      	cpsie	f
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	df00      	svc	0
 80068d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068da:	bf00      	nop
 80068dc:	e000ed08 	.word	0xe000ed08

080068e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068e6:	4b46      	ldr	r3, [pc, #280]	; (8006a00 <xPortStartScheduler+0x120>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a46      	ldr	r2, [pc, #280]	; (8006a04 <xPortStartScheduler+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d10a      	bne.n	8006906 <xPortStartScheduler+0x26>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	613b      	str	r3, [r7, #16]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006906:	4b3e      	ldr	r3, [pc, #248]	; (8006a00 <xPortStartScheduler+0x120>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3f      	ldr	r2, [pc, #252]	; (8006a08 <xPortStartScheduler+0x128>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d10a      	bne.n	8006926 <xPortStartScheduler+0x46>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <xPortStartScheduler+0x12c>)
 8006928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006948:	b2da      	uxtb	r2, r3
 800694a:	4b31      	ldr	r3, [pc, #196]	; (8006a10 <xPortStartScheduler+0x130>)
 800694c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800694e:	4b31      	ldr	r3, [pc, #196]	; (8006a14 <xPortStartScheduler+0x134>)
 8006950:	2207      	movs	r2, #7
 8006952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006954:	e009      	b.n	800696a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006956:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <xPortStartScheduler+0x134>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	4a2d      	ldr	r2, [pc, #180]	; (8006a14 <xPortStartScheduler+0x134>)
 800695e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d0ef      	beq.n	8006956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006976:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <xPortStartScheduler+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1c3 0307 	rsb	r3, r3, #7
 800697e:	2b04      	cmp	r3, #4
 8006980:	d00a      	beq.n	8006998 <xPortStartScheduler+0xb8>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	60bb      	str	r3, [r7, #8]
}
 8006994:	bf00      	nop
 8006996:	e7fe      	b.n	8006996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006998:	4b1e      	ldr	r3, [pc, #120]	; (8006a14 <xPortStartScheduler+0x134>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <xPortStartScheduler+0x134>)
 80069a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069a2:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <xPortStartScheduler+0x134>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069aa:	4a1a      	ldr	r2, [pc, #104]	; (8006a14 <xPortStartScheduler+0x134>)
 80069ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069b6:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <xPortStartScheduler+0x138>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <xPortStartScheduler+0x138>)
 80069bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <xPortStartScheduler+0x138>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <xPortStartScheduler+0x138>)
 80069c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069ce:	f000 f8dd 	bl	8006b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069d2:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <xPortStartScheduler+0x13c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069d8:	f000 f8fc 	bl	8006bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069dc:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <xPortStartScheduler+0x140>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <xPortStartScheduler+0x140>)
 80069e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069e8:	f7ff ff66 	bl	80068b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069ec:	f7ff f850 	bl	8005a90 <vTaskSwitchContext>
	prvTaskExitError();
 80069f0:	f7ff ff1c 	bl	800682c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	e000ed00 	.word	0xe000ed00
 8006a04:	410fc271 	.word	0x410fc271
 8006a08:	410fc270 	.word	0x410fc270
 8006a0c:	e000e400 	.word	0xe000e400
 8006a10:	20001024 	.word	0x20001024
 8006a14:	20001028 	.word	0x20001028
 8006a18:	e000ed20 	.word	0xe000ed20
 8006a1c:	2000000c 	.word	0x2000000c
 8006a20:	e000ef34 	.word	0xe000ef34

08006a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	607b      	str	r3, [r7, #4]
}
 8006a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <vPortEnterCritical+0x58>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	4a0d      	ldr	r2, [pc, #52]	; (8006a7c <vPortEnterCritical+0x58>)
 8006a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <vPortEnterCritical+0x58>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10f      	bne.n	8006a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <vPortEnterCritical+0x5c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	603b      	str	r3, [r7, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <vPortEnterCritical+0x4a>
	}
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	2000000c 	.word	0x2000000c
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <vPortExitCritical+0x50>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <vPortExitCritical+0x24>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	607b      	str	r3, [r7, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <vPortExitCritical+0x50>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	4a09      	ldr	r2, [pc, #36]	; (8006ad4 <vPortExitCritical+0x50>)
 8006ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <vPortExitCritical+0x50>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <vPortExitCritical+0x42>
 8006aba:	2300      	movs	r3, #0
 8006abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f383 8811 	msr	BASEPRI, r3
}
 8006ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2000000c 	.word	0x2000000c
	...

08006ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ae0:	f3ef 8009 	mrs	r0, PSP
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <pxCurrentTCBConst>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f01e 0f10 	tst.w	lr, #16
 8006af0:	bf08      	it	eq
 8006af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	6010      	str	r0, [r2, #0]
 8006afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b04:	f380 8811 	msr	BASEPRI, r0
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f7fe ffbe 	bl	8005a90 <vTaskSwitchContext>
 8006b14:	f04f 0000 	mov.w	r0, #0
 8006b18:	f380 8811 	msr	BASEPRI, r0
 8006b1c:	bc09      	pop	{r0, r3}
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	6808      	ldr	r0, [r1, #0]
 8006b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b26:	f01e 0f10 	tst.w	lr, #16
 8006b2a:	bf08      	it	eq
 8006b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b30:	f380 8809 	msr	PSP, r0
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	f3af 8000 	nop.w

08006b40 <pxCurrentTCBConst>:
 8006b40:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b62:	f7fe fedb 	bl	800591c <xTaskIncrementTick>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <xPortSysTickHandler+0x40>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortSetupTimerInterrupt+0x34>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <vPortSetupTimerInterrupt+0x38>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <vPortSetupTimerInterrupt+0x3c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	; (8006bcc <vPortSetupTimerInterrupt+0x40>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	099b      	lsrs	r3, r3, #6
 8006ba8:	4a09      	ldr	r2, [pc, #36]	; (8006bd0 <vPortSetupTimerInterrupt+0x44>)
 8006baa:	3b01      	subs	r3, #1
 8006bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <vPortSetupTimerInterrupt+0x34>)
 8006bb0:	2207      	movs	r2, #7
 8006bb2:	601a      	str	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	e000e010 	.word	0xe000e010
 8006bc4:	e000e018 	.word	0xe000e018
 8006bc8:	20000000 	.word	0x20000000
 8006bcc:	10624dd3 	.word	0x10624dd3
 8006bd0:	e000e014 	.word	0xe000e014

08006bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006be4 <vPortEnableVFP+0x10>
 8006bd8:	6801      	ldr	r1, [r0, #0]
 8006bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bde:	6001      	str	r1, [r0, #0]
 8006be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006be2:	bf00      	nop
 8006be4:	e000ed88 	.word	0xe000ed88

08006be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bee:	f3ef 8305 	mrs	r3, IPSR
 8006bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b0f      	cmp	r3, #15
 8006bf8:	d914      	bls.n	8006c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <vPortValidateInterruptPriority+0x70>)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <vPortValidateInterruptPriority+0x74>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	7afa      	ldrb	r2, [r7, #11]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d20a      	bcs.n	8006c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	607b      	str	r3, [r7, #4]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <vPortValidateInterruptPriority+0x78>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <vPortValidateInterruptPriority+0x7c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d90a      	bls.n	8006c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	603b      	str	r3, [r7, #0]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <vPortValidateInterruptPriority+0x60>
	}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	e000e3f0 	.word	0xe000e3f0
 8006c5c:	20001024 	.word	0x20001024
 8006c60:	e000ed0c 	.word	0xe000ed0c
 8006c64:	20001028 	.word	0x20001028

08006c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c74:	f7fe fd96 	bl	80057a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c78:	4b5b      	ldr	r3, [pc, #364]	; (8006de8 <pvPortMalloc+0x180>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c80:	f000 f920 	bl	8006ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c84:	4b59      	ldr	r3, [pc, #356]	; (8006dec <pvPortMalloc+0x184>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f040 8093 	bne.w	8006db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01d      	beq.n	8006cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c98:	2208      	movs	r2, #8
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d014      	beq.n	8006cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	617b      	str	r3, [r7, #20]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d06e      	beq.n	8006db8 <pvPortMalloc+0x150>
 8006cda:	4b45      	ldr	r3, [pc, #276]	; (8006df0 <pvPortMalloc+0x188>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d869      	bhi.n	8006db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ce4:	4b43      	ldr	r3, [pc, #268]	; (8006df4 <pvPortMalloc+0x18c>)
 8006ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ce8:	4b42      	ldr	r3, [pc, #264]	; (8006df4 <pvPortMalloc+0x18c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cee:	e004      	b.n	8006cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d903      	bls.n	8006d0c <pvPortMalloc+0xa4>
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f1      	bne.n	8006cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d0c:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <pvPortMalloc+0x180>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d050      	beq.n	8006db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	4413      	add	r3, r2
 8006d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	2308      	movs	r3, #8
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d91f      	bls.n	8006d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <pvPortMalloc+0xf8>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	613b      	str	r3, [r7, #16]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d72:	69b8      	ldr	r0, [r7, #24]
 8006d74:	f000 f908 	bl	8006f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <pvPortMalloc+0x188>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <pvPortMalloc+0x188>)
 8006d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <pvPortMalloc+0x188>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <pvPortMalloc+0x190>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d203      	bcs.n	8006d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <pvPortMalloc+0x188>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <pvPortMalloc+0x190>)
 8006d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	4b13      	ldr	r3, [pc, #76]	; (8006dec <pvPortMalloc+0x184>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <pvPortMalloc+0x194>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <pvPortMalloc+0x194>)
 8006db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006db8:	f7fe fd02 	bl	80057c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f003 0307 	and.w	r3, r3, #7
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <pvPortMalloc+0x174>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60fb      	str	r3, [r7, #12]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <pvPortMalloc+0x172>
	return pvReturn;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3728      	adds	r7, #40	; 0x28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20004c34 	.word	0x20004c34
 8006dec:	20004c48 	.word	0x20004c48
 8006df0:	20004c38 	.word	0x20004c38
 8006df4:	20004c2c 	.word	0x20004c2c
 8006df8:	20004c3c 	.word	0x20004c3c
 8006dfc:	20004c40 	.word	0x20004c40

08006e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d04d      	beq.n	8006eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e12:	2308      	movs	r3, #8
 8006e14:	425b      	negs	r3, r3
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4413      	add	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <vPortFree+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <vPortFree+0x44>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	60fb      	str	r3, [r7, #12]
}
 8006e40:	bf00      	nop
 8006e42:	e7fe      	b.n	8006e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <vPortFree+0x62>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	60bb      	str	r3, [r7, #8]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <vPortFree+0xb8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01e      	beq.n	8006eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11a      	bne.n	8006eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <vPortFree+0xb8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	401a      	ands	r2, r3
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e88:	f7fe fc8c 	bl	80057a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <vPortFree+0xbc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <vPortFree+0xbc>)
 8006e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f000 f874 	bl	8006f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <vPortFree+0xc0>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <vPortFree+0xc0>)
 8006ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eaa:	f7fe fc89 	bl	80057c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006eae:	bf00      	nop
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20004c48 	.word	0x20004c48
 8006ebc:	20004c38 	.word	0x20004c38
 8006ec0:	20004c44 	.word	0x20004c44

08006ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ed0:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <prvHeapInit+0xac>)
 8006ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3307      	adds	r3, #7
 8006ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <prvHeapInit+0xac>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <prvHeapInit+0xb0>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <prvHeapInit+0xb0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f10:	2208      	movs	r2, #8
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <prvHeapInit+0xb4>)
 8006f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <prvHeapInit+0xb4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <prvHeapInit+0xb4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <prvHeapInit+0xb4>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <prvHeapInit+0xb8>)
 8006f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <prvHeapInit+0xbc>)
 8006f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <prvHeapInit+0xc0>)
 8006f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	2000102c 	.word	0x2000102c
 8006f74:	20004c2c 	.word	0x20004c2c
 8006f78:	20004c34 	.word	0x20004c34
 8006f7c:	20004c3c 	.word	0x20004c3c
 8006f80:	20004c38 	.word	0x20004c38
 8006f84:	20004c48 	.word	0x20004c48

08006f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <prvInsertBlockIntoFreeList+0xac>)
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e002      	b.n	8006f9c <prvInsertBlockIntoFreeList+0x14>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d8f7      	bhi.n	8006f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d108      	bne.n	8006fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d118      	bne.n	8007010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b15      	ldr	r3, [pc, #84]	; (8007038 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d00d      	beq.n	8007006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e008      	b.n	8007018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <prvInsertBlockIntoFreeList+0xb0>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e003      	b.n	8007018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d002      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20004c2c 	.word	0x20004c2c
 8007038:	20004c34 	.word	0x20004c34

0800703c <__errno>:
 800703c:	4b01      	ldr	r3, [pc, #4]	; (8007044 <__errno+0x8>)
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000010 	.word	0x20000010

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	; (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	; (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	; (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	; (800708c <__libc_init_array+0x44>)
 800705c:	f004 fc90 	bl	800b980 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	0800bf0c 	.word	0x0800bf0c
 8007084:	0800bf0c 	.word	0x0800bf0c
 8007088:	0800bf0c 	.word	0x0800bf0c
 800708c:	0800bf10 	.word	0x0800bf10

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <memset>:
 80070ac:	4402      	add	r2, r0
 80070ae:	4603      	mov	r3, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <__cvt>:
 80070bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	ec55 4b10 	vmov	r4, r5, d0
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	460e      	mov	r6, r1
 80070c8:	4619      	mov	r1, r3
 80070ca:	462b      	mov	r3, r5
 80070cc:	bfbb      	ittet	lt
 80070ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070d2:	461d      	movlt	r5, r3
 80070d4:	2300      	movge	r3, #0
 80070d6:	232d      	movlt	r3, #45	; 0x2d
 80070d8:	700b      	strb	r3, [r1, #0]
 80070da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070e0:	4691      	mov	r9, r2
 80070e2:	f023 0820 	bic.w	r8, r3, #32
 80070e6:	bfbc      	itt	lt
 80070e8:	4622      	movlt	r2, r4
 80070ea:	4614      	movlt	r4, r2
 80070ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070f0:	d005      	beq.n	80070fe <__cvt+0x42>
 80070f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070f6:	d100      	bne.n	80070fa <__cvt+0x3e>
 80070f8:	3601      	adds	r6, #1
 80070fa:	2102      	movs	r1, #2
 80070fc:	e000      	b.n	8007100 <__cvt+0x44>
 80070fe:	2103      	movs	r1, #3
 8007100:	ab03      	add	r3, sp, #12
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	ab02      	add	r3, sp, #8
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	ec45 4b10 	vmov	d0, r4, r5
 800710c:	4653      	mov	r3, sl
 800710e:	4632      	mov	r2, r6
 8007110:	f001 fdae 	bl	8008c70 <_dtoa_r>
 8007114:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007118:	4607      	mov	r7, r0
 800711a:	d102      	bne.n	8007122 <__cvt+0x66>
 800711c:	f019 0f01 	tst.w	r9, #1
 8007120:	d022      	beq.n	8007168 <__cvt+0xac>
 8007122:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007126:	eb07 0906 	add.w	r9, r7, r6
 800712a:	d110      	bne.n	800714e <__cvt+0x92>
 800712c:	783b      	ldrb	r3, [r7, #0]
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	d10a      	bne.n	8007148 <__cvt+0x8c>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	4620      	mov	r0, r4
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800713e:	b918      	cbnz	r0, 8007148 <__cvt+0x8c>
 8007140:	f1c6 0601 	rsb	r6, r6, #1
 8007144:	f8ca 6000 	str.w	r6, [sl]
 8007148:	f8da 3000 	ldr.w	r3, [sl]
 800714c:	4499      	add	r9, r3
 800714e:	2200      	movs	r2, #0
 8007150:	2300      	movs	r3, #0
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	f7f9 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800715a:	b108      	cbz	r0, 8007160 <__cvt+0xa4>
 800715c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007160:	2230      	movs	r2, #48	; 0x30
 8007162:	9b03      	ldr	r3, [sp, #12]
 8007164:	454b      	cmp	r3, r9
 8007166:	d307      	bcc.n	8007178 <__cvt+0xbc>
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800716c:	1bdb      	subs	r3, r3, r7
 800716e:	4638      	mov	r0, r7
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	b004      	add	sp, #16
 8007174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007178:	1c59      	adds	r1, r3, #1
 800717a:	9103      	str	r1, [sp, #12]
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e7f0      	b.n	8007162 <__cvt+0xa6>

08007180 <__exponent>:
 8007180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007182:	4603      	mov	r3, r0
 8007184:	2900      	cmp	r1, #0
 8007186:	bfb8      	it	lt
 8007188:	4249      	neglt	r1, r1
 800718a:	f803 2b02 	strb.w	r2, [r3], #2
 800718e:	bfb4      	ite	lt
 8007190:	222d      	movlt	r2, #45	; 0x2d
 8007192:	222b      	movge	r2, #43	; 0x2b
 8007194:	2909      	cmp	r1, #9
 8007196:	7042      	strb	r2, [r0, #1]
 8007198:	dd2a      	ble.n	80071f0 <__exponent+0x70>
 800719a:	f10d 0407 	add.w	r4, sp, #7
 800719e:	46a4      	mov	ip, r4
 80071a0:	270a      	movs	r7, #10
 80071a2:	46a6      	mov	lr, r4
 80071a4:	460a      	mov	r2, r1
 80071a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80071aa:	fb07 1516 	mls	r5, r7, r6, r1
 80071ae:	3530      	adds	r5, #48	; 0x30
 80071b0:	2a63      	cmp	r2, #99	; 0x63
 80071b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80071b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071ba:	4631      	mov	r1, r6
 80071bc:	dcf1      	bgt.n	80071a2 <__exponent+0x22>
 80071be:	3130      	adds	r1, #48	; 0x30
 80071c0:	f1ae 0502 	sub.w	r5, lr, #2
 80071c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071c8:	1c44      	adds	r4, r0, #1
 80071ca:	4629      	mov	r1, r5
 80071cc:	4561      	cmp	r1, ip
 80071ce:	d30a      	bcc.n	80071e6 <__exponent+0x66>
 80071d0:	f10d 0209 	add.w	r2, sp, #9
 80071d4:	eba2 020e 	sub.w	r2, r2, lr
 80071d8:	4565      	cmp	r5, ip
 80071da:	bf88      	it	hi
 80071dc:	2200      	movhi	r2, #0
 80071de:	4413      	add	r3, r2
 80071e0:	1a18      	subs	r0, r3, r0
 80071e2:	b003      	add	sp, #12
 80071e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071ee:	e7ed      	b.n	80071cc <__exponent+0x4c>
 80071f0:	2330      	movs	r3, #48	; 0x30
 80071f2:	3130      	adds	r1, #48	; 0x30
 80071f4:	7083      	strb	r3, [r0, #2]
 80071f6:	70c1      	strb	r1, [r0, #3]
 80071f8:	1d03      	adds	r3, r0, #4
 80071fa:	e7f1      	b.n	80071e0 <__exponent+0x60>

080071fc <_printf_float>:
 80071fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007200:	ed2d 8b02 	vpush	{d8}
 8007204:	b08d      	sub	sp, #52	; 0x34
 8007206:	460c      	mov	r4, r1
 8007208:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800720c:	4616      	mov	r6, r2
 800720e:	461f      	mov	r7, r3
 8007210:	4605      	mov	r5, r0
 8007212:	f002 fe8b 	bl	8009f2c <_localeconv_r>
 8007216:	f8d0 a000 	ldr.w	sl, [r0]
 800721a:	4650      	mov	r0, sl
 800721c:	f7f8 ffe0 	bl	80001e0 <strlen>
 8007220:	2300      	movs	r3, #0
 8007222:	930a      	str	r3, [sp, #40]	; 0x28
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	9305      	str	r3, [sp, #20]
 8007228:	f8d8 3000 	ldr.w	r3, [r8]
 800722c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007230:	3307      	adds	r3, #7
 8007232:	f023 0307 	bic.w	r3, r3, #7
 8007236:	f103 0208 	add.w	r2, r3, #8
 800723a:	f8c8 2000 	str.w	r2, [r8]
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007246:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800724a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	f8cd 8018 	str.w	r8, [sp, #24]
 8007254:	ee08 0a10 	vmov	s16, r0
 8007258:	4b9f      	ldr	r3, [pc, #636]	; (80074d8 <_printf_float+0x2dc>)
 800725a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800725e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007262:	f7f9 fc6b 	bl	8000b3c <__aeabi_dcmpun>
 8007266:	bb88      	cbnz	r0, 80072cc <_printf_float+0xd0>
 8007268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800726c:	4b9a      	ldr	r3, [pc, #616]	; (80074d8 <_printf_float+0x2dc>)
 800726e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007272:	f7f9 fc45 	bl	8000b00 <__aeabi_dcmple>
 8007276:	bb48      	cbnz	r0, 80072cc <_printf_float+0xd0>
 8007278:	2200      	movs	r2, #0
 800727a:	2300      	movs	r3, #0
 800727c:	4640      	mov	r0, r8
 800727e:	4649      	mov	r1, r9
 8007280:	f7f9 fc34 	bl	8000aec <__aeabi_dcmplt>
 8007284:	b110      	cbz	r0, 800728c <_printf_float+0x90>
 8007286:	232d      	movs	r3, #45	; 0x2d
 8007288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800728c:	4b93      	ldr	r3, [pc, #588]	; (80074dc <_printf_float+0x2e0>)
 800728e:	4894      	ldr	r0, [pc, #592]	; (80074e0 <_printf_float+0x2e4>)
 8007290:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007294:	bf94      	ite	ls
 8007296:	4698      	movls	r8, r3
 8007298:	4680      	movhi	r8, r0
 800729a:	2303      	movs	r3, #3
 800729c:	6123      	str	r3, [r4, #16]
 800729e:	9b05      	ldr	r3, [sp, #20]
 80072a0:	f023 0204 	bic.w	r2, r3, #4
 80072a4:	6022      	str	r2, [r4, #0]
 80072a6:	f04f 0900 	mov.w	r9, #0
 80072aa:	9700      	str	r7, [sp, #0]
 80072ac:	4633      	mov	r3, r6
 80072ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80072b0:	4621      	mov	r1, r4
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 f9d8 	bl	8007668 <_printf_common>
 80072b8:	3001      	adds	r0, #1
 80072ba:	f040 8090 	bne.w	80073de <_printf_float+0x1e2>
 80072be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072c2:	b00d      	add	sp, #52	; 0x34
 80072c4:	ecbd 8b02 	vpop	{d8}
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	4649      	mov	r1, r9
 80072d4:	f7f9 fc32 	bl	8000b3c <__aeabi_dcmpun>
 80072d8:	b140      	cbz	r0, 80072ec <_printf_float+0xf0>
 80072da:	464b      	mov	r3, r9
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bfbc      	itt	lt
 80072e0:	232d      	movlt	r3, #45	; 0x2d
 80072e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072e6:	487f      	ldr	r0, [pc, #508]	; (80074e4 <_printf_float+0x2e8>)
 80072e8:	4b7f      	ldr	r3, [pc, #508]	; (80074e8 <_printf_float+0x2ec>)
 80072ea:	e7d1      	b.n	8007290 <_printf_float+0x94>
 80072ec:	6863      	ldr	r3, [r4, #4]
 80072ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072f2:	9206      	str	r2, [sp, #24]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	d13f      	bne.n	8007378 <_printf_float+0x17c>
 80072f8:	2306      	movs	r3, #6
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	9b05      	ldr	r3, [sp, #20]
 80072fe:	6861      	ldr	r1, [r4, #4]
 8007300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007304:	2300      	movs	r3, #0
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	ab0a      	add	r3, sp, #40	; 0x28
 800730a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800730e:	ab09      	add	r3, sp, #36	; 0x24
 8007310:	ec49 8b10 	vmov	d0, r8, r9
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	6022      	str	r2, [r4, #0]
 8007318:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800731c:	4628      	mov	r0, r5
 800731e:	f7ff fecd 	bl	80070bc <__cvt>
 8007322:	9b06      	ldr	r3, [sp, #24]
 8007324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007326:	2b47      	cmp	r3, #71	; 0x47
 8007328:	4680      	mov	r8, r0
 800732a:	d108      	bne.n	800733e <_printf_float+0x142>
 800732c:	1cc8      	adds	r0, r1, #3
 800732e:	db02      	blt.n	8007336 <_printf_float+0x13a>
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	4299      	cmp	r1, r3
 8007334:	dd41      	ble.n	80073ba <_printf_float+0x1be>
 8007336:	f1ab 0b02 	sub.w	fp, fp, #2
 800733a:	fa5f fb8b 	uxtb.w	fp, fp
 800733e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007342:	d820      	bhi.n	8007386 <_printf_float+0x18a>
 8007344:	3901      	subs	r1, #1
 8007346:	465a      	mov	r2, fp
 8007348:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800734c:	9109      	str	r1, [sp, #36]	; 0x24
 800734e:	f7ff ff17 	bl	8007180 <__exponent>
 8007352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007354:	1813      	adds	r3, r2, r0
 8007356:	2a01      	cmp	r2, #1
 8007358:	4681      	mov	r9, r0
 800735a:	6123      	str	r3, [r4, #16]
 800735c:	dc02      	bgt.n	8007364 <_printf_float+0x168>
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	07d2      	lsls	r2, r2, #31
 8007362:	d501      	bpl.n	8007368 <_printf_float+0x16c>
 8007364:	3301      	adds	r3, #1
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800736c:	2b00      	cmp	r3, #0
 800736e:	d09c      	beq.n	80072aa <_printf_float+0xae>
 8007370:	232d      	movs	r3, #45	; 0x2d
 8007372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007376:	e798      	b.n	80072aa <_printf_float+0xae>
 8007378:	9a06      	ldr	r2, [sp, #24]
 800737a:	2a47      	cmp	r2, #71	; 0x47
 800737c:	d1be      	bne.n	80072fc <_printf_float+0x100>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1bc      	bne.n	80072fc <_printf_float+0x100>
 8007382:	2301      	movs	r3, #1
 8007384:	e7b9      	b.n	80072fa <_printf_float+0xfe>
 8007386:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800738a:	d118      	bne.n	80073be <_printf_float+0x1c2>
 800738c:	2900      	cmp	r1, #0
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	dd0b      	ble.n	80073aa <_printf_float+0x1ae>
 8007392:	6121      	str	r1, [r4, #16]
 8007394:	b913      	cbnz	r3, 800739c <_printf_float+0x1a0>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	07d0      	lsls	r0, r2, #31
 800739a:	d502      	bpl.n	80073a2 <_printf_float+0x1a6>
 800739c:	3301      	adds	r3, #1
 800739e:	440b      	add	r3, r1
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80073a4:	f04f 0900 	mov.w	r9, #0
 80073a8:	e7de      	b.n	8007368 <_printf_float+0x16c>
 80073aa:	b913      	cbnz	r3, 80073b2 <_printf_float+0x1b6>
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	07d2      	lsls	r2, r2, #31
 80073b0:	d501      	bpl.n	80073b6 <_printf_float+0x1ba>
 80073b2:	3302      	adds	r3, #2
 80073b4:	e7f4      	b.n	80073a0 <_printf_float+0x1a4>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7f2      	b.n	80073a0 <_printf_float+0x1a4>
 80073ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	4299      	cmp	r1, r3
 80073c2:	db05      	blt.n	80073d0 <_printf_float+0x1d4>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	6121      	str	r1, [r4, #16]
 80073c8:	07d8      	lsls	r0, r3, #31
 80073ca:	d5ea      	bpl.n	80073a2 <_printf_float+0x1a6>
 80073cc:	1c4b      	adds	r3, r1, #1
 80073ce:	e7e7      	b.n	80073a0 <_printf_float+0x1a4>
 80073d0:	2900      	cmp	r1, #0
 80073d2:	bfd4      	ite	le
 80073d4:	f1c1 0202 	rsble	r2, r1, #2
 80073d8:	2201      	movgt	r2, #1
 80073da:	4413      	add	r3, r2
 80073dc:	e7e0      	b.n	80073a0 <_printf_float+0x1a4>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	055a      	lsls	r2, r3, #21
 80073e2:	d407      	bmi.n	80073f4 <_printf_float+0x1f8>
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	4642      	mov	r2, r8
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	d12c      	bne.n	800744c <_printf_float+0x250>
 80073f2:	e764      	b.n	80072be <_printf_float+0xc2>
 80073f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073f8:	f240 80e0 	bls.w	80075bc <_printf_float+0x3c0>
 80073fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007400:	2200      	movs	r2, #0
 8007402:	2300      	movs	r3, #0
 8007404:	f7f9 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d034      	beq.n	8007476 <_printf_float+0x27a>
 800740c:	4a37      	ldr	r2, [pc, #220]	; (80074ec <_printf_float+0x2f0>)
 800740e:	2301      	movs	r3, #1
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f af51 	beq.w	80072be <_printf_float+0xc2>
 800741c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007420:	429a      	cmp	r2, r3
 8007422:	db02      	blt.n	800742a <_printf_float+0x22e>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	07d8      	lsls	r0, r3, #31
 8007428:	d510      	bpl.n	800744c <_printf_float+0x250>
 800742a:	ee18 3a10 	vmov	r3, s16
 800742e:	4652      	mov	r2, sl
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	47b8      	blx	r7
 8007436:	3001      	adds	r0, #1
 8007438:	f43f af41 	beq.w	80072be <_printf_float+0xc2>
 800743c:	f04f 0800 	mov.w	r8, #0
 8007440:	f104 091a 	add.w	r9, r4, #26
 8007444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007446:	3b01      	subs	r3, #1
 8007448:	4543      	cmp	r3, r8
 800744a:	dc09      	bgt.n	8007460 <_printf_float+0x264>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	079b      	lsls	r3, r3, #30
 8007450:	f100 8105 	bmi.w	800765e <_printf_float+0x462>
 8007454:	68e0      	ldr	r0, [r4, #12]
 8007456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007458:	4298      	cmp	r0, r3
 800745a:	bfb8      	it	lt
 800745c:	4618      	movlt	r0, r3
 800745e:	e730      	b.n	80072c2 <_printf_float+0xc6>
 8007460:	2301      	movs	r3, #1
 8007462:	464a      	mov	r2, r9
 8007464:	4631      	mov	r1, r6
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	f43f af27 	beq.w	80072be <_printf_float+0xc2>
 8007470:	f108 0801 	add.w	r8, r8, #1
 8007474:	e7e6      	b.n	8007444 <_printf_float+0x248>
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	dc39      	bgt.n	80074f0 <_printf_float+0x2f4>
 800747c:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <_printf_float+0x2f0>)
 800747e:	2301      	movs	r3, #1
 8007480:	4631      	mov	r1, r6
 8007482:	4628      	mov	r0, r5
 8007484:	47b8      	blx	r7
 8007486:	3001      	adds	r0, #1
 8007488:	f43f af19 	beq.w	80072be <_printf_float+0xc2>
 800748c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007490:	4313      	orrs	r3, r2
 8007492:	d102      	bne.n	800749a <_printf_float+0x29e>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	07d9      	lsls	r1, r3, #31
 8007498:	d5d8      	bpl.n	800744c <_printf_float+0x250>
 800749a:	ee18 3a10 	vmov	r3, s16
 800749e:	4652      	mov	r2, sl
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	f43f af09 	beq.w	80072be <_printf_float+0xc2>
 80074ac:	f04f 0900 	mov.w	r9, #0
 80074b0:	f104 0a1a 	add.w	sl, r4, #26
 80074b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b6:	425b      	negs	r3, r3
 80074b8:	454b      	cmp	r3, r9
 80074ba:	dc01      	bgt.n	80074c0 <_printf_float+0x2c4>
 80074bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074be:	e792      	b.n	80073e6 <_printf_float+0x1ea>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4652      	mov	r2, sl
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	f43f aef7 	beq.w	80072be <_printf_float+0xc2>
 80074d0:	f109 0901 	add.w	r9, r9, #1
 80074d4:	e7ee      	b.n	80074b4 <_printf_float+0x2b8>
 80074d6:	bf00      	nop
 80074d8:	7fefffff 	.word	0x7fefffff
 80074dc:	0800ba60 	.word	0x0800ba60
 80074e0:	0800ba64 	.word	0x0800ba64
 80074e4:	0800ba6c 	.word	0x0800ba6c
 80074e8:	0800ba68 	.word	0x0800ba68
 80074ec:	0800ba70 	.word	0x0800ba70
 80074f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074f4:	429a      	cmp	r2, r3
 80074f6:	bfa8      	it	ge
 80074f8:	461a      	movge	r2, r3
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	4691      	mov	r9, r2
 80074fe:	dc37      	bgt.n	8007570 <_printf_float+0x374>
 8007500:	f04f 0b00 	mov.w	fp, #0
 8007504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007508:	f104 021a 	add.w	r2, r4, #26
 800750c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800750e:	9305      	str	r3, [sp, #20]
 8007510:	eba3 0309 	sub.w	r3, r3, r9
 8007514:	455b      	cmp	r3, fp
 8007516:	dc33      	bgt.n	8007580 <_printf_float+0x384>
 8007518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800751c:	429a      	cmp	r2, r3
 800751e:	db3b      	blt.n	8007598 <_printf_float+0x39c>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	07da      	lsls	r2, r3, #31
 8007524:	d438      	bmi.n	8007598 <_printf_float+0x39c>
 8007526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007528:	9a05      	ldr	r2, [sp, #20]
 800752a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800752c:	1a9a      	subs	r2, r3, r2
 800752e:	eba3 0901 	sub.w	r9, r3, r1
 8007532:	4591      	cmp	r9, r2
 8007534:	bfa8      	it	ge
 8007536:	4691      	movge	r9, r2
 8007538:	f1b9 0f00 	cmp.w	r9, #0
 800753c:	dc35      	bgt.n	80075aa <_printf_float+0x3ae>
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007546:	f104 0a1a 	add.w	sl, r4, #26
 800754a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800754e:	1a9b      	subs	r3, r3, r2
 8007550:	eba3 0309 	sub.w	r3, r3, r9
 8007554:	4543      	cmp	r3, r8
 8007556:	f77f af79 	ble.w	800744c <_printf_float+0x250>
 800755a:	2301      	movs	r3, #1
 800755c:	4652      	mov	r2, sl
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	f43f aeaa 	beq.w	80072be <_printf_float+0xc2>
 800756a:	f108 0801 	add.w	r8, r8, #1
 800756e:	e7ec      	b.n	800754a <_printf_float+0x34e>
 8007570:	4613      	mov	r3, r2
 8007572:	4631      	mov	r1, r6
 8007574:	4642      	mov	r2, r8
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	d1c0      	bne.n	8007500 <_printf_float+0x304>
 800757e:	e69e      	b.n	80072be <_printf_float+0xc2>
 8007580:	2301      	movs	r3, #1
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	9205      	str	r2, [sp, #20]
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f ae97 	beq.w	80072be <_printf_float+0xc2>
 8007590:	9a05      	ldr	r2, [sp, #20]
 8007592:	f10b 0b01 	add.w	fp, fp, #1
 8007596:	e7b9      	b.n	800750c <_printf_float+0x310>
 8007598:	ee18 3a10 	vmov	r3, s16
 800759c:	4652      	mov	r2, sl
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	d1be      	bne.n	8007526 <_printf_float+0x32a>
 80075a8:	e689      	b.n	80072be <_printf_float+0xc2>
 80075aa:	9a05      	ldr	r2, [sp, #20]
 80075ac:	464b      	mov	r3, r9
 80075ae:	4442      	add	r2, r8
 80075b0:	4631      	mov	r1, r6
 80075b2:	4628      	mov	r0, r5
 80075b4:	47b8      	blx	r7
 80075b6:	3001      	adds	r0, #1
 80075b8:	d1c1      	bne.n	800753e <_printf_float+0x342>
 80075ba:	e680      	b.n	80072be <_printf_float+0xc2>
 80075bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075be:	2a01      	cmp	r2, #1
 80075c0:	dc01      	bgt.n	80075c6 <_printf_float+0x3ca>
 80075c2:	07db      	lsls	r3, r3, #31
 80075c4:	d538      	bpl.n	8007638 <_printf_float+0x43c>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4642      	mov	r2, r8
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f ae74 	beq.w	80072be <_printf_float+0xc2>
 80075d6:	ee18 3a10 	vmov	r3, s16
 80075da:	4652      	mov	r2, sl
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	f43f ae6b 	beq.w	80072be <_printf_float+0xc2>
 80075e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075ec:	2200      	movs	r2, #0
 80075ee:	2300      	movs	r3, #0
 80075f0:	f7f9 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f4:	b9d8      	cbnz	r0, 800762e <_printf_float+0x432>
 80075f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f8:	f108 0201 	add.w	r2, r8, #1
 80075fc:	3b01      	subs	r3, #1
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	d10e      	bne.n	8007626 <_printf_float+0x42a>
 8007608:	e659      	b.n	80072be <_printf_float+0xc2>
 800760a:	2301      	movs	r3, #1
 800760c:	4652      	mov	r2, sl
 800760e:	4631      	mov	r1, r6
 8007610:	4628      	mov	r0, r5
 8007612:	47b8      	blx	r7
 8007614:	3001      	adds	r0, #1
 8007616:	f43f ae52 	beq.w	80072be <_printf_float+0xc2>
 800761a:	f108 0801 	add.w	r8, r8, #1
 800761e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007620:	3b01      	subs	r3, #1
 8007622:	4543      	cmp	r3, r8
 8007624:	dcf1      	bgt.n	800760a <_printf_float+0x40e>
 8007626:	464b      	mov	r3, r9
 8007628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800762c:	e6dc      	b.n	80073e8 <_printf_float+0x1ec>
 800762e:	f04f 0800 	mov.w	r8, #0
 8007632:	f104 0a1a 	add.w	sl, r4, #26
 8007636:	e7f2      	b.n	800761e <_printf_float+0x422>
 8007638:	2301      	movs	r3, #1
 800763a:	4642      	mov	r2, r8
 800763c:	e7df      	b.n	80075fe <_printf_float+0x402>
 800763e:	2301      	movs	r3, #1
 8007640:	464a      	mov	r2, r9
 8007642:	4631      	mov	r1, r6
 8007644:	4628      	mov	r0, r5
 8007646:	47b8      	blx	r7
 8007648:	3001      	adds	r0, #1
 800764a:	f43f ae38 	beq.w	80072be <_printf_float+0xc2>
 800764e:	f108 0801 	add.w	r8, r8, #1
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	4543      	cmp	r3, r8
 800765a:	dcf0      	bgt.n	800763e <_printf_float+0x442>
 800765c:	e6fa      	b.n	8007454 <_printf_float+0x258>
 800765e:	f04f 0800 	mov.w	r8, #0
 8007662:	f104 0919 	add.w	r9, r4, #25
 8007666:	e7f4      	b.n	8007652 <_printf_float+0x456>

08007668 <_printf_common>:
 8007668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	4616      	mov	r6, r2
 800766e:	4699      	mov	r9, r3
 8007670:	688a      	ldr	r2, [r1, #8]
 8007672:	690b      	ldr	r3, [r1, #16]
 8007674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007678:	4293      	cmp	r3, r2
 800767a:	bfb8      	it	lt
 800767c:	4613      	movlt	r3, r2
 800767e:	6033      	str	r3, [r6, #0]
 8007680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007684:	4607      	mov	r7, r0
 8007686:	460c      	mov	r4, r1
 8007688:	b10a      	cbz	r2, 800768e <_printf_common+0x26>
 800768a:	3301      	adds	r3, #1
 800768c:	6033      	str	r3, [r6, #0]
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	0699      	lsls	r1, r3, #26
 8007692:	bf42      	ittt	mi
 8007694:	6833      	ldrmi	r3, [r6, #0]
 8007696:	3302      	addmi	r3, #2
 8007698:	6033      	strmi	r3, [r6, #0]
 800769a:	6825      	ldr	r5, [r4, #0]
 800769c:	f015 0506 	ands.w	r5, r5, #6
 80076a0:	d106      	bne.n	80076b0 <_printf_common+0x48>
 80076a2:	f104 0a19 	add.w	sl, r4, #25
 80076a6:	68e3      	ldr	r3, [r4, #12]
 80076a8:	6832      	ldr	r2, [r6, #0]
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	42ab      	cmp	r3, r5
 80076ae:	dc26      	bgt.n	80076fe <_printf_common+0x96>
 80076b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076b4:	1e13      	subs	r3, r2, #0
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	bf18      	it	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	0692      	lsls	r2, r2, #26
 80076be:	d42b      	bmi.n	8007718 <_printf_common+0xb0>
 80076c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076c4:	4649      	mov	r1, r9
 80076c6:	4638      	mov	r0, r7
 80076c8:	47c0      	blx	r8
 80076ca:	3001      	adds	r0, #1
 80076cc:	d01e      	beq.n	800770c <_printf_common+0xa4>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	68e5      	ldr	r5, [r4, #12]
 80076d2:	6832      	ldr	r2, [r6, #0]
 80076d4:	f003 0306 	and.w	r3, r3, #6
 80076d8:	2b04      	cmp	r3, #4
 80076da:	bf08      	it	eq
 80076dc:	1aad      	subeq	r5, r5, r2
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	bf0c      	ite	eq
 80076e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e8:	2500      	movne	r5, #0
 80076ea:	4293      	cmp	r3, r2
 80076ec:	bfc4      	itt	gt
 80076ee:	1a9b      	subgt	r3, r3, r2
 80076f0:	18ed      	addgt	r5, r5, r3
 80076f2:	2600      	movs	r6, #0
 80076f4:	341a      	adds	r4, #26
 80076f6:	42b5      	cmp	r5, r6
 80076f8:	d11a      	bne.n	8007730 <_printf_common+0xc8>
 80076fa:	2000      	movs	r0, #0
 80076fc:	e008      	b.n	8007710 <_printf_common+0xa8>
 80076fe:	2301      	movs	r3, #1
 8007700:	4652      	mov	r2, sl
 8007702:	4649      	mov	r1, r9
 8007704:	4638      	mov	r0, r7
 8007706:	47c0      	blx	r8
 8007708:	3001      	adds	r0, #1
 800770a:	d103      	bne.n	8007714 <_printf_common+0xac>
 800770c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007714:	3501      	adds	r5, #1
 8007716:	e7c6      	b.n	80076a6 <_printf_common+0x3e>
 8007718:	18e1      	adds	r1, r4, r3
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	2030      	movs	r0, #48	; 0x30
 800771e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007722:	4422      	add	r2, r4
 8007724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800772c:	3302      	adds	r3, #2
 800772e:	e7c7      	b.n	80076c0 <_printf_common+0x58>
 8007730:	2301      	movs	r3, #1
 8007732:	4622      	mov	r2, r4
 8007734:	4649      	mov	r1, r9
 8007736:	4638      	mov	r0, r7
 8007738:	47c0      	blx	r8
 800773a:	3001      	adds	r0, #1
 800773c:	d0e6      	beq.n	800770c <_printf_common+0xa4>
 800773e:	3601      	adds	r6, #1
 8007740:	e7d9      	b.n	80076f6 <_printf_common+0x8e>
	...

08007744 <_printf_i>:
 8007744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007748:	7e0f      	ldrb	r7, [r1, #24]
 800774a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800774c:	2f78      	cmp	r7, #120	; 0x78
 800774e:	4691      	mov	r9, r2
 8007750:	4680      	mov	r8, r0
 8007752:	460c      	mov	r4, r1
 8007754:	469a      	mov	sl, r3
 8007756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800775a:	d807      	bhi.n	800776c <_printf_i+0x28>
 800775c:	2f62      	cmp	r7, #98	; 0x62
 800775e:	d80a      	bhi.n	8007776 <_printf_i+0x32>
 8007760:	2f00      	cmp	r7, #0
 8007762:	f000 80d8 	beq.w	8007916 <_printf_i+0x1d2>
 8007766:	2f58      	cmp	r7, #88	; 0x58
 8007768:	f000 80a3 	beq.w	80078b2 <_printf_i+0x16e>
 800776c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007774:	e03a      	b.n	80077ec <_printf_i+0xa8>
 8007776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800777a:	2b15      	cmp	r3, #21
 800777c:	d8f6      	bhi.n	800776c <_printf_i+0x28>
 800777e:	a101      	add	r1, pc, #4	; (adr r1, 8007784 <_printf_i+0x40>)
 8007780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077f1 	.word	0x080077f1
 800778c:	0800776d 	.word	0x0800776d
 8007790:	0800776d 	.word	0x0800776d
 8007794:	0800776d 	.word	0x0800776d
 8007798:	0800776d 	.word	0x0800776d
 800779c:	080077f1 	.word	0x080077f1
 80077a0:	0800776d 	.word	0x0800776d
 80077a4:	0800776d 	.word	0x0800776d
 80077a8:	0800776d 	.word	0x0800776d
 80077ac:	0800776d 	.word	0x0800776d
 80077b0:	080078fd 	.word	0x080078fd
 80077b4:	08007821 	.word	0x08007821
 80077b8:	080078df 	.word	0x080078df
 80077bc:	0800776d 	.word	0x0800776d
 80077c0:	0800776d 	.word	0x0800776d
 80077c4:	0800791f 	.word	0x0800791f
 80077c8:	0800776d 	.word	0x0800776d
 80077cc:	08007821 	.word	0x08007821
 80077d0:	0800776d 	.word	0x0800776d
 80077d4:	0800776d 	.word	0x0800776d
 80077d8:	080078e7 	.word	0x080078e7
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	1d1a      	adds	r2, r3, #4
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	602a      	str	r2, [r5, #0]
 80077e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0a3      	b.n	8007938 <_printf_i+0x1f4>
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	6829      	ldr	r1, [r5, #0]
 80077f4:	0606      	lsls	r6, r0, #24
 80077f6:	f101 0304 	add.w	r3, r1, #4
 80077fa:	d50a      	bpl.n	8007812 <_printf_i+0xce>
 80077fc:	680e      	ldr	r6, [r1, #0]
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	2e00      	cmp	r6, #0
 8007802:	da03      	bge.n	800780c <_printf_i+0xc8>
 8007804:	232d      	movs	r3, #45	; 0x2d
 8007806:	4276      	negs	r6, r6
 8007808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800780c:	485e      	ldr	r0, [pc, #376]	; (8007988 <_printf_i+0x244>)
 800780e:	230a      	movs	r3, #10
 8007810:	e019      	b.n	8007846 <_printf_i+0x102>
 8007812:	680e      	ldr	r6, [r1, #0]
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800781a:	bf18      	it	ne
 800781c:	b236      	sxthne	r6, r6
 800781e:	e7ef      	b.n	8007800 <_printf_i+0xbc>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	6820      	ldr	r0, [r4, #0]
 8007824:	1d19      	adds	r1, r3, #4
 8007826:	6029      	str	r1, [r5, #0]
 8007828:	0601      	lsls	r1, r0, #24
 800782a:	d501      	bpl.n	8007830 <_printf_i+0xec>
 800782c:	681e      	ldr	r6, [r3, #0]
 800782e:	e002      	b.n	8007836 <_printf_i+0xf2>
 8007830:	0646      	lsls	r6, r0, #25
 8007832:	d5fb      	bpl.n	800782c <_printf_i+0xe8>
 8007834:	881e      	ldrh	r6, [r3, #0]
 8007836:	4854      	ldr	r0, [pc, #336]	; (8007988 <_printf_i+0x244>)
 8007838:	2f6f      	cmp	r7, #111	; 0x6f
 800783a:	bf0c      	ite	eq
 800783c:	2308      	moveq	r3, #8
 800783e:	230a      	movne	r3, #10
 8007840:	2100      	movs	r1, #0
 8007842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007846:	6865      	ldr	r5, [r4, #4]
 8007848:	60a5      	str	r5, [r4, #8]
 800784a:	2d00      	cmp	r5, #0
 800784c:	bfa2      	ittt	ge
 800784e:	6821      	ldrge	r1, [r4, #0]
 8007850:	f021 0104 	bicge.w	r1, r1, #4
 8007854:	6021      	strge	r1, [r4, #0]
 8007856:	b90e      	cbnz	r6, 800785c <_printf_i+0x118>
 8007858:	2d00      	cmp	r5, #0
 800785a:	d04d      	beq.n	80078f8 <_printf_i+0x1b4>
 800785c:	4615      	mov	r5, r2
 800785e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007862:	fb03 6711 	mls	r7, r3, r1, r6
 8007866:	5dc7      	ldrb	r7, [r0, r7]
 8007868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800786c:	4637      	mov	r7, r6
 800786e:	42bb      	cmp	r3, r7
 8007870:	460e      	mov	r6, r1
 8007872:	d9f4      	bls.n	800785e <_printf_i+0x11a>
 8007874:	2b08      	cmp	r3, #8
 8007876:	d10b      	bne.n	8007890 <_printf_i+0x14c>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	07de      	lsls	r6, r3, #31
 800787c:	d508      	bpl.n	8007890 <_printf_i+0x14c>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	6861      	ldr	r1, [r4, #4]
 8007882:	4299      	cmp	r1, r3
 8007884:	bfde      	ittt	le
 8007886:	2330      	movle	r3, #48	; 0x30
 8007888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800788c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007890:	1b52      	subs	r2, r2, r5
 8007892:	6122      	str	r2, [r4, #16]
 8007894:	f8cd a000 	str.w	sl, [sp]
 8007898:	464b      	mov	r3, r9
 800789a:	aa03      	add	r2, sp, #12
 800789c:	4621      	mov	r1, r4
 800789e:	4640      	mov	r0, r8
 80078a0:	f7ff fee2 	bl	8007668 <_printf_common>
 80078a4:	3001      	adds	r0, #1
 80078a6:	d14c      	bne.n	8007942 <_printf_i+0x1fe>
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ac:	b004      	add	sp, #16
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b2:	4835      	ldr	r0, [pc, #212]	; (8007988 <_printf_i+0x244>)
 80078b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078b8:	6829      	ldr	r1, [r5, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80078c0:	6029      	str	r1, [r5, #0]
 80078c2:	061d      	lsls	r5, r3, #24
 80078c4:	d514      	bpl.n	80078f0 <_printf_i+0x1ac>
 80078c6:	07df      	lsls	r7, r3, #31
 80078c8:	bf44      	itt	mi
 80078ca:	f043 0320 	orrmi.w	r3, r3, #32
 80078ce:	6023      	strmi	r3, [r4, #0]
 80078d0:	b91e      	cbnz	r6, 80078da <_printf_i+0x196>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	f023 0320 	bic.w	r3, r3, #32
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	2310      	movs	r3, #16
 80078dc:	e7b0      	b.n	8007840 <_printf_i+0xfc>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	f043 0320 	orr.w	r3, r3, #32
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	2378      	movs	r3, #120	; 0x78
 80078e8:	4828      	ldr	r0, [pc, #160]	; (800798c <_printf_i+0x248>)
 80078ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ee:	e7e3      	b.n	80078b8 <_printf_i+0x174>
 80078f0:	0659      	lsls	r1, r3, #25
 80078f2:	bf48      	it	mi
 80078f4:	b2b6      	uxthmi	r6, r6
 80078f6:	e7e6      	b.n	80078c6 <_printf_i+0x182>
 80078f8:	4615      	mov	r5, r2
 80078fa:	e7bb      	b.n	8007874 <_printf_i+0x130>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	6826      	ldr	r6, [r4, #0]
 8007900:	6961      	ldr	r1, [r4, #20]
 8007902:	1d18      	adds	r0, r3, #4
 8007904:	6028      	str	r0, [r5, #0]
 8007906:	0635      	lsls	r5, r6, #24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	d501      	bpl.n	8007910 <_printf_i+0x1cc>
 800790c:	6019      	str	r1, [r3, #0]
 800790e:	e002      	b.n	8007916 <_printf_i+0x1d2>
 8007910:	0670      	lsls	r0, r6, #25
 8007912:	d5fb      	bpl.n	800790c <_printf_i+0x1c8>
 8007914:	8019      	strh	r1, [r3, #0]
 8007916:	2300      	movs	r3, #0
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	4615      	mov	r5, r2
 800791c:	e7ba      	b.n	8007894 <_printf_i+0x150>
 800791e:	682b      	ldr	r3, [r5, #0]
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	602a      	str	r2, [r5, #0]
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	2100      	movs	r1, #0
 800792a:	4628      	mov	r0, r5
 800792c:	f7f8 fc60 	bl	80001f0 <memchr>
 8007930:	b108      	cbz	r0, 8007936 <_printf_i+0x1f2>
 8007932:	1b40      	subs	r0, r0, r5
 8007934:	6060      	str	r0, [r4, #4]
 8007936:	6863      	ldr	r3, [r4, #4]
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	2300      	movs	r3, #0
 800793c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007940:	e7a8      	b.n	8007894 <_printf_i+0x150>
 8007942:	6923      	ldr	r3, [r4, #16]
 8007944:	462a      	mov	r2, r5
 8007946:	4649      	mov	r1, r9
 8007948:	4640      	mov	r0, r8
 800794a:	47d0      	blx	sl
 800794c:	3001      	adds	r0, #1
 800794e:	d0ab      	beq.n	80078a8 <_printf_i+0x164>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	079b      	lsls	r3, r3, #30
 8007954:	d413      	bmi.n	800797e <_printf_i+0x23a>
 8007956:	68e0      	ldr	r0, [r4, #12]
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	4298      	cmp	r0, r3
 800795c:	bfb8      	it	lt
 800795e:	4618      	movlt	r0, r3
 8007960:	e7a4      	b.n	80078ac <_printf_i+0x168>
 8007962:	2301      	movs	r3, #1
 8007964:	4632      	mov	r2, r6
 8007966:	4649      	mov	r1, r9
 8007968:	4640      	mov	r0, r8
 800796a:	47d0      	blx	sl
 800796c:	3001      	adds	r0, #1
 800796e:	d09b      	beq.n	80078a8 <_printf_i+0x164>
 8007970:	3501      	adds	r5, #1
 8007972:	68e3      	ldr	r3, [r4, #12]
 8007974:	9903      	ldr	r1, [sp, #12]
 8007976:	1a5b      	subs	r3, r3, r1
 8007978:	42ab      	cmp	r3, r5
 800797a:	dcf2      	bgt.n	8007962 <_printf_i+0x21e>
 800797c:	e7eb      	b.n	8007956 <_printf_i+0x212>
 800797e:	2500      	movs	r5, #0
 8007980:	f104 0619 	add.w	r6, r4, #25
 8007984:	e7f5      	b.n	8007972 <_printf_i+0x22e>
 8007986:	bf00      	nop
 8007988:	0800ba72 	.word	0x0800ba72
 800798c:	0800ba83 	.word	0x0800ba83

08007990 <_scanf_float>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	b087      	sub	sp, #28
 8007996:	4617      	mov	r7, r2
 8007998:	9303      	str	r3, [sp, #12]
 800799a:	688b      	ldr	r3, [r1, #8]
 800799c:	1e5a      	subs	r2, r3, #1
 800799e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079a2:	bf83      	ittte	hi
 80079a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079a8:	195b      	addhi	r3, r3, r5
 80079aa:	9302      	strhi	r3, [sp, #8]
 80079ac:	2300      	movls	r3, #0
 80079ae:	bf86      	itte	hi
 80079b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80079b4:	608b      	strhi	r3, [r1, #8]
 80079b6:	9302      	strls	r3, [sp, #8]
 80079b8:	680b      	ldr	r3, [r1, #0]
 80079ba:	468b      	mov	fp, r1
 80079bc:	2500      	movs	r5, #0
 80079be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80079c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80079c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80079ca:	4680      	mov	r8, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	465e      	mov	r6, fp
 80079d0:	46aa      	mov	sl, r5
 80079d2:	46a9      	mov	r9, r5
 80079d4:	9501      	str	r5, [sp, #4]
 80079d6:	68a2      	ldr	r2, [r4, #8]
 80079d8:	b152      	cbz	r2, 80079f0 <_scanf_float+0x60>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b4e      	cmp	r3, #78	; 0x4e
 80079e0:	d864      	bhi.n	8007aac <_scanf_float+0x11c>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d83c      	bhi.n	8007a60 <_scanf_float+0xd0>
 80079e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80079ea:	b2c8      	uxtb	r0, r1
 80079ec:	280e      	cmp	r0, #14
 80079ee:	d93a      	bls.n	8007a66 <_scanf_float+0xd6>
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	d003      	beq.n	80079fe <_scanf_float+0x6e>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a02:	f1ba 0f01 	cmp.w	sl, #1
 8007a06:	f200 8113 	bhi.w	8007c30 <_scanf_float+0x2a0>
 8007a0a:	455e      	cmp	r6, fp
 8007a0c:	f200 8105 	bhi.w	8007c1a <_scanf_float+0x28a>
 8007a10:	2501      	movs	r5, #1
 8007a12:	4628      	mov	r0, r5
 8007a14:	b007      	add	sp, #28
 8007a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a1e:	2a0d      	cmp	r2, #13
 8007a20:	d8e6      	bhi.n	80079f0 <_scanf_float+0x60>
 8007a22:	a101      	add	r1, pc, #4	; (adr r1, 8007a28 <_scanf_float+0x98>)
 8007a24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a28:	08007b67 	.word	0x08007b67
 8007a2c:	080079f1 	.word	0x080079f1
 8007a30:	080079f1 	.word	0x080079f1
 8007a34:	080079f1 	.word	0x080079f1
 8007a38:	08007bc7 	.word	0x08007bc7
 8007a3c:	08007b9f 	.word	0x08007b9f
 8007a40:	080079f1 	.word	0x080079f1
 8007a44:	080079f1 	.word	0x080079f1
 8007a48:	08007b75 	.word	0x08007b75
 8007a4c:	080079f1 	.word	0x080079f1
 8007a50:	080079f1 	.word	0x080079f1
 8007a54:	080079f1 	.word	0x080079f1
 8007a58:	080079f1 	.word	0x080079f1
 8007a5c:	08007b2d 	.word	0x08007b2d
 8007a60:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007a64:	e7db      	b.n	8007a1e <_scanf_float+0x8e>
 8007a66:	290e      	cmp	r1, #14
 8007a68:	d8c2      	bhi.n	80079f0 <_scanf_float+0x60>
 8007a6a:	a001      	add	r0, pc, #4	; (adr r0, 8007a70 <_scanf_float+0xe0>)
 8007a6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a70:	08007b1f 	.word	0x08007b1f
 8007a74:	080079f1 	.word	0x080079f1
 8007a78:	08007b1f 	.word	0x08007b1f
 8007a7c:	08007bb3 	.word	0x08007bb3
 8007a80:	080079f1 	.word	0x080079f1
 8007a84:	08007acd 	.word	0x08007acd
 8007a88:	08007b09 	.word	0x08007b09
 8007a8c:	08007b09 	.word	0x08007b09
 8007a90:	08007b09 	.word	0x08007b09
 8007a94:	08007b09 	.word	0x08007b09
 8007a98:	08007b09 	.word	0x08007b09
 8007a9c:	08007b09 	.word	0x08007b09
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007b09 	.word	0x08007b09
 8007aa8:	08007b09 	.word	0x08007b09
 8007aac:	2b6e      	cmp	r3, #110	; 0x6e
 8007aae:	d809      	bhi.n	8007ac4 <_scanf_float+0x134>
 8007ab0:	2b60      	cmp	r3, #96	; 0x60
 8007ab2:	d8b2      	bhi.n	8007a1a <_scanf_float+0x8a>
 8007ab4:	2b54      	cmp	r3, #84	; 0x54
 8007ab6:	d077      	beq.n	8007ba8 <_scanf_float+0x218>
 8007ab8:	2b59      	cmp	r3, #89	; 0x59
 8007aba:	d199      	bne.n	80079f0 <_scanf_float+0x60>
 8007abc:	2d07      	cmp	r5, #7
 8007abe:	d197      	bne.n	80079f0 <_scanf_float+0x60>
 8007ac0:	2508      	movs	r5, #8
 8007ac2:	e029      	b.n	8007b18 <_scanf_float+0x188>
 8007ac4:	2b74      	cmp	r3, #116	; 0x74
 8007ac6:	d06f      	beq.n	8007ba8 <_scanf_float+0x218>
 8007ac8:	2b79      	cmp	r3, #121	; 0x79
 8007aca:	e7f6      	b.n	8007aba <_scanf_float+0x12a>
 8007acc:	6821      	ldr	r1, [r4, #0]
 8007ace:	05c8      	lsls	r0, r1, #23
 8007ad0:	d51a      	bpl.n	8007b08 <_scanf_float+0x178>
 8007ad2:	9b02      	ldr	r3, [sp, #8]
 8007ad4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ad8:	6021      	str	r1, [r4, #0]
 8007ada:	f109 0901 	add.w	r9, r9, #1
 8007ade:	b11b      	cbz	r3, 8007ae8 <_scanf_float+0x158>
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	3201      	adds	r2, #1
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	60a2      	str	r2, [r4, #8]
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	60a3      	str	r3, [r4, #8]
 8007aee:	6923      	ldr	r3, [r4, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	6123      	str	r3, [r4, #16]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	607b      	str	r3, [r7, #4]
 8007afc:	f340 8084 	ble.w	8007c08 <_scanf_float+0x278>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	603b      	str	r3, [r7, #0]
 8007b06:	e766      	b.n	80079d6 <_scanf_float+0x46>
 8007b08:	eb1a 0f05 	cmn.w	sl, r5
 8007b0c:	f47f af70 	bne.w	80079f0 <_scanf_float+0x60>
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b16:	6022      	str	r2, [r4, #0]
 8007b18:	f806 3b01 	strb.w	r3, [r6], #1
 8007b1c:	e7e4      	b.n	8007ae8 <_scanf_float+0x158>
 8007b1e:	6822      	ldr	r2, [r4, #0]
 8007b20:	0610      	lsls	r0, r2, #24
 8007b22:	f57f af65 	bpl.w	80079f0 <_scanf_float+0x60>
 8007b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b2a:	e7f4      	b.n	8007b16 <_scanf_float+0x186>
 8007b2c:	f1ba 0f00 	cmp.w	sl, #0
 8007b30:	d10e      	bne.n	8007b50 <_scanf_float+0x1c0>
 8007b32:	f1b9 0f00 	cmp.w	r9, #0
 8007b36:	d10e      	bne.n	8007b56 <_scanf_float+0x1c6>
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b3e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b42:	d108      	bne.n	8007b56 <_scanf_float+0x1c6>
 8007b44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b48:	6022      	str	r2, [r4, #0]
 8007b4a:	f04f 0a01 	mov.w	sl, #1
 8007b4e:	e7e3      	b.n	8007b18 <_scanf_float+0x188>
 8007b50:	f1ba 0f02 	cmp.w	sl, #2
 8007b54:	d055      	beq.n	8007c02 <_scanf_float+0x272>
 8007b56:	2d01      	cmp	r5, #1
 8007b58:	d002      	beq.n	8007b60 <_scanf_float+0x1d0>
 8007b5a:	2d04      	cmp	r5, #4
 8007b5c:	f47f af48 	bne.w	80079f0 <_scanf_float+0x60>
 8007b60:	3501      	adds	r5, #1
 8007b62:	b2ed      	uxtb	r5, r5
 8007b64:	e7d8      	b.n	8007b18 <_scanf_float+0x188>
 8007b66:	f1ba 0f01 	cmp.w	sl, #1
 8007b6a:	f47f af41 	bne.w	80079f0 <_scanf_float+0x60>
 8007b6e:	f04f 0a02 	mov.w	sl, #2
 8007b72:	e7d1      	b.n	8007b18 <_scanf_float+0x188>
 8007b74:	b97d      	cbnz	r5, 8007b96 <_scanf_float+0x206>
 8007b76:	f1b9 0f00 	cmp.w	r9, #0
 8007b7a:	f47f af3c 	bne.w	80079f6 <_scanf_float+0x66>
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b88:	f47f af39 	bne.w	80079fe <_scanf_float+0x6e>
 8007b8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b90:	6022      	str	r2, [r4, #0]
 8007b92:	2501      	movs	r5, #1
 8007b94:	e7c0      	b.n	8007b18 <_scanf_float+0x188>
 8007b96:	2d03      	cmp	r5, #3
 8007b98:	d0e2      	beq.n	8007b60 <_scanf_float+0x1d0>
 8007b9a:	2d05      	cmp	r5, #5
 8007b9c:	e7de      	b.n	8007b5c <_scanf_float+0x1cc>
 8007b9e:	2d02      	cmp	r5, #2
 8007ba0:	f47f af26 	bne.w	80079f0 <_scanf_float+0x60>
 8007ba4:	2503      	movs	r5, #3
 8007ba6:	e7b7      	b.n	8007b18 <_scanf_float+0x188>
 8007ba8:	2d06      	cmp	r5, #6
 8007baa:	f47f af21 	bne.w	80079f0 <_scanf_float+0x60>
 8007bae:	2507      	movs	r5, #7
 8007bb0:	e7b2      	b.n	8007b18 <_scanf_float+0x188>
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	0591      	lsls	r1, r2, #22
 8007bb6:	f57f af1b 	bpl.w	80079f0 <_scanf_float+0x60>
 8007bba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007bbe:	6022      	str	r2, [r4, #0]
 8007bc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bc4:	e7a8      	b.n	8007b18 <_scanf_float+0x188>
 8007bc6:	6822      	ldr	r2, [r4, #0]
 8007bc8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007bcc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007bd0:	d006      	beq.n	8007be0 <_scanf_float+0x250>
 8007bd2:	0550      	lsls	r0, r2, #21
 8007bd4:	f57f af0c 	bpl.w	80079f0 <_scanf_float+0x60>
 8007bd8:	f1b9 0f00 	cmp.w	r9, #0
 8007bdc:	f43f af0f 	beq.w	80079fe <_scanf_float+0x6e>
 8007be0:	0591      	lsls	r1, r2, #22
 8007be2:	bf58      	it	pl
 8007be4:	9901      	ldrpl	r1, [sp, #4]
 8007be6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bea:	bf58      	it	pl
 8007bec:	eba9 0101 	subpl.w	r1, r9, r1
 8007bf0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007bf4:	bf58      	it	pl
 8007bf6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007bfa:	6022      	str	r2, [r4, #0]
 8007bfc:	f04f 0900 	mov.w	r9, #0
 8007c00:	e78a      	b.n	8007b18 <_scanf_float+0x188>
 8007c02:	f04f 0a03 	mov.w	sl, #3
 8007c06:	e787      	b.n	8007b18 <_scanf_float+0x188>
 8007c08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4798      	blx	r3
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f43f aedf 	beq.w	80079d6 <_scanf_float+0x46>
 8007c18:	e6ea      	b.n	80079f0 <_scanf_float+0x60>
 8007c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c22:	463a      	mov	r2, r7
 8007c24:	4640      	mov	r0, r8
 8007c26:	4798      	blx	r3
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	e6ec      	b.n	8007a0a <_scanf_float+0x7a>
 8007c30:	1e6b      	subs	r3, r5, #1
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d825      	bhi.n	8007c82 <_scanf_float+0x2f2>
 8007c36:	2d02      	cmp	r5, #2
 8007c38:	d836      	bhi.n	8007ca8 <_scanf_float+0x318>
 8007c3a:	455e      	cmp	r6, fp
 8007c3c:	f67f aee8 	bls.w	8007a10 <_scanf_float+0x80>
 8007c40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c48:	463a      	mov	r2, r7
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4798      	blx	r3
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	e7f1      	b.n	8007c3a <_scanf_float+0x2aa>
 8007c56:	9802      	ldr	r0, [sp, #8]
 8007c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007c60:	9002      	str	r0, [sp, #8]
 8007c62:	463a      	mov	r2, r7
 8007c64:	4640      	mov	r0, r8
 8007c66:	4798      	blx	r3
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c72:	fa5f fa8a 	uxtb.w	sl, sl
 8007c76:	f1ba 0f02 	cmp.w	sl, #2
 8007c7a:	d1ec      	bne.n	8007c56 <_scanf_float+0x2c6>
 8007c7c:	3d03      	subs	r5, #3
 8007c7e:	b2ed      	uxtb	r5, r5
 8007c80:	1b76      	subs	r6, r6, r5
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	05da      	lsls	r2, r3, #23
 8007c86:	d52f      	bpl.n	8007ce8 <_scanf_float+0x358>
 8007c88:	055b      	lsls	r3, r3, #21
 8007c8a:	d510      	bpl.n	8007cae <_scanf_float+0x31e>
 8007c8c:	455e      	cmp	r6, fp
 8007c8e:	f67f aebf 	bls.w	8007a10 <_scanf_float+0x80>
 8007c92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	4798      	blx	r3
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	e7f1      	b.n	8007c8c <_scanf_float+0x2fc>
 8007ca8:	46aa      	mov	sl, r5
 8007caa:	9602      	str	r6, [sp, #8]
 8007cac:	e7df      	b.n	8007c6e <_scanf_float+0x2de>
 8007cae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007cb2:	6923      	ldr	r3, [r4, #16]
 8007cb4:	2965      	cmp	r1, #101	; 0x65
 8007cb6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007cba:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007cbe:	6123      	str	r3, [r4, #16]
 8007cc0:	d00c      	beq.n	8007cdc <_scanf_float+0x34c>
 8007cc2:	2945      	cmp	r1, #69	; 0x45
 8007cc4:	d00a      	beq.n	8007cdc <_scanf_float+0x34c>
 8007cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cca:	463a      	mov	r2, r7
 8007ccc:	4640      	mov	r0, r8
 8007cce:	4798      	blx	r3
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	1eb5      	subs	r5, r6, #2
 8007cda:	6123      	str	r3, [r4, #16]
 8007cdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ce0:	463a      	mov	r2, r7
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	4798      	blx	r3
 8007ce6:	462e      	mov	r6, r5
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	f015 0510 	ands.w	r5, r5, #16
 8007cee:	d159      	bne.n	8007da4 <_scanf_float+0x414>
 8007cf0:	7035      	strb	r5, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfc:	d11b      	bne.n	8007d36 <_scanf_float+0x3a6>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	454b      	cmp	r3, r9
 8007d02:	eba3 0209 	sub.w	r2, r3, r9
 8007d06:	d123      	bne.n	8007d50 <_scanf_float+0x3c0>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4659      	mov	r1, fp
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	f000 fe99 	bl	8008a44 <_strtod_r>
 8007d12:	6822      	ldr	r2, [r4, #0]
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	f012 0f02 	tst.w	r2, #2
 8007d1a:	ec57 6b10 	vmov	r6, r7, d0
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	d021      	beq.n	8007d66 <_scanf_float+0x3d6>
 8007d22:	9903      	ldr	r1, [sp, #12]
 8007d24:	1d1a      	adds	r2, r3, #4
 8007d26:	600a      	str	r2, [r1, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	e9c3 6700 	strd	r6, r7, [r3]
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	3301      	adds	r3, #1
 8007d32:	60e3      	str	r3, [r4, #12]
 8007d34:	e66d      	b.n	8007a12 <_scanf_float+0x82>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0e5      	beq.n	8007d08 <_scanf_float+0x378>
 8007d3c:	9905      	ldr	r1, [sp, #20]
 8007d3e:	230a      	movs	r3, #10
 8007d40:	462a      	mov	r2, r5
 8007d42:	3101      	adds	r1, #1
 8007d44:	4640      	mov	r0, r8
 8007d46:	f000 ff05 	bl	8008b54 <_strtol_r>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	9e05      	ldr	r6, [sp, #20]
 8007d4e:	1ac2      	subs	r2, r0, r3
 8007d50:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d54:	429e      	cmp	r6, r3
 8007d56:	bf28      	it	cs
 8007d58:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007d5c:	4912      	ldr	r1, [pc, #72]	; (8007da8 <_scanf_float+0x418>)
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f000 f82c 	bl	8007dbc <siprintf>
 8007d64:	e7d0      	b.n	8007d08 <_scanf_float+0x378>
 8007d66:	9903      	ldr	r1, [sp, #12]
 8007d68:	f012 0f04 	tst.w	r2, #4
 8007d6c:	f103 0204 	add.w	r2, r3, #4
 8007d70:	600a      	str	r2, [r1, #0]
 8007d72:	d1d9      	bne.n	8007d28 <_scanf_float+0x398>
 8007d74:	f8d3 8000 	ldr.w	r8, [r3]
 8007d78:	ee10 2a10 	vmov	r2, s0
 8007d7c:	ee10 0a10 	vmov	r0, s0
 8007d80:	463b      	mov	r3, r7
 8007d82:	4639      	mov	r1, r7
 8007d84:	f7f8 feda 	bl	8000b3c <__aeabi_dcmpun>
 8007d88:	b128      	cbz	r0, 8007d96 <_scanf_float+0x406>
 8007d8a:	4808      	ldr	r0, [pc, #32]	; (8007dac <_scanf_float+0x41c>)
 8007d8c:	f000 f810 	bl	8007db0 <nanf>
 8007d90:	ed88 0a00 	vstr	s0, [r8]
 8007d94:	e7cb      	b.n	8007d2e <_scanf_float+0x39e>
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 ff2d 	bl	8000bf8 <__aeabi_d2f>
 8007d9e:	f8c8 0000 	str.w	r0, [r8]
 8007da2:	e7c4      	b.n	8007d2e <_scanf_float+0x39e>
 8007da4:	2500      	movs	r5, #0
 8007da6:	e634      	b.n	8007a12 <_scanf_float+0x82>
 8007da8:	0800ba94 	.word	0x0800ba94
 8007dac:	0800bea0 	.word	0x0800bea0

08007db0 <nanf>:
 8007db0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007db8 <nanf+0x8>
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	7fc00000 	.word	0x7fc00000

08007dbc <siprintf>:
 8007dbc:	b40e      	push	{r1, r2, r3}
 8007dbe:	b500      	push	{lr}
 8007dc0:	b09c      	sub	sp, #112	; 0x70
 8007dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8007dc4:	9002      	str	r0, [sp, #8]
 8007dc6:	9006      	str	r0, [sp, #24]
 8007dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dcc:	4809      	ldr	r0, [pc, #36]	; (8007df4 <siprintf+0x38>)
 8007dce:	9107      	str	r1, [sp, #28]
 8007dd0:	9104      	str	r1, [sp, #16]
 8007dd2:	4909      	ldr	r1, [pc, #36]	; (8007df8 <siprintf+0x3c>)
 8007dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd8:	9105      	str	r1, [sp, #20]
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	a902      	add	r1, sp, #8
 8007de0:	f002 fed6 	bl	800ab90 <_svfiprintf_r>
 8007de4:	9b02      	ldr	r3, [sp, #8]
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	b01c      	add	sp, #112	; 0x70
 8007dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df0:	b003      	add	sp, #12
 8007df2:	4770      	bx	lr
 8007df4:	20000010 	.word	0x20000010
 8007df8:	ffff0208 	.word	0xffff0208

08007dfc <sulp>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	ec45 4b10 	vmov	d0, r4, r5
 8007e06:	4616      	mov	r6, r2
 8007e08:	f002 fc20 	bl	800a64c <__ulp>
 8007e0c:	ec51 0b10 	vmov	r0, r1, d0
 8007e10:	b17e      	cbz	r6, 8007e32 <sulp+0x36>
 8007e12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dd09      	ble.n	8007e32 <sulp+0x36>
 8007e1e:	051b      	lsls	r3, r3, #20
 8007e20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e24:	2400      	movs	r4, #0
 8007e26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	f7f8 fbeb 	bl	8000608 <__aeabi_dmul>
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	0000      	movs	r0, r0
	...

08007e38 <_strtod_l>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	ed2d 8b02 	vpush	{d8}
 8007e40:	b09d      	sub	sp, #116	; 0x74
 8007e42:	461f      	mov	r7, r3
 8007e44:	2300      	movs	r3, #0
 8007e46:	9318      	str	r3, [sp, #96]	; 0x60
 8007e48:	4ba2      	ldr	r3, [pc, #648]	; (80080d4 <_strtod_l+0x29c>)
 8007e4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	9305      	str	r3, [sp, #20]
 8007e50:	4604      	mov	r4, r0
 8007e52:	4618      	mov	r0, r3
 8007e54:	4688      	mov	r8, r1
 8007e56:	f7f8 f9c3 	bl	80001e0 <strlen>
 8007e5a:	f04f 0a00 	mov.w	sl, #0
 8007e5e:	4605      	mov	r5, r0
 8007e60:	f04f 0b00 	mov.w	fp, #0
 8007e64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	2a2b      	cmp	r2, #43	; 0x2b
 8007e6e:	d04e      	beq.n	8007f0e <_strtod_l+0xd6>
 8007e70:	d83b      	bhi.n	8007eea <_strtod_l+0xb2>
 8007e72:	2a0d      	cmp	r2, #13
 8007e74:	d834      	bhi.n	8007ee0 <_strtod_l+0xa8>
 8007e76:	2a08      	cmp	r2, #8
 8007e78:	d834      	bhi.n	8007ee4 <_strtod_l+0xac>
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	d03e      	beq.n	8007efc <_strtod_l+0xc4>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	930a      	str	r3, [sp, #40]	; 0x28
 8007e82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007e84:	7833      	ldrb	r3, [r6, #0]
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	f040 80b0 	bne.w	8007fec <_strtod_l+0x1b4>
 8007e8c:	7873      	ldrb	r3, [r6, #1]
 8007e8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e92:	2b58      	cmp	r3, #88	; 0x58
 8007e94:	d168      	bne.n	8007f68 <_strtod_l+0x130>
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	ab18      	add	r3, sp, #96	; 0x60
 8007e9c:	9702      	str	r7, [sp, #8]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4a8d      	ldr	r2, [pc, #564]	; (80080d8 <_strtod_l+0x2a0>)
 8007ea2:	ab19      	add	r3, sp, #100	; 0x64
 8007ea4:	a917      	add	r1, sp, #92	; 0x5c
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f001 fd38 	bl	800991c <__gethex>
 8007eac:	f010 0707 	ands.w	r7, r0, #7
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	d005      	beq.n	8007ec0 <_strtod_l+0x88>
 8007eb4:	2f06      	cmp	r7, #6
 8007eb6:	d12c      	bne.n	8007f12 <_strtod_l+0xda>
 8007eb8:	3601      	adds	r6, #1
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9617      	str	r6, [sp, #92]	; 0x5c
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f040 8590 	bne.w	80089e8 <_strtod_l+0xbb0>
 8007ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eca:	b1eb      	cbz	r3, 8007f08 <_strtod_l+0xd0>
 8007ecc:	4652      	mov	r2, sl
 8007ece:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ed2:	ec43 2b10 	vmov	d0, r2, r3
 8007ed6:	b01d      	add	sp, #116	; 0x74
 8007ed8:	ecbd 8b02 	vpop	{d8}
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	2a20      	cmp	r2, #32
 8007ee2:	d1cc      	bne.n	8007e7e <_strtod_l+0x46>
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ee8:	e7be      	b.n	8007e68 <_strtod_l+0x30>
 8007eea:	2a2d      	cmp	r2, #45	; 0x2d
 8007eec:	d1c7      	bne.n	8007e7e <_strtod_l+0x46>
 8007eee:	2201      	movs	r2, #1
 8007ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1c2      	bne.n	8007e82 <_strtod_l+0x4a>
 8007efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007efe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 856e 	bne.w	80089e4 <_strtod_l+0xbac>
 8007f08:	4652      	mov	r2, sl
 8007f0a:	465b      	mov	r3, fp
 8007f0c:	e7e1      	b.n	8007ed2 <_strtod_l+0x9a>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	e7ee      	b.n	8007ef0 <_strtod_l+0xb8>
 8007f12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f14:	b13a      	cbz	r2, 8007f26 <_strtod_l+0xee>
 8007f16:	2135      	movs	r1, #53	; 0x35
 8007f18:	a81a      	add	r0, sp, #104	; 0x68
 8007f1a:	f002 fca2 	bl	800a862 <__copybits>
 8007f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f20:	4620      	mov	r0, r4
 8007f22:	f002 f861 	bl	8009fe8 <_Bfree>
 8007f26:	3f01      	subs	r7, #1
 8007f28:	2f04      	cmp	r7, #4
 8007f2a:	d806      	bhi.n	8007f3a <_strtod_l+0x102>
 8007f2c:	e8df f007 	tbb	[pc, r7]
 8007f30:	1714030a 	.word	0x1714030a
 8007f34:	0a          	.byte	0x0a
 8007f35:	00          	.byte	0x00
 8007f36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007f3a:	0728      	lsls	r0, r5, #28
 8007f3c:	d5c0      	bpl.n	8007ec0 <_strtod_l+0x88>
 8007f3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007f42:	e7bd      	b.n	8007ec0 <_strtod_l+0x88>
 8007f44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007f48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f56:	e7f0      	b.n	8007f3a <_strtod_l+0x102>
 8007f58:	f8df b180 	ldr.w	fp, [pc, #384]	; 80080dc <_strtod_l+0x2a4>
 8007f5c:	e7ed      	b.n	8007f3a <_strtod_l+0x102>
 8007f5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007f62:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007f66:	e7e8      	b.n	8007f3a <_strtod_l+0x102>
 8007f68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	2b30      	cmp	r3, #48	; 0x30
 8007f72:	d0f9      	beq.n	8007f68 <_strtod_l+0x130>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0a3      	beq.n	8007ec0 <_strtod_l+0x88>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f04f 0900 	mov.w	r9, #0
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f82:	9308      	str	r3, [sp, #32]
 8007f84:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f88:	464f      	mov	r7, r9
 8007f8a:	220a      	movs	r2, #10
 8007f8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007f8e:	7806      	ldrb	r6, [r0, #0]
 8007f90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f94:	b2d9      	uxtb	r1, r3
 8007f96:	2909      	cmp	r1, #9
 8007f98:	d92a      	bls.n	8007ff0 <_strtod_l+0x1b8>
 8007f9a:	9905      	ldr	r1, [sp, #20]
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	f002 ff0f 	bl	800adc0 <strncmp>
 8007fa2:	b398      	cbz	r0, 800800c <_strtod_l+0x1d4>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	463d      	mov	r5, r7
 8007faa:	9005      	str	r0, [sp, #20]
 8007fac:	4603      	mov	r3, r0
 8007fae:	2a65      	cmp	r2, #101	; 0x65
 8007fb0:	d001      	beq.n	8007fb6 <_strtod_l+0x17e>
 8007fb2:	2a45      	cmp	r2, #69	; 0x45
 8007fb4:	d118      	bne.n	8007fe8 <_strtod_l+0x1b0>
 8007fb6:	b91d      	cbnz	r5, 8007fc0 <_strtod_l+0x188>
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	4302      	orrs	r2, r0
 8007fbc:	d09e      	beq.n	8007efc <_strtod_l+0xc4>
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007fc4:	f108 0201 	add.w	r2, r8, #1
 8007fc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007fce:	2a2b      	cmp	r2, #43	; 0x2b
 8007fd0:	d075      	beq.n	80080be <_strtod_l+0x286>
 8007fd2:	2a2d      	cmp	r2, #45	; 0x2d
 8007fd4:	d07b      	beq.n	80080ce <_strtod_l+0x296>
 8007fd6:	f04f 0c00 	mov.w	ip, #0
 8007fda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007fde:	2909      	cmp	r1, #9
 8007fe0:	f240 8082 	bls.w	80080e8 <_strtod_l+0x2b0>
 8007fe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007fe8:	2600      	movs	r6, #0
 8007fea:	e09d      	b.n	8008128 <_strtod_l+0x2f0>
 8007fec:	2300      	movs	r3, #0
 8007fee:	e7c4      	b.n	8007f7a <_strtod_l+0x142>
 8007ff0:	2f08      	cmp	r7, #8
 8007ff2:	bfd8      	it	le
 8007ff4:	9907      	ldrle	r1, [sp, #28]
 8007ff6:	f100 0001 	add.w	r0, r0, #1
 8007ffa:	bfda      	itte	le
 8007ffc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008000:	9307      	strle	r3, [sp, #28]
 8008002:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008006:	3701      	adds	r7, #1
 8008008:	9017      	str	r0, [sp, #92]	; 0x5c
 800800a:	e7bf      	b.n	8007f8c <_strtod_l+0x154>
 800800c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800800e:	195a      	adds	r2, r3, r5
 8008010:	9217      	str	r2, [sp, #92]	; 0x5c
 8008012:	5d5a      	ldrb	r2, [r3, r5]
 8008014:	2f00      	cmp	r7, #0
 8008016:	d037      	beq.n	8008088 <_strtod_l+0x250>
 8008018:	9005      	str	r0, [sp, #20]
 800801a:	463d      	mov	r5, r7
 800801c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008020:	2b09      	cmp	r3, #9
 8008022:	d912      	bls.n	800804a <_strtod_l+0x212>
 8008024:	2301      	movs	r3, #1
 8008026:	e7c2      	b.n	8007fae <_strtod_l+0x176>
 8008028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	9217      	str	r2, [sp, #92]	; 0x5c
 800802e:	785a      	ldrb	r2, [r3, #1]
 8008030:	3001      	adds	r0, #1
 8008032:	2a30      	cmp	r2, #48	; 0x30
 8008034:	d0f8      	beq.n	8008028 <_strtod_l+0x1f0>
 8008036:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800803a:	2b08      	cmp	r3, #8
 800803c:	f200 84d9 	bhi.w	80089f2 <_strtod_l+0xbba>
 8008040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008042:	9005      	str	r0, [sp, #20]
 8008044:	2000      	movs	r0, #0
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	4605      	mov	r5, r0
 800804a:	3a30      	subs	r2, #48	; 0x30
 800804c:	f100 0301 	add.w	r3, r0, #1
 8008050:	d014      	beq.n	800807c <_strtod_l+0x244>
 8008052:	9905      	ldr	r1, [sp, #20]
 8008054:	4419      	add	r1, r3
 8008056:	9105      	str	r1, [sp, #20]
 8008058:	462b      	mov	r3, r5
 800805a:	eb00 0e05 	add.w	lr, r0, r5
 800805e:	210a      	movs	r1, #10
 8008060:	4573      	cmp	r3, lr
 8008062:	d113      	bne.n	800808c <_strtod_l+0x254>
 8008064:	182b      	adds	r3, r5, r0
 8008066:	2b08      	cmp	r3, #8
 8008068:	f105 0501 	add.w	r5, r5, #1
 800806c:	4405      	add	r5, r0
 800806e:	dc1c      	bgt.n	80080aa <_strtod_l+0x272>
 8008070:	9907      	ldr	r1, [sp, #28]
 8008072:	230a      	movs	r3, #10
 8008074:	fb03 2301 	mla	r3, r3, r1, r2
 8008078:	9307      	str	r3, [sp, #28]
 800807a:	2300      	movs	r3, #0
 800807c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800807e:	1c51      	adds	r1, r2, #1
 8008080:	9117      	str	r1, [sp, #92]	; 0x5c
 8008082:	7852      	ldrb	r2, [r2, #1]
 8008084:	4618      	mov	r0, r3
 8008086:	e7c9      	b.n	800801c <_strtod_l+0x1e4>
 8008088:	4638      	mov	r0, r7
 800808a:	e7d2      	b.n	8008032 <_strtod_l+0x1fa>
 800808c:	2b08      	cmp	r3, #8
 800808e:	dc04      	bgt.n	800809a <_strtod_l+0x262>
 8008090:	9e07      	ldr	r6, [sp, #28]
 8008092:	434e      	muls	r6, r1
 8008094:	9607      	str	r6, [sp, #28]
 8008096:	3301      	adds	r3, #1
 8008098:	e7e2      	b.n	8008060 <_strtod_l+0x228>
 800809a:	f103 0c01 	add.w	ip, r3, #1
 800809e:	f1bc 0f10 	cmp.w	ip, #16
 80080a2:	bfd8      	it	le
 80080a4:	fb01 f909 	mulle.w	r9, r1, r9
 80080a8:	e7f5      	b.n	8008096 <_strtod_l+0x25e>
 80080aa:	2d10      	cmp	r5, #16
 80080ac:	bfdc      	itt	le
 80080ae:	230a      	movle	r3, #10
 80080b0:	fb03 2909 	mlale	r9, r3, r9, r2
 80080b4:	e7e1      	b.n	800807a <_strtod_l+0x242>
 80080b6:	2300      	movs	r3, #0
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	2301      	movs	r3, #1
 80080bc:	e77c      	b.n	8007fb8 <_strtod_l+0x180>
 80080be:	f04f 0c00 	mov.w	ip, #0
 80080c2:	f108 0202 	add.w	r2, r8, #2
 80080c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80080c8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80080cc:	e785      	b.n	8007fda <_strtod_l+0x1a2>
 80080ce:	f04f 0c01 	mov.w	ip, #1
 80080d2:	e7f6      	b.n	80080c2 <_strtod_l+0x28a>
 80080d4:	0800bce8 	.word	0x0800bce8
 80080d8:	0800ba9c 	.word	0x0800ba9c
 80080dc:	7ff00000 	.word	0x7ff00000
 80080e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080e2:	1c51      	adds	r1, r2, #1
 80080e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80080e6:	7852      	ldrb	r2, [r2, #1]
 80080e8:	2a30      	cmp	r2, #48	; 0x30
 80080ea:	d0f9      	beq.n	80080e0 <_strtod_l+0x2a8>
 80080ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80080f0:	2908      	cmp	r1, #8
 80080f2:	f63f af79 	bhi.w	8007fe8 <_strtod_l+0x1b0>
 80080f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80080fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80080fc:	9206      	str	r2, [sp, #24]
 80080fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008100:	1c51      	adds	r1, r2, #1
 8008102:	9117      	str	r1, [sp, #92]	; 0x5c
 8008104:	7852      	ldrb	r2, [r2, #1]
 8008106:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800810a:	2e09      	cmp	r6, #9
 800810c:	d937      	bls.n	800817e <_strtod_l+0x346>
 800810e:	9e06      	ldr	r6, [sp, #24]
 8008110:	1b89      	subs	r1, r1, r6
 8008112:	2908      	cmp	r1, #8
 8008114:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008118:	dc02      	bgt.n	8008120 <_strtod_l+0x2e8>
 800811a:	4576      	cmp	r6, lr
 800811c:	bfa8      	it	ge
 800811e:	4676      	movge	r6, lr
 8008120:	f1bc 0f00 	cmp.w	ip, #0
 8008124:	d000      	beq.n	8008128 <_strtod_l+0x2f0>
 8008126:	4276      	negs	r6, r6
 8008128:	2d00      	cmp	r5, #0
 800812a:	d14d      	bne.n	80081c8 <_strtod_l+0x390>
 800812c:	9904      	ldr	r1, [sp, #16]
 800812e:	4301      	orrs	r1, r0
 8008130:	f47f aec6 	bne.w	8007ec0 <_strtod_l+0x88>
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f aee1 	bne.w	8007efc <_strtod_l+0xc4>
 800813a:	2a69      	cmp	r2, #105	; 0x69
 800813c:	d027      	beq.n	800818e <_strtod_l+0x356>
 800813e:	dc24      	bgt.n	800818a <_strtod_l+0x352>
 8008140:	2a49      	cmp	r2, #73	; 0x49
 8008142:	d024      	beq.n	800818e <_strtod_l+0x356>
 8008144:	2a4e      	cmp	r2, #78	; 0x4e
 8008146:	f47f aed9 	bne.w	8007efc <_strtod_l+0xc4>
 800814a:	499f      	ldr	r1, [pc, #636]	; (80083c8 <_strtod_l+0x590>)
 800814c:	a817      	add	r0, sp, #92	; 0x5c
 800814e:	f001 fe3d 	bl	8009dcc <__match>
 8008152:	2800      	cmp	r0, #0
 8008154:	f43f aed2 	beq.w	8007efc <_strtod_l+0xc4>
 8008158:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b28      	cmp	r3, #40	; 0x28
 800815e:	d12d      	bne.n	80081bc <_strtod_l+0x384>
 8008160:	499a      	ldr	r1, [pc, #616]	; (80083cc <_strtod_l+0x594>)
 8008162:	aa1a      	add	r2, sp, #104	; 0x68
 8008164:	a817      	add	r0, sp, #92	; 0x5c
 8008166:	f001 fe45 	bl	8009df4 <__hexnan>
 800816a:	2805      	cmp	r0, #5
 800816c:	d126      	bne.n	80081bc <_strtod_l+0x384>
 800816e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008170:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008174:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008178:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800817c:	e6a0      	b.n	8007ec0 <_strtod_l+0x88>
 800817e:	210a      	movs	r1, #10
 8008180:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008184:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008188:	e7b9      	b.n	80080fe <_strtod_l+0x2c6>
 800818a:	2a6e      	cmp	r2, #110	; 0x6e
 800818c:	e7db      	b.n	8008146 <_strtod_l+0x30e>
 800818e:	4990      	ldr	r1, [pc, #576]	; (80083d0 <_strtod_l+0x598>)
 8008190:	a817      	add	r0, sp, #92	; 0x5c
 8008192:	f001 fe1b 	bl	8009dcc <__match>
 8008196:	2800      	cmp	r0, #0
 8008198:	f43f aeb0 	beq.w	8007efc <_strtod_l+0xc4>
 800819c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800819e:	498d      	ldr	r1, [pc, #564]	; (80083d4 <_strtod_l+0x59c>)
 80081a0:	3b01      	subs	r3, #1
 80081a2:	a817      	add	r0, sp, #92	; 0x5c
 80081a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80081a6:	f001 fe11 	bl	8009dcc <__match>
 80081aa:	b910      	cbnz	r0, 80081b2 <_strtod_l+0x37a>
 80081ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ae:	3301      	adds	r3, #1
 80081b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80081b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80083e4 <_strtod_l+0x5ac>
 80081b6:	f04f 0a00 	mov.w	sl, #0
 80081ba:	e681      	b.n	8007ec0 <_strtod_l+0x88>
 80081bc:	4886      	ldr	r0, [pc, #536]	; (80083d8 <_strtod_l+0x5a0>)
 80081be:	f002 fde7 	bl	800ad90 <nan>
 80081c2:	ec5b ab10 	vmov	sl, fp, d0
 80081c6:	e67b      	b.n	8007ec0 <_strtod_l+0x88>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	9807      	ldr	r0, [sp, #28]
 80081cc:	1af3      	subs	r3, r6, r3
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	bf08      	it	eq
 80081d2:	462f      	moveq	r7, r5
 80081d4:	2d10      	cmp	r5, #16
 80081d6:	9306      	str	r3, [sp, #24]
 80081d8:	46a8      	mov	r8, r5
 80081da:	bfa8      	it	ge
 80081dc:	f04f 0810 	movge.w	r8, #16
 80081e0:	f7f8 f998 	bl	8000514 <__aeabi_ui2d>
 80081e4:	2d09      	cmp	r5, #9
 80081e6:	4682      	mov	sl, r0
 80081e8:	468b      	mov	fp, r1
 80081ea:	dd13      	ble.n	8008214 <_strtod_l+0x3dc>
 80081ec:	4b7b      	ldr	r3, [pc, #492]	; (80083dc <_strtod_l+0x5a4>)
 80081ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80081f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081f6:	f7f8 fa07 	bl	8000608 <__aeabi_dmul>
 80081fa:	4682      	mov	sl, r0
 80081fc:	4648      	mov	r0, r9
 80081fe:	468b      	mov	fp, r1
 8008200:	f7f8 f988 	bl	8000514 <__aeabi_ui2d>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	f7f8 f846 	bl	800029c <__adddf3>
 8008210:	4682      	mov	sl, r0
 8008212:	468b      	mov	fp, r1
 8008214:	2d0f      	cmp	r5, #15
 8008216:	dc38      	bgt.n	800828a <_strtod_l+0x452>
 8008218:	9b06      	ldr	r3, [sp, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	f43f ae50 	beq.w	8007ec0 <_strtod_l+0x88>
 8008220:	dd24      	ble.n	800826c <_strtod_l+0x434>
 8008222:	2b16      	cmp	r3, #22
 8008224:	dc0b      	bgt.n	800823e <_strtod_l+0x406>
 8008226:	496d      	ldr	r1, [pc, #436]	; (80083dc <_strtod_l+0x5a4>)
 8008228:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800822c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008230:	4652      	mov	r2, sl
 8008232:	465b      	mov	r3, fp
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	e640      	b.n	8007ec0 <_strtod_l+0x88>
 800823e:	9a06      	ldr	r2, [sp, #24]
 8008240:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008244:	4293      	cmp	r3, r2
 8008246:	db20      	blt.n	800828a <_strtod_l+0x452>
 8008248:	4c64      	ldr	r4, [pc, #400]	; (80083dc <_strtod_l+0x5a4>)
 800824a:	f1c5 050f 	rsb	r5, r5, #15
 800824e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008252:	4652      	mov	r2, sl
 8008254:	465b      	mov	r3, fp
 8008256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825a:	f7f8 f9d5 	bl	8000608 <__aeabi_dmul>
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	1b5d      	subs	r5, r3, r5
 8008262:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008266:	e9d4 2300 	ldrd	r2, r3, [r4]
 800826a:	e7e3      	b.n	8008234 <_strtod_l+0x3fc>
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	3316      	adds	r3, #22
 8008270:	db0b      	blt.n	800828a <_strtod_l+0x452>
 8008272:	9b05      	ldr	r3, [sp, #20]
 8008274:	1b9e      	subs	r6, r3, r6
 8008276:	4b59      	ldr	r3, [pc, #356]	; (80083dc <_strtod_l+0x5a4>)
 8008278:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800827c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008280:	4650      	mov	r0, sl
 8008282:	4659      	mov	r1, fp
 8008284:	f7f8 faea 	bl	800085c <__aeabi_ddiv>
 8008288:	e7d6      	b.n	8008238 <_strtod_l+0x400>
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	eba5 0808 	sub.w	r8, r5, r8
 8008290:	4498      	add	r8, r3
 8008292:	f1b8 0f00 	cmp.w	r8, #0
 8008296:	dd74      	ble.n	8008382 <_strtod_l+0x54a>
 8008298:	f018 030f 	ands.w	r3, r8, #15
 800829c:	d00a      	beq.n	80082b4 <_strtod_l+0x47c>
 800829e:	494f      	ldr	r1, [pc, #316]	; (80083dc <_strtod_l+0x5a4>)
 80082a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082a4:	4652      	mov	r2, sl
 80082a6:	465b      	mov	r3, fp
 80082a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082ac:	f7f8 f9ac 	bl	8000608 <__aeabi_dmul>
 80082b0:	4682      	mov	sl, r0
 80082b2:	468b      	mov	fp, r1
 80082b4:	f038 080f 	bics.w	r8, r8, #15
 80082b8:	d04f      	beq.n	800835a <_strtod_l+0x522>
 80082ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80082be:	dd22      	ble.n	8008306 <_strtod_l+0x4ce>
 80082c0:	2500      	movs	r5, #0
 80082c2:	462e      	mov	r6, r5
 80082c4:	9507      	str	r5, [sp, #28]
 80082c6:	9505      	str	r5, [sp, #20]
 80082c8:	2322      	movs	r3, #34	; 0x22
 80082ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80083e4 <_strtod_l+0x5ac>
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	f04f 0a00 	mov.w	sl, #0
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f43f adf2 	beq.w	8007ec0 <_strtod_l+0x88>
 80082dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 fe82 	bl	8009fe8 <_Bfree>
 80082e4:	9905      	ldr	r1, [sp, #20]
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 fe7e 	bl	8009fe8 <_Bfree>
 80082ec:	4631      	mov	r1, r6
 80082ee:	4620      	mov	r0, r4
 80082f0:	f001 fe7a 	bl	8009fe8 <_Bfree>
 80082f4:	9907      	ldr	r1, [sp, #28]
 80082f6:	4620      	mov	r0, r4
 80082f8:	f001 fe76 	bl	8009fe8 <_Bfree>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	f001 fe72 	bl	8009fe8 <_Bfree>
 8008304:	e5dc      	b.n	8007ec0 <_strtod_l+0x88>
 8008306:	4b36      	ldr	r3, [pc, #216]	; (80083e0 <_strtod_l+0x5a8>)
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	2300      	movs	r3, #0
 800830c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008310:	4650      	mov	r0, sl
 8008312:	4659      	mov	r1, fp
 8008314:	4699      	mov	r9, r3
 8008316:	f1b8 0f01 	cmp.w	r8, #1
 800831a:	dc21      	bgt.n	8008360 <_strtod_l+0x528>
 800831c:	b10b      	cbz	r3, 8008322 <_strtod_l+0x4ea>
 800831e:	4682      	mov	sl, r0
 8008320:	468b      	mov	fp, r1
 8008322:	4b2f      	ldr	r3, [pc, #188]	; (80083e0 <_strtod_l+0x5a8>)
 8008324:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008328:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008334:	f7f8 f968 	bl	8000608 <__aeabi_dmul>
 8008338:	4b2a      	ldr	r3, [pc, #168]	; (80083e4 <_strtod_l+0x5ac>)
 800833a:	460a      	mov	r2, r1
 800833c:	400b      	ands	r3, r1
 800833e:	492a      	ldr	r1, [pc, #168]	; (80083e8 <_strtod_l+0x5b0>)
 8008340:	428b      	cmp	r3, r1
 8008342:	4682      	mov	sl, r0
 8008344:	d8bc      	bhi.n	80082c0 <_strtod_l+0x488>
 8008346:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800834a:	428b      	cmp	r3, r1
 800834c:	bf86      	itte	hi
 800834e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80083ec <_strtod_l+0x5b4>
 8008352:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008356:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800835a:	2300      	movs	r3, #0
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	e084      	b.n	800846a <_strtod_l+0x632>
 8008360:	f018 0f01 	tst.w	r8, #1
 8008364:	d005      	beq.n	8008372 <_strtod_l+0x53a>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	2301      	movs	r3, #1
 8008372:	9a04      	ldr	r2, [sp, #16]
 8008374:	3208      	adds	r2, #8
 8008376:	f109 0901 	add.w	r9, r9, #1
 800837a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800837e:	9204      	str	r2, [sp, #16]
 8008380:	e7c9      	b.n	8008316 <_strtod_l+0x4de>
 8008382:	d0ea      	beq.n	800835a <_strtod_l+0x522>
 8008384:	f1c8 0800 	rsb	r8, r8, #0
 8008388:	f018 020f 	ands.w	r2, r8, #15
 800838c:	d00a      	beq.n	80083a4 <_strtod_l+0x56c>
 800838e:	4b13      	ldr	r3, [pc, #76]	; (80083dc <_strtod_l+0x5a4>)
 8008390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008394:	4650      	mov	r0, sl
 8008396:	4659      	mov	r1, fp
 8008398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839c:	f7f8 fa5e 	bl	800085c <__aeabi_ddiv>
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80083a8:	d0d7      	beq.n	800835a <_strtod_l+0x522>
 80083aa:	f1b8 0f1f 	cmp.w	r8, #31
 80083ae:	dd1f      	ble.n	80083f0 <_strtod_l+0x5b8>
 80083b0:	2500      	movs	r5, #0
 80083b2:	462e      	mov	r6, r5
 80083b4:	9507      	str	r5, [sp, #28]
 80083b6:	9505      	str	r5, [sp, #20]
 80083b8:	2322      	movs	r3, #34	; 0x22
 80083ba:	f04f 0a00 	mov.w	sl, #0
 80083be:	f04f 0b00 	mov.w	fp, #0
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	e786      	b.n	80082d4 <_strtod_l+0x49c>
 80083c6:	bf00      	nop
 80083c8:	0800ba6d 	.word	0x0800ba6d
 80083cc:	0800bab0 	.word	0x0800bab0
 80083d0:	0800ba65 	.word	0x0800ba65
 80083d4:	0800bbf4 	.word	0x0800bbf4
 80083d8:	0800bea0 	.word	0x0800bea0
 80083dc:	0800bd80 	.word	0x0800bd80
 80083e0:	0800bd58 	.word	0x0800bd58
 80083e4:	7ff00000 	.word	0x7ff00000
 80083e8:	7ca00000 	.word	0x7ca00000
 80083ec:	7fefffff 	.word	0x7fefffff
 80083f0:	f018 0310 	ands.w	r3, r8, #16
 80083f4:	bf18      	it	ne
 80083f6:	236a      	movne	r3, #106	; 0x6a
 80083f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80087a8 <_strtod_l+0x970>
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	4650      	mov	r0, sl
 8008400:	4659      	mov	r1, fp
 8008402:	2300      	movs	r3, #0
 8008404:	f018 0f01 	tst.w	r8, #1
 8008408:	d004      	beq.n	8008414 <_strtod_l+0x5dc>
 800840a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800840e:	f7f8 f8fb 	bl	8000608 <__aeabi_dmul>
 8008412:	2301      	movs	r3, #1
 8008414:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008418:	f109 0908 	add.w	r9, r9, #8
 800841c:	d1f2      	bne.n	8008404 <_strtod_l+0x5cc>
 800841e:	b10b      	cbz	r3, 8008424 <_strtod_l+0x5ec>
 8008420:	4682      	mov	sl, r0
 8008422:	468b      	mov	fp, r1
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	b1c3      	cbz	r3, 800845a <_strtod_l+0x622>
 8008428:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800842c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008430:	2b00      	cmp	r3, #0
 8008432:	4659      	mov	r1, fp
 8008434:	dd11      	ble.n	800845a <_strtod_l+0x622>
 8008436:	2b1f      	cmp	r3, #31
 8008438:	f340 8124 	ble.w	8008684 <_strtod_l+0x84c>
 800843c:	2b34      	cmp	r3, #52	; 0x34
 800843e:	bfde      	ittt	le
 8008440:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008444:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008448:	fa03 f202 	lslle.w	r2, r3, r2
 800844c:	f04f 0a00 	mov.w	sl, #0
 8008450:	bfcc      	ite	gt
 8008452:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008456:	ea02 0b01 	andle.w	fp, r2, r1
 800845a:	2200      	movs	r2, #0
 800845c:	2300      	movs	r3, #0
 800845e:	4650      	mov	r0, sl
 8008460:	4659      	mov	r1, fp
 8008462:	f7f8 fb39 	bl	8000ad8 <__aeabi_dcmpeq>
 8008466:	2800      	cmp	r0, #0
 8008468:	d1a2      	bne.n	80083b0 <_strtod_l+0x578>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	9908      	ldr	r1, [sp, #32]
 8008470:	462b      	mov	r3, r5
 8008472:	463a      	mov	r2, r7
 8008474:	4620      	mov	r0, r4
 8008476:	f001 fe1f 	bl	800a0b8 <__s2b>
 800847a:	9007      	str	r0, [sp, #28]
 800847c:	2800      	cmp	r0, #0
 800847e:	f43f af1f 	beq.w	80082c0 <_strtod_l+0x488>
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	1b9e      	subs	r6, r3, r6
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bfb4      	ite	lt
 800848c:	4633      	movlt	r3, r6
 800848e:	2300      	movge	r3, #0
 8008490:	930c      	str	r3, [sp, #48]	; 0x30
 8008492:	9b06      	ldr	r3, [sp, #24]
 8008494:	2500      	movs	r5, #0
 8008496:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800849a:	9312      	str	r3, [sp, #72]	; 0x48
 800849c:	462e      	mov	r6, r5
 800849e:	9b07      	ldr	r3, [sp, #28]
 80084a0:	4620      	mov	r0, r4
 80084a2:	6859      	ldr	r1, [r3, #4]
 80084a4:	f001 fd60 	bl	8009f68 <_Balloc>
 80084a8:	9005      	str	r0, [sp, #20]
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f43f af0c 	beq.w	80082c8 <_strtod_l+0x490>
 80084b0:	9b07      	ldr	r3, [sp, #28]
 80084b2:	691a      	ldr	r2, [r3, #16]
 80084b4:	3202      	adds	r2, #2
 80084b6:	f103 010c 	add.w	r1, r3, #12
 80084ba:	0092      	lsls	r2, r2, #2
 80084bc:	300c      	adds	r0, #12
 80084be:	f7fe fde7 	bl	8007090 <memcpy>
 80084c2:	ec4b ab10 	vmov	d0, sl, fp
 80084c6:	aa1a      	add	r2, sp, #104	; 0x68
 80084c8:	a919      	add	r1, sp, #100	; 0x64
 80084ca:	4620      	mov	r0, r4
 80084cc:	f002 f93a 	bl	800a744 <__d2b>
 80084d0:	ec4b ab18 	vmov	d8, sl, fp
 80084d4:	9018      	str	r0, [sp, #96]	; 0x60
 80084d6:	2800      	cmp	r0, #0
 80084d8:	f43f aef6 	beq.w	80082c8 <_strtod_l+0x490>
 80084dc:	2101      	movs	r1, #1
 80084de:	4620      	mov	r0, r4
 80084e0:	f001 fe84 	bl	800a1ec <__i2b>
 80084e4:	4606      	mov	r6, r0
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f43f aeee 	beq.w	80082c8 <_strtod_l+0x490>
 80084ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084ee:	9904      	ldr	r1, [sp, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bfab      	itete	ge
 80084f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80084f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80084f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80084fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80084fe:	bfac      	ite	ge
 8008500:	eb03 0902 	addge.w	r9, r3, r2
 8008504:	1ad7      	sublt	r7, r2, r3
 8008506:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008508:	eba3 0801 	sub.w	r8, r3, r1
 800850c:	4490      	add	r8, r2
 800850e:	4ba1      	ldr	r3, [pc, #644]	; (8008794 <_strtod_l+0x95c>)
 8008510:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008514:	4598      	cmp	r8, r3
 8008516:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800851a:	f280 80c7 	bge.w	80086ac <_strtod_l+0x874>
 800851e:	eba3 0308 	sub.w	r3, r3, r8
 8008522:	2b1f      	cmp	r3, #31
 8008524:	eba2 0203 	sub.w	r2, r2, r3
 8008528:	f04f 0101 	mov.w	r1, #1
 800852c:	f300 80b1 	bgt.w	8008692 <_strtod_l+0x85a>
 8008530:	fa01 f303 	lsl.w	r3, r1, r3
 8008534:	930d      	str	r3, [sp, #52]	; 0x34
 8008536:	2300      	movs	r3, #0
 8008538:	9308      	str	r3, [sp, #32]
 800853a:	eb09 0802 	add.w	r8, r9, r2
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	45c1      	cmp	r9, r8
 8008542:	4417      	add	r7, r2
 8008544:	441f      	add	r7, r3
 8008546:	464b      	mov	r3, r9
 8008548:	bfa8      	it	ge
 800854a:	4643      	movge	r3, r8
 800854c:	42bb      	cmp	r3, r7
 800854e:	bfa8      	it	ge
 8008550:	463b      	movge	r3, r7
 8008552:	2b00      	cmp	r3, #0
 8008554:	bfc2      	ittt	gt
 8008556:	eba8 0803 	subgt.w	r8, r8, r3
 800855a:	1aff      	subgt	r7, r7, r3
 800855c:	eba9 0903 	subgt.w	r9, r9, r3
 8008560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008562:	2b00      	cmp	r3, #0
 8008564:	dd17      	ble.n	8008596 <_strtod_l+0x75e>
 8008566:	4631      	mov	r1, r6
 8008568:	461a      	mov	r2, r3
 800856a:	4620      	mov	r0, r4
 800856c:	f001 fefe 	bl	800a36c <__pow5mult>
 8008570:	4606      	mov	r6, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f aea8 	beq.w	80082c8 <_strtod_l+0x490>
 8008578:	4601      	mov	r1, r0
 800857a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800857c:	4620      	mov	r0, r4
 800857e:	f001 fe4b 	bl	800a218 <__multiply>
 8008582:	900b      	str	r0, [sp, #44]	; 0x2c
 8008584:	2800      	cmp	r0, #0
 8008586:	f43f ae9f 	beq.w	80082c8 <_strtod_l+0x490>
 800858a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800858c:	4620      	mov	r0, r4
 800858e:	f001 fd2b 	bl	8009fe8 <_Bfree>
 8008592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008594:	9318      	str	r3, [sp, #96]	; 0x60
 8008596:	f1b8 0f00 	cmp.w	r8, #0
 800859a:	f300 808c 	bgt.w	80086b6 <_strtod_l+0x87e>
 800859e:	9b06      	ldr	r3, [sp, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	dd08      	ble.n	80085b6 <_strtod_l+0x77e>
 80085a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085a6:	9905      	ldr	r1, [sp, #20]
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 fedf 	bl	800a36c <__pow5mult>
 80085ae:	9005      	str	r0, [sp, #20]
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f43f ae89 	beq.w	80082c8 <_strtod_l+0x490>
 80085b6:	2f00      	cmp	r7, #0
 80085b8:	dd08      	ble.n	80085cc <_strtod_l+0x794>
 80085ba:	9905      	ldr	r1, [sp, #20]
 80085bc:	463a      	mov	r2, r7
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 ff2e 	bl	800a420 <__lshift>
 80085c4:	9005      	str	r0, [sp, #20]
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f ae7e 	beq.w	80082c8 <_strtod_l+0x490>
 80085cc:	f1b9 0f00 	cmp.w	r9, #0
 80085d0:	dd08      	ble.n	80085e4 <_strtod_l+0x7ac>
 80085d2:	4631      	mov	r1, r6
 80085d4:	464a      	mov	r2, r9
 80085d6:	4620      	mov	r0, r4
 80085d8:	f001 ff22 	bl	800a420 <__lshift>
 80085dc:	4606      	mov	r6, r0
 80085de:	2800      	cmp	r0, #0
 80085e0:	f43f ae72 	beq.w	80082c8 <_strtod_l+0x490>
 80085e4:	9a05      	ldr	r2, [sp, #20]
 80085e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085e8:	4620      	mov	r0, r4
 80085ea:	f001 ffa5 	bl	800a538 <__mdiff>
 80085ee:	4605      	mov	r5, r0
 80085f0:	2800      	cmp	r0, #0
 80085f2:	f43f ae69 	beq.w	80082c8 <_strtod_l+0x490>
 80085f6:	68c3      	ldr	r3, [r0, #12]
 80085f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085fa:	2300      	movs	r3, #0
 80085fc:	60c3      	str	r3, [r0, #12]
 80085fe:	4631      	mov	r1, r6
 8008600:	f001 ff7e 	bl	800a500 <__mcmp>
 8008604:	2800      	cmp	r0, #0
 8008606:	da60      	bge.n	80086ca <_strtod_l+0x892>
 8008608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800860a:	ea53 030a 	orrs.w	r3, r3, sl
 800860e:	f040 8082 	bne.w	8008716 <_strtod_l+0x8de>
 8008612:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008616:	2b00      	cmp	r3, #0
 8008618:	d17d      	bne.n	8008716 <_strtod_l+0x8de>
 800861a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800861e:	0d1b      	lsrs	r3, r3, #20
 8008620:	051b      	lsls	r3, r3, #20
 8008622:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008626:	d976      	bls.n	8008716 <_strtod_l+0x8de>
 8008628:	696b      	ldr	r3, [r5, #20]
 800862a:	b913      	cbnz	r3, 8008632 <_strtod_l+0x7fa>
 800862c:	692b      	ldr	r3, [r5, #16]
 800862e:	2b01      	cmp	r3, #1
 8008630:	dd71      	ble.n	8008716 <_strtod_l+0x8de>
 8008632:	4629      	mov	r1, r5
 8008634:	2201      	movs	r2, #1
 8008636:	4620      	mov	r0, r4
 8008638:	f001 fef2 	bl	800a420 <__lshift>
 800863c:	4631      	mov	r1, r6
 800863e:	4605      	mov	r5, r0
 8008640:	f001 ff5e 	bl	800a500 <__mcmp>
 8008644:	2800      	cmp	r0, #0
 8008646:	dd66      	ble.n	8008716 <_strtod_l+0x8de>
 8008648:	9904      	ldr	r1, [sp, #16]
 800864a:	4a53      	ldr	r2, [pc, #332]	; (8008798 <_strtod_l+0x960>)
 800864c:	465b      	mov	r3, fp
 800864e:	2900      	cmp	r1, #0
 8008650:	f000 8081 	beq.w	8008756 <_strtod_l+0x91e>
 8008654:	ea02 010b 	and.w	r1, r2, fp
 8008658:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800865c:	dc7b      	bgt.n	8008756 <_strtod_l+0x91e>
 800865e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008662:	f77f aea9 	ble.w	80083b8 <_strtod_l+0x580>
 8008666:	4b4d      	ldr	r3, [pc, #308]	; (800879c <_strtod_l+0x964>)
 8008668:	4650      	mov	r0, sl
 800866a:	4659      	mov	r1, fp
 800866c:	2200      	movs	r2, #0
 800866e:	f7f7 ffcb 	bl	8000608 <__aeabi_dmul>
 8008672:	460b      	mov	r3, r1
 8008674:	4303      	orrs	r3, r0
 8008676:	bf08      	it	eq
 8008678:	2322      	moveq	r3, #34	; 0x22
 800867a:	4682      	mov	sl, r0
 800867c:	468b      	mov	fp, r1
 800867e:	bf08      	it	eq
 8008680:	6023      	streq	r3, [r4, #0]
 8008682:	e62b      	b.n	80082dc <_strtod_l+0x4a4>
 8008684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008688:	fa02 f303 	lsl.w	r3, r2, r3
 800868c:	ea03 0a0a 	and.w	sl, r3, sl
 8008690:	e6e3      	b.n	800845a <_strtod_l+0x622>
 8008692:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008696:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800869a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800869e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80086a2:	fa01 f308 	lsl.w	r3, r1, r8
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	910d      	str	r1, [sp, #52]	; 0x34
 80086aa:	e746      	b.n	800853a <_strtod_l+0x702>
 80086ac:	2300      	movs	r3, #0
 80086ae:	9308      	str	r3, [sp, #32]
 80086b0:	2301      	movs	r3, #1
 80086b2:	930d      	str	r3, [sp, #52]	; 0x34
 80086b4:	e741      	b.n	800853a <_strtod_l+0x702>
 80086b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086b8:	4642      	mov	r2, r8
 80086ba:	4620      	mov	r0, r4
 80086bc:	f001 feb0 	bl	800a420 <__lshift>
 80086c0:	9018      	str	r0, [sp, #96]	; 0x60
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f47f af6b 	bne.w	800859e <_strtod_l+0x766>
 80086c8:	e5fe      	b.n	80082c8 <_strtod_l+0x490>
 80086ca:	465f      	mov	r7, fp
 80086cc:	d16e      	bne.n	80087ac <_strtod_l+0x974>
 80086ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086d4:	b342      	cbz	r2, 8008728 <_strtod_l+0x8f0>
 80086d6:	4a32      	ldr	r2, [pc, #200]	; (80087a0 <_strtod_l+0x968>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d128      	bne.n	800872e <_strtod_l+0x8f6>
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	4651      	mov	r1, sl
 80086e0:	b1eb      	cbz	r3, 800871e <_strtod_l+0x8e6>
 80086e2:	4b2d      	ldr	r3, [pc, #180]	; (8008798 <_strtod_l+0x960>)
 80086e4:	403b      	ands	r3, r7
 80086e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ee:	d819      	bhi.n	8008724 <_strtod_l+0x8ec>
 80086f0:	0d1b      	lsrs	r3, r3, #20
 80086f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	4299      	cmp	r1, r3
 80086fc:	d117      	bne.n	800872e <_strtod_l+0x8f6>
 80086fe:	4b29      	ldr	r3, [pc, #164]	; (80087a4 <_strtod_l+0x96c>)
 8008700:	429f      	cmp	r7, r3
 8008702:	d102      	bne.n	800870a <_strtod_l+0x8d2>
 8008704:	3101      	adds	r1, #1
 8008706:	f43f addf 	beq.w	80082c8 <_strtod_l+0x490>
 800870a:	4b23      	ldr	r3, [pc, #140]	; (8008798 <_strtod_l+0x960>)
 800870c:	403b      	ands	r3, r7
 800870e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008712:	f04f 0a00 	mov.w	sl, #0
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1a4      	bne.n	8008666 <_strtod_l+0x82e>
 800871c:	e5de      	b.n	80082dc <_strtod_l+0x4a4>
 800871e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008722:	e7ea      	b.n	80086fa <_strtod_l+0x8c2>
 8008724:	4613      	mov	r3, r2
 8008726:	e7e8      	b.n	80086fa <_strtod_l+0x8c2>
 8008728:	ea53 030a 	orrs.w	r3, r3, sl
 800872c:	d08c      	beq.n	8008648 <_strtod_l+0x810>
 800872e:	9b08      	ldr	r3, [sp, #32]
 8008730:	b1db      	cbz	r3, 800876a <_strtod_l+0x932>
 8008732:	423b      	tst	r3, r7
 8008734:	d0ef      	beq.n	8008716 <_strtod_l+0x8de>
 8008736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008738:	9a04      	ldr	r2, [sp, #16]
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	b1c3      	cbz	r3, 8008772 <_strtod_l+0x93a>
 8008740:	f7ff fb5c 	bl	8007dfc <sulp>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	ec51 0b18 	vmov	r0, r1, d8
 800874c:	f7f7 fda6 	bl	800029c <__adddf3>
 8008750:	4682      	mov	sl, r0
 8008752:	468b      	mov	fp, r1
 8008754:	e7df      	b.n	8008716 <_strtod_l+0x8de>
 8008756:	4013      	ands	r3, r2
 8008758:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800875c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008760:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008764:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008768:	e7d5      	b.n	8008716 <_strtod_l+0x8de>
 800876a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876c:	ea13 0f0a 	tst.w	r3, sl
 8008770:	e7e0      	b.n	8008734 <_strtod_l+0x8fc>
 8008772:	f7ff fb43 	bl	8007dfc <sulp>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	ec51 0b18 	vmov	r0, r1, d8
 800877e:	f7f7 fd8b 	bl	8000298 <__aeabi_dsub>
 8008782:	2200      	movs	r2, #0
 8008784:	2300      	movs	r3, #0
 8008786:	4682      	mov	sl, r0
 8008788:	468b      	mov	fp, r1
 800878a:	f7f8 f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800878e:	2800      	cmp	r0, #0
 8008790:	d0c1      	beq.n	8008716 <_strtod_l+0x8de>
 8008792:	e611      	b.n	80083b8 <_strtod_l+0x580>
 8008794:	fffffc02 	.word	0xfffffc02
 8008798:	7ff00000 	.word	0x7ff00000
 800879c:	39500000 	.word	0x39500000
 80087a0:	000fffff 	.word	0x000fffff
 80087a4:	7fefffff 	.word	0x7fefffff
 80087a8:	0800bac8 	.word	0x0800bac8
 80087ac:	4631      	mov	r1, r6
 80087ae:	4628      	mov	r0, r5
 80087b0:	f002 f824 	bl	800a7fc <__ratio>
 80087b4:	ec59 8b10 	vmov	r8, r9, d0
 80087b8:	ee10 0a10 	vmov	r0, s0
 80087bc:	2200      	movs	r2, #0
 80087be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087c2:	4649      	mov	r1, r9
 80087c4:	f7f8 f99c 	bl	8000b00 <__aeabi_dcmple>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d07a      	beq.n	80088c2 <_strtod_l+0xa8a>
 80087cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d04a      	beq.n	8008868 <_strtod_l+0xa30>
 80087d2:	4b95      	ldr	r3, [pc, #596]	; (8008a28 <_strtod_l+0xbf0>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008a28 <_strtod_l+0xbf0>
 80087de:	f04f 0800 	mov.w	r8, #0
 80087e2:	4b92      	ldr	r3, [pc, #584]	; (8008a2c <_strtod_l+0xbf4>)
 80087e4:	403b      	ands	r3, r7
 80087e6:	930d      	str	r3, [sp, #52]	; 0x34
 80087e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087ea:	4b91      	ldr	r3, [pc, #580]	; (8008a30 <_strtod_l+0xbf8>)
 80087ec:	429a      	cmp	r2, r3
 80087ee:	f040 80b0 	bne.w	8008952 <_strtod_l+0xb1a>
 80087f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80087fa:	ec4b ab10 	vmov	d0, sl, fp
 80087fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008802:	f001 ff23 	bl	800a64c <__ulp>
 8008806:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800880a:	ec53 2b10 	vmov	r2, r3, d0
 800880e:	f7f7 fefb 	bl	8000608 <__aeabi_dmul>
 8008812:	4652      	mov	r2, sl
 8008814:	465b      	mov	r3, fp
 8008816:	f7f7 fd41 	bl	800029c <__adddf3>
 800881a:	460b      	mov	r3, r1
 800881c:	4983      	ldr	r1, [pc, #524]	; (8008a2c <_strtod_l+0xbf4>)
 800881e:	4a85      	ldr	r2, [pc, #532]	; (8008a34 <_strtod_l+0xbfc>)
 8008820:	4019      	ands	r1, r3
 8008822:	4291      	cmp	r1, r2
 8008824:	4682      	mov	sl, r0
 8008826:	d960      	bls.n	80088ea <_strtod_l+0xab2>
 8008828:	ee18 3a90 	vmov	r3, s17
 800882c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008830:	4293      	cmp	r3, r2
 8008832:	d104      	bne.n	800883e <_strtod_l+0xa06>
 8008834:	ee18 3a10 	vmov	r3, s16
 8008838:	3301      	adds	r3, #1
 800883a:	f43f ad45 	beq.w	80082c8 <_strtod_l+0x490>
 800883e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008a40 <_strtod_l+0xc08>
 8008842:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008846:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008848:	4620      	mov	r0, r4
 800884a:	f001 fbcd 	bl	8009fe8 <_Bfree>
 800884e:	9905      	ldr	r1, [sp, #20]
 8008850:	4620      	mov	r0, r4
 8008852:	f001 fbc9 	bl	8009fe8 <_Bfree>
 8008856:	4631      	mov	r1, r6
 8008858:	4620      	mov	r0, r4
 800885a:	f001 fbc5 	bl	8009fe8 <_Bfree>
 800885e:	4629      	mov	r1, r5
 8008860:	4620      	mov	r0, r4
 8008862:	f001 fbc1 	bl	8009fe8 <_Bfree>
 8008866:	e61a      	b.n	800849e <_strtod_l+0x666>
 8008868:	f1ba 0f00 	cmp.w	sl, #0
 800886c:	d11b      	bne.n	80088a6 <_strtod_l+0xa6e>
 800886e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008872:	b9f3      	cbnz	r3, 80088b2 <_strtod_l+0xa7a>
 8008874:	4b6c      	ldr	r3, [pc, #432]	; (8008a28 <_strtod_l+0xbf0>)
 8008876:	2200      	movs	r2, #0
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f8 f936 	bl	8000aec <__aeabi_dcmplt>
 8008880:	b9d0      	cbnz	r0, 80088b8 <_strtod_l+0xa80>
 8008882:	4640      	mov	r0, r8
 8008884:	4649      	mov	r1, r9
 8008886:	4b6c      	ldr	r3, [pc, #432]	; (8008a38 <_strtod_l+0xc00>)
 8008888:	2200      	movs	r2, #0
 800888a:	f7f7 febd 	bl	8000608 <__aeabi_dmul>
 800888e:	4680      	mov	r8, r0
 8008890:	4689      	mov	r9, r1
 8008892:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008896:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800889a:	9315      	str	r3, [sp, #84]	; 0x54
 800889c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80088a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088a4:	e79d      	b.n	80087e2 <_strtod_l+0x9aa>
 80088a6:	f1ba 0f01 	cmp.w	sl, #1
 80088aa:	d102      	bne.n	80088b2 <_strtod_l+0xa7a>
 80088ac:	2f00      	cmp	r7, #0
 80088ae:	f43f ad83 	beq.w	80083b8 <_strtod_l+0x580>
 80088b2:	4b62      	ldr	r3, [pc, #392]	; (8008a3c <_strtod_l+0xc04>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	e78e      	b.n	80087d6 <_strtod_l+0x99e>
 80088b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008a38 <_strtod_l+0xc00>
 80088bc:	f04f 0800 	mov.w	r8, #0
 80088c0:	e7e7      	b.n	8008892 <_strtod_l+0xa5a>
 80088c2:	4b5d      	ldr	r3, [pc, #372]	; (8008a38 <_strtod_l+0xc00>)
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	2200      	movs	r2, #0
 80088ca:	f7f7 fe9d 	bl	8000608 <__aeabi_dmul>
 80088ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d0:	4680      	mov	r8, r0
 80088d2:	4689      	mov	r9, r1
 80088d4:	b933      	cbnz	r3, 80088e4 <_strtod_l+0xaac>
 80088d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088da:	900e      	str	r0, [sp, #56]	; 0x38
 80088dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80088de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80088e2:	e7dd      	b.n	80088a0 <_strtod_l+0xa68>
 80088e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80088e8:	e7f9      	b.n	80088de <_strtod_l+0xaa6>
 80088ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1a8      	bne.n	8008846 <_strtod_l+0xa0e>
 80088f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088fa:	0d1b      	lsrs	r3, r3, #20
 80088fc:	051b      	lsls	r3, r3, #20
 80088fe:	429a      	cmp	r2, r3
 8008900:	d1a1      	bne.n	8008846 <_strtod_l+0xa0e>
 8008902:	4640      	mov	r0, r8
 8008904:	4649      	mov	r1, r9
 8008906:	f7f8 f9df 	bl	8000cc8 <__aeabi_d2lz>
 800890a:	f7f7 fe4f 	bl	80005ac <__aeabi_l2d>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4640      	mov	r0, r8
 8008914:	4649      	mov	r1, r9
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800891c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008920:	ea43 030a 	orr.w	r3, r3, sl
 8008924:	4313      	orrs	r3, r2
 8008926:	4680      	mov	r8, r0
 8008928:	4689      	mov	r9, r1
 800892a:	d055      	beq.n	80089d8 <_strtod_l+0xba0>
 800892c:	a336      	add	r3, pc, #216	; (adr r3, 8008a08 <_strtod_l+0xbd0>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f8 f8db 	bl	8000aec <__aeabi_dcmplt>
 8008936:	2800      	cmp	r0, #0
 8008938:	f47f acd0 	bne.w	80082dc <_strtod_l+0x4a4>
 800893c:	a334      	add	r3, pc, #208	; (adr r3, 8008a10 <_strtod_l+0xbd8>)
 800893e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008942:	4640      	mov	r0, r8
 8008944:	4649      	mov	r1, r9
 8008946:	f7f8 f8ef 	bl	8000b28 <__aeabi_dcmpgt>
 800894a:	2800      	cmp	r0, #0
 800894c:	f43f af7b 	beq.w	8008846 <_strtod_l+0xa0e>
 8008950:	e4c4      	b.n	80082dc <_strtod_l+0x4a4>
 8008952:	9b04      	ldr	r3, [sp, #16]
 8008954:	b333      	cbz	r3, 80089a4 <_strtod_l+0xb6c>
 8008956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008958:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800895c:	d822      	bhi.n	80089a4 <_strtod_l+0xb6c>
 800895e:	a32e      	add	r3, pc, #184	; (adr r3, 8008a18 <_strtod_l+0xbe0>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	f7f8 f8ca 	bl	8000b00 <__aeabi_dcmple>
 800896c:	b1a0      	cbz	r0, 8008998 <_strtod_l+0xb60>
 800896e:	4649      	mov	r1, r9
 8008970:	4640      	mov	r0, r8
 8008972:	f7f8 f921 	bl	8000bb8 <__aeabi_d2uiz>
 8008976:	2801      	cmp	r0, #1
 8008978:	bf38      	it	cc
 800897a:	2001      	movcc	r0, #1
 800897c:	f7f7 fdca 	bl	8000514 <__aeabi_ui2d>
 8008980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008982:	4680      	mov	r8, r0
 8008984:	4689      	mov	r9, r1
 8008986:	bb23      	cbnz	r3, 80089d2 <_strtod_l+0xb9a>
 8008988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800898c:	9010      	str	r0, [sp, #64]	; 0x40
 800898e:	9311      	str	r3, [sp, #68]	; 0x44
 8008990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008994:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	9309      	str	r3, [sp, #36]	; 0x24
 80089a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089a8:	eeb0 0a48 	vmov.f32	s0, s16
 80089ac:	eef0 0a68 	vmov.f32	s1, s17
 80089b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089b4:	f001 fe4a 	bl	800a64c <__ulp>
 80089b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089bc:	ec53 2b10 	vmov	r2, r3, d0
 80089c0:	f7f7 fe22 	bl	8000608 <__aeabi_dmul>
 80089c4:	ec53 2b18 	vmov	r2, r3, d8
 80089c8:	f7f7 fc68 	bl	800029c <__adddf3>
 80089cc:	4682      	mov	sl, r0
 80089ce:	468b      	mov	fp, r1
 80089d0:	e78d      	b.n	80088ee <_strtod_l+0xab6>
 80089d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80089d6:	e7db      	b.n	8008990 <_strtod_l+0xb58>
 80089d8:	a311      	add	r3, pc, #68	; (adr r3, 8008a20 <_strtod_l+0xbe8>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f7f8 f885 	bl	8000aec <__aeabi_dcmplt>
 80089e2:	e7b2      	b.n	800894a <_strtod_l+0xb12>
 80089e4:	2300      	movs	r3, #0
 80089e6:	930a      	str	r3, [sp, #40]	; 0x28
 80089e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	f7ff ba6b 	b.w	8007ec8 <_strtod_l+0x90>
 80089f2:	2a65      	cmp	r2, #101	; 0x65
 80089f4:	f43f ab5f 	beq.w	80080b6 <_strtod_l+0x27e>
 80089f8:	2a45      	cmp	r2, #69	; 0x45
 80089fa:	f43f ab5c 	beq.w	80080b6 <_strtod_l+0x27e>
 80089fe:	2301      	movs	r3, #1
 8008a00:	f7ff bb94 	b.w	800812c <_strtod_l+0x2f4>
 8008a04:	f3af 8000 	nop.w
 8008a08:	94a03595 	.word	0x94a03595
 8008a0c:	3fdfffff 	.word	0x3fdfffff
 8008a10:	35afe535 	.word	0x35afe535
 8008a14:	3fe00000 	.word	0x3fe00000
 8008a18:	ffc00000 	.word	0xffc00000
 8008a1c:	41dfffff 	.word	0x41dfffff
 8008a20:	94a03595 	.word	0x94a03595
 8008a24:	3fcfffff 	.word	0x3fcfffff
 8008a28:	3ff00000 	.word	0x3ff00000
 8008a2c:	7ff00000 	.word	0x7ff00000
 8008a30:	7fe00000 	.word	0x7fe00000
 8008a34:	7c9fffff 	.word	0x7c9fffff
 8008a38:	3fe00000 	.word	0x3fe00000
 8008a3c:	bff00000 	.word	0xbff00000
 8008a40:	7fefffff 	.word	0x7fefffff

08008a44 <_strtod_r>:
 8008a44:	4b01      	ldr	r3, [pc, #4]	; (8008a4c <_strtod_r+0x8>)
 8008a46:	f7ff b9f7 	b.w	8007e38 <_strtod_l>
 8008a4a:	bf00      	nop
 8008a4c:	20000078 	.word	0x20000078

08008a50 <_strtol_l.constprop.0>:
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a56:	d001      	beq.n	8008a5c <_strtol_l.constprop.0+0xc>
 8008a58:	2b24      	cmp	r3, #36	; 0x24
 8008a5a:	d906      	bls.n	8008a6a <_strtol_l.constprop.0+0x1a>
 8008a5c:	f7fe faee 	bl	800703c <__errno>
 8008a60:	2316      	movs	r3, #22
 8008a62:	6003      	str	r3, [r0, #0]
 8008a64:	2000      	movs	r0, #0
 8008a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b50 <_strtol_l.constprop.0+0x100>
 8008a6e:	460d      	mov	r5, r1
 8008a70:	462e      	mov	r6, r5
 8008a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a76:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008a7a:	f017 0708 	ands.w	r7, r7, #8
 8008a7e:	d1f7      	bne.n	8008a70 <_strtol_l.constprop.0+0x20>
 8008a80:	2c2d      	cmp	r4, #45	; 0x2d
 8008a82:	d132      	bne.n	8008aea <_strtol_l.constprop.0+0x9a>
 8008a84:	782c      	ldrb	r4, [r5, #0]
 8008a86:	2701      	movs	r7, #1
 8008a88:	1cb5      	adds	r5, r6, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d05b      	beq.n	8008b46 <_strtol_l.constprop.0+0xf6>
 8008a8e:	2b10      	cmp	r3, #16
 8008a90:	d109      	bne.n	8008aa6 <_strtol_l.constprop.0+0x56>
 8008a92:	2c30      	cmp	r4, #48	; 0x30
 8008a94:	d107      	bne.n	8008aa6 <_strtol_l.constprop.0+0x56>
 8008a96:	782c      	ldrb	r4, [r5, #0]
 8008a98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a9c:	2c58      	cmp	r4, #88	; 0x58
 8008a9e:	d14d      	bne.n	8008b3c <_strtol_l.constprop.0+0xec>
 8008aa0:	786c      	ldrb	r4, [r5, #1]
 8008aa2:	2310      	movs	r3, #16
 8008aa4:	3502      	adds	r5, #2
 8008aa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008aaa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008aae:	f04f 0c00 	mov.w	ip, #0
 8008ab2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ab6:	4666      	mov	r6, ip
 8008ab8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008abc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008ac0:	f1be 0f09 	cmp.w	lr, #9
 8008ac4:	d816      	bhi.n	8008af4 <_strtol_l.constprop.0+0xa4>
 8008ac6:	4674      	mov	r4, lr
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	dd24      	ble.n	8008b16 <_strtol_l.constprop.0+0xc6>
 8008acc:	f1bc 0f00 	cmp.w	ip, #0
 8008ad0:	db1e      	blt.n	8008b10 <_strtol_l.constprop.0+0xc0>
 8008ad2:	45b1      	cmp	r9, r6
 8008ad4:	d31c      	bcc.n	8008b10 <_strtol_l.constprop.0+0xc0>
 8008ad6:	d101      	bne.n	8008adc <_strtol_l.constprop.0+0x8c>
 8008ad8:	45a2      	cmp	sl, r4
 8008ada:	db19      	blt.n	8008b10 <_strtol_l.constprop.0+0xc0>
 8008adc:	fb06 4603 	mla	r6, r6, r3, r4
 8008ae0:	f04f 0c01 	mov.w	ip, #1
 8008ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ae8:	e7e8      	b.n	8008abc <_strtol_l.constprop.0+0x6c>
 8008aea:	2c2b      	cmp	r4, #43	; 0x2b
 8008aec:	bf04      	itt	eq
 8008aee:	782c      	ldrbeq	r4, [r5, #0]
 8008af0:	1cb5      	addeq	r5, r6, #2
 8008af2:	e7ca      	b.n	8008a8a <_strtol_l.constprop.0+0x3a>
 8008af4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008af8:	f1be 0f19 	cmp.w	lr, #25
 8008afc:	d801      	bhi.n	8008b02 <_strtol_l.constprop.0+0xb2>
 8008afe:	3c37      	subs	r4, #55	; 0x37
 8008b00:	e7e2      	b.n	8008ac8 <_strtol_l.constprop.0+0x78>
 8008b02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008b06:	f1be 0f19 	cmp.w	lr, #25
 8008b0a:	d804      	bhi.n	8008b16 <_strtol_l.constprop.0+0xc6>
 8008b0c:	3c57      	subs	r4, #87	; 0x57
 8008b0e:	e7db      	b.n	8008ac8 <_strtol_l.constprop.0+0x78>
 8008b10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008b14:	e7e6      	b.n	8008ae4 <_strtol_l.constprop.0+0x94>
 8008b16:	f1bc 0f00 	cmp.w	ip, #0
 8008b1a:	da05      	bge.n	8008b28 <_strtol_l.constprop.0+0xd8>
 8008b1c:	2322      	movs	r3, #34	; 0x22
 8008b1e:	6003      	str	r3, [r0, #0]
 8008b20:	4646      	mov	r6, r8
 8008b22:	b942      	cbnz	r2, 8008b36 <_strtol_l.constprop.0+0xe6>
 8008b24:	4630      	mov	r0, r6
 8008b26:	e79e      	b.n	8008a66 <_strtol_l.constprop.0+0x16>
 8008b28:	b107      	cbz	r7, 8008b2c <_strtol_l.constprop.0+0xdc>
 8008b2a:	4276      	negs	r6, r6
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	d0f9      	beq.n	8008b24 <_strtol_l.constprop.0+0xd4>
 8008b30:	f1bc 0f00 	cmp.w	ip, #0
 8008b34:	d000      	beq.n	8008b38 <_strtol_l.constprop.0+0xe8>
 8008b36:	1e69      	subs	r1, r5, #1
 8008b38:	6011      	str	r1, [r2, #0]
 8008b3a:	e7f3      	b.n	8008b24 <_strtol_l.constprop.0+0xd4>
 8008b3c:	2430      	movs	r4, #48	; 0x30
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1b1      	bne.n	8008aa6 <_strtol_l.constprop.0+0x56>
 8008b42:	2308      	movs	r3, #8
 8008b44:	e7af      	b.n	8008aa6 <_strtol_l.constprop.0+0x56>
 8008b46:	2c30      	cmp	r4, #48	; 0x30
 8008b48:	d0a5      	beq.n	8008a96 <_strtol_l.constprop.0+0x46>
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	e7ab      	b.n	8008aa6 <_strtol_l.constprop.0+0x56>
 8008b4e:	bf00      	nop
 8008b50:	0800baf1 	.word	0x0800baf1

08008b54 <_strtol_r>:
 8008b54:	f7ff bf7c 	b.w	8008a50 <_strtol_l.constprop.0>

08008b58 <quorem>:
 8008b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	6903      	ldr	r3, [r0, #16]
 8008b5e:	690c      	ldr	r4, [r1, #16]
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	4607      	mov	r7, r0
 8008b64:	f2c0 8081 	blt.w	8008c6a <quorem+0x112>
 8008b68:	3c01      	subs	r4, #1
 8008b6a:	f101 0814 	add.w	r8, r1, #20
 8008b6e:	f100 0514 	add.w	r5, r0, #20
 8008b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b80:	3301      	adds	r3, #1
 8008b82:	429a      	cmp	r2, r3
 8008b84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b90:	d331      	bcc.n	8008bf6 <quorem+0x9e>
 8008b92:	f04f 0e00 	mov.w	lr, #0
 8008b96:	4640      	mov	r0, r8
 8008b98:	46ac      	mov	ip, r5
 8008b9a:	46f2      	mov	sl, lr
 8008b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ba0:	b293      	uxth	r3, r2
 8008ba2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ba6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	ebaa 0303 	sub.w	r3, sl, r3
 8008bb0:	f8dc a000 	ldr.w	sl, [ip]
 8008bb4:	0c12      	lsrs	r2, r2, #16
 8008bb6:	fa13 f38a 	uxtah	r3, r3, sl
 8008bba:	fb06 e202 	mla	r2, r6, r2, lr
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bc6:	b292      	uxth	r2, r2
 8008bc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bd0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008bd4:	4581      	cmp	r9, r0
 8008bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bda:	f84c 3b04 	str.w	r3, [ip], #4
 8008bde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008be2:	d2db      	bcs.n	8008b9c <quorem+0x44>
 8008be4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008be8:	b92b      	cbnz	r3, 8008bf6 <quorem+0x9e>
 8008bea:	9b01      	ldr	r3, [sp, #4]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	429d      	cmp	r5, r3
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	d32e      	bcc.n	8008c52 <quorem+0xfa>
 8008bf4:	613c      	str	r4, [r7, #16]
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f001 fc82 	bl	800a500 <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	db24      	blt.n	8008c4a <quorem+0xf2>
 8008c00:	3601      	adds	r6, #1
 8008c02:	4628      	mov	r0, r5
 8008c04:	f04f 0c00 	mov.w	ip, #0
 8008c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8008c10:	b293      	uxth	r3, r2
 8008c12:	ebac 0303 	sub.w	r3, ip, r3
 8008c16:	0c12      	lsrs	r2, r2, #16
 8008c18:	fa13 f38e 	uxtah	r3, r3, lr
 8008c1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2a:	45c1      	cmp	r9, r8
 8008c2c:	f840 3b04 	str.w	r3, [r0], #4
 8008c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c34:	d2e8      	bcs.n	8008c08 <quorem+0xb0>
 8008c36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c3e:	b922      	cbnz	r2, 8008c4a <quorem+0xf2>
 8008c40:	3b04      	subs	r3, #4
 8008c42:	429d      	cmp	r5, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	d30a      	bcc.n	8008c5e <quorem+0x106>
 8008c48:	613c      	str	r4, [r7, #16]
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	b003      	add	sp, #12
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	6812      	ldr	r2, [r2, #0]
 8008c54:	3b04      	subs	r3, #4
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	d1cc      	bne.n	8008bf4 <quorem+0x9c>
 8008c5a:	3c01      	subs	r4, #1
 8008c5c:	e7c7      	b.n	8008bee <quorem+0x96>
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	3b04      	subs	r3, #4
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d1f0      	bne.n	8008c48 <quorem+0xf0>
 8008c66:	3c01      	subs	r4, #1
 8008c68:	e7eb      	b.n	8008c42 <quorem+0xea>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e7ee      	b.n	8008c4c <quorem+0xf4>
	...

08008c70 <_dtoa_r>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	ed2d 8b04 	vpush	{d8-d9}
 8008c78:	ec57 6b10 	vmov	r6, r7, d0
 8008c7c:	b093      	sub	sp, #76	; 0x4c
 8008c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c84:	9106      	str	r1, [sp, #24]
 8008c86:	ee10 aa10 	vmov	sl, s0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8008c8e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c90:	46bb      	mov	fp, r7
 8008c92:	b975      	cbnz	r5, 8008cb2 <_dtoa_r+0x42>
 8008c94:	2010      	movs	r0, #16
 8008c96:	f001 f94d 	bl	8009f34 <malloc>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6260      	str	r0, [r4, #36]	; 0x24
 8008c9e:	b920      	cbnz	r0, 8008caa <_dtoa_r+0x3a>
 8008ca0:	4ba7      	ldr	r3, [pc, #668]	; (8008f40 <_dtoa_r+0x2d0>)
 8008ca2:	21ea      	movs	r1, #234	; 0xea
 8008ca4:	48a7      	ldr	r0, [pc, #668]	; (8008f44 <_dtoa_r+0x2d4>)
 8008ca6:	f002 f8ad 	bl	800ae04 <__assert_func>
 8008caa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cae:	6005      	str	r5, [r0, #0]
 8008cb0:	60c5      	str	r5, [r0, #12]
 8008cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb4:	6819      	ldr	r1, [r3, #0]
 8008cb6:	b151      	cbz	r1, 8008cce <_dtoa_r+0x5e>
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	604a      	str	r2, [r1, #4]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4093      	lsls	r3, r2
 8008cc0:	608b      	str	r3, [r1, #8]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f001 f990 	bl	8009fe8 <_Bfree>
 8008cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	1e3b      	subs	r3, r7, #0
 8008cd0:	bfaa      	itet	ge
 8008cd2:	2300      	movge	r3, #0
 8008cd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008cd8:	f8c8 3000 	strge.w	r3, [r8]
 8008cdc:	4b9a      	ldr	r3, [pc, #616]	; (8008f48 <_dtoa_r+0x2d8>)
 8008cde:	bfbc      	itt	lt
 8008ce0:	2201      	movlt	r2, #1
 8008ce2:	f8c8 2000 	strlt.w	r2, [r8]
 8008ce6:	ea33 030b 	bics.w	r3, r3, fp
 8008cea:	d11b      	bne.n	8008d24 <_dtoa_r+0xb4>
 8008cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cee:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cf8:	4333      	orrs	r3, r6
 8008cfa:	f000 8592 	beq.w	8009822 <_dtoa_r+0xbb2>
 8008cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d00:	b963      	cbnz	r3, 8008d1c <_dtoa_r+0xac>
 8008d02:	4b92      	ldr	r3, [pc, #584]	; (8008f4c <_dtoa_r+0x2dc>)
 8008d04:	e022      	b.n	8008d4c <_dtoa_r+0xdc>
 8008d06:	4b92      	ldr	r3, [pc, #584]	; (8008f50 <_dtoa_r+0x2e0>)
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	9801      	ldr	r0, [sp, #4]
 8008d12:	b013      	add	sp, #76	; 0x4c
 8008d14:	ecbd 8b04 	vpop	{d8-d9}
 8008d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1c:	4b8b      	ldr	r3, [pc, #556]	; (8008f4c <_dtoa_r+0x2dc>)
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	3303      	adds	r3, #3
 8008d22:	e7f3      	b.n	8008d0c <_dtoa_r+0x9c>
 8008d24:	2200      	movs	r2, #0
 8008d26:	2300      	movs	r3, #0
 8008d28:	4650      	mov	r0, sl
 8008d2a:	4659      	mov	r1, fp
 8008d2c:	f7f7 fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d30:	ec4b ab19 	vmov	d9, sl, fp
 8008d34:	4680      	mov	r8, r0
 8008d36:	b158      	cbz	r0, 8008d50 <_dtoa_r+0xe0>
 8008d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 856b 	beq.w	800981c <_dtoa_r+0xbac>
 8008d46:	4883      	ldr	r0, [pc, #524]	; (8008f54 <_dtoa_r+0x2e4>)
 8008d48:	6018      	str	r0, [r3, #0]
 8008d4a:	1e43      	subs	r3, r0, #1
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	e7df      	b.n	8008d10 <_dtoa_r+0xa0>
 8008d50:	ec4b ab10 	vmov	d0, sl, fp
 8008d54:	aa10      	add	r2, sp, #64	; 0x40
 8008d56:	a911      	add	r1, sp, #68	; 0x44
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f001 fcf3 	bl	800a744 <__d2b>
 8008d5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008d62:	ee08 0a10 	vmov	s16, r0
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	f000 8084 	beq.w	8008e74 <_dtoa_r+0x204>
 8008d6c:	ee19 3a90 	vmov	r3, s19
 8008d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d78:	4656      	mov	r6, sl
 8008d7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d86:	4b74      	ldr	r3, [pc, #464]	; (8008f58 <_dtoa_r+0x2e8>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fa83 	bl	8000298 <__aeabi_dsub>
 8008d92:	a365      	add	r3, pc, #404	; (adr r3, 8008f28 <_dtoa_r+0x2b8>)
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f7f7 fc36 	bl	8000608 <__aeabi_dmul>
 8008d9c:	a364      	add	r3, pc, #400	; (adr r3, 8008f30 <_dtoa_r+0x2c0>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fa7b 	bl	800029c <__adddf3>
 8008da6:	4606      	mov	r6, r0
 8008da8:	4628      	mov	r0, r5
 8008daa:	460f      	mov	r7, r1
 8008dac:	f7f7 fbc2 	bl	8000534 <__aeabi_i2d>
 8008db0:	a361      	add	r3, pc, #388	; (adr r3, 8008f38 <_dtoa_r+0x2c8>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 fc27 	bl	8000608 <__aeabi_dmul>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	f7f7 fa6b 	bl	800029c <__adddf3>
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	460f      	mov	r7, r1
 8008dca:	f7f7 fecd 	bl	8000b68 <__aeabi_d2iz>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	9000      	str	r0, [sp, #0]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	f7f7 fe88 	bl	8000aec <__aeabi_dcmplt>
 8008ddc:	b150      	cbz	r0, 8008df4 <_dtoa_r+0x184>
 8008dde:	9800      	ldr	r0, [sp, #0]
 8008de0:	f7f7 fba8 	bl	8000534 <__aeabi_i2d>
 8008de4:	4632      	mov	r2, r6
 8008de6:	463b      	mov	r3, r7
 8008de8:	f7f7 fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dec:	b910      	cbnz	r0, 8008df4 <_dtoa_r+0x184>
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9b00      	ldr	r3, [sp, #0]
 8008df6:	2b16      	cmp	r3, #22
 8008df8:	d85a      	bhi.n	8008eb0 <_dtoa_r+0x240>
 8008dfa:	9a00      	ldr	r2, [sp, #0]
 8008dfc:	4b57      	ldr	r3, [pc, #348]	; (8008f5c <_dtoa_r+0x2ec>)
 8008dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	ec51 0b19 	vmov	r0, r1, d9
 8008e0a:	f7f7 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d050      	beq.n	8008eb4 <_dtoa_r+0x244>
 8008e12:	9b00      	ldr	r3, [sp, #0]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e1e:	1b5d      	subs	r5, r3, r5
 8008e20:	1e6b      	subs	r3, r5, #1
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	bf45      	ittet	mi
 8008e26:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e2a:	9304      	strmi	r3, [sp, #16]
 8008e2c:	2300      	movpl	r3, #0
 8008e2e:	2300      	movmi	r3, #0
 8008e30:	bf4c      	ite	mi
 8008e32:	9305      	strmi	r3, [sp, #20]
 8008e34:	9304      	strpl	r3, [sp, #16]
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	db3d      	blt.n	8008eb8 <_dtoa_r+0x248>
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	9a00      	ldr	r2, [sp, #0]
 8008e40:	920a      	str	r2, [sp, #40]	; 0x28
 8008e42:	4413      	add	r3, r2
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	2300      	movs	r3, #0
 8008e48:	9307      	str	r3, [sp, #28]
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	2b09      	cmp	r3, #9
 8008e4e:	f200 8089 	bhi.w	8008f64 <_dtoa_r+0x2f4>
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	bfc4      	itt	gt
 8008e56:	3b04      	subgt	r3, #4
 8008e58:	9306      	strgt	r3, [sp, #24]
 8008e5a:	9b06      	ldr	r3, [sp, #24]
 8008e5c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e60:	bfcc      	ite	gt
 8008e62:	2500      	movgt	r5, #0
 8008e64:	2501      	movle	r5, #1
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	f200 8087 	bhi.w	8008f7a <_dtoa_r+0x30a>
 8008e6c:	e8df f003 	tbb	[pc, r3]
 8008e70:	59383a2d 	.word	0x59383a2d
 8008e74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e78:	441d      	add	r5, r3
 8008e7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	bfc1      	itttt	gt
 8008e82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e92:	bfda      	itte	le
 8008e94:	f1c3 0320 	rsble	r3, r3, #32
 8008e98:	fa06 f003 	lslle.w	r0, r6, r3
 8008e9c:	4318      	orrgt	r0, r3
 8008e9e:	f7f7 fb39 	bl	8000514 <__aeabi_ui2d>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008eaa:	3d01      	subs	r5, #1
 8008eac:	930e      	str	r3, [sp, #56]	; 0x38
 8008eae:	e76a      	b.n	8008d86 <_dtoa_r+0x116>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e7b2      	b.n	8008e1a <_dtoa_r+0x1aa>
 8008eb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8008eb6:	e7b1      	b.n	8008e1c <_dtoa_r+0x1ac>
 8008eb8:	9b04      	ldr	r3, [sp, #16]
 8008eba:	9a00      	ldr	r2, [sp, #0]
 8008ebc:	1a9b      	subs	r3, r3, r2
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	4253      	negs	r3, r2
 8008ec2:	9307      	str	r3, [sp, #28]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ec8:	e7bf      	b.n	8008e4a <_dtoa_r+0x1da>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9308      	str	r3, [sp, #32]
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	dc55      	bgt.n	8008f80 <_dtoa_r+0x310>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008eda:	461a      	mov	r2, r3
 8008edc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ede:	e00c      	b.n	8008efa <_dtoa_r+0x28a>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e7f3      	b.n	8008ecc <_dtoa_r+0x25c>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee8:	9308      	str	r3, [sp, #32]
 8008eea:	9b00      	ldr	r3, [sp, #0]
 8008eec:	4413      	add	r3, r2
 8008eee:	9302      	str	r3, [sp, #8]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	bfb8      	it	lt
 8008ef8:	2301      	movlt	r3, #1
 8008efa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008efc:	2200      	movs	r2, #0
 8008efe:	6042      	str	r2, [r0, #4]
 8008f00:	2204      	movs	r2, #4
 8008f02:	f102 0614 	add.w	r6, r2, #20
 8008f06:	429e      	cmp	r6, r3
 8008f08:	6841      	ldr	r1, [r0, #4]
 8008f0a:	d93d      	bls.n	8008f88 <_dtoa_r+0x318>
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	f001 f82b 	bl	8009f68 <_Balloc>
 8008f12:	9001      	str	r0, [sp, #4]
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d13b      	bne.n	8008f90 <_dtoa_r+0x320>
 8008f18:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <_dtoa_r+0x2f0>)
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f20:	e6c0      	b.n	8008ca4 <_dtoa_r+0x34>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e7df      	b.n	8008ee6 <_dtoa_r+0x276>
 8008f26:	bf00      	nop
 8008f28:	636f4361 	.word	0x636f4361
 8008f2c:	3fd287a7 	.word	0x3fd287a7
 8008f30:	8b60c8b3 	.word	0x8b60c8b3
 8008f34:	3fc68a28 	.word	0x3fc68a28
 8008f38:	509f79fb 	.word	0x509f79fb
 8008f3c:	3fd34413 	.word	0x3fd34413
 8008f40:	0800bbfe 	.word	0x0800bbfe
 8008f44:	0800bc15 	.word	0x0800bc15
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	0800bbfa 	.word	0x0800bbfa
 8008f50:	0800bbf1 	.word	0x0800bbf1
 8008f54:	0800ba71 	.word	0x0800ba71
 8008f58:	3ff80000 	.word	0x3ff80000
 8008f5c:	0800bd80 	.word	0x0800bd80
 8008f60:	0800bc70 	.word	0x0800bc70
 8008f64:	2501      	movs	r5, #1
 8008f66:	2300      	movs	r3, #0
 8008f68:	9306      	str	r3, [sp, #24]
 8008f6a:	9508      	str	r5, [sp, #32]
 8008f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	2312      	movs	r3, #18
 8008f78:	e7b0      	b.n	8008edc <_dtoa_r+0x26c>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	9308      	str	r3, [sp, #32]
 8008f7e:	e7f5      	b.n	8008f6c <_dtoa_r+0x2fc>
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f86:	e7b8      	b.n	8008efa <_dtoa_r+0x28a>
 8008f88:	3101      	adds	r1, #1
 8008f8a:	6041      	str	r1, [r0, #4]
 8008f8c:	0052      	lsls	r2, r2, #1
 8008f8e:	e7b8      	b.n	8008f02 <_dtoa_r+0x292>
 8008f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f92:	9a01      	ldr	r2, [sp, #4]
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	2b0e      	cmp	r3, #14
 8008f9a:	f200 809d 	bhi.w	80090d8 <_dtoa_r+0x468>
 8008f9e:	2d00      	cmp	r5, #0
 8008fa0:	f000 809a 	beq.w	80090d8 <_dtoa_r+0x468>
 8008fa4:	9b00      	ldr	r3, [sp, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd32      	ble.n	8009010 <_dtoa_r+0x3a0>
 8008faa:	4ab7      	ldr	r2, [pc, #732]	; (8009288 <_dtoa_r+0x618>)
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fb8:	9b00      	ldr	r3, [sp, #0]
 8008fba:	05d8      	lsls	r0, r3, #23
 8008fbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008fc0:	d516      	bpl.n	8008ff0 <_dtoa_r+0x380>
 8008fc2:	4bb2      	ldr	r3, [pc, #712]	; (800928c <_dtoa_r+0x61c>)
 8008fc4:	ec51 0b19 	vmov	r0, r1, d9
 8008fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fcc:	f7f7 fc46 	bl	800085c <__aeabi_ddiv>
 8008fd0:	f007 070f 	and.w	r7, r7, #15
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	468b      	mov	fp, r1
 8008fd8:	2503      	movs	r5, #3
 8008fda:	4eac      	ldr	r6, [pc, #688]	; (800928c <_dtoa_r+0x61c>)
 8008fdc:	b957      	cbnz	r7, 8008ff4 <_dtoa_r+0x384>
 8008fde:	4642      	mov	r2, r8
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	4659      	mov	r1, fp
 8008fe6:	f7f7 fc39 	bl	800085c <__aeabi_ddiv>
 8008fea:	4682      	mov	sl, r0
 8008fec:	468b      	mov	fp, r1
 8008fee:	e028      	b.n	8009042 <_dtoa_r+0x3d2>
 8008ff0:	2502      	movs	r5, #2
 8008ff2:	e7f2      	b.n	8008fda <_dtoa_r+0x36a>
 8008ff4:	07f9      	lsls	r1, r7, #31
 8008ff6:	d508      	bpl.n	800900a <_dtoa_r+0x39a>
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	4649      	mov	r1, r9
 8008ffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009000:	f7f7 fb02 	bl	8000608 <__aeabi_dmul>
 8009004:	3501      	adds	r5, #1
 8009006:	4680      	mov	r8, r0
 8009008:	4689      	mov	r9, r1
 800900a:	107f      	asrs	r7, r7, #1
 800900c:	3608      	adds	r6, #8
 800900e:	e7e5      	b.n	8008fdc <_dtoa_r+0x36c>
 8009010:	f000 809b 	beq.w	800914a <_dtoa_r+0x4da>
 8009014:	9b00      	ldr	r3, [sp, #0]
 8009016:	4f9d      	ldr	r7, [pc, #628]	; (800928c <_dtoa_r+0x61c>)
 8009018:	425e      	negs	r6, r3
 800901a:	4b9b      	ldr	r3, [pc, #620]	; (8009288 <_dtoa_r+0x618>)
 800901c:	f006 020f 	and.w	r2, r6, #15
 8009020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	ec51 0b19 	vmov	r0, r1, d9
 800902c:	f7f7 faec 	bl	8000608 <__aeabi_dmul>
 8009030:	1136      	asrs	r6, r6, #4
 8009032:	4682      	mov	sl, r0
 8009034:	468b      	mov	fp, r1
 8009036:	2300      	movs	r3, #0
 8009038:	2502      	movs	r5, #2
 800903a:	2e00      	cmp	r6, #0
 800903c:	d17a      	bne.n	8009134 <_dtoa_r+0x4c4>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1d3      	bne.n	8008fea <_dtoa_r+0x37a>
 8009042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 8082 	beq.w	800914e <_dtoa_r+0x4de>
 800904a:	4b91      	ldr	r3, [pc, #580]	; (8009290 <_dtoa_r+0x620>)
 800904c:	2200      	movs	r2, #0
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	f7f7 fd4b 	bl	8000aec <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d079      	beq.n	800914e <_dtoa_r+0x4de>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d076      	beq.n	800914e <_dtoa_r+0x4de>
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	dd36      	ble.n	80090d4 <_dtoa_r+0x464>
 8009066:	9b00      	ldr	r3, [sp, #0]
 8009068:	4650      	mov	r0, sl
 800906a:	4659      	mov	r1, fp
 800906c:	1e5f      	subs	r7, r3, #1
 800906e:	2200      	movs	r2, #0
 8009070:	4b88      	ldr	r3, [pc, #544]	; (8009294 <_dtoa_r+0x624>)
 8009072:	f7f7 fac9 	bl	8000608 <__aeabi_dmul>
 8009076:	9e02      	ldr	r6, [sp, #8]
 8009078:	4682      	mov	sl, r0
 800907a:	468b      	mov	fp, r1
 800907c:	3501      	adds	r5, #1
 800907e:	4628      	mov	r0, r5
 8009080:	f7f7 fa58 	bl	8000534 <__aeabi_i2d>
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	f7f7 fabe 	bl	8000608 <__aeabi_dmul>
 800908c:	4b82      	ldr	r3, [pc, #520]	; (8009298 <_dtoa_r+0x628>)
 800908e:	2200      	movs	r2, #0
 8009090:	f7f7 f904 	bl	800029c <__adddf3>
 8009094:	46d0      	mov	r8, sl
 8009096:	46d9      	mov	r9, fp
 8009098:	4682      	mov	sl, r0
 800909a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800909e:	2e00      	cmp	r6, #0
 80090a0:	d158      	bne.n	8009154 <_dtoa_r+0x4e4>
 80090a2:	4b7e      	ldr	r3, [pc, #504]	; (800929c <_dtoa_r+0x62c>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 f8f5 	bl	8000298 <__aeabi_dsub>
 80090ae:	4652      	mov	r2, sl
 80090b0:	465b      	mov	r3, fp
 80090b2:	4680      	mov	r8, r0
 80090b4:	4689      	mov	r9, r1
 80090b6:	f7f7 fd37 	bl	8000b28 <__aeabi_dcmpgt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f040 8295 	bne.w	80095ea <_dtoa_r+0x97a>
 80090c0:	4652      	mov	r2, sl
 80090c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80090c6:	4640      	mov	r0, r8
 80090c8:	4649      	mov	r1, r9
 80090ca:	f7f7 fd0f 	bl	8000aec <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f040 8289 	bne.w	80095e6 <_dtoa_r+0x976>
 80090d4:	ec5b ab19 	vmov	sl, fp, d9
 80090d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f2c0 8148 	blt.w	8009370 <_dtoa_r+0x700>
 80090e0:	9a00      	ldr	r2, [sp, #0]
 80090e2:	2a0e      	cmp	r2, #14
 80090e4:	f300 8144 	bgt.w	8009370 <_dtoa_r+0x700>
 80090e8:	4b67      	ldr	r3, [pc, #412]	; (8009288 <_dtoa_r+0x618>)
 80090ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f280 80d5 	bge.w	80092a4 <_dtoa_r+0x634>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f300 80d1 	bgt.w	80092a4 <_dtoa_r+0x634>
 8009102:	f040 826f 	bne.w	80095e4 <_dtoa_r+0x974>
 8009106:	4b65      	ldr	r3, [pc, #404]	; (800929c <_dtoa_r+0x62c>)
 8009108:	2200      	movs	r2, #0
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 fa7b 	bl	8000608 <__aeabi_dmul>
 8009112:	4652      	mov	r2, sl
 8009114:	465b      	mov	r3, fp
 8009116:	f7f7 fcfd 	bl	8000b14 <__aeabi_dcmpge>
 800911a:	9e03      	ldr	r6, [sp, #12]
 800911c:	4637      	mov	r7, r6
 800911e:	2800      	cmp	r0, #0
 8009120:	f040 8245 	bne.w	80095ae <_dtoa_r+0x93e>
 8009124:	9d01      	ldr	r5, [sp, #4]
 8009126:	2331      	movs	r3, #49	; 0x31
 8009128:	f805 3b01 	strb.w	r3, [r5], #1
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	3301      	adds	r3, #1
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	e240      	b.n	80095b6 <_dtoa_r+0x946>
 8009134:	07f2      	lsls	r2, r6, #31
 8009136:	d505      	bpl.n	8009144 <_dtoa_r+0x4d4>
 8009138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913c:	f7f7 fa64 	bl	8000608 <__aeabi_dmul>
 8009140:	3501      	adds	r5, #1
 8009142:	2301      	movs	r3, #1
 8009144:	1076      	asrs	r6, r6, #1
 8009146:	3708      	adds	r7, #8
 8009148:	e777      	b.n	800903a <_dtoa_r+0x3ca>
 800914a:	2502      	movs	r5, #2
 800914c:	e779      	b.n	8009042 <_dtoa_r+0x3d2>
 800914e:	9f00      	ldr	r7, [sp, #0]
 8009150:	9e03      	ldr	r6, [sp, #12]
 8009152:	e794      	b.n	800907e <_dtoa_r+0x40e>
 8009154:	9901      	ldr	r1, [sp, #4]
 8009156:	4b4c      	ldr	r3, [pc, #304]	; (8009288 <_dtoa_r+0x618>)
 8009158:	4431      	add	r1, r6
 800915a:	910d      	str	r1, [sp, #52]	; 0x34
 800915c:	9908      	ldr	r1, [sp, #32]
 800915e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009166:	2900      	cmp	r1, #0
 8009168:	d043      	beq.n	80091f2 <_dtoa_r+0x582>
 800916a:	494d      	ldr	r1, [pc, #308]	; (80092a0 <_dtoa_r+0x630>)
 800916c:	2000      	movs	r0, #0
 800916e:	f7f7 fb75 	bl	800085c <__aeabi_ddiv>
 8009172:	4652      	mov	r2, sl
 8009174:	465b      	mov	r3, fp
 8009176:	f7f7 f88f 	bl	8000298 <__aeabi_dsub>
 800917a:	9d01      	ldr	r5, [sp, #4]
 800917c:	4682      	mov	sl, r0
 800917e:	468b      	mov	fp, r1
 8009180:	4649      	mov	r1, r9
 8009182:	4640      	mov	r0, r8
 8009184:	f7f7 fcf0 	bl	8000b68 <__aeabi_d2iz>
 8009188:	4606      	mov	r6, r0
 800918a:	f7f7 f9d3 	bl	8000534 <__aeabi_i2d>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 f87f 	bl	8000298 <__aeabi_dsub>
 800919a:	3630      	adds	r6, #48	; 0x30
 800919c:	f805 6b01 	strb.w	r6, [r5], #1
 80091a0:	4652      	mov	r2, sl
 80091a2:	465b      	mov	r3, fp
 80091a4:	4680      	mov	r8, r0
 80091a6:	4689      	mov	r9, r1
 80091a8:	f7f7 fca0 	bl	8000aec <__aeabi_dcmplt>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d163      	bne.n	8009278 <_dtoa_r+0x608>
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	4936      	ldr	r1, [pc, #216]	; (8009290 <_dtoa_r+0x620>)
 80091b6:	2000      	movs	r0, #0
 80091b8:	f7f7 f86e 	bl	8000298 <__aeabi_dsub>
 80091bc:	4652      	mov	r2, sl
 80091be:	465b      	mov	r3, fp
 80091c0:	f7f7 fc94 	bl	8000aec <__aeabi_dcmplt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f040 80b5 	bne.w	8009334 <_dtoa_r+0x6c4>
 80091ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091cc:	429d      	cmp	r5, r3
 80091ce:	d081      	beq.n	80090d4 <_dtoa_r+0x464>
 80091d0:	4b30      	ldr	r3, [pc, #192]	; (8009294 <_dtoa_r+0x624>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	4650      	mov	r0, sl
 80091d6:	4659      	mov	r1, fp
 80091d8:	f7f7 fa16 	bl	8000608 <__aeabi_dmul>
 80091dc:	4b2d      	ldr	r3, [pc, #180]	; (8009294 <_dtoa_r+0x624>)
 80091de:	4682      	mov	sl, r0
 80091e0:	468b      	mov	fp, r1
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	2200      	movs	r2, #0
 80091e8:	f7f7 fa0e 	bl	8000608 <__aeabi_dmul>
 80091ec:	4680      	mov	r8, r0
 80091ee:	4689      	mov	r9, r1
 80091f0:	e7c6      	b.n	8009180 <_dtoa_r+0x510>
 80091f2:	4650      	mov	r0, sl
 80091f4:	4659      	mov	r1, fp
 80091f6:	f7f7 fa07 	bl	8000608 <__aeabi_dmul>
 80091fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091fc:	9d01      	ldr	r5, [sp, #4]
 80091fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009200:	4682      	mov	sl, r0
 8009202:	468b      	mov	fp, r1
 8009204:	4649      	mov	r1, r9
 8009206:	4640      	mov	r0, r8
 8009208:	f7f7 fcae 	bl	8000b68 <__aeabi_d2iz>
 800920c:	4606      	mov	r6, r0
 800920e:	f7f7 f991 	bl	8000534 <__aeabi_i2d>
 8009212:	3630      	adds	r6, #48	; 0x30
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 f83c 	bl	8000298 <__aeabi_dsub>
 8009220:	f805 6b01 	strb.w	r6, [r5], #1
 8009224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009226:	429d      	cmp	r5, r3
 8009228:	4680      	mov	r8, r0
 800922a:	4689      	mov	r9, r1
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	d124      	bne.n	800927c <_dtoa_r+0x60c>
 8009232:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <_dtoa_r+0x630>)
 8009234:	4650      	mov	r0, sl
 8009236:	4659      	mov	r1, fp
 8009238:	f7f7 f830 	bl	800029c <__adddf3>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 fc70 	bl	8000b28 <__aeabi_dcmpgt>
 8009248:	2800      	cmp	r0, #0
 800924a:	d173      	bne.n	8009334 <_dtoa_r+0x6c4>
 800924c:	4652      	mov	r2, sl
 800924e:	465b      	mov	r3, fp
 8009250:	4913      	ldr	r1, [pc, #76]	; (80092a0 <_dtoa_r+0x630>)
 8009252:	2000      	movs	r0, #0
 8009254:	f7f7 f820 	bl	8000298 <__aeabi_dsub>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 fc44 	bl	8000aec <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	f43f af35 	beq.w	80090d4 <_dtoa_r+0x464>
 800926a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800926c:	1e6b      	subs	r3, r5, #1
 800926e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009270:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009274:	2b30      	cmp	r3, #48	; 0x30
 8009276:	d0f8      	beq.n	800926a <_dtoa_r+0x5fa>
 8009278:	9700      	str	r7, [sp, #0]
 800927a:	e049      	b.n	8009310 <_dtoa_r+0x6a0>
 800927c:	4b05      	ldr	r3, [pc, #20]	; (8009294 <_dtoa_r+0x624>)
 800927e:	f7f7 f9c3 	bl	8000608 <__aeabi_dmul>
 8009282:	4680      	mov	r8, r0
 8009284:	4689      	mov	r9, r1
 8009286:	e7bd      	b.n	8009204 <_dtoa_r+0x594>
 8009288:	0800bd80 	.word	0x0800bd80
 800928c:	0800bd58 	.word	0x0800bd58
 8009290:	3ff00000 	.word	0x3ff00000
 8009294:	40240000 	.word	0x40240000
 8009298:	401c0000 	.word	0x401c0000
 800929c:	40140000 	.word	0x40140000
 80092a0:	3fe00000 	.word	0x3fe00000
 80092a4:	9d01      	ldr	r5, [sp, #4]
 80092a6:	4656      	mov	r6, sl
 80092a8:	465f      	mov	r7, fp
 80092aa:	4642      	mov	r2, r8
 80092ac:	464b      	mov	r3, r9
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f7 fad3 	bl	800085c <__aeabi_ddiv>
 80092b6:	f7f7 fc57 	bl	8000b68 <__aeabi_d2iz>
 80092ba:	4682      	mov	sl, r0
 80092bc:	f7f7 f93a 	bl	8000534 <__aeabi_i2d>
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	f7f7 f9a0 	bl	8000608 <__aeabi_dmul>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80092d4:	f7f6 ffe0 	bl	8000298 <__aeabi_dsub>
 80092d8:	f805 6b01 	strb.w	r6, [r5], #1
 80092dc:	9e01      	ldr	r6, [sp, #4]
 80092de:	9f03      	ldr	r7, [sp, #12]
 80092e0:	1bae      	subs	r6, r5, r6
 80092e2:	42b7      	cmp	r7, r6
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	d135      	bne.n	8009356 <_dtoa_r+0x6e6>
 80092ea:	f7f6 ffd7 	bl	800029c <__adddf3>
 80092ee:	4642      	mov	r2, r8
 80092f0:	464b      	mov	r3, r9
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	f7f7 fc17 	bl	8000b28 <__aeabi_dcmpgt>
 80092fa:	b9d0      	cbnz	r0, 8009332 <_dtoa_r+0x6c2>
 80092fc:	4642      	mov	r2, r8
 80092fe:	464b      	mov	r3, r9
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f7 fbe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009308:	b110      	cbz	r0, 8009310 <_dtoa_r+0x6a0>
 800930a:	f01a 0f01 	tst.w	sl, #1
 800930e:	d110      	bne.n	8009332 <_dtoa_r+0x6c2>
 8009310:	4620      	mov	r0, r4
 8009312:	ee18 1a10 	vmov	r1, s16
 8009316:	f000 fe67 	bl	8009fe8 <_Bfree>
 800931a:	2300      	movs	r3, #0
 800931c:	9800      	ldr	r0, [sp, #0]
 800931e:	702b      	strb	r3, [r5, #0]
 8009320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009322:	3001      	adds	r0, #1
 8009324:	6018      	str	r0, [r3, #0]
 8009326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009328:	2b00      	cmp	r3, #0
 800932a:	f43f acf1 	beq.w	8008d10 <_dtoa_r+0xa0>
 800932e:	601d      	str	r5, [r3, #0]
 8009330:	e4ee      	b.n	8008d10 <_dtoa_r+0xa0>
 8009332:	9f00      	ldr	r7, [sp, #0]
 8009334:	462b      	mov	r3, r5
 8009336:	461d      	mov	r5, r3
 8009338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800933c:	2a39      	cmp	r2, #57	; 0x39
 800933e:	d106      	bne.n	800934e <_dtoa_r+0x6de>
 8009340:	9a01      	ldr	r2, [sp, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d1f7      	bne.n	8009336 <_dtoa_r+0x6c6>
 8009346:	9901      	ldr	r1, [sp, #4]
 8009348:	2230      	movs	r2, #48	; 0x30
 800934a:	3701      	adds	r7, #1
 800934c:	700a      	strb	r2, [r1, #0]
 800934e:	781a      	ldrb	r2, [r3, #0]
 8009350:	3201      	adds	r2, #1
 8009352:	701a      	strb	r2, [r3, #0]
 8009354:	e790      	b.n	8009278 <_dtoa_r+0x608>
 8009356:	4ba6      	ldr	r3, [pc, #664]	; (80095f0 <_dtoa_r+0x980>)
 8009358:	2200      	movs	r2, #0
 800935a:	f7f7 f955 	bl	8000608 <__aeabi_dmul>
 800935e:	2200      	movs	r2, #0
 8009360:	2300      	movs	r3, #0
 8009362:	4606      	mov	r6, r0
 8009364:	460f      	mov	r7, r1
 8009366:	f7f7 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800936a:	2800      	cmp	r0, #0
 800936c:	d09d      	beq.n	80092aa <_dtoa_r+0x63a>
 800936e:	e7cf      	b.n	8009310 <_dtoa_r+0x6a0>
 8009370:	9a08      	ldr	r2, [sp, #32]
 8009372:	2a00      	cmp	r2, #0
 8009374:	f000 80d7 	beq.w	8009526 <_dtoa_r+0x8b6>
 8009378:	9a06      	ldr	r2, [sp, #24]
 800937a:	2a01      	cmp	r2, #1
 800937c:	f300 80ba 	bgt.w	80094f4 <_dtoa_r+0x884>
 8009380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009382:	2a00      	cmp	r2, #0
 8009384:	f000 80b2 	beq.w	80094ec <_dtoa_r+0x87c>
 8009388:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800938c:	9e07      	ldr	r6, [sp, #28]
 800938e:	9d04      	ldr	r5, [sp, #16]
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	441a      	add	r2, r3
 8009394:	9204      	str	r2, [sp, #16]
 8009396:	9a05      	ldr	r2, [sp, #20]
 8009398:	2101      	movs	r1, #1
 800939a:	441a      	add	r2, r3
 800939c:	4620      	mov	r0, r4
 800939e:	9205      	str	r2, [sp, #20]
 80093a0:	f000 ff24 	bl	800a1ec <__i2b>
 80093a4:	4607      	mov	r7, r0
 80093a6:	2d00      	cmp	r5, #0
 80093a8:	dd0c      	ble.n	80093c4 <_dtoa_r+0x754>
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dd09      	ble.n	80093c4 <_dtoa_r+0x754>
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	9a04      	ldr	r2, [sp, #16]
 80093b4:	bfa8      	it	ge
 80093b6:	462b      	movge	r3, r5
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	9204      	str	r2, [sp, #16]
 80093bc:	9a05      	ldr	r2, [sp, #20]
 80093be:	1aed      	subs	r5, r5, r3
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	b31b      	cbz	r3, 8009410 <_dtoa_r+0x7a0>
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 80af 	beq.w	800952e <_dtoa_r+0x8be>
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	dd13      	ble.n	80093fc <_dtoa_r+0x78c>
 80093d4:	4639      	mov	r1, r7
 80093d6:	4632      	mov	r2, r6
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 ffc7 	bl	800a36c <__pow5mult>
 80093de:	ee18 2a10 	vmov	r2, s16
 80093e2:	4601      	mov	r1, r0
 80093e4:	4607      	mov	r7, r0
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 ff16 	bl	800a218 <__multiply>
 80093ec:	ee18 1a10 	vmov	r1, s16
 80093f0:	4680      	mov	r8, r0
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 fdf8 	bl	8009fe8 <_Bfree>
 80093f8:	ee08 8a10 	vmov	s16, r8
 80093fc:	9b07      	ldr	r3, [sp, #28]
 80093fe:	1b9a      	subs	r2, r3, r6
 8009400:	d006      	beq.n	8009410 <_dtoa_r+0x7a0>
 8009402:	ee18 1a10 	vmov	r1, s16
 8009406:	4620      	mov	r0, r4
 8009408:	f000 ffb0 	bl	800a36c <__pow5mult>
 800940c:	ee08 0a10 	vmov	s16, r0
 8009410:	2101      	movs	r1, #1
 8009412:	4620      	mov	r0, r4
 8009414:	f000 feea 	bl	800a1ec <__i2b>
 8009418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800941a:	2b00      	cmp	r3, #0
 800941c:	4606      	mov	r6, r0
 800941e:	f340 8088 	ble.w	8009532 <_dtoa_r+0x8c2>
 8009422:	461a      	mov	r2, r3
 8009424:	4601      	mov	r1, r0
 8009426:	4620      	mov	r0, r4
 8009428:	f000 ffa0 	bl	800a36c <__pow5mult>
 800942c:	9b06      	ldr	r3, [sp, #24]
 800942e:	2b01      	cmp	r3, #1
 8009430:	4606      	mov	r6, r0
 8009432:	f340 8081 	ble.w	8009538 <_dtoa_r+0x8c8>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	6933      	ldr	r3, [r6, #16]
 800943c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009440:	6918      	ldr	r0, [r3, #16]
 8009442:	f000 fe83 	bl	800a14c <__hi0bits>
 8009446:	f1c0 0020 	rsb	r0, r0, #32
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	4418      	add	r0, r3
 800944e:	f010 001f 	ands.w	r0, r0, #31
 8009452:	f000 8092 	beq.w	800957a <_dtoa_r+0x90a>
 8009456:	f1c0 0320 	rsb	r3, r0, #32
 800945a:	2b04      	cmp	r3, #4
 800945c:	f340 808a 	ble.w	8009574 <_dtoa_r+0x904>
 8009460:	f1c0 001c 	rsb	r0, r0, #28
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	4403      	add	r3, r0
 8009468:	9304      	str	r3, [sp, #16]
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	4403      	add	r3, r0
 800946e:	4405      	add	r5, r0
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dd07      	ble.n	8009488 <_dtoa_r+0x818>
 8009478:	ee18 1a10 	vmov	r1, s16
 800947c:	461a      	mov	r2, r3
 800947e:	4620      	mov	r0, r4
 8009480:	f000 ffce 	bl	800a420 <__lshift>
 8009484:	ee08 0a10 	vmov	s16, r0
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	dd05      	ble.n	800949a <_dtoa_r+0x82a>
 800948e:	4631      	mov	r1, r6
 8009490:	461a      	mov	r2, r3
 8009492:	4620      	mov	r0, r4
 8009494:	f000 ffc4 	bl	800a420 <__lshift>
 8009498:	4606      	mov	r6, r0
 800949a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d06e      	beq.n	800957e <_dtoa_r+0x90e>
 80094a0:	ee18 0a10 	vmov	r0, s16
 80094a4:	4631      	mov	r1, r6
 80094a6:	f001 f82b 	bl	800a500 <__mcmp>
 80094aa:	2800      	cmp	r0, #0
 80094ac:	da67      	bge.n	800957e <_dtoa_r+0x90e>
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	ee18 1a10 	vmov	r1, s16
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	220a      	movs	r2, #10
 80094ba:	2300      	movs	r3, #0
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fdb5 	bl	800a02c <__multadd>
 80094c2:	9b08      	ldr	r3, [sp, #32]
 80094c4:	ee08 0a10 	vmov	s16, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 81b1 	beq.w	8009830 <_dtoa_r+0xbc0>
 80094ce:	2300      	movs	r3, #0
 80094d0:	4639      	mov	r1, r7
 80094d2:	220a      	movs	r2, #10
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fda9 	bl	800a02c <__multadd>
 80094da:	9b02      	ldr	r3, [sp, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	4607      	mov	r7, r0
 80094e0:	f300 808e 	bgt.w	8009600 <_dtoa_r+0x990>
 80094e4:	9b06      	ldr	r3, [sp, #24]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	dc51      	bgt.n	800958e <_dtoa_r+0x91e>
 80094ea:	e089      	b.n	8009600 <_dtoa_r+0x990>
 80094ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094f2:	e74b      	b.n	800938c <_dtoa_r+0x71c>
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	1e5e      	subs	r6, r3, #1
 80094f8:	9b07      	ldr	r3, [sp, #28]
 80094fa:	42b3      	cmp	r3, r6
 80094fc:	bfbf      	itttt	lt
 80094fe:	9b07      	ldrlt	r3, [sp, #28]
 8009500:	9607      	strlt	r6, [sp, #28]
 8009502:	1af2      	sublt	r2, r6, r3
 8009504:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009506:	bfb6      	itet	lt
 8009508:	189b      	addlt	r3, r3, r2
 800950a:	1b9e      	subge	r6, r3, r6
 800950c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	bfb8      	it	lt
 8009512:	2600      	movlt	r6, #0
 8009514:	2b00      	cmp	r3, #0
 8009516:	bfb7      	itett	lt
 8009518:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800951c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009520:	1a9d      	sublt	r5, r3, r2
 8009522:	2300      	movlt	r3, #0
 8009524:	e734      	b.n	8009390 <_dtoa_r+0x720>
 8009526:	9e07      	ldr	r6, [sp, #28]
 8009528:	9d04      	ldr	r5, [sp, #16]
 800952a:	9f08      	ldr	r7, [sp, #32]
 800952c:	e73b      	b.n	80093a6 <_dtoa_r+0x736>
 800952e:	9a07      	ldr	r2, [sp, #28]
 8009530:	e767      	b.n	8009402 <_dtoa_r+0x792>
 8009532:	9b06      	ldr	r3, [sp, #24]
 8009534:	2b01      	cmp	r3, #1
 8009536:	dc18      	bgt.n	800956a <_dtoa_r+0x8fa>
 8009538:	f1ba 0f00 	cmp.w	sl, #0
 800953c:	d115      	bne.n	800956a <_dtoa_r+0x8fa>
 800953e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009542:	b993      	cbnz	r3, 800956a <_dtoa_r+0x8fa>
 8009544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009548:	0d1b      	lsrs	r3, r3, #20
 800954a:	051b      	lsls	r3, r3, #20
 800954c:	b183      	cbz	r3, 8009570 <_dtoa_r+0x900>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	9b05      	ldr	r3, [sp, #20]
 8009556:	3301      	adds	r3, #1
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	f04f 0801 	mov.w	r8, #1
 800955e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009560:	2b00      	cmp	r3, #0
 8009562:	f47f af6a 	bne.w	800943a <_dtoa_r+0x7ca>
 8009566:	2001      	movs	r0, #1
 8009568:	e76f      	b.n	800944a <_dtoa_r+0x7da>
 800956a:	f04f 0800 	mov.w	r8, #0
 800956e:	e7f6      	b.n	800955e <_dtoa_r+0x8ee>
 8009570:	4698      	mov	r8, r3
 8009572:	e7f4      	b.n	800955e <_dtoa_r+0x8ee>
 8009574:	f43f af7d 	beq.w	8009472 <_dtoa_r+0x802>
 8009578:	4618      	mov	r0, r3
 800957a:	301c      	adds	r0, #28
 800957c:	e772      	b.n	8009464 <_dtoa_r+0x7f4>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	dc37      	bgt.n	80095f4 <_dtoa_r+0x984>
 8009584:	9b06      	ldr	r3, [sp, #24]
 8009586:	2b02      	cmp	r3, #2
 8009588:	dd34      	ble.n	80095f4 <_dtoa_r+0x984>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	9302      	str	r3, [sp, #8]
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	b96b      	cbnz	r3, 80095ae <_dtoa_r+0x93e>
 8009592:	4631      	mov	r1, r6
 8009594:	2205      	movs	r2, #5
 8009596:	4620      	mov	r0, r4
 8009598:	f000 fd48 	bl	800a02c <__multadd>
 800959c:	4601      	mov	r1, r0
 800959e:	4606      	mov	r6, r0
 80095a0:	ee18 0a10 	vmov	r0, s16
 80095a4:	f000 ffac 	bl	800a500 <__mcmp>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f73f adbb 	bgt.w	8009124 <_dtoa_r+0x4b4>
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	9d01      	ldr	r5, [sp, #4]
 80095b2:	43db      	mvns	r3, r3
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	4631      	mov	r1, r6
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fd13 	bl	8009fe8 <_Bfree>
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	f43f aea4 	beq.w	8009310 <_dtoa_r+0x6a0>
 80095c8:	f1b8 0f00 	cmp.w	r8, #0
 80095cc:	d005      	beq.n	80095da <_dtoa_r+0x96a>
 80095ce:	45b8      	cmp	r8, r7
 80095d0:	d003      	beq.n	80095da <_dtoa_r+0x96a>
 80095d2:	4641      	mov	r1, r8
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 fd07 	bl	8009fe8 <_Bfree>
 80095da:	4639      	mov	r1, r7
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fd03 	bl	8009fe8 <_Bfree>
 80095e2:	e695      	b.n	8009310 <_dtoa_r+0x6a0>
 80095e4:	2600      	movs	r6, #0
 80095e6:	4637      	mov	r7, r6
 80095e8:	e7e1      	b.n	80095ae <_dtoa_r+0x93e>
 80095ea:	9700      	str	r7, [sp, #0]
 80095ec:	4637      	mov	r7, r6
 80095ee:	e599      	b.n	8009124 <_dtoa_r+0x4b4>
 80095f0:	40240000 	.word	0x40240000
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80ca 	beq.w	8009790 <_dtoa_r+0xb20>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	9302      	str	r3, [sp, #8]
 8009600:	2d00      	cmp	r5, #0
 8009602:	dd05      	ble.n	8009610 <_dtoa_r+0x9a0>
 8009604:	4639      	mov	r1, r7
 8009606:	462a      	mov	r2, r5
 8009608:	4620      	mov	r0, r4
 800960a:	f000 ff09 	bl	800a420 <__lshift>
 800960e:	4607      	mov	r7, r0
 8009610:	f1b8 0f00 	cmp.w	r8, #0
 8009614:	d05b      	beq.n	80096ce <_dtoa_r+0xa5e>
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fca5 	bl	8009f68 <_Balloc>
 800961e:	4605      	mov	r5, r0
 8009620:	b928      	cbnz	r0, 800962e <_dtoa_r+0x9be>
 8009622:	4b87      	ldr	r3, [pc, #540]	; (8009840 <_dtoa_r+0xbd0>)
 8009624:	4602      	mov	r2, r0
 8009626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800962a:	f7ff bb3b 	b.w	8008ca4 <_dtoa_r+0x34>
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	3202      	adds	r2, #2
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	f107 010c 	add.w	r1, r7, #12
 8009638:	300c      	adds	r0, #12
 800963a:	f7fd fd29 	bl	8007090 <memcpy>
 800963e:	2201      	movs	r2, #1
 8009640:	4629      	mov	r1, r5
 8009642:	4620      	mov	r0, r4
 8009644:	f000 feec 	bl	800a420 <__lshift>
 8009648:	9b01      	ldr	r3, [sp, #4]
 800964a:	f103 0901 	add.w	r9, r3, #1
 800964e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009652:	4413      	add	r3, r2
 8009654:	9305      	str	r3, [sp, #20]
 8009656:	f00a 0301 	and.w	r3, sl, #1
 800965a:	46b8      	mov	r8, r7
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	4607      	mov	r7, r0
 8009660:	4631      	mov	r1, r6
 8009662:	ee18 0a10 	vmov	r0, s16
 8009666:	f7ff fa77 	bl	8008b58 <quorem>
 800966a:	4641      	mov	r1, r8
 800966c:	9002      	str	r0, [sp, #8]
 800966e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009672:	ee18 0a10 	vmov	r0, s16
 8009676:	f000 ff43 	bl	800a500 <__mcmp>
 800967a:	463a      	mov	r2, r7
 800967c:	9003      	str	r0, [sp, #12]
 800967e:	4631      	mov	r1, r6
 8009680:	4620      	mov	r0, r4
 8009682:	f000 ff59 	bl	800a538 <__mdiff>
 8009686:	68c2      	ldr	r2, [r0, #12]
 8009688:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800968c:	4605      	mov	r5, r0
 800968e:	bb02      	cbnz	r2, 80096d2 <_dtoa_r+0xa62>
 8009690:	4601      	mov	r1, r0
 8009692:	ee18 0a10 	vmov	r0, s16
 8009696:	f000 ff33 	bl	800a500 <__mcmp>
 800969a:	4602      	mov	r2, r0
 800969c:	4629      	mov	r1, r5
 800969e:	4620      	mov	r0, r4
 80096a0:	9207      	str	r2, [sp, #28]
 80096a2:	f000 fca1 	bl	8009fe8 <_Bfree>
 80096a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80096aa:	ea43 0102 	orr.w	r1, r3, r2
 80096ae:	9b04      	ldr	r3, [sp, #16]
 80096b0:	430b      	orrs	r3, r1
 80096b2:	464d      	mov	r5, r9
 80096b4:	d10f      	bne.n	80096d6 <_dtoa_r+0xa66>
 80096b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096ba:	d02a      	beq.n	8009712 <_dtoa_r+0xaa2>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dd02      	ble.n	80096c8 <_dtoa_r+0xa58>
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80096c8:	f88b a000 	strb.w	sl, [fp]
 80096cc:	e775      	b.n	80095ba <_dtoa_r+0x94a>
 80096ce:	4638      	mov	r0, r7
 80096d0:	e7ba      	b.n	8009648 <_dtoa_r+0x9d8>
 80096d2:	2201      	movs	r2, #1
 80096d4:	e7e2      	b.n	800969c <_dtoa_r+0xa2c>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	db04      	blt.n	80096e6 <_dtoa_r+0xa76>
 80096dc:	9906      	ldr	r1, [sp, #24]
 80096de:	430b      	orrs	r3, r1
 80096e0:	9904      	ldr	r1, [sp, #16]
 80096e2:	430b      	orrs	r3, r1
 80096e4:	d122      	bne.n	800972c <_dtoa_r+0xabc>
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	ddee      	ble.n	80096c8 <_dtoa_r+0xa58>
 80096ea:	ee18 1a10 	vmov	r1, s16
 80096ee:	2201      	movs	r2, #1
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 fe95 	bl	800a420 <__lshift>
 80096f6:	4631      	mov	r1, r6
 80096f8:	ee08 0a10 	vmov	s16, r0
 80096fc:	f000 ff00 	bl	800a500 <__mcmp>
 8009700:	2800      	cmp	r0, #0
 8009702:	dc03      	bgt.n	800970c <_dtoa_r+0xa9c>
 8009704:	d1e0      	bne.n	80096c8 <_dtoa_r+0xa58>
 8009706:	f01a 0f01 	tst.w	sl, #1
 800970a:	d0dd      	beq.n	80096c8 <_dtoa_r+0xa58>
 800970c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009710:	d1d7      	bne.n	80096c2 <_dtoa_r+0xa52>
 8009712:	2339      	movs	r3, #57	; 0x39
 8009714:	f88b 3000 	strb.w	r3, [fp]
 8009718:	462b      	mov	r3, r5
 800971a:	461d      	mov	r5, r3
 800971c:	3b01      	subs	r3, #1
 800971e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009722:	2a39      	cmp	r2, #57	; 0x39
 8009724:	d071      	beq.n	800980a <_dtoa_r+0xb9a>
 8009726:	3201      	adds	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	e746      	b.n	80095ba <_dtoa_r+0x94a>
 800972c:	2a00      	cmp	r2, #0
 800972e:	dd07      	ble.n	8009740 <_dtoa_r+0xad0>
 8009730:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009734:	d0ed      	beq.n	8009712 <_dtoa_r+0xaa2>
 8009736:	f10a 0301 	add.w	r3, sl, #1
 800973a:	f88b 3000 	strb.w	r3, [fp]
 800973e:	e73c      	b.n	80095ba <_dtoa_r+0x94a>
 8009740:	9b05      	ldr	r3, [sp, #20]
 8009742:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009746:	4599      	cmp	r9, r3
 8009748:	d047      	beq.n	80097da <_dtoa_r+0xb6a>
 800974a:	ee18 1a10 	vmov	r1, s16
 800974e:	2300      	movs	r3, #0
 8009750:	220a      	movs	r2, #10
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fc6a 	bl	800a02c <__multadd>
 8009758:	45b8      	cmp	r8, r7
 800975a:	ee08 0a10 	vmov	s16, r0
 800975e:	f04f 0300 	mov.w	r3, #0
 8009762:	f04f 020a 	mov.w	r2, #10
 8009766:	4641      	mov	r1, r8
 8009768:	4620      	mov	r0, r4
 800976a:	d106      	bne.n	800977a <_dtoa_r+0xb0a>
 800976c:	f000 fc5e 	bl	800a02c <__multadd>
 8009770:	4680      	mov	r8, r0
 8009772:	4607      	mov	r7, r0
 8009774:	f109 0901 	add.w	r9, r9, #1
 8009778:	e772      	b.n	8009660 <_dtoa_r+0x9f0>
 800977a:	f000 fc57 	bl	800a02c <__multadd>
 800977e:	4639      	mov	r1, r7
 8009780:	4680      	mov	r8, r0
 8009782:	2300      	movs	r3, #0
 8009784:	220a      	movs	r2, #10
 8009786:	4620      	mov	r0, r4
 8009788:	f000 fc50 	bl	800a02c <__multadd>
 800978c:	4607      	mov	r7, r0
 800978e:	e7f1      	b.n	8009774 <_dtoa_r+0xb04>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	9302      	str	r3, [sp, #8]
 8009794:	9d01      	ldr	r5, [sp, #4]
 8009796:	ee18 0a10 	vmov	r0, s16
 800979a:	4631      	mov	r1, r6
 800979c:	f7ff f9dc 	bl	8008b58 <quorem>
 80097a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	f805 ab01 	strb.w	sl, [r5], #1
 80097aa:	1aea      	subs	r2, r5, r3
 80097ac:	9b02      	ldr	r3, [sp, #8]
 80097ae:	4293      	cmp	r3, r2
 80097b0:	dd09      	ble.n	80097c6 <_dtoa_r+0xb56>
 80097b2:	ee18 1a10 	vmov	r1, s16
 80097b6:	2300      	movs	r3, #0
 80097b8:	220a      	movs	r2, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 fc36 	bl	800a02c <__multadd>
 80097c0:	ee08 0a10 	vmov	s16, r0
 80097c4:	e7e7      	b.n	8009796 <_dtoa_r+0xb26>
 80097c6:	9b02      	ldr	r3, [sp, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bfc8      	it	gt
 80097cc:	461d      	movgt	r5, r3
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	bfd8      	it	le
 80097d2:	2501      	movle	r5, #1
 80097d4:	441d      	add	r5, r3
 80097d6:	f04f 0800 	mov.w	r8, #0
 80097da:	ee18 1a10 	vmov	r1, s16
 80097de:	2201      	movs	r2, #1
 80097e0:	4620      	mov	r0, r4
 80097e2:	f000 fe1d 	bl	800a420 <__lshift>
 80097e6:	4631      	mov	r1, r6
 80097e8:	ee08 0a10 	vmov	s16, r0
 80097ec:	f000 fe88 	bl	800a500 <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dc91      	bgt.n	8009718 <_dtoa_r+0xaa8>
 80097f4:	d102      	bne.n	80097fc <_dtoa_r+0xb8c>
 80097f6:	f01a 0f01 	tst.w	sl, #1
 80097fa:	d18d      	bne.n	8009718 <_dtoa_r+0xaa8>
 80097fc:	462b      	mov	r3, r5
 80097fe:	461d      	mov	r5, r3
 8009800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009804:	2a30      	cmp	r2, #48	; 0x30
 8009806:	d0fa      	beq.n	80097fe <_dtoa_r+0xb8e>
 8009808:	e6d7      	b.n	80095ba <_dtoa_r+0x94a>
 800980a:	9a01      	ldr	r2, [sp, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d184      	bne.n	800971a <_dtoa_r+0xaaa>
 8009810:	9b00      	ldr	r3, [sp, #0]
 8009812:	3301      	adds	r3, #1
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	2331      	movs	r3, #49	; 0x31
 8009818:	7013      	strb	r3, [r2, #0]
 800981a:	e6ce      	b.n	80095ba <_dtoa_r+0x94a>
 800981c:	4b09      	ldr	r3, [pc, #36]	; (8009844 <_dtoa_r+0xbd4>)
 800981e:	f7ff ba95 	b.w	8008d4c <_dtoa_r+0xdc>
 8009822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009824:	2b00      	cmp	r3, #0
 8009826:	f47f aa6e 	bne.w	8008d06 <_dtoa_r+0x96>
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <_dtoa_r+0xbd8>)
 800982c:	f7ff ba8e 	b.w	8008d4c <_dtoa_r+0xdc>
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	dcae      	bgt.n	8009794 <_dtoa_r+0xb24>
 8009836:	9b06      	ldr	r3, [sp, #24]
 8009838:	2b02      	cmp	r3, #2
 800983a:	f73f aea8 	bgt.w	800958e <_dtoa_r+0x91e>
 800983e:	e7a9      	b.n	8009794 <_dtoa_r+0xb24>
 8009840:	0800bc70 	.word	0x0800bc70
 8009844:	0800ba70 	.word	0x0800ba70
 8009848:	0800bbf1 	.word	0x0800bbf1

0800984c <rshift>:
 800984c:	6903      	ldr	r3, [r0, #16]
 800984e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009852:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009856:	ea4f 1261 	mov.w	r2, r1, asr #5
 800985a:	f100 0414 	add.w	r4, r0, #20
 800985e:	dd45      	ble.n	80098ec <rshift+0xa0>
 8009860:	f011 011f 	ands.w	r1, r1, #31
 8009864:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009868:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800986c:	d10c      	bne.n	8009888 <rshift+0x3c>
 800986e:	f100 0710 	add.w	r7, r0, #16
 8009872:	4629      	mov	r1, r5
 8009874:	42b1      	cmp	r1, r6
 8009876:	d334      	bcc.n	80098e2 <rshift+0x96>
 8009878:	1a9b      	subs	r3, r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	1eea      	subs	r2, r5, #3
 800987e:	4296      	cmp	r6, r2
 8009880:	bf38      	it	cc
 8009882:	2300      	movcc	r3, #0
 8009884:	4423      	add	r3, r4
 8009886:	e015      	b.n	80098b4 <rshift+0x68>
 8009888:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800988c:	f1c1 0820 	rsb	r8, r1, #32
 8009890:	40cf      	lsrs	r7, r1
 8009892:	f105 0e04 	add.w	lr, r5, #4
 8009896:	46a1      	mov	r9, r4
 8009898:	4576      	cmp	r6, lr
 800989a:	46f4      	mov	ip, lr
 800989c:	d815      	bhi.n	80098ca <rshift+0x7e>
 800989e:	1a9a      	subs	r2, r3, r2
 80098a0:	0092      	lsls	r2, r2, #2
 80098a2:	3a04      	subs	r2, #4
 80098a4:	3501      	adds	r5, #1
 80098a6:	42ae      	cmp	r6, r5
 80098a8:	bf38      	it	cc
 80098aa:	2200      	movcc	r2, #0
 80098ac:	18a3      	adds	r3, r4, r2
 80098ae:	50a7      	str	r7, [r4, r2]
 80098b0:	b107      	cbz	r7, 80098b4 <rshift+0x68>
 80098b2:	3304      	adds	r3, #4
 80098b4:	1b1a      	subs	r2, r3, r4
 80098b6:	42a3      	cmp	r3, r4
 80098b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098bc:	bf08      	it	eq
 80098be:	2300      	moveq	r3, #0
 80098c0:	6102      	str	r2, [r0, #16]
 80098c2:	bf08      	it	eq
 80098c4:	6143      	streq	r3, [r0, #20]
 80098c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ca:	f8dc c000 	ldr.w	ip, [ip]
 80098ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80098d2:	ea4c 0707 	orr.w	r7, ip, r7
 80098d6:	f849 7b04 	str.w	r7, [r9], #4
 80098da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098de:	40cf      	lsrs	r7, r1
 80098e0:	e7da      	b.n	8009898 <rshift+0x4c>
 80098e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80098e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80098ea:	e7c3      	b.n	8009874 <rshift+0x28>
 80098ec:	4623      	mov	r3, r4
 80098ee:	e7e1      	b.n	80098b4 <rshift+0x68>

080098f0 <__hexdig_fun>:
 80098f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d802      	bhi.n	80098fe <__hexdig_fun+0xe>
 80098f8:	3820      	subs	r0, #32
 80098fa:	b2c0      	uxtb	r0, r0
 80098fc:	4770      	bx	lr
 80098fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009902:	2b05      	cmp	r3, #5
 8009904:	d801      	bhi.n	800990a <__hexdig_fun+0x1a>
 8009906:	3847      	subs	r0, #71	; 0x47
 8009908:	e7f7      	b.n	80098fa <__hexdig_fun+0xa>
 800990a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800990e:	2b05      	cmp	r3, #5
 8009910:	d801      	bhi.n	8009916 <__hexdig_fun+0x26>
 8009912:	3827      	subs	r0, #39	; 0x27
 8009914:	e7f1      	b.n	80098fa <__hexdig_fun+0xa>
 8009916:	2000      	movs	r0, #0
 8009918:	4770      	bx	lr
	...

0800991c <__gethex>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	ed2d 8b02 	vpush	{d8}
 8009924:	b089      	sub	sp, #36	; 0x24
 8009926:	ee08 0a10 	vmov	s16, r0
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	4bb4      	ldr	r3, [pc, #720]	; (8009c00 <__gethex+0x2e4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	4618      	mov	r0, r3
 8009934:	468b      	mov	fp, r1
 8009936:	4690      	mov	r8, r2
 8009938:	f7f6 fc52 	bl	80001e0 <strlen>
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	f8db 2000 	ldr.w	r2, [fp]
 8009942:	4403      	add	r3, r0
 8009944:	4682      	mov	sl, r0
 8009946:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	1c93      	adds	r3, r2, #2
 800994e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009952:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009956:	32fe      	adds	r2, #254	; 0xfe
 8009958:	18d1      	adds	r1, r2, r3
 800995a:	461f      	mov	r7, r3
 800995c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009960:	9100      	str	r1, [sp, #0]
 8009962:	2830      	cmp	r0, #48	; 0x30
 8009964:	d0f8      	beq.n	8009958 <__gethex+0x3c>
 8009966:	f7ff ffc3 	bl	80098f0 <__hexdig_fun>
 800996a:	4604      	mov	r4, r0
 800996c:	2800      	cmp	r0, #0
 800996e:	d13a      	bne.n	80099e6 <__gethex+0xca>
 8009970:	9901      	ldr	r1, [sp, #4]
 8009972:	4652      	mov	r2, sl
 8009974:	4638      	mov	r0, r7
 8009976:	f001 fa23 	bl	800adc0 <strncmp>
 800997a:	4605      	mov	r5, r0
 800997c:	2800      	cmp	r0, #0
 800997e:	d168      	bne.n	8009a52 <__gethex+0x136>
 8009980:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009984:	eb07 060a 	add.w	r6, r7, sl
 8009988:	f7ff ffb2 	bl	80098f0 <__hexdig_fun>
 800998c:	2800      	cmp	r0, #0
 800998e:	d062      	beq.n	8009a56 <__gethex+0x13a>
 8009990:	4633      	mov	r3, r6
 8009992:	7818      	ldrb	r0, [r3, #0]
 8009994:	2830      	cmp	r0, #48	; 0x30
 8009996:	461f      	mov	r7, r3
 8009998:	f103 0301 	add.w	r3, r3, #1
 800999c:	d0f9      	beq.n	8009992 <__gethex+0x76>
 800999e:	f7ff ffa7 	bl	80098f0 <__hexdig_fun>
 80099a2:	2301      	movs	r3, #1
 80099a4:	fab0 f480 	clz	r4, r0
 80099a8:	0964      	lsrs	r4, r4, #5
 80099aa:	4635      	mov	r5, r6
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	463a      	mov	r2, r7
 80099b0:	4616      	mov	r6, r2
 80099b2:	3201      	adds	r2, #1
 80099b4:	7830      	ldrb	r0, [r6, #0]
 80099b6:	f7ff ff9b 	bl	80098f0 <__hexdig_fun>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d1f8      	bne.n	80099b0 <__gethex+0x94>
 80099be:	9901      	ldr	r1, [sp, #4]
 80099c0:	4652      	mov	r2, sl
 80099c2:	4630      	mov	r0, r6
 80099c4:	f001 f9fc 	bl	800adc0 <strncmp>
 80099c8:	b980      	cbnz	r0, 80099ec <__gethex+0xd0>
 80099ca:	b94d      	cbnz	r5, 80099e0 <__gethex+0xc4>
 80099cc:	eb06 050a 	add.w	r5, r6, sl
 80099d0:	462a      	mov	r2, r5
 80099d2:	4616      	mov	r6, r2
 80099d4:	3201      	adds	r2, #1
 80099d6:	7830      	ldrb	r0, [r6, #0]
 80099d8:	f7ff ff8a 	bl	80098f0 <__hexdig_fun>
 80099dc:	2800      	cmp	r0, #0
 80099de:	d1f8      	bne.n	80099d2 <__gethex+0xb6>
 80099e0:	1bad      	subs	r5, r5, r6
 80099e2:	00ad      	lsls	r5, r5, #2
 80099e4:	e004      	b.n	80099f0 <__gethex+0xd4>
 80099e6:	2400      	movs	r4, #0
 80099e8:	4625      	mov	r5, r4
 80099ea:	e7e0      	b.n	80099ae <__gethex+0x92>
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	d1f7      	bne.n	80099e0 <__gethex+0xc4>
 80099f0:	7833      	ldrb	r3, [r6, #0]
 80099f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099f6:	2b50      	cmp	r3, #80	; 0x50
 80099f8:	d13b      	bne.n	8009a72 <__gethex+0x156>
 80099fa:	7873      	ldrb	r3, [r6, #1]
 80099fc:	2b2b      	cmp	r3, #43	; 0x2b
 80099fe:	d02c      	beq.n	8009a5a <__gethex+0x13e>
 8009a00:	2b2d      	cmp	r3, #45	; 0x2d
 8009a02:	d02e      	beq.n	8009a62 <__gethex+0x146>
 8009a04:	1c71      	adds	r1, r6, #1
 8009a06:	f04f 0900 	mov.w	r9, #0
 8009a0a:	7808      	ldrb	r0, [r1, #0]
 8009a0c:	f7ff ff70 	bl	80098f0 <__hexdig_fun>
 8009a10:	1e43      	subs	r3, r0, #1
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b18      	cmp	r3, #24
 8009a16:	d82c      	bhi.n	8009a72 <__gethex+0x156>
 8009a18:	f1a0 0210 	sub.w	r2, r0, #16
 8009a1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a20:	f7ff ff66 	bl	80098f0 <__hexdig_fun>
 8009a24:	1e43      	subs	r3, r0, #1
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b18      	cmp	r3, #24
 8009a2a:	d91d      	bls.n	8009a68 <__gethex+0x14c>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	d000      	beq.n	8009a34 <__gethex+0x118>
 8009a32:	4252      	negs	r2, r2
 8009a34:	4415      	add	r5, r2
 8009a36:	f8cb 1000 	str.w	r1, [fp]
 8009a3a:	b1e4      	cbz	r4, 8009a76 <__gethex+0x15a>
 8009a3c:	9b00      	ldr	r3, [sp, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bf14      	ite	ne
 8009a42:	2700      	movne	r7, #0
 8009a44:	2706      	moveq	r7, #6
 8009a46:	4638      	mov	r0, r7
 8009a48:	b009      	add	sp, #36	; 0x24
 8009a4a:	ecbd 8b02 	vpop	{d8}
 8009a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a52:	463e      	mov	r6, r7
 8009a54:	4625      	mov	r5, r4
 8009a56:	2401      	movs	r4, #1
 8009a58:	e7ca      	b.n	80099f0 <__gethex+0xd4>
 8009a5a:	f04f 0900 	mov.w	r9, #0
 8009a5e:	1cb1      	adds	r1, r6, #2
 8009a60:	e7d3      	b.n	8009a0a <__gethex+0xee>
 8009a62:	f04f 0901 	mov.w	r9, #1
 8009a66:	e7fa      	b.n	8009a5e <__gethex+0x142>
 8009a68:	230a      	movs	r3, #10
 8009a6a:	fb03 0202 	mla	r2, r3, r2, r0
 8009a6e:	3a10      	subs	r2, #16
 8009a70:	e7d4      	b.n	8009a1c <__gethex+0x100>
 8009a72:	4631      	mov	r1, r6
 8009a74:	e7df      	b.n	8009a36 <__gethex+0x11a>
 8009a76:	1bf3      	subs	r3, r6, r7
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	2b07      	cmp	r3, #7
 8009a7e:	dc0b      	bgt.n	8009a98 <__gethex+0x17c>
 8009a80:	ee18 0a10 	vmov	r0, s16
 8009a84:	f000 fa70 	bl	8009f68 <_Balloc>
 8009a88:	4604      	mov	r4, r0
 8009a8a:	b940      	cbnz	r0, 8009a9e <__gethex+0x182>
 8009a8c:	4b5d      	ldr	r3, [pc, #372]	; (8009c04 <__gethex+0x2e8>)
 8009a8e:	4602      	mov	r2, r0
 8009a90:	21de      	movs	r1, #222	; 0xde
 8009a92:	485d      	ldr	r0, [pc, #372]	; (8009c08 <__gethex+0x2ec>)
 8009a94:	f001 f9b6 	bl	800ae04 <__assert_func>
 8009a98:	3101      	adds	r1, #1
 8009a9a:	105b      	asrs	r3, r3, #1
 8009a9c:	e7ee      	b.n	8009a7c <__gethex+0x160>
 8009a9e:	f100 0914 	add.w	r9, r0, #20
 8009aa2:	f04f 0b00 	mov.w	fp, #0
 8009aa6:	f1ca 0301 	rsb	r3, sl, #1
 8009aaa:	f8cd 9008 	str.w	r9, [sp, #8]
 8009aae:	f8cd b000 	str.w	fp, [sp]
 8009ab2:	9306      	str	r3, [sp, #24]
 8009ab4:	42b7      	cmp	r7, r6
 8009ab6:	d340      	bcc.n	8009b3a <__gethex+0x21e>
 8009ab8:	9802      	ldr	r0, [sp, #8]
 8009aba:	9b00      	ldr	r3, [sp, #0]
 8009abc:	f840 3b04 	str.w	r3, [r0], #4
 8009ac0:	eba0 0009 	sub.w	r0, r0, r9
 8009ac4:	1080      	asrs	r0, r0, #2
 8009ac6:	0146      	lsls	r6, r0, #5
 8009ac8:	6120      	str	r0, [r4, #16]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fb3e 	bl	800a14c <__hi0bits>
 8009ad0:	1a30      	subs	r0, r6, r0
 8009ad2:	f8d8 6000 	ldr.w	r6, [r8]
 8009ad6:	42b0      	cmp	r0, r6
 8009ad8:	dd63      	ble.n	8009ba2 <__gethex+0x286>
 8009ada:	1b87      	subs	r7, r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 fee2 	bl	800a8a8 <__any_on>
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	b1a8      	cbz	r0, 8009b14 <__gethex+0x1f8>
 8009ae8:	1e7b      	subs	r3, r7, #1
 8009aea:	1159      	asrs	r1, r3, #5
 8009aec:	f003 021f 	and.w	r2, r3, #31
 8009af0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009af4:	f04f 0a01 	mov.w	sl, #1
 8009af8:	fa0a f202 	lsl.w	r2, sl, r2
 8009afc:	420a      	tst	r2, r1
 8009afe:	d009      	beq.n	8009b14 <__gethex+0x1f8>
 8009b00:	4553      	cmp	r3, sl
 8009b02:	dd05      	ble.n	8009b10 <__gethex+0x1f4>
 8009b04:	1eb9      	subs	r1, r7, #2
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 fece 	bl	800a8a8 <__any_on>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d145      	bne.n	8009b9c <__gethex+0x280>
 8009b10:	f04f 0a02 	mov.w	sl, #2
 8009b14:	4639      	mov	r1, r7
 8009b16:	4620      	mov	r0, r4
 8009b18:	f7ff fe98 	bl	800984c <rshift>
 8009b1c:	443d      	add	r5, r7
 8009b1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b22:	42ab      	cmp	r3, r5
 8009b24:	da4c      	bge.n	8009bc0 <__gethex+0x2a4>
 8009b26:	ee18 0a10 	vmov	r0, s16
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f000 fa5c 	bl	8009fe8 <_Bfree>
 8009b30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b32:	2300      	movs	r3, #0
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	27a3      	movs	r7, #163	; 0xa3
 8009b38:	e785      	b.n	8009a46 <__gethex+0x12a>
 8009b3a:	1e73      	subs	r3, r6, #1
 8009b3c:	9a05      	ldr	r2, [sp, #20]
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d019      	beq.n	8009b7c <__gethex+0x260>
 8009b48:	f1bb 0f20 	cmp.w	fp, #32
 8009b4c:	d107      	bne.n	8009b5e <__gethex+0x242>
 8009b4e:	9b02      	ldr	r3, [sp, #8]
 8009b50:	9a00      	ldr	r2, [sp, #0]
 8009b52:	f843 2b04 	str.w	r2, [r3], #4
 8009b56:	9302      	str	r3, [sp, #8]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	469b      	mov	fp, r3
 8009b5e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b62:	f7ff fec5 	bl	80098f0 <__hexdig_fun>
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	f000 000f 	and.w	r0, r0, #15
 8009b6c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b70:	4303      	orrs	r3, r0
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	f10b 0b04 	add.w	fp, fp, #4
 8009b78:	9b03      	ldr	r3, [sp, #12]
 8009b7a:	e00d      	b.n	8009b98 <__gethex+0x27c>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	9a06      	ldr	r2, [sp, #24]
 8009b80:	4413      	add	r3, r2
 8009b82:	42bb      	cmp	r3, r7
 8009b84:	d3e0      	bcc.n	8009b48 <__gethex+0x22c>
 8009b86:	4618      	mov	r0, r3
 8009b88:	9901      	ldr	r1, [sp, #4]
 8009b8a:	9307      	str	r3, [sp, #28]
 8009b8c:	4652      	mov	r2, sl
 8009b8e:	f001 f917 	bl	800adc0 <strncmp>
 8009b92:	9b07      	ldr	r3, [sp, #28]
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d1d7      	bne.n	8009b48 <__gethex+0x22c>
 8009b98:	461e      	mov	r6, r3
 8009b9a:	e78b      	b.n	8009ab4 <__gethex+0x198>
 8009b9c:	f04f 0a03 	mov.w	sl, #3
 8009ba0:	e7b8      	b.n	8009b14 <__gethex+0x1f8>
 8009ba2:	da0a      	bge.n	8009bba <__gethex+0x29e>
 8009ba4:	1a37      	subs	r7, r6, r0
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	ee18 0a10 	vmov	r0, s16
 8009bac:	463a      	mov	r2, r7
 8009bae:	f000 fc37 	bl	800a420 <__lshift>
 8009bb2:	1bed      	subs	r5, r5, r7
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	f100 0914 	add.w	r9, r0, #20
 8009bba:	f04f 0a00 	mov.w	sl, #0
 8009bbe:	e7ae      	b.n	8009b1e <__gethex+0x202>
 8009bc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009bc4:	42a8      	cmp	r0, r5
 8009bc6:	dd72      	ble.n	8009cae <__gethex+0x392>
 8009bc8:	1b45      	subs	r5, r0, r5
 8009bca:	42ae      	cmp	r6, r5
 8009bcc:	dc36      	bgt.n	8009c3c <__gethex+0x320>
 8009bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d02a      	beq.n	8009c2c <__gethex+0x310>
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d02c      	beq.n	8009c34 <__gethex+0x318>
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d11c      	bne.n	8009c18 <__gethex+0x2fc>
 8009bde:	42ae      	cmp	r6, r5
 8009be0:	d11a      	bne.n	8009c18 <__gethex+0x2fc>
 8009be2:	2e01      	cmp	r6, #1
 8009be4:	d112      	bne.n	8009c0c <__gethex+0x2f0>
 8009be6:	9a04      	ldr	r2, [sp, #16]
 8009be8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	2301      	movs	r3, #1
 8009bf0:	6123      	str	r3, [r4, #16]
 8009bf2:	f8c9 3000 	str.w	r3, [r9]
 8009bf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bf8:	2762      	movs	r7, #98	; 0x62
 8009bfa:	601c      	str	r4, [r3, #0]
 8009bfc:	e723      	b.n	8009a46 <__gethex+0x12a>
 8009bfe:	bf00      	nop
 8009c00:	0800bce8 	.word	0x0800bce8
 8009c04:	0800bc70 	.word	0x0800bc70
 8009c08:	0800bc81 	.word	0x0800bc81
 8009c0c:	1e71      	subs	r1, r6, #1
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 fe4a 	bl	800a8a8 <__any_on>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d1e6      	bne.n	8009be6 <__gethex+0x2ca>
 8009c18:	ee18 0a10 	vmov	r0, s16
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	f000 f9e3 	bl	8009fe8 <_Bfree>
 8009c22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c24:	2300      	movs	r3, #0
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	2750      	movs	r7, #80	; 0x50
 8009c2a:	e70c      	b.n	8009a46 <__gethex+0x12a>
 8009c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f2      	bne.n	8009c18 <__gethex+0x2fc>
 8009c32:	e7d8      	b.n	8009be6 <__gethex+0x2ca>
 8009c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1d5      	bne.n	8009be6 <__gethex+0x2ca>
 8009c3a:	e7ed      	b.n	8009c18 <__gethex+0x2fc>
 8009c3c:	1e6f      	subs	r7, r5, #1
 8009c3e:	f1ba 0f00 	cmp.w	sl, #0
 8009c42:	d131      	bne.n	8009ca8 <__gethex+0x38c>
 8009c44:	b127      	cbz	r7, 8009c50 <__gethex+0x334>
 8009c46:	4639      	mov	r1, r7
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fe2d 	bl	800a8a8 <__any_on>
 8009c4e:	4682      	mov	sl, r0
 8009c50:	117b      	asrs	r3, r7, #5
 8009c52:	2101      	movs	r1, #1
 8009c54:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c58:	f007 071f 	and.w	r7, r7, #31
 8009c5c:	fa01 f707 	lsl.w	r7, r1, r7
 8009c60:	421f      	tst	r7, r3
 8009c62:	4629      	mov	r1, r5
 8009c64:	4620      	mov	r0, r4
 8009c66:	bf18      	it	ne
 8009c68:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c6c:	1b76      	subs	r6, r6, r5
 8009c6e:	f7ff fded 	bl	800984c <rshift>
 8009c72:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c76:	2702      	movs	r7, #2
 8009c78:	f1ba 0f00 	cmp.w	sl, #0
 8009c7c:	d048      	beq.n	8009d10 <__gethex+0x3f4>
 8009c7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d015      	beq.n	8009cb2 <__gethex+0x396>
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d017      	beq.n	8009cba <__gethex+0x39e>
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d109      	bne.n	8009ca2 <__gethex+0x386>
 8009c8e:	f01a 0f02 	tst.w	sl, #2
 8009c92:	d006      	beq.n	8009ca2 <__gethex+0x386>
 8009c94:	f8d9 0000 	ldr.w	r0, [r9]
 8009c98:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c9c:	f01a 0f01 	tst.w	sl, #1
 8009ca0:	d10e      	bne.n	8009cc0 <__gethex+0x3a4>
 8009ca2:	f047 0710 	orr.w	r7, r7, #16
 8009ca6:	e033      	b.n	8009d10 <__gethex+0x3f4>
 8009ca8:	f04f 0a01 	mov.w	sl, #1
 8009cac:	e7d0      	b.n	8009c50 <__gethex+0x334>
 8009cae:	2701      	movs	r7, #1
 8009cb0:	e7e2      	b.n	8009c78 <__gethex+0x35c>
 8009cb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cb4:	f1c3 0301 	rsb	r3, r3, #1
 8009cb8:	9315      	str	r3, [sp, #84]	; 0x54
 8009cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0f0      	beq.n	8009ca2 <__gethex+0x386>
 8009cc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009cc4:	f104 0314 	add.w	r3, r4, #20
 8009cc8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009ccc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009cd0:	f04f 0c00 	mov.w	ip, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cda:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009cde:	d01c      	beq.n	8009d1a <__gethex+0x3fe>
 8009ce0:	3201      	adds	r2, #1
 8009ce2:	6002      	str	r2, [r0, #0]
 8009ce4:	2f02      	cmp	r7, #2
 8009ce6:	f104 0314 	add.w	r3, r4, #20
 8009cea:	d13f      	bne.n	8009d6c <__gethex+0x450>
 8009cec:	f8d8 2000 	ldr.w	r2, [r8]
 8009cf0:	3a01      	subs	r2, #1
 8009cf2:	42b2      	cmp	r2, r6
 8009cf4:	d10a      	bne.n	8009d0c <__gethex+0x3f0>
 8009cf6:	1171      	asrs	r1, r6, #5
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cfe:	f006 061f 	and.w	r6, r6, #31
 8009d02:	fa02 f606 	lsl.w	r6, r2, r6
 8009d06:	421e      	tst	r6, r3
 8009d08:	bf18      	it	ne
 8009d0a:	4617      	movne	r7, r2
 8009d0c:	f047 0720 	orr.w	r7, r7, #32
 8009d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d12:	601c      	str	r4, [r3, #0]
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	601d      	str	r5, [r3, #0]
 8009d18:	e695      	b.n	8009a46 <__gethex+0x12a>
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d20:	d8d8      	bhi.n	8009cd4 <__gethex+0x3b8>
 8009d22:	68a3      	ldr	r3, [r4, #8]
 8009d24:	459b      	cmp	fp, r3
 8009d26:	db19      	blt.n	8009d5c <__gethex+0x440>
 8009d28:	6861      	ldr	r1, [r4, #4]
 8009d2a:	ee18 0a10 	vmov	r0, s16
 8009d2e:	3101      	adds	r1, #1
 8009d30:	f000 f91a 	bl	8009f68 <_Balloc>
 8009d34:	4681      	mov	r9, r0
 8009d36:	b918      	cbnz	r0, 8009d40 <__gethex+0x424>
 8009d38:	4b1a      	ldr	r3, [pc, #104]	; (8009da4 <__gethex+0x488>)
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	2184      	movs	r1, #132	; 0x84
 8009d3e:	e6a8      	b.n	8009a92 <__gethex+0x176>
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	3202      	adds	r2, #2
 8009d44:	f104 010c 	add.w	r1, r4, #12
 8009d48:	0092      	lsls	r2, r2, #2
 8009d4a:	300c      	adds	r0, #12
 8009d4c:	f7fd f9a0 	bl	8007090 <memcpy>
 8009d50:	4621      	mov	r1, r4
 8009d52:	ee18 0a10 	vmov	r0, s16
 8009d56:	f000 f947 	bl	8009fe8 <_Bfree>
 8009d5a:	464c      	mov	r4, r9
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d64:	6122      	str	r2, [r4, #16]
 8009d66:	2201      	movs	r2, #1
 8009d68:	615a      	str	r2, [r3, #20]
 8009d6a:	e7bb      	b.n	8009ce4 <__gethex+0x3c8>
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	455a      	cmp	r2, fp
 8009d70:	dd0b      	ble.n	8009d8a <__gethex+0x46e>
 8009d72:	2101      	movs	r1, #1
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff fd69 	bl	800984c <rshift>
 8009d7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d7e:	3501      	adds	r5, #1
 8009d80:	42ab      	cmp	r3, r5
 8009d82:	f6ff aed0 	blt.w	8009b26 <__gethex+0x20a>
 8009d86:	2701      	movs	r7, #1
 8009d88:	e7c0      	b.n	8009d0c <__gethex+0x3f0>
 8009d8a:	f016 061f 	ands.w	r6, r6, #31
 8009d8e:	d0fa      	beq.n	8009d86 <__gethex+0x46a>
 8009d90:	4453      	add	r3, sl
 8009d92:	f1c6 0620 	rsb	r6, r6, #32
 8009d96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d9a:	f000 f9d7 	bl	800a14c <__hi0bits>
 8009d9e:	42b0      	cmp	r0, r6
 8009da0:	dbe7      	blt.n	8009d72 <__gethex+0x456>
 8009da2:	e7f0      	b.n	8009d86 <__gethex+0x46a>
 8009da4:	0800bc70 	.word	0x0800bc70

08009da8 <L_shift>:
 8009da8:	f1c2 0208 	rsb	r2, r2, #8
 8009dac:	0092      	lsls	r2, r2, #2
 8009dae:	b570      	push	{r4, r5, r6, lr}
 8009db0:	f1c2 0620 	rsb	r6, r2, #32
 8009db4:	6843      	ldr	r3, [r0, #4]
 8009db6:	6804      	ldr	r4, [r0, #0]
 8009db8:	fa03 f506 	lsl.w	r5, r3, r6
 8009dbc:	432c      	orrs	r4, r5
 8009dbe:	40d3      	lsrs	r3, r2
 8009dc0:	6004      	str	r4, [r0, #0]
 8009dc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009dc6:	4288      	cmp	r0, r1
 8009dc8:	d3f4      	bcc.n	8009db4 <L_shift+0xc>
 8009dca:	bd70      	pop	{r4, r5, r6, pc}

08009dcc <__match>:
 8009dcc:	b530      	push	{r4, r5, lr}
 8009dce:	6803      	ldr	r3, [r0, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd6:	b914      	cbnz	r4, 8009dde <__match+0x12>
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	2001      	movs	r0, #1
 8009ddc:	bd30      	pop	{r4, r5, pc}
 8009dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009de2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009de6:	2d19      	cmp	r5, #25
 8009de8:	bf98      	it	ls
 8009dea:	3220      	addls	r2, #32
 8009dec:	42a2      	cmp	r2, r4
 8009dee:	d0f0      	beq.n	8009dd2 <__match+0x6>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e7f3      	b.n	8009ddc <__match+0x10>

08009df4 <__hexnan>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	680b      	ldr	r3, [r1, #0]
 8009dfa:	115e      	asrs	r6, r3, #5
 8009dfc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e00:	f013 031f 	ands.w	r3, r3, #31
 8009e04:	b087      	sub	sp, #28
 8009e06:	bf18      	it	ne
 8009e08:	3604      	addne	r6, #4
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	1f37      	subs	r7, r6, #4
 8009e0e:	4690      	mov	r8, r2
 8009e10:	6802      	ldr	r2, [r0, #0]
 8009e12:	9301      	str	r3, [sp, #4]
 8009e14:	4682      	mov	sl, r0
 8009e16:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e1a:	46b9      	mov	r9, r7
 8009e1c:	463c      	mov	r4, r7
 8009e1e:	9502      	str	r5, [sp, #8]
 8009e20:	46ab      	mov	fp, r5
 8009e22:	7851      	ldrb	r1, [r2, #1]
 8009e24:	1c53      	adds	r3, r2, #1
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	b341      	cbz	r1, 8009e7c <__hexnan+0x88>
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	9205      	str	r2, [sp, #20]
 8009e2e:	9104      	str	r1, [sp, #16]
 8009e30:	f7ff fd5e 	bl	80098f0 <__hexdig_fun>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d14f      	bne.n	8009ed8 <__hexnan+0xe4>
 8009e38:	9904      	ldr	r1, [sp, #16]
 8009e3a:	9a05      	ldr	r2, [sp, #20]
 8009e3c:	2920      	cmp	r1, #32
 8009e3e:	d818      	bhi.n	8009e72 <__hexnan+0x7e>
 8009e40:	9b02      	ldr	r3, [sp, #8]
 8009e42:	459b      	cmp	fp, r3
 8009e44:	dd13      	ble.n	8009e6e <__hexnan+0x7a>
 8009e46:	454c      	cmp	r4, r9
 8009e48:	d206      	bcs.n	8009e58 <__hexnan+0x64>
 8009e4a:	2d07      	cmp	r5, #7
 8009e4c:	dc04      	bgt.n	8009e58 <__hexnan+0x64>
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4649      	mov	r1, r9
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff ffa8 	bl	8009da8 <L_shift>
 8009e58:	4544      	cmp	r4, r8
 8009e5a:	d950      	bls.n	8009efe <__hexnan+0x10a>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f1a4 0904 	sub.w	r9, r4, #4
 8009e62:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e66:	f8cd b008 	str.w	fp, [sp, #8]
 8009e6a:	464c      	mov	r4, r9
 8009e6c:	461d      	mov	r5, r3
 8009e6e:	9a03      	ldr	r2, [sp, #12]
 8009e70:	e7d7      	b.n	8009e22 <__hexnan+0x2e>
 8009e72:	2929      	cmp	r1, #41	; 0x29
 8009e74:	d156      	bne.n	8009f24 <__hexnan+0x130>
 8009e76:	3202      	adds	r2, #2
 8009e78:	f8ca 2000 	str.w	r2, [sl]
 8009e7c:	f1bb 0f00 	cmp.w	fp, #0
 8009e80:	d050      	beq.n	8009f24 <__hexnan+0x130>
 8009e82:	454c      	cmp	r4, r9
 8009e84:	d206      	bcs.n	8009e94 <__hexnan+0xa0>
 8009e86:	2d07      	cmp	r5, #7
 8009e88:	dc04      	bgt.n	8009e94 <__hexnan+0xa0>
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff ff8a 	bl	8009da8 <L_shift>
 8009e94:	4544      	cmp	r4, r8
 8009e96:	d934      	bls.n	8009f02 <__hexnan+0x10e>
 8009e98:	f1a8 0204 	sub.w	r2, r8, #4
 8009e9c:	4623      	mov	r3, r4
 8009e9e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ea2:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ea6:	429f      	cmp	r7, r3
 8009ea8:	d2f9      	bcs.n	8009e9e <__hexnan+0xaa>
 8009eaa:	1b3b      	subs	r3, r7, r4
 8009eac:	f023 0303 	bic.w	r3, r3, #3
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	3401      	adds	r4, #1
 8009eb4:	3e03      	subs	r6, #3
 8009eb6:	42b4      	cmp	r4, r6
 8009eb8:	bf88      	it	hi
 8009eba:	2304      	movhi	r3, #4
 8009ebc:	4443      	add	r3, r8
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f843 2b04 	str.w	r2, [r3], #4
 8009ec4:	429f      	cmp	r7, r3
 8009ec6:	d2fb      	bcs.n	8009ec0 <__hexnan+0xcc>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	b91b      	cbnz	r3, 8009ed4 <__hexnan+0xe0>
 8009ecc:	4547      	cmp	r7, r8
 8009ece:	d127      	bne.n	8009f20 <__hexnan+0x12c>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	2005      	movs	r0, #5
 8009ed6:	e026      	b.n	8009f26 <__hexnan+0x132>
 8009ed8:	3501      	adds	r5, #1
 8009eda:	2d08      	cmp	r5, #8
 8009edc:	f10b 0b01 	add.w	fp, fp, #1
 8009ee0:	dd06      	ble.n	8009ef0 <__hexnan+0xfc>
 8009ee2:	4544      	cmp	r4, r8
 8009ee4:	d9c3      	bls.n	8009e6e <__hexnan+0x7a>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eec:	2501      	movs	r5, #1
 8009eee:	3c04      	subs	r4, #4
 8009ef0:	6822      	ldr	r2, [r4, #0]
 8009ef2:	f000 000f 	and.w	r0, r0, #15
 8009ef6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009efa:	6022      	str	r2, [r4, #0]
 8009efc:	e7b7      	b.n	8009e6e <__hexnan+0x7a>
 8009efe:	2508      	movs	r5, #8
 8009f00:	e7b5      	b.n	8009e6e <__hexnan+0x7a>
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0df      	beq.n	8009ec8 <__hexnan+0xd4>
 8009f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f0c:	f1c3 0320 	rsb	r3, r3, #32
 8009f10:	fa22 f303 	lsr.w	r3, r2, r3
 8009f14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f18:	401a      	ands	r2, r3
 8009f1a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f1e:	e7d3      	b.n	8009ec8 <__hexnan+0xd4>
 8009f20:	3f04      	subs	r7, #4
 8009f22:	e7d1      	b.n	8009ec8 <__hexnan+0xd4>
 8009f24:	2004      	movs	r0, #4
 8009f26:	b007      	add	sp, #28
 8009f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f2c <_localeconv_r>:
 8009f2c:	4800      	ldr	r0, [pc, #0]	; (8009f30 <_localeconv_r+0x4>)
 8009f2e:	4770      	bx	lr
 8009f30:	20000168 	.word	0x20000168

08009f34 <malloc>:
 8009f34:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <malloc+0xc>)
 8009f36:	4601      	mov	r1, r0
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	f000 bd59 	b.w	800a9f0 <_malloc_r>
 8009f3e:	bf00      	nop
 8009f40:	20000010 	.word	0x20000010

08009f44 <__ascii_mbtowc>:
 8009f44:	b082      	sub	sp, #8
 8009f46:	b901      	cbnz	r1, 8009f4a <__ascii_mbtowc+0x6>
 8009f48:	a901      	add	r1, sp, #4
 8009f4a:	b142      	cbz	r2, 8009f5e <__ascii_mbtowc+0x1a>
 8009f4c:	b14b      	cbz	r3, 8009f62 <__ascii_mbtowc+0x1e>
 8009f4e:	7813      	ldrb	r3, [r2, #0]
 8009f50:	600b      	str	r3, [r1, #0]
 8009f52:	7812      	ldrb	r2, [r2, #0]
 8009f54:	1e10      	subs	r0, r2, #0
 8009f56:	bf18      	it	ne
 8009f58:	2001      	movne	r0, #1
 8009f5a:	b002      	add	sp, #8
 8009f5c:	4770      	bx	lr
 8009f5e:	4610      	mov	r0, r2
 8009f60:	e7fb      	b.n	8009f5a <__ascii_mbtowc+0x16>
 8009f62:	f06f 0001 	mvn.w	r0, #1
 8009f66:	e7f8      	b.n	8009f5a <__ascii_mbtowc+0x16>

08009f68 <_Balloc>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	b976      	cbnz	r6, 8009f90 <_Balloc+0x28>
 8009f72:	2010      	movs	r0, #16
 8009f74:	f7ff ffde 	bl	8009f34 <malloc>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f7c:	b920      	cbnz	r0, 8009f88 <_Balloc+0x20>
 8009f7e:	4b18      	ldr	r3, [pc, #96]	; (8009fe0 <_Balloc+0x78>)
 8009f80:	4818      	ldr	r0, [pc, #96]	; (8009fe4 <_Balloc+0x7c>)
 8009f82:	2166      	movs	r1, #102	; 0x66
 8009f84:	f000 ff3e 	bl	800ae04 <__assert_func>
 8009f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f8c:	6006      	str	r6, [r0, #0]
 8009f8e:	60c6      	str	r6, [r0, #12]
 8009f90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f92:	68f3      	ldr	r3, [r6, #12]
 8009f94:	b183      	cbz	r3, 8009fb8 <_Balloc+0x50>
 8009f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f9e:	b9b8      	cbnz	r0, 8009fd0 <_Balloc+0x68>
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8009fa6:	1d72      	adds	r2, r6, #5
 8009fa8:	0092      	lsls	r2, r2, #2
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 fc9d 	bl	800a8ea <_calloc_r>
 8009fb0:	b160      	cbz	r0, 8009fcc <_Balloc+0x64>
 8009fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fb6:	e00e      	b.n	8009fd6 <_Balloc+0x6e>
 8009fb8:	2221      	movs	r2, #33	; 0x21
 8009fba:	2104      	movs	r1, #4
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 fc94 	bl	800a8ea <_calloc_r>
 8009fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc4:	60f0      	str	r0, [r6, #12]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e4      	bne.n	8009f96 <_Balloc+0x2e>
 8009fcc:	2000      	movs	r0, #0
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	6802      	ldr	r2, [r0, #0]
 8009fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fdc:	e7f7      	b.n	8009fce <_Balloc+0x66>
 8009fde:	bf00      	nop
 8009fe0:	0800bbfe 	.word	0x0800bbfe
 8009fe4:	0800bcfc 	.word	0x0800bcfc

08009fe8 <_Bfree>:
 8009fe8:	b570      	push	{r4, r5, r6, lr}
 8009fea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fec:	4605      	mov	r5, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	b976      	cbnz	r6, 800a010 <_Bfree+0x28>
 8009ff2:	2010      	movs	r0, #16
 8009ff4:	f7ff ff9e 	bl	8009f34 <malloc>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6268      	str	r0, [r5, #36]	; 0x24
 8009ffc:	b920      	cbnz	r0, 800a008 <_Bfree+0x20>
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <_Bfree+0x3c>)
 800a000:	4809      	ldr	r0, [pc, #36]	; (800a028 <_Bfree+0x40>)
 800a002:	218a      	movs	r1, #138	; 0x8a
 800a004:	f000 fefe 	bl	800ae04 <__assert_func>
 800a008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a00c:	6006      	str	r6, [r0, #0]
 800a00e:	60c6      	str	r6, [r0, #12]
 800a010:	b13c      	cbz	r4, 800a022 <_Bfree+0x3a>
 800a012:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a014:	6862      	ldr	r2, [r4, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a01c:	6021      	str	r1, [r4, #0]
 800a01e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	0800bbfe 	.word	0x0800bbfe
 800a028:	0800bcfc 	.word	0x0800bcfc

0800a02c <__multadd>:
 800a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a030:	690d      	ldr	r5, [r1, #16]
 800a032:	4607      	mov	r7, r0
 800a034:	460c      	mov	r4, r1
 800a036:	461e      	mov	r6, r3
 800a038:	f101 0c14 	add.w	ip, r1, #20
 800a03c:	2000      	movs	r0, #0
 800a03e:	f8dc 3000 	ldr.w	r3, [ip]
 800a042:	b299      	uxth	r1, r3
 800a044:	fb02 6101 	mla	r1, r2, r1, r6
 800a048:	0c1e      	lsrs	r6, r3, #16
 800a04a:	0c0b      	lsrs	r3, r1, #16
 800a04c:	fb02 3306 	mla	r3, r2, r6, r3
 800a050:	b289      	uxth	r1, r1
 800a052:	3001      	adds	r0, #1
 800a054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a058:	4285      	cmp	r5, r0
 800a05a:	f84c 1b04 	str.w	r1, [ip], #4
 800a05e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a062:	dcec      	bgt.n	800a03e <__multadd+0x12>
 800a064:	b30e      	cbz	r6, 800a0aa <__multadd+0x7e>
 800a066:	68a3      	ldr	r3, [r4, #8]
 800a068:	42ab      	cmp	r3, r5
 800a06a:	dc19      	bgt.n	800a0a0 <__multadd+0x74>
 800a06c:	6861      	ldr	r1, [r4, #4]
 800a06e:	4638      	mov	r0, r7
 800a070:	3101      	adds	r1, #1
 800a072:	f7ff ff79 	bl	8009f68 <_Balloc>
 800a076:	4680      	mov	r8, r0
 800a078:	b928      	cbnz	r0, 800a086 <__multadd+0x5a>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4b0c      	ldr	r3, [pc, #48]	; (800a0b0 <__multadd+0x84>)
 800a07e:	480d      	ldr	r0, [pc, #52]	; (800a0b4 <__multadd+0x88>)
 800a080:	21b5      	movs	r1, #181	; 0xb5
 800a082:	f000 febf 	bl	800ae04 <__assert_func>
 800a086:	6922      	ldr	r2, [r4, #16]
 800a088:	3202      	adds	r2, #2
 800a08a:	f104 010c 	add.w	r1, r4, #12
 800a08e:	0092      	lsls	r2, r2, #2
 800a090:	300c      	adds	r0, #12
 800a092:	f7fc fffd 	bl	8007090 <memcpy>
 800a096:	4621      	mov	r1, r4
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff ffa5 	bl	8009fe8 <_Bfree>
 800a09e:	4644      	mov	r4, r8
 800a0a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	615e      	str	r6, [r3, #20]
 800a0a8:	6125      	str	r5, [r4, #16]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b0:	0800bc70 	.word	0x0800bc70
 800a0b4:	0800bcfc 	.word	0x0800bcfc

0800a0b8 <__s2b>:
 800a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	460c      	mov	r4, r1
 800a0be:	4615      	mov	r5, r2
 800a0c0:	461f      	mov	r7, r3
 800a0c2:	2209      	movs	r2, #9
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	db09      	blt.n	800a0e8 <__s2b+0x30>
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f7ff ff47 	bl	8009f68 <_Balloc>
 800a0da:	b940      	cbnz	r0, 800a0ee <__s2b+0x36>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	4b19      	ldr	r3, [pc, #100]	; (800a144 <__s2b+0x8c>)
 800a0e0:	4819      	ldr	r0, [pc, #100]	; (800a148 <__s2b+0x90>)
 800a0e2:	21ce      	movs	r1, #206	; 0xce
 800a0e4:	f000 fe8e 	bl	800ae04 <__assert_func>
 800a0e8:	0052      	lsls	r2, r2, #1
 800a0ea:	3101      	adds	r1, #1
 800a0ec:	e7f0      	b.n	800a0d0 <__s2b+0x18>
 800a0ee:	9b08      	ldr	r3, [sp, #32]
 800a0f0:	6143      	str	r3, [r0, #20]
 800a0f2:	2d09      	cmp	r5, #9
 800a0f4:	f04f 0301 	mov.w	r3, #1
 800a0f8:	6103      	str	r3, [r0, #16]
 800a0fa:	dd16      	ble.n	800a12a <__s2b+0x72>
 800a0fc:	f104 0909 	add.w	r9, r4, #9
 800a100:	46c8      	mov	r8, r9
 800a102:	442c      	add	r4, r5
 800a104:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a108:	4601      	mov	r1, r0
 800a10a:	3b30      	subs	r3, #48	; 0x30
 800a10c:	220a      	movs	r2, #10
 800a10e:	4630      	mov	r0, r6
 800a110:	f7ff ff8c 	bl	800a02c <__multadd>
 800a114:	45a0      	cmp	r8, r4
 800a116:	d1f5      	bne.n	800a104 <__s2b+0x4c>
 800a118:	f1a5 0408 	sub.w	r4, r5, #8
 800a11c:	444c      	add	r4, r9
 800a11e:	1b2d      	subs	r5, r5, r4
 800a120:	1963      	adds	r3, r4, r5
 800a122:	42bb      	cmp	r3, r7
 800a124:	db04      	blt.n	800a130 <__s2b+0x78>
 800a126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a12a:	340a      	adds	r4, #10
 800a12c:	2509      	movs	r5, #9
 800a12e:	e7f6      	b.n	800a11e <__s2b+0x66>
 800a130:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a134:	4601      	mov	r1, r0
 800a136:	3b30      	subs	r3, #48	; 0x30
 800a138:	220a      	movs	r2, #10
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff ff76 	bl	800a02c <__multadd>
 800a140:	e7ee      	b.n	800a120 <__s2b+0x68>
 800a142:	bf00      	nop
 800a144:	0800bc70 	.word	0x0800bc70
 800a148:	0800bcfc 	.word	0x0800bcfc

0800a14c <__hi0bits>:
 800a14c:	0c03      	lsrs	r3, r0, #16
 800a14e:	041b      	lsls	r3, r3, #16
 800a150:	b9d3      	cbnz	r3, 800a188 <__hi0bits+0x3c>
 800a152:	0400      	lsls	r0, r0, #16
 800a154:	2310      	movs	r3, #16
 800a156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a15a:	bf04      	itt	eq
 800a15c:	0200      	lsleq	r0, r0, #8
 800a15e:	3308      	addeq	r3, #8
 800a160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a164:	bf04      	itt	eq
 800a166:	0100      	lsleq	r0, r0, #4
 800a168:	3304      	addeq	r3, #4
 800a16a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a16e:	bf04      	itt	eq
 800a170:	0080      	lsleq	r0, r0, #2
 800a172:	3302      	addeq	r3, #2
 800a174:	2800      	cmp	r0, #0
 800a176:	db05      	blt.n	800a184 <__hi0bits+0x38>
 800a178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a17c:	f103 0301 	add.w	r3, r3, #1
 800a180:	bf08      	it	eq
 800a182:	2320      	moveq	r3, #32
 800a184:	4618      	mov	r0, r3
 800a186:	4770      	bx	lr
 800a188:	2300      	movs	r3, #0
 800a18a:	e7e4      	b.n	800a156 <__hi0bits+0xa>

0800a18c <__lo0bits>:
 800a18c:	6803      	ldr	r3, [r0, #0]
 800a18e:	f013 0207 	ands.w	r2, r3, #7
 800a192:	4601      	mov	r1, r0
 800a194:	d00b      	beq.n	800a1ae <__lo0bits+0x22>
 800a196:	07da      	lsls	r2, r3, #31
 800a198:	d423      	bmi.n	800a1e2 <__lo0bits+0x56>
 800a19a:	0798      	lsls	r0, r3, #30
 800a19c:	bf49      	itett	mi
 800a19e:	085b      	lsrmi	r3, r3, #1
 800a1a0:	089b      	lsrpl	r3, r3, #2
 800a1a2:	2001      	movmi	r0, #1
 800a1a4:	600b      	strmi	r3, [r1, #0]
 800a1a6:	bf5c      	itt	pl
 800a1a8:	600b      	strpl	r3, [r1, #0]
 800a1aa:	2002      	movpl	r0, #2
 800a1ac:	4770      	bx	lr
 800a1ae:	b298      	uxth	r0, r3
 800a1b0:	b9a8      	cbnz	r0, 800a1de <__lo0bits+0x52>
 800a1b2:	0c1b      	lsrs	r3, r3, #16
 800a1b4:	2010      	movs	r0, #16
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	b90a      	cbnz	r2, 800a1be <__lo0bits+0x32>
 800a1ba:	3008      	adds	r0, #8
 800a1bc:	0a1b      	lsrs	r3, r3, #8
 800a1be:	071a      	lsls	r2, r3, #28
 800a1c0:	bf04      	itt	eq
 800a1c2:	091b      	lsreq	r3, r3, #4
 800a1c4:	3004      	addeq	r0, #4
 800a1c6:	079a      	lsls	r2, r3, #30
 800a1c8:	bf04      	itt	eq
 800a1ca:	089b      	lsreq	r3, r3, #2
 800a1cc:	3002      	addeq	r0, #2
 800a1ce:	07da      	lsls	r2, r3, #31
 800a1d0:	d403      	bmi.n	800a1da <__lo0bits+0x4e>
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	f100 0001 	add.w	r0, r0, #1
 800a1d8:	d005      	beq.n	800a1e6 <__lo0bits+0x5a>
 800a1da:	600b      	str	r3, [r1, #0]
 800a1dc:	4770      	bx	lr
 800a1de:	4610      	mov	r0, r2
 800a1e0:	e7e9      	b.n	800a1b6 <__lo0bits+0x2a>
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	4770      	bx	lr
 800a1e6:	2020      	movs	r0, #32
 800a1e8:	4770      	bx	lr
	...

0800a1ec <__i2b>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	f7ff feb9 	bl	8009f68 <_Balloc>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__i2b+0x1a>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <__i2b+0x24>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	; (800a214 <__i2b+0x28>)
 800a1fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a202:	f000 fdff 	bl	800ae04 <__assert_func>
 800a206:	2301      	movs	r3, #1
 800a208:	6144      	str	r4, [r0, #20]
 800a20a:	6103      	str	r3, [r0, #16]
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800bc70 	.word	0x0800bc70
 800a214:	0800bcfc 	.word	0x0800bcfc

0800a218 <__multiply>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	4691      	mov	r9, r2
 800a21e:	690a      	ldr	r2, [r1, #16]
 800a220:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a224:	429a      	cmp	r2, r3
 800a226:	bfb8      	it	lt
 800a228:	460b      	movlt	r3, r1
 800a22a:	460c      	mov	r4, r1
 800a22c:	bfbc      	itt	lt
 800a22e:	464c      	movlt	r4, r9
 800a230:	4699      	movlt	r9, r3
 800a232:	6927      	ldr	r7, [r4, #16]
 800a234:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	6861      	ldr	r1, [r4, #4]
 800a23c:	eb07 060a 	add.w	r6, r7, sl
 800a240:	42b3      	cmp	r3, r6
 800a242:	b085      	sub	sp, #20
 800a244:	bfb8      	it	lt
 800a246:	3101      	addlt	r1, #1
 800a248:	f7ff fe8e 	bl	8009f68 <_Balloc>
 800a24c:	b930      	cbnz	r0, 800a25c <__multiply+0x44>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b44      	ldr	r3, [pc, #272]	; (800a364 <__multiply+0x14c>)
 800a252:	4845      	ldr	r0, [pc, #276]	; (800a368 <__multiply+0x150>)
 800a254:	f240 115d 	movw	r1, #349	; 0x15d
 800a258:	f000 fdd4 	bl	800ae04 <__assert_func>
 800a25c:	f100 0514 	add.w	r5, r0, #20
 800a260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a264:	462b      	mov	r3, r5
 800a266:	2200      	movs	r2, #0
 800a268:	4543      	cmp	r3, r8
 800a26a:	d321      	bcc.n	800a2b0 <__multiply+0x98>
 800a26c:	f104 0314 	add.w	r3, r4, #20
 800a270:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a274:	f109 0314 	add.w	r3, r9, #20
 800a278:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a27c:	9202      	str	r2, [sp, #8]
 800a27e:	1b3a      	subs	r2, r7, r4
 800a280:	3a15      	subs	r2, #21
 800a282:	f022 0203 	bic.w	r2, r2, #3
 800a286:	3204      	adds	r2, #4
 800a288:	f104 0115 	add.w	r1, r4, #21
 800a28c:	428f      	cmp	r7, r1
 800a28e:	bf38      	it	cc
 800a290:	2204      	movcc	r2, #4
 800a292:	9201      	str	r2, [sp, #4]
 800a294:	9a02      	ldr	r2, [sp, #8]
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d80c      	bhi.n	800a2b6 <__multiply+0x9e>
 800a29c:	2e00      	cmp	r6, #0
 800a29e:	dd03      	ble.n	800a2a8 <__multiply+0x90>
 800a2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05a      	beq.n	800a35e <__multiply+0x146>
 800a2a8:	6106      	str	r6, [r0, #16]
 800a2aa:	b005      	add	sp, #20
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	f843 2b04 	str.w	r2, [r3], #4
 800a2b4:	e7d8      	b.n	800a268 <__multiply+0x50>
 800a2b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2ba:	f1ba 0f00 	cmp.w	sl, #0
 800a2be:	d024      	beq.n	800a30a <__multiply+0xf2>
 800a2c0:	f104 0e14 	add.w	lr, r4, #20
 800a2c4:	46a9      	mov	r9, r5
 800a2c6:	f04f 0c00 	mov.w	ip, #0
 800a2ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2ce:	f8d9 1000 	ldr.w	r1, [r9]
 800a2d2:	fa1f fb82 	uxth.w	fp, r2
 800a2d6:	b289      	uxth	r1, r1
 800a2d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2e4:	4461      	add	r1, ip
 800a2e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2f2:	b289      	uxth	r1, r1
 800a2f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2f8:	4577      	cmp	r7, lr
 800a2fa:	f849 1b04 	str.w	r1, [r9], #4
 800a2fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a302:	d8e2      	bhi.n	800a2ca <__multiply+0xb2>
 800a304:	9a01      	ldr	r2, [sp, #4]
 800a306:	f845 c002 	str.w	ip, [r5, r2]
 800a30a:	9a03      	ldr	r2, [sp, #12]
 800a30c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a310:	3304      	adds	r3, #4
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	d020      	beq.n	800a35a <__multiply+0x142>
 800a318:	6829      	ldr	r1, [r5, #0]
 800a31a:	f104 0c14 	add.w	ip, r4, #20
 800a31e:	46ae      	mov	lr, r5
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	f8bc b000 	ldrh.w	fp, [ip]
 800a328:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a32c:	fb09 220b 	mla	r2, r9, fp, r2
 800a330:	4492      	add	sl, r2
 800a332:	b289      	uxth	r1, r1
 800a334:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a338:	f84e 1b04 	str.w	r1, [lr], #4
 800a33c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a340:	f8be 1000 	ldrh.w	r1, [lr]
 800a344:	0c12      	lsrs	r2, r2, #16
 800a346:	fb09 1102 	mla	r1, r9, r2, r1
 800a34a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a34e:	4567      	cmp	r7, ip
 800a350:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a354:	d8e6      	bhi.n	800a324 <__multiply+0x10c>
 800a356:	9a01      	ldr	r2, [sp, #4]
 800a358:	50a9      	str	r1, [r5, r2]
 800a35a:	3504      	adds	r5, #4
 800a35c:	e79a      	b.n	800a294 <__multiply+0x7c>
 800a35e:	3e01      	subs	r6, #1
 800a360:	e79c      	b.n	800a29c <__multiply+0x84>
 800a362:	bf00      	nop
 800a364:	0800bc70 	.word	0x0800bc70
 800a368:	0800bcfc 	.word	0x0800bcfc

0800a36c <__pow5mult>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	4615      	mov	r5, r2
 800a372:	f012 0203 	ands.w	r2, r2, #3
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	d007      	beq.n	800a38c <__pow5mult+0x20>
 800a37c:	4c25      	ldr	r4, [pc, #148]	; (800a414 <__pow5mult+0xa8>)
 800a37e:	3a01      	subs	r2, #1
 800a380:	2300      	movs	r3, #0
 800a382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a386:	f7ff fe51 	bl	800a02c <__multadd>
 800a38a:	4607      	mov	r7, r0
 800a38c:	10ad      	asrs	r5, r5, #2
 800a38e:	d03d      	beq.n	800a40c <__pow5mult+0xa0>
 800a390:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a392:	b97c      	cbnz	r4, 800a3b4 <__pow5mult+0x48>
 800a394:	2010      	movs	r0, #16
 800a396:	f7ff fdcd 	bl	8009f34 <malloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	6270      	str	r0, [r6, #36]	; 0x24
 800a39e:	b928      	cbnz	r0, 800a3ac <__pow5mult+0x40>
 800a3a0:	4b1d      	ldr	r3, [pc, #116]	; (800a418 <__pow5mult+0xac>)
 800a3a2:	481e      	ldr	r0, [pc, #120]	; (800a41c <__pow5mult+0xb0>)
 800a3a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3a8:	f000 fd2c 	bl	800ae04 <__assert_func>
 800a3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3b0:	6004      	str	r4, [r0, #0]
 800a3b2:	60c4      	str	r4, [r0, #12]
 800a3b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3bc:	b94c      	cbnz	r4, 800a3d2 <__pow5mult+0x66>
 800a3be:	f240 2171 	movw	r1, #625	; 0x271
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ff12 	bl	800a1ec <__i2b>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	6003      	str	r3, [r0, #0]
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	07eb      	lsls	r3, r5, #31
 800a3d8:	d50a      	bpl.n	800a3f0 <__pow5mult+0x84>
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7ff ff1a 	bl	800a218 <__multiply>
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff fdfd 	bl	8009fe8 <_Bfree>
 800a3ee:	4647      	mov	r7, r8
 800a3f0:	106d      	asrs	r5, r5, #1
 800a3f2:	d00b      	beq.n	800a40c <__pow5mult+0xa0>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	b938      	cbnz	r0, 800a408 <__pow5mult+0x9c>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff ff0b 	bl	800a218 <__multiply>
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	f8c0 9000 	str.w	r9, [r0]
 800a408:	4604      	mov	r4, r0
 800a40a:	e7e4      	b.n	800a3d6 <__pow5mult+0x6a>
 800a40c:	4638      	mov	r0, r7
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	bf00      	nop
 800a414:	0800be48 	.word	0x0800be48
 800a418:	0800bbfe 	.word	0x0800bbfe
 800a41c:	0800bcfc 	.word	0x0800bcfc

0800a420 <__lshift>:
 800a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	6849      	ldr	r1, [r1, #4]
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a42e:	68a3      	ldr	r3, [r4, #8]
 800a430:	4607      	mov	r7, r0
 800a432:	4691      	mov	r9, r2
 800a434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a438:	f108 0601 	add.w	r6, r8, #1
 800a43c:	42b3      	cmp	r3, r6
 800a43e:	db0b      	blt.n	800a458 <__lshift+0x38>
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff fd91 	bl	8009f68 <_Balloc>
 800a446:	4605      	mov	r5, r0
 800a448:	b948      	cbnz	r0, 800a45e <__lshift+0x3e>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4b2a      	ldr	r3, [pc, #168]	; (800a4f8 <__lshift+0xd8>)
 800a44e:	482b      	ldr	r0, [pc, #172]	; (800a4fc <__lshift+0xdc>)
 800a450:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a454:	f000 fcd6 	bl	800ae04 <__assert_func>
 800a458:	3101      	adds	r1, #1
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	e7ee      	b.n	800a43c <__lshift+0x1c>
 800a45e:	2300      	movs	r3, #0
 800a460:	f100 0114 	add.w	r1, r0, #20
 800a464:	f100 0210 	add.w	r2, r0, #16
 800a468:	4618      	mov	r0, r3
 800a46a:	4553      	cmp	r3, sl
 800a46c:	db37      	blt.n	800a4de <__lshift+0xbe>
 800a46e:	6920      	ldr	r0, [r4, #16]
 800a470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a474:	f104 0314 	add.w	r3, r4, #20
 800a478:	f019 091f 	ands.w	r9, r9, #31
 800a47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a480:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a484:	d02f      	beq.n	800a4e6 <__lshift+0xc6>
 800a486:	f1c9 0e20 	rsb	lr, r9, #32
 800a48a:	468a      	mov	sl, r1
 800a48c:	f04f 0c00 	mov.w	ip, #0
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	fa02 f209 	lsl.w	r2, r2, r9
 800a496:	ea42 020c 	orr.w	r2, r2, ip
 800a49a:	f84a 2b04 	str.w	r2, [sl], #4
 800a49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a2:	4298      	cmp	r0, r3
 800a4a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a4a8:	d8f2      	bhi.n	800a490 <__lshift+0x70>
 800a4aa:	1b03      	subs	r3, r0, r4
 800a4ac:	3b15      	subs	r3, #21
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	f104 0215 	add.w	r2, r4, #21
 800a4b8:	4290      	cmp	r0, r2
 800a4ba:	bf38      	it	cc
 800a4bc:	2304      	movcc	r3, #4
 800a4be:	f841 c003 	str.w	ip, [r1, r3]
 800a4c2:	f1bc 0f00 	cmp.w	ip, #0
 800a4c6:	d001      	beq.n	800a4cc <__lshift+0xac>
 800a4c8:	f108 0602 	add.w	r6, r8, #2
 800a4cc:	3e01      	subs	r6, #1
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	612e      	str	r6, [r5, #16]
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	f7ff fd88 	bl	8009fe8 <_Bfree>
 800a4d8:	4628      	mov	r0, r5
 800a4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4de:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	e7c1      	b.n	800a46a <__lshift+0x4a>
 800a4e6:	3904      	subs	r1, #4
 800a4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4f0:	4298      	cmp	r0, r3
 800a4f2:	d8f9      	bhi.n	800a4e8 <__lshift+0xc8>
 800a4f4:	e7ea      	b.n	800a4cc <__lshift+0xac>
 800a4f6:	bf00      	nop
 800a4f8:	0800bc70 	.word	0x0800bc70
 800a4fc:	0800bcfc 	.word	0x0800bcfc

0800a500 <__mcmp>:
 800a500:	b530      	push	{r4, r5, lr}
 800a502:	6902      	ldr	r2, [r0, #16]
 800a504:	690c      	ldr	r4, [r1, #16]
 800a506:	1b12      	subs	r2, r2, r4
 800a508:	d10e      	bne.n	800a528 <__mcmp+0x28>
 800a50a:	f100 0314 	add.w	r3, r0, #20
 800a50e:	3114      	adds	r1, #20
 800a510:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a514:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a518:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a51c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a520:	42a5      	cmp	r5, r4
 800a522:	d003      	beq.n	800a52c <__mcmp+0x2c>
 800a524:	d305      	bcc.n	800a532 <__mcmp+0x32>
 800a526:	2201      	movs	r2, #1
 800a528:	4610      	mov	r0, r2
 800a52a:	bd30      	pop	{r4, r5, pc}
 800a52c:	4283      	cmp	r3, r0
 800a52e:	d3f3      	bcc.n	800a518 <__mcmp+0x18>
 800a530:	e7fa      	b.n	800a528 <__mcmp+0x28>
 800a532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a536:	e7f7      	b.n	800a528 <__mcmp+0x28>

0800a538 <__mdiff>:
 800a538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	460c      	mov	r4, r1
 800a53e:	4606      	mov	r6, r0
 800a540:	4611      	mov	r1, r2
 800a542:	4620      	mov	r0, r4
 800a544:	4690      	mov	r8, r2
 800a546:	f7ff ffdb 	bl	800a500 <__mcmp>
 800a54a:	1e05      	subs	r5, r0, #0
 800a54c:	d110      	bne.n	800a570 <__mdiff+0x38>
 800a54e:	4629      	mov	r1, r5
 800a550:	4630      	mov	r0, r6
 800a552:	f7ff fd09 	bl	8009f68 <_Balloc>
 800a556:	b930      	cbnz	r0, 800a566 <__mdiff+0x2e>
 800a558:	4b3a      	ldr	r3, [pc, #232]	; (800a644 <__mdiff+0x10c>)
 800a55a:	4602      	mov	r2, r0
 800a55c:	f240 2132 	movw	r1, #562	; 0x232
 800a560:	4839      	ldr	r0, [pc, #228]	; (800a648 <__mdiff+0x110>)
 800a562:	f000 fc4f 	bl	800ae04 <__assert_func>
 800a566:	2301      	movs	r3, #1
 800a568:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a56c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a570:	bfa4      	itt	ge
 800a572:	4643      	movge	r3, r8
 800a574:	46a0      	movge	r8, r4
 800a576:	4630      	mov	r0, r6
 800a578:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a57c:	bfa6      	itte	ge
 800a57e:	461c      	movge	r4, r3
 800a580:	2500      	movge	r5, #0
 800a582:	2501      	movlt	r5, #1
 800a584:	f7ff fcf0 	bl	8009f68 <_Balloc>
 800a588:	b920      	cbnz	r0, 800a594 <__mdiff+0x5c>
 800a58a:	4b2e      	ldr	r3, [pc, #184]	; (800a644 <__mdiff+0x10c>)
 800a58c:	4602      	mov	r2, r0
 800a58e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a592:	e7e5      	b.n	800a560 <__mdiff+0x28>
 800a594:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a598:	6926      	ldr	r6, [r4, #16]
 800a59a:	60c5      	str	r5, [r0, #12]
 800a59c:	f104 0914 	add.w	r9, r4, #20
 800a5a0:	f108 0514 	add.w	r5, r8, #20
 800a5a4:	f100 0e14 	add.w	lr, r0, #20
 800a5a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a5ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5b0:	f108 0210 	add.w	r2, r8, #16
 800a5b4:	46f2      	mov	sl, lr
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5c0:	fa1f f883 	uxth.w	r8, r3
 800a5c4:	fa11 f18b 	uxtah	r1, r1, fp
 800a5c8:	0c1b      	lsrs	r3, r3, #16
 800a5ca:	eba1 0808 	sub.w	r8, r1, r8
 800a5ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5d6:	fa1f f888 	uxth.w	r8, r8
 800a5da:	1419      	asrs	r1, r3, #16
 800a5dc:	454e      	cmp	r6, r9
 800a5de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5e2:	f84a 3b04 	str.w	r3, [sl], #4
 800a5e6:	d8e7      	bhi.n	800a5b8 <__mdiff+0x80>
 800a5e8:	1b33      	subs	r3, r6, r4
 800a5ea:	3b15      	subs	r3, #21
 800a5ec:	f023 0303 	bic.w	r3, r3, #3
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	3415      	adds	r4, #21
 800a5f4:	42a6      	cmp	r6, r4
 800a5f6:	bf38      	it	cc
 800a5f8:	2304      	movcc	r3, #4
 800a5fa:	441d      	add	r5, r3
 800a5fc:	4473      	add	r3, lr
 800a5fe:	469e      	mov	lr, r3
 800a600:	462e      	mov	r6, r5
 800a602:	4566      	cmp	r6, ip
 800a604:	d30e      	bcc.n	800a624 <__mdiff+0xec>
 800a606:	f10c 0203 	add.w	r2, ip, #3
 800a60a:	1b52      	subs	r2, r2, r5
 800a60c:	f022 0203 	bic.w	r2, r2, #3
 800a610:	3d03      	subs	r5, #3
 800a612:	45ac      	cmp	ip, r5
 800a614:	bf38      	it	cc
 800a616:	2200      	movcc	r2, #0
 800a618:	441a      	add	r2, r3
 800a61a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a61e:	b17b      	cbz	r3, 800a640 <__mdiff+0x108>
 800a620:	6107      	str	r7, [r0, #16]
 800a622:	e7a3      	b.n	800a56c <__mdiff+0x34>
 800a624:	f856 8b04 	ldr.w	r8, [r6], #4
 800a628:	fa11 f288 	uxtah	r2, r1, r8
 800a62c:	1414      	asrs	r4, r2, #16
 800a62e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a632:	b292      	uxth	r2, r2
 800a634:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a638:	f84e 2b04 	str.w	r2, [lr], #4
 800a63c:	1421      	asrs	r1, r4, #16
 800a63e:	e7e0      	b.n	800a602 <__mdiff+0xca>
 800a640:	3f01      	subs	r7, #1
 800a642:	e7ea      	b.n	800a61a <__mdiff+0xe2>
 800a644:	0800bc70 	.word	0x0800bc70
 800a648:	0800bcfc 	.word	0x0800bcfc

0800a64c <__ulp>:
 800a64c:	b082      	sub	sp, #8
 800a64e:	ed8d 0b00 	vstr	d0, [sp]
 800a652:	9b01      	ldr	r3, [sp, #4]
 800a654:	4912      	ldr	r1, [pc, #72]	; (800a6a0 <__ulp+0x54>)
 800a656:	4019      	ands	r1, r3
 800a658:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a65c:	2900      	cmp	r1, #0
 800a65e:	dd05      	ble.n	800a66c <__ulp+0x20>
 800a660:	2200      	movs	r2, #0
 800a662:	460b      	mov	r3, r1
 800a664:	ec43 2b10 	vmov	d0, r2, r3
 800a668:	b002      	add	sp, #8
 800a66a:	4770      	bx	lr
 800a66c:	4249      	negs	r1, r1
 800a66e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a672:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	da04      	bge.n	800a68a <__ulp+0x3e>
 800a680:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a684:	fa41 f300 	asr.w	r3, r1, r0
 800a688:	e7ec      	b.n	800a664 <__ulp+0x18>
 800a68a:	f1a0 0114 	sub.w	r1, r0, #20
 800a68e:	291e      	cmp	r1, #30
 800a690:	bfda      	itte	le
 800a692:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a696:	fa20 f101 	lsrle.w	r1, r0, r1
 800a69a:	2101      	movgt	r1, #1
 800a69c:	460a      	mov	r2, r1
 800a69e:	e7e1      	b.n	800a664 <__ulp+0x18>
 800a6a0:	7ff00000 	.word	0x7ff00000

0800a6a4 <__b2d>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	6905      	ldr	r5, [r0, #16]
 800a6a8:	f100 0714 	add.w	r7, r0, #20
 800a6ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6b0:	1f2e      	subs	r6, r5, #4
 800a6b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7ff fd48 	bl	800a14c <__hi0bits>
 800a6bc:	f1c0 0320 	rsb	r3, r0, #32
 800a6c0:	280a      	cmp	r0, #10
 800a6c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a740 <__b2d+0x9c>
 800a6c6:	600b      	str	r3, [r1, #0]
 800a6c8:	dc14      	bgt.n	800a6f4 <__b2d+0x50>
 800a6ca:	f1c0 0e0b 	rsb	lr, r0, #11
 800a6ce:	fa24 f10e 	lsr.w	r1, r4, lr
 800a6d2:	42b7      	cmp	r7, r6
 800a6d4:	ea41 030c 	orr.w	r3, r1, ip
 800a6d8:	bf34      	ite	cc
 800a6da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6de:	2100      	movcs	r1, #0
 800a6e0:	3015      	adds	r0, #21
 800a6e2:	fa04 f000 	lsl.w	r0, r4, r0
 800a6e6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a6ea:	ea40 0201 	orr.w	r2, r0, r1
 800a6ee:	ec43 2b10 	vmov	d0, r2, r3
 800a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f4:	42b7      	cmp	r7, r6
 800a6f6:	bf3a      	itte	cc
 800a6f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6fc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a700:	2100      	movcs	r1, #0
 800a702:	380b      	subs	r0, #11
 800a704:	d017      	beq.n	800a736 <__b2d+0x92>
 800a706:	f1c0 0c20 	rsb	ip, r0, #32
 800a70a:	fa04 f500 	lsl.w	r5, r4, r0
 800a70e:	42be      	cmp	r6, r7
 800a710:	fa21 f40c 	lsr.w	r4, r1, ip
 800a714:	ea45 0504 	orr.w	r5, r5, r4
 800a718:	bf8c      	ite	hi
 800a71a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a71e:	2400      	movls	r4, #0
 800a720:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a724:	fa01 f000 	lsl.w	r0, r1, r0
 800a728:	fa24 f40c 	lsr.w	r4, r4, ip
 800a72c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a730:	ea40 0204 	orr.w	r2, r0, r4
 800a734:	e7db      	b.n	800a6ee <__b2d+0x4a>
 800a736:	ea44 030c 	orr.w	r3, r4, ip
 800a73a:	460a      	mov	r2, r1
 800a73c:	e7d7      	b.n	800a6ee <__b2d+0x4a>
 800a73e:	bf00      	nop
 800a740:	3ff00000 	.word	0x3ff00000

0800a744 <__d2b>:
 800a744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a748:	4689      	mov	r9, r1
 800a74a:	2101      	movs	r1, #1
 800a74c:	ec57 6b10 	vmov	r6, r7, d0
 800a750:	4690      	mov	r8, r2
 800a752:	f7ff fc09 	bl	8009f68 <_Balloc>
 800a756:	4604      	mov	r4, r0
 800a758:	b930      	cbnz	r0, 800a768 <__d2b+0x24>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b25      	ldr	r3, [pc, #148]	; (800a7f4 <__d2b+0xb0>)
 800a75e:	4826      	ldr	r0, [pc, #152]	; (800a7f8 <__d2b+0xb4>)
 800a760:	f240 310a 	movw	r1, #778	; 0x30a
 800a764:	f000 fb4e 	bl	800ae04 <__assert_func>
 800a768:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a76c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a770:	bb35      	cbnz	r5, 800a7c0 <__d2b+0x7c>
 800a772:	2e00      	cmp	r6, #0
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	d028      	beq.n	800a7ca <__d2b+0x86>
 800a778:	4668      	mov	r0, sp
 800a77a:	9600      	str	r6, [sp, #0]
 800a77c:	f7ff fd06 	bl	800a18c <__lo0bits>
 800a780:	9900      	ldr	r1, [sp, #0]
 800a782:	b300      	cbz	r0, 800a7c6 <__d2b+0x82>
 800a784:	9a01      	ldr	r2, [sp, #4]
 800a786:	f1c0 0320 	rsb	r3, r0, #32
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	430b      	orrs	r3, r1
 800a790:	40c2      	lsrs	r2, r0
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	9201      	str	r2, [sp, #4]
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	61a3      	str	r3, [r4, #24]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	bf14      	ite	ne
 800a79e:	2202      	movne	r2, #2
 800a7a0:	2201      	moveq	r2, #1
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	b1d5      	cbz	r5, 800a7dc <__d2b+0x98>
 800a7a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7aa:	4405      	add	r5, r0
 800a7ac:	f8c9 5000 	str.w	r5, [r9]
 800a7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7b4:	f8c8 0000 	str.w	r0, [r8]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	b003      	add	sp, #12
 800a7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7c4:	e7d5      	b.n	800a772 <__d2b+0x2e>
 800a7c6:	6161      	str	r1, [r4, #20]
 800a7c8:	e7e5      	b.n	800a796 <__d2b+0x52>
 800a7ca:	a801      	add	r0, sp, #4
 800a7cc:	f7ff fcde 	bl	800a18c <__lo0bits>
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	6163      	str	r3, [r4, #20]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	6122      	str	r2, [r4, #16]
 800a7d8:	3020      	adds	r0, #32
 800a7da:	e7e3      	b.n	800a7a4 <__d2b+0x60>
 800a7dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7e4:	f8c9 0000 	str.w	r0, [r9]
 800a7e8:	6918      	ldr	r0, [r3, #16]
 800a7ea:	f7ff fcaf 	bl	800a14c <__hi0bits>
 800a7ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7f2:	e7df      	b.n	800a7b4 <__d2b+0x70>
 800a7f4:	0800bc70 	.word	0x0800bc70
 800a7f8:	0800bcfc 	.word	0x0800bcfc

0800a7fc <__ratio>:
 800a7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	4688      	mov	r8, r1
 800a802:	4669      	mov	r1, sp
 800a804:	4681      	mov	r9, r0
 800a806:	f7ff ff4d 	bl	800a6a4 <__b2d>
 800a80a:	a901      	add	r1, sp, #4
 800a80c:	4640      	mov	r0, r8
 800a80e:	ec55 4b10 	vmov	r4, r5, d0
 800a812:	f7ff ff47 	bl	800a6a4 <__b2d>
 800a816:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a81a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a81e:	eba3 0c02 	sub.w	ip, r3, r2
 800a822:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a826:	1a9b      	subs	r3, r3, r2
 800a828:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a82c:	ec51 0b10 	vmov	r0, r1, d0
 800a830:	2b00      	cmp	r3, #0
 800a832:	bfd6      	itet	le
 800a834:	460a      	movle	r2, r1
 800a836:	462a      	movgt	r2, r5
 800a838:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a83c:	468b      	mov	fp, r1
 800a83e:	462f      	mov	r7, r5
 800a840:	bfd4      	ite	le
 800a842:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a846:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a84a:	4620      	mov	r0, r4
 800a84c:	ee10 2a10 	vmov	r2, s0
 800a850:	465b      	mov	r3, fp
 800a852:	4639      	mov	r1, r7
 800a854:	f7f6 f802 	bl	800085c <__aeabi_ddiv>
 800a858:	ec41 0b10 	vmov	d0, r0, r1
 800a85c:	b003      	add	sp, #12
 800a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a862 <__copybits>:
 800a862:	3901      	subs	r1, #1
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	1149      	asrs	r1, r1, #5
 800a868:	6914      	ldr	r4, [r2, #16]
 800a86a:	3101      	adds	r1, #1
 800a86c:	f102 0314 	add.w	r3, r2, #20
 800a870:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a874:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a878:	1f05      	subs	r5, r0, #4
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	d30c      	bcc.n	800a898 <__copybits+0x36>
 800a87e:	1aa3      	subs	r3, r4, r2
 800a880:	3b11      	subs	r3, #17
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	3211      	adds	r2, #17
 800a888:	42a2      	cmp	r2, r4
 800a88a:	bf88      	it	hi
 800a88c:	2300      	movhi	r3, #0
 800a88e:	4418      	add	r0, r3
 800a890:	2300      	movs	r3, #0
 800a892:	4288      	cmp	r0, r1
 800a894:	d305      	bcc.n	800a8a2 <__copybits+0x40>
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	f853 6b04 	ldr.w	r6, [r3], #4
 800a89c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8a0:	e7eb      	b.n	800a87a <__copybits+0x18>
 800a8a2:	f840 3b04 	str.w	r3, [r0], #4
 800a8a6:	e7f4      	b.n	800a892 <__copybits+0x30>

0800a8a8 <__any_on>:
 800a8a8:	f100 0214 	add.w	r2, r0, #20
 800a8ac:	6900      	ldr	r0, [r0, #16]
 800a8ae:	114b      	asrs	r3, r1, #5
 800a8b0:	4298      	cmp	r0, r3
 800a8b2:	b510      	push	{r4, lr}
 800a8b4:	db11      	blt.n	800a8da <__any_on+0x32>
 800a8b6:	dd0a      	ble.n	800a8ce <__any_on+0x26>
 800a8b8:	f011 011f 	ands.w	r1, r1, #31
 800a8bc:	d007      	beq.n	800a8ce <__any_on+0x26>
 800a8be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8c2:	fa24 f001 	lsr.w	r0, r4, r1
 800a8c6:	fa00 f101 	lsl.w	r1, r0, r1
 800a8ca:	428c      	cmp	r4, r1
 800a8cc:	d10b      	bne.n	800a8e6 <__any_on+0x3e>
 800a8ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d803      	bhi.n	800a8de <__any_on+0x36>
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	4603      	mov	r3, r0
 800a8dc:	e7f7      	b.n	800a8ce <__any_on+0x26>
 800a8de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8e2:	2900      	cmp	r1, #0
 800a8e4:	d0f5      	beq.n	800a8d2 <__any_on+0x2a>
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	e7f6      	b.n	800a8d8 <__any_on+0x30>

0800a8ea <_calloc_r>:
 800a8ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ec:	fba1 2402 	umull	r2, r4, r1, r2
 800a8f0:	b94c      	cbnz	r4, 800a906 <_calloc_r+0x1c>
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	9201      	str	r2, [sp, #4]
 800a8f6:	f000 f87b 	bl	800a9f0 <_malloc_r>
 800a8fa:	9a01      	ldr	r2, [sp, #4]
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	b930      	cbnz	r0, 800a90e <_calloc_r+0x24>
 800a900:	4628      	mov	r0, r5
 800a902:	b003      	add	sp, #12
 800a904:	bd30      	pop	{r4, r5, pc}
 800a906:	220c      	movs	r2, #12
 800a908:	6002      	str	r2, [r0, #0]
 800a90a:	2500      	movs	r5, #0
 800a90c:	e7f8      	b.n	800a900 <_calloc_r+0x16>
 800a90e:	4621      	mov	r1, r4
 800a910:	f7fc fbcc 	bl	80070ac <memset>
 800a914:	e7f4      	b.n	800a900 <_calloc_r+0x16>
	...

0800a918 <_free_r>:
 800a918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a91a:	2900      	cmp	r1, #0
 800a91c:	d044      	beq.n	800a9a8 <_free_r+0x90>
 800a91e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a922:	9001      	str	r0, [sp, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	f1a1 0404 	sub.w	r4, r1, #4
 800a92a:	bfb8      	it	lt
 800a92c:	18e4      	addlt	r4, r4, r3
 800a92e:	f000 fab3 	bl	800ae98 <__malloc_lock>
 800a932:	4a1e      	ldr	r2, [pc, #120]	; (800a9ac <_free_r+0x94>)
 800a934:	9801      	ldr	r0, [sp, #4]
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	b933      	cbnz	r3, 800a948 <_free_r+0x30>
 800a93a:	6063      	str	r3, [r4, #4]
 800a93c:	6014      	str	r4, [r2, #0]
 800a93e:	b003      	add	sp, #12
 800a940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a944:	f000 baae 	b.w	800aea4 <__malloc_unlock>
 800a948:	42a3      	cmp	r3, r4
 800a94a:	d908      	bls.n	800a95e <_free_r+0x46>
 800a94c:	6825      	ldr	r5, [r4, #0]
 800a94e:	1961      	adds	r1, r4, r5
 800a950:	428b      	cmp	r3, r1
 800a952:	bf01      	itttt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	1949      	addeq	r1, r1, r5
 800a95a:	6021      	streq	r1, [r4, #0]
 800a95c:	e7ed      	b.n	800a93a <_free_r+0x22>
 800a95e:	461a      	mov	r2, r3
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	b10b      	cbz	r3, 800a968 <_free_r+0x50>
 800a964:	42a3      	cmp	r3, r4
 800a966:	d9fa      	bls.n	800a95e <_free_r+0x46>
 800a968:	6811      	ldr	r1, [r2, #0]
 800a96a:	1855      	adds	r5, r2, r1
 800a96c:	42a5      	cmp	r5, r4
 800a96e:	d10b      	bne.n	800a988 <_free_r+0x70>
 800a970:	6824      	ldr	r4, [r4, #0]
 800a972:	4421      	add	r1, r4
 800a974:	1854      	adds	r4, r2, r1
 800a976:	42a3      	cmp	r3, r4
 800a978:	6011      	str	r1, [r2, #0]
 800a97a:	d1e0      	bne.n	800a93e <_free_r+0x26>
 800a97c:	681c      	ldr	r4, [r3, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	6053      	str	r3, [r2, #4]
 800a982:	4421      	add	r1, r4
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	e7da      	b.n	800a93e <_free_r+0x26>
 800a988:	d902      	bls.n	800a990 <_free_r+0x78>
 800a98a:	230c      	movs	r3, #12
 800a98c:	6003      	str	r3, [r0, #0]
 800a98e:	e7d6      	b.n	800a93e <_free_r+0x26>
 800a990:	6825      	ldr	r5, [r4, #0]
 800a992:	1961      	adds	r1, r4, r5
 800a994:	428b      	cmp	r3, r1
 800a996:	bf04      	itt	eq
 800a998:	6819      	ldreq	r1, [r3, #0]
 800a99a:	685b      	ldreq	r3, [r3, #4]
 800a99c:	6063      	str	r3, [r4, #4]
 800a99e:	bf04      	itt	eq
 800a9a0:	1949      	addeq	r1, r1, r5
 800a9a2:	6021      	streq	r1, [r4, #0]
 800a9a4:	6054      	str	r4, [r2, #4]
 800a9a6:	e7ca      	b.n	800a93e <_free_r+0x26>
 800a9a8:	b003      	add	sp, #12
 800a9aa:	bd30      	pop	{r4, r5, pc}
 800a9ac:	20004c4c 	.word	0x20004c4c

0800a9b0 <sbrk_aligned>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	4e0e      	ldr	r6, [pc, #56]	; (800a9ec <sbrk_aligned+0x3c>)
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	6831      	ldr	r1, [r6, #0]
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	b911      	cbnz	r1, 800a9c2 <sbrk_aligned+0x12>
 800a9bc:	f000 f9f0 	bl	800ada0 <_sbrk_r>
 800a9c0:	6030      	str	r0, [r6, #0]
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f000 f9eb 	bl	800ada0 <_sbrk_r>
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	d00a      	beq.n	800a9e4 <sbrk_aligned+0x34>
 800a9ce:	1cc4      	adds	r4, r0, #3
 800a9d0:	f024 0403 	bic.w	r4, r4, #3
 800a9d4:	42a0      	cmp	r0, r4
 800a9d6:	d007      	beq.n	800a9e8 <sbrk_aligned+0x38>
 800a9d8:	1a21      	subs	r1, r4, r0
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 f9e0 	bl	800ada0 <_sbrk_r>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d101      	bne.n	800a9e8 <sbrk_aligned+0x38>
 800a9e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	20004c50 	.word	0x20004c50

0800a9f0 <_malloc_r>:
 800a9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f4:	1ccd      	adds	r5, r1, #3
 800a9f6:	f025 0503 	bic.w	r5, r5, #3
 800a9fa:	3508      	adds	r5, #8
 800a9fc:	2d0c      	cmp	r5, #12
 800a9fe:	bf38      	it	cc
 800aa00:	250c      	movcc	r5, #12
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	4607      	mov	r7, r0
 800aa06:	db01      	blt.n	800aa0c <_malloc_r+0x1c>
 800aa08:	42a9      	cmp	r1, r5
 800aa0a:	d905      	bls.n	800aa18 <_malloc_r+0x28>
 800aa0c:	230c      	movs	r3, #12
 800aa0e:	603b      	str	r3, [r7, #0]
 800aa10:	2600      	movs	r6, #0
 800aa12:	4630      	mov	r0, r6
 800aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa18:	4e2e      	ldr	r6, [pc, #184]	; (800aad4 <_malloc_r+0xe4>)
 800aa1a:	f000 fa3d 	bl	800ae98 <__malloc_lock>
 800aa1e:	6833      	ldr	r3, [r6, #0]
 800aa20:	461c      	mov	r4, r3
 800aa22:	bb34      	cbnz	r4, 800aa72 <_malloc_r+0x82>
 800aa24:	4629      	mov	r1, r5
 800aa26:	4638      	mov	r0, r7
 800aa28:	f7ff ffc2 	bl	800a9b0 <sbrk_aligned>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	4604      	mov	r4, r0
 800aa30:	d14d      	bne.n	800aace <_malloc_r+0xde>
 800aa32:	6834      	ldr	r4, [r6, #0]
 800aa34:	4626      	mov	r6, r4
 800aa36:	2e00      	cmp	r6, #0
 800aa38:	d140      	bne.n	800aabc <_malloc_r+0xcc>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4638      	mov	r0, r7
 800aa40:	eb04 0803 	add.w	r8, r4, r3
 800aa44:	f000 f9ac 	bl	800ada0 <_sbrk_r>
 800aa48:	4580      	cmp	r8, r0
 800aa4a:	d13a      	bne.n	800aac2 <_malloc_r+0xd2>
 800aa4c:	6821      	ldr	r1, [r4, #0]
 800aa4e:	3503      	adds	r5, #3
 800aa50:	1a6d      	subs	r5, r5, r1
 800aa52:	f025 0503 	bic.w	r5, r5, #3
 800aa56:	3508      	adds	r5, #8
 800aa58:	2d0c      	cmp	r5, #12
 800aa5a:	bf38      	it	cc
 800aa5c:	250c      	movcc	r5, #12
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ffa5 	bl	800a9b0 <sbrk_aligned>
 800aa66:	3001      	adds	r0, #1
 800aa68:	d02b      	beq.n	800aac2 <_malloc_r+0xd2>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	442b      	add	r3, r5
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	e00e      	b.n	800aa90 <_malloc_r+0xa0>
 800aa72:	6822      	ldr	r2, [r4, #0]
 800aa74:	1b52      	subs	r2, r2, r5
 800aa76:	d41e      	bmi.n	800aab6 <_malloc_r+0xc6>
 800aa78:	2a0b      	cmp	r2, #11
 800aa7a:	d916      	bls.n	800aaaa <_malloc_r+0xba>
 800aa7c:	1961      	adds	r1, r4, r5
 800aa7e:	42a3      	cmp	r3, r4
 800aa80:	6025      	str	r5, [r4, #0]
 800aa82:	bf18      	it	ne
 800aa84:	6059      	strne	r1, [r3, #4]
 800aa86:	6863      	ldr	r3, [r4, #4]
 800aa88:	bf08      	it	eq
 800aa8a:	6031      	streq	r1, [r6, #0]
 800aa8c:	5162      	str	r2, [r4, r5]
 800aa8e:	604b      	str	r3, [r1, #4]
 800aa90:	4638      	mov	r0, r7
 800aa92:	f104 060b 	add.w	r6, r4, #11
 800aa96:	f000 fa05 	bl	800aea4 <__malloc_unlock>
 800aa9a:	f026 0607 	bic.w	r6, r6, #7
 800aa9e:	1d23      	adds	r3, r4, #4
 800aaa0:	1af2      	subs	r2, r6, r3
 800aaa2:	d0b6      	beq.n	800aa12 <_malloc_r+0x22>
 800aaa4:	1b9b      	subs	r3, r3, r6
 800aaa6:	50a3      	str	r3, [r4, r2]
 800aaa8:	e7b3      	b.n	800aa12 <_malloc_r+0x22>
 800aaaa:	6862      	ldr	r2, [r4, #4]
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	bf0c      	ite	eq
 800aab0:	6032      	streq	r2, [r6, #0]
 800aab2:	605a      	strne	r2, [r3, #4]
 800aab4:	e7ec      	b.n	800aa90 <_malloc_r+0xa0>
 800aab6:	4623      	mov	r3, r4
 800aab8:	6864      	ldr	r4, [r4, #4]
 800aaba:	e7b2      	b.n	800aa22 <_malloc_r+0x32>
 800aabc:	4634      	mov	r4, r6
 800aabe:	6876      	ldr	r6, [r6, #4]
 800aac0:	e7b9      	b.n	800aa36 <_malloc_r+0x46>
 800aac2:	230c      	movs	r3, #12
 800aac4:	603b      	str	r3, [r7, #0]
 800aac6:	4638      	mov	r0, r7
 800aac8:	f000 f9ec 	bl	800aea4 <__malloc_unlock>
 800aacc:	e7a1      	b.n	800aa12 <_malloc_r+0x22>
 800aace:	6025      	str	r5, [r4, #0]
 800aad0:	e7de      	b.n	800aa90 <_malloc_r+0xa0>
 800aad2:	bf00      	nop
 800aad4:	20004c4c 	.word	0x20004c4c

0800aad8 <__ssputs_r>:
 800aad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	688e      	ldr	r6, [r1, #8]
 800aade:	429e      	cmp	r6, r3
 800aae0:	4682      	mov	sl, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	4690      	mov	r8, r2
 800aae6:	461f      	mov	r7, r3
 800aae8:	d838      	bhi.n	800ab5c <__ssputs_r+0x84>
 800aaea:	898a      	ldrh	r2, [r1, #12]
 800aaec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aaf0:	d032      	beq.n	800ab58 <__ssputs_r+0x80>
 800aaf2:	6825      	ldr	r5, [r4, #0]
 800aaf4:	6909      	ldr	r1, [r1, #16]
 800aaf6:	eba5 0901 	sub.w	r9, r5, r1
 800aafa:	6965      	ldr	r5, [r4, #20]
 800aafc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab04:	3301      	adds	r3, #1
 800ab06:	444b      	add	r3, r9
 800ab08:	106d      	asrs	r5, r5, #1
 800ab0a:	429d      	cmp	r5, r3
 800ab0c:	bf38      	it	cc
 800ab0e:	461d      	movcc	r5, r3
 800ab10:	0553      	lsls	r3, r2, #21
 800ab12:	d531      	bpl.n	800ab78 <__ssputs_r+0xa0>
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7ff ff6b 	bl	800a9f0 <_malloc_r>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	b950      	cbnz	r0, 800ab34 <__ssputs_r+0x5c>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	f8ca 3000 	str.w	r3, [sl]
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab34:	6921      	ldr	r1, [r4, #16]
 800ab36:	464a      	mov	r2, r9
 800ab38:	f7fc faaa 	bl	8007090 <memcpy>
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	6126      	str	r6, [r4, #16]
 800ab4a:	6165      	str	r5, [r4, #20]
 800ab4c:	444e      	add	r6, r9
 800ab4e:	eba5 0509 	sub.w	r5, r5, r9
 800ab52:	6026      	str	r6, [r4, #0]
 800ab54:	60a5      	str	r5, [r4, #8]
 800ab56:	463e      	mov	r6, r7
 800ab58:	42be      	cmp	r6, r7
 800ab5a:	d900      	bls.n	800ab5e <__ssputs_r+0x86>
 800ab5c:	463e      	mov	r6, r7
 800ab5e:	6820      	ldr	r0, [r4, #0]
 800ab60:	4632      	mov	r2, r6
 800ab62:	4641      	mov	r1, r8
 800ab64:	f000 f97e 	bl	800ae64 <memmove>
 800ab68:	68a3      	ldr	r3, [r4, #8]
 800ab6a:	1b9b      	subs	r3, r3, r6
 800ab6c:	60a3      	str	r3, [r4, #8]
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	4433      	add	r3, r6
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	2000      	movs	r0, #0
 800ab76:	e7db      	b.n	800ab30 <__ssputs_r+0x58>
 800ab78:	462a      	mov	r2, r5
 800ab7a:	f000 f999 	bl	800aeb0 <_realloc_r>
 800ab7e:	4606      	mov	r6, r0
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d1e1      	bne.n	800ab48 <__ssputs_r+0x70>
 800ab84:	6921      	ldr	r1, [r4, #16]
 800ab86:	4650      	mov	r0, sl
 800ab88:	f7ff fec6 	bl	800a918 <_free_r>
 800ab8c:	e7c7      	b.n	800ab1e <__ssputs_r+0x46>
	...

0800ab90 <_svfiprintf_r>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4698      	mov	r8, r3
 800ab96:	898b      	ldrh	r3, [r1, #12]
 800ab98:	061b      	lsls	r3, r3, #24
 800ab9a:	b09d      	sub	sp, #116	; 0x74
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	460d      	mov	r5, r1
 800aba0:	4614      	mov	r4, r2
 800aba2:	d50e      	bpl.n	800abc2 <_svfiprintf_r+0x32>
 800aba4:	690b      	ldr	r3, [r1, #16]
 800aba6:	b963      	cbnz	r3, 800abc2 <_svfiprintf_r+0x32>
 800aba8:	2140      	movs	r1, #64	; 0x40
 800abaa:	f7ff ff21 	bl	800a9f0 <_malloc_r>
 800abae:	6028      	str	r0, [r5, #0]
 800abb0:	6128      	str	r0, [r5, #16]
 800abb2:	b920      	cbnz	r0, 800abbe <_svfiprintf_r+0x2e>
 800abb4:	230c      	movs	r3, #12
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abbc:	e0d1      	b.n	800ad62 <_svfiprintf_r+0x1d2>
 800abbe:	2340      	movs	r3, #64	; 0x40
 800abc0:	616b      	str	r3, [r5, #20]
 800abc2:	2300      	movs	r3, #0
 800abc4:	9309      	str	r3, [sp, #36]	; 0x24
 800abc6:	2320      	movs	r3, #32
 800abc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800abd0:	2330      	movs	r3, #48	; 0x30
 800abd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad7c <_svfiprintf_r+0x1ec>
 800abd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abda:	f04f 0901 	mov.w	r9, #1
 800abde:	4623      	mov	r3, r4
 800abe0:	469a      	mov	sl, r3
 800abe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abe6:	b10a      	cbz	r2, 800abec <_svfiprintf_r+0x5c>
 800abe8:	2a25      	cmp	r2, #37	; 0x25
 800abea:	d1f9      	bne.n	800abe0 <_svfiprintf_r+0x50>
 800abec:	ebba 0b04 	subs.w	fp, sl, r4
 800abf0:	d00b      	beq.n	800ac0a <_svfiprintf_r+0x7a>
 800abf2:	465b      	mov	r3, fp
 800abf4:	4622      	mov	r2, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	4638      	mov	r0, r7
 800abfa:	f7ff ff6d 	bl	800aad8 <__ssputs_r>
 800abfe:	3001      	adds	r0, #1
 800ac00:	f000 80aa 	beq.w	800ad58 <_svfiprintf_r+0x1c8>
 800ac04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac06:	445a      	add	r2, fp
 800ac08:	9209      	str	r2, [sp, #36]	; 0x24
 800ac0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 80a2 	beq.w	800ad58 <_svfiprintf_r+0x1c8>
 800ac14:	2300      	movs	r3, #0
 800ac16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac1e:	f10a 0a01 	add.w	sl, sl, #1
 800ac22:	9304      	str	r3, [sp, #16]
 800ac24:	9307      	str	r3, [sp, #28]
 800ac26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2205      	movs	r2, #5
 800ac30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac34:	4851      	ldr	r0, [pc, #324]	; (800ad7c <_svfiprintf_r+0x1ec>)
 800ac36:	f7f5 fadb 	bl	80001f0 <memchr>
 800ac3a:	9a04      	ldr	r2, [sp, #16]
 800ac3c:	b9d8      	cbnz	r0, 800ac76 <_svfiprintf_r+0xe6>
 800ac3e:	06d0      	lsls	r0, r2, #27
 800ac40:	bf44      	itt	mi
 800ac42:	2320      	movmi	r3, #32
 800ac44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac48:	0711      	lsls	r1, r2, #28
 800ac4a:	bf44      	itt	mi
 800ac4c:	232b      	movmi	r3, #43	; 0x2b
 800ac4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac52:	f89a 3000 	ldrb.w	r3, [sl]
 800ac56:	2b2a      	cmp	r3, #42	; 0x2a
 800ac58:	d015      	beq.n	800ac86 <_svfiprintf_r+0xf6>
 800ac5a:	9a07      	ldr	r2, [sp, #28]
 800ac5c:	4654      	mov	r4, sl
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f04f 0c0a 	mov.w	ip, #10
 800ac64:	4621      	mov	r1, r4
 800ac66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac6a:	3b30      	subs	r3, #48	; 0x30
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d94e      	bls.n	800ad0e <_svfiprintf_r+0x17e>
 800ac70:	b1b0      	cbz	r0, 800aca0 <_svfiprintf_r+0x110>
 800ac72:	9207      	str	r2, [sp, #28]
 800ac74:	e014      	b.n	800aca0 <_svfiprintf_r+0x110>
 800ac76:	eba0 0308 	sub.w	r3, r0, r8
 800ac7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	9304      	str	r3, [sp, #16]
 800ac82:	46a2      	mov	sl, r4
 800ac84:	e7d2      	b.n	800ac2c <_svfiprintf_r+0x9c>
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	1d19      	adds	r1, r3, #4
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	9103      	str	r1, [sp, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	bfbb      	ittet	lt
 800ac92:	425b      	neglt	r3, r3
 800ac94:	f042 0202 	orrlt.w	r2, r2, #2
 800ac98:	9307      	strge	r3, [sp, #28]
 800ac9a:	9307      	strlt	r3, [sp, #28]
 800ac9c:	bfb8      	it	lt
 800ac9e:	9204      	strlt	r2, [sp, #16]
 800aca0:	7823      	ldrb	r3, [r4, #0]
 800aca2:	2b2e      	cmp	r3, #46	; 0x2e
 800aca4:	d10c      	bne.n	800acc0 <_svfiprintf_r+0x130>
 800aca6:	7863      	ldrb	r3, [r4, #1]
 800aca8:	2b2a      	cmp	r3, #42	; 0x2a
 800acaa:	d135      	bne.n	800ad18 <_svfiprintf_r+0x188>
 800acac:	9b03      	ldr	r3, [sp, #12]
 800acae:	1d1a      	adds	r2, r3, #4
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	9203      	str	r2, [sp, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bfb8      	it	lt
 800acb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800acbc:	3402      	adds	r4, #2
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad8c <_svfiprintf_r+0x1fc>
 800acc4:	7821      	ldrb	r1, [r4, #0]
 800acc6:	2203      	movs	r2, #3
 800acc8:	4650      	mov	r0, sl
 800acca:	f7f5 fa91 	bl	80001f0 <memchr>
 800acce:	b140      	cbz	r0, 800ace2 <_svfiprintf_r+0x152>
 800acd0:	2340      	movs	r3, #64	; 0x40
 800acd2:	eba0 000a 	sub.w	r0, r0, sl
 800acd6:	fa03 f000 	lsl.w	r0, r3, r0
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	4303      	orrs	r3, r0
 800acde:	3401      	adds	r4, #1
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace6:	4826      	ldr	r0, [pc, #152]	; (800ad80 <_svfiprintf_r+0x1f0>)
 800ace8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acec:	2206      	movs	r2, #6
 800acee:	f7f5 fa7f 	bl	80001f0 <memchr>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d038      	beq.n	800ad68 <_svfiprintf_r+0x1d8>
 800acf6:	4b23      	ldr	r3, [pc, #140]	; (800ad84 <_svfiprintf_r+0x1f4>)
 800acf8:	bb1b      	cbnz	r3, 800ad42 <_svfiprintf_r+0x1b2>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	3307      	adds	r3, #7
 800acfe:	f023 0307 	bic.w	r3, r3, #7
 800ad02:	3308      	adds	r3, #8
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad08:	4433      	add	r3, r6
 800ad0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0c:	e767      	b.n	800abde <_svfiprintf_r+0x4e>
 800ad0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad12:	460c      	mov	r4, r1
 800ad14:	2001      	movs	r0, #1
 800ad16:	e7a5      	b.n	800ac64 <_svfiprintf_r+0xd4>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f04f 0c0a 	mov.w	ip, #10
 800ad24:	4620      	mov	r0, r4
 800ad26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad2a:	3a30      	subs	r2, #48	; 0x30
 800ad2c:	2a09      	cmp	r2, #9
 800ad2e:	d903      	bls.n	800ad38 <_svfiprintf_r+0x1a8>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0c5      	beq.n	800acc0 <_svfiprintf_r+0x130>
 800ad34:	9105      	str	r1, [sp, #20]
 800ad36:	e7c3      	b.n	800acc0 <_svfiprintf_r+0x130>
 800ad38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7f0      	b.n	800ad24 <_svfiprintf_r+0x194>
 800ad42:	ab03      	add	r3, sp, #12
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	462a      	mov	r2, r5
 800ad48:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <_svfiprintf_r+0x1f8>)
 800ad4a:	a904      	add	r1, sp, #16
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f7fc fa55 	bl	80071fc <_printf_float>
 800ad52:	1c42      	adds	r2, r0, #1
 800ad54:	4606      	mov	r6, r0
 800ad56:	d1d6      	bne.n	800ad06 <_svfiprintf_r+0x176>
 800ad58:	89ab      	ldrh	r3, [r5, #12]
 800ad5a:	065b      	lsls	r3, r3, #25
 800ad5c:	f53f af2c 	bmi.w	800abb8 <_svfiprintf_r+0x28>
 800ad60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad62:	b01d      	add	sp, #116	; 0x74
 800ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad68:	ab03      	add	r3, sp, #12
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <_svfiprintf_r+0x1f8>)
 800ad70:	a904      	add	r1, sp, #16
 800ad72:	4638      	mov	r0, r7
 800ad74:	f7fc fce6 	bl	8007744 <_printf_i>
 800ad78:	e7eb      	b.n	800ad52 <_svfiprintf_r+0x1c2>
 800ad7a:	bf00      	nop
 800ad7c:	0800be54 	.word	0x0800be54
 800ad80:	0800be5e 	.word	0x0800be5e
 800ad84:	080071fd 	.word	0x080071fd
 800ad88:	0800aad9 	.word	0x0800aad9
 800ad8c:	0800be5a 	.word	0x0800be5a

0800ad90 <nan>:
 800ad90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad98 <nan+0x8>
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	00000000 	.word	0x00000000
 800ad9c:	7ff80000 	.word	0x7ff80000

0800ada0 <_sbrk_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	; (800adbc <_sbrk_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f6 fd22 	bl	80017f4 <_sbrk>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_sbrk_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_sbrk_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20004c54 	.word	0x20004c54

0800adc0 <strncmp>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	b17a      	cbz	r2, 800ade4 <strncmp+0x24>
 800adc4:	4603      	mov	r3, r0
 800adc6:	3901      	subs	r1, #1
 800adc8:	1884      	adds	r4, r0, r2
 800adca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800adce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800add2:	4290      	cmp	r0, r2
 800add4:	d101      	bne.n	800adda <strncmp+0x1a>
 800add6:	42a3      	cmp	r3, r4
 800add8:	d101      	bne.n	800adde <strncmp+0x1e>
 800adda:	1a80      	subs	r0, r0, r2
 800addc:	bd10      	pop	{r4, pc}
 800adde:	2800      	cmp	r0, #0
 800ade0:	d1f3      	bne.n	800adca <strncmp+0xa>
 800ade2:	e7fa      	b.n	800adda <strncmp+0x1a>
 800ade4:	4610      	mov	r0, r2
 800ade6:	e7f9      	b.n	800addc <strncmp+0x1c>

0800ade8 <__ascii_wctomb>:
 800ade8:	b149      	cbz	r1, 800adfe <__ascii_wctomb+0x16>
 800adea:	2aff      	cmp	r2, #255	; 0xff
 800adec:	bf85      	ittet	hi
 800adee:	238a      	movhi	r3, #138	; 0x8a
 800adf0:	6003      	strhi	r3, [r0, #0]
 800adf2:	700a      	strbls	r2, [r1, #0]
 800adf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800adf8:	bf98      	it	ls
 800adfa:	2001      	movls	r0, #1
 800adfc:	4770      	bx	lr
 800adfe:	4608      	mov	r0, r1
 800ae00:	4770      	bx	lr
	...

0800ae04 <__assert_func>:
 800ae04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae06:	4614      	mov	r4, r2
 800ae08:	461a      	mov	r2, r3
 800ae0a:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <__assert_func+0x2c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4605      	mov	r5, r0
 800ae10:	68d8      	ldr	r0, [r3, #12]
 800ae12:	b14c      	cbz	r4, 800ae28 <__assert_func+0x24>
 800ae14:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <__assert_func+0x30>)
 800ae16:	9100      	str	r1, [sp, #0]
 800ae18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae1c:	4906      	ldr	r1, [pc, #24]	; (800ae38 <__assert_func+0x34>)
 800ae1e:	462b      	mov	r3, r5
 800ae20:	f000 f80e 	bl	800ae40 <fiprintf>
 800ae24:	f000 fa8c 	bl	800b340 <abort>
 800ae28:	4b04      	ldr	r3, [pc, #16]	; (800ae3c <__assert_func+0x38>)
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	e7f3      	b.n	800ae16 <__assert_func+0x12>
 800ae2e:	bf00      	nop
 800ae30:	20000010 	.word	0x20000010
 800ae34:	0800be65 	.word	0x0800be65
 800ae38:	0800be72 	.word	0x0800be72
 800ae3c:	0800bea0 	.word	0x0800bea0

0800ae40 <fiprintf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	b503      	push	{r0, r1, lr}
 800ae44:	4601      	mov	r1, r0
 800ae46:	ab03      	add	r3, sp, #12
 800ae48:	4805      	ldr	r0, [pc, #20]	; (800ae60 <fiprintf+0x20>)
 800ae4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4e:	6800      	ldr	r0, [r0, #0]
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	f000 f885 	bl	800af60 <_vfiprintf_r>
 800ae56:	b002      	add	sp, #8
 800ae58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae5c:	b003      	add	sp, #12
 800ae5e:	4770      	bx	lr
 800ae60:	20000010 	.word	0x20000010

0800ae64 <memmove>:
 800ae64:	4288      	cmp	r0, r1
 800ae66:	b510      	push	{r4, lr}
 800ae68:	eb01 0402 	add.w	r4, r1, r2
 800ae6c:	d902      	bls.n	800ae74 <memmove+0x10>
 800ae6e:	4284      	cmp	r4, r0
 800ae70:	4623      	mov	r3, r4
 800ae72:	d807      	bhi.n	800ae84 <memmove+0x20>
 800ae74:	1e43      	subs	r3, r0, #1
 800ae76:	42a1      	cmp	r1, r4
 800ae78:	d008      	beq.n	800ae8c <memmove+0x28>
 800ae7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae82:	e7f8      	b.n	800ae76 <memmove+0x12>
 800ae84:	4402      	add	r2, r0
 800ae86:	4601      	mov	r1, r0
 800ae88:	428a      	cmp	r2, r1
 800ae8a:	d100      	bne.n	800ae8e <memmove+0x2a>
 800ae8c:	bd10      	pop	{r4, pc}
 800ae8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae96:	e7f7      	b.n	800ae88 <memmove+0x24>

0800ae98 <__malloc_lock>:
 800ae98:	4801      	ldr	r0, [pc, #4]	; (800aea0 <__malloc_lock+0x8>)
 800ae9a:	f000 bc11 	b.w	800b6c0 <__retarget_lock_acquire_recursive>
 800ae9e:	bf00      	nop
 800aea0:	20004c58 	.word	0x20004c58

0800aea4 <__malloc_unlock>:
 800aea4:	4801      	ldr	r0, [pc, #4]	; (800aeac <__malloc_unlock+0x8>)
 800aea6:	f000 bc0c 	b.w	800b6c2 <__retarget_lock_release_recursive>
 800aeaa:	bf00      	nop
 800aeac:	20004c58 	.word	0x20004c58

0800aeb0 <_realloc_r>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4614      	mov	r4, r2
 800aeb8:	460e      	mov	r6, r1
 800aeba:	b921      	cbnz	r1, 800aec6 <_realloc_r+0x16>
 800aebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	4611      	mov	r1, r2
 800aec2:	f7ff bd95 	b.w	800a9f0 <_malloc_r>
 800aec6:	b92a      	cbnz	r2, 800aed4 <_realloc_r+0x24>
 800aec8:	f7ff fd26 	bl	800a918 <_free_r>
 800aecc:	4625      	mov	r5, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	f000 fc5c 	bl	800b790 <_malloc_usable_size_r>
 800aed8:	4284      	cmp	r4, r0
 800aeda:	4607      	mov	r7, r0
 800aedc:	d802      	bhi.n	800aee4 <_realloc_r+0x34>
 800aede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aee2:	d812      	bhi.n	800af0a <_realloc_r+0x5a>
 800aee4:	4621      	mov	r1, r4
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7ff fd82 	bl	800a9f0 <_malloc_r>
 800aeec:	4605      	mov	r5, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0ed      	beq.n	800aece <_realloc_r+0x1e>
 800aef2:	42bc      	cmp	r4, r7
 800aef4:	4622      	mov	r2, r4
 800aef6:	4631      	mov	r1, r6
 800aef8:	bf28      	it	cs
 800aefa:	463a      	movcs	r2, r7
 800aefc:	f7fc f8c8 	bl	8007090 <memcpy>
 800af00:	4631      	mov	r1, r6
 800af02:	4640      	mov	r0, r8
 800af04:	f7ff fd08 	bl	800a918 <_free_r>
 800af08:	e7e1      	b.n	800aece <_realloc_r+0x1e>
 800af0a:	4635      	mov	r5, r6
 800af0c:	e7df      	b.n	800aece <_realloc_r+0x1e>

0800af0e <__sfputc_r>:
 800af0e:	6893      	ldr	r3, [r2, #8]
 800af10:	3b01      	subs	r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	b410      	push	{r4}
 800af16:	6093      	str	r3, [r2, #8]
 800af18:	da08      	bge.n	800af2c <__sfputc_r+0x1e>
 800af1a:	6994      	ldr	r4, [r2, #24]
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	db01      	blt.n	800af24 <__sfputc_r+0x16>
 800af20:	290a      	cmp	r1, #10
 800af22:	d103      	bne.n	800af2c <__sfputc_r+0x1e>
 800af24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af28:	f000 b94a 	b.w	800b1c0 <__swbuf_r>
 800af2c:	6813      	ldr	r3, [r2, #0]
 800af2e:	1c58      	adds	r0, r3, #1
 800af30:	6010      	str	r0, [r2, #0]
 800af32:	7019      	strb	r1, [r3, #0]
 800af34:	4608      	mov	r0, r1
 800af36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <__sfputs_r>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	4606      	mov	r6, r0
 800af40:	460f      	mov	r7, r1
 800af42:	4614      	mov	r4, r2
 800af44:	18d5      	adds	r5, r2, r3
 800af46:	42ac      	cmp	r4, r5
 800af48:	d101      	bne.n	800af4e <__sfputs_r+0x12>
 800af4a:	2000      	movs	r0, #0
 800af4c:	e007      	b.n	800af5e <__sfputs_r+0x22>
 800af4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af52:	463a      	mov	r2, r7
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff ffda 	bl	800af0e <__sfputc_r>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	d1f3      	bne.n	800af46 <__sfputs_r+0xa>
 800af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af60 <_vfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	460d      	mov	r5, r1
 800af66:	b09d      	sub	sp, #116	; 0x74
 800af68:	4614      	mov	r4, r2
 800af6a:	4698      	mov	r8, r3
 800af6c:	4606      	mov	r6, r0
 800af6e:	b118      	cbz	r0, 800af78 <_vfiprintf_r+0x18>
 800af70:	6983      	ldr	r3, [r0, #24]
 800af72:	b90b      	cbnz	r3, 800af78 <_vfiprintf_r+0x18>
 800af74:	f000 fb06 	bl	800b584 <__sinit>
 800af78:	4b89      	ldr	r3, [pc, #548]	; (800b1a0 <_vfiprintf_r+0x240>)
 800af7a:	429d      	cmp	r5, r3
 800af7c:	d11b      	bne.n	800afb6 <_vfiprintf_r+0x56>
 800af7e:	6875      	ldr	r5, [r6, #4]
 800af80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af82:	07d9      	lsls	r1, r3, #31
 800af84:	d405      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af86:	89ab      	ldrh	r3, [r5, #12]
 800af88:	059a      	lsls	r2, r3, #22
 800af8a:	d402      	bmi.n	800af92 <_vfiprintf_r+0x32>
 800af8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af8e:	f000 fb97 	bl	800b6c0 <__retarget_lock_acquire_recursive>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	071b      	lsls	r3, r3, #28
 800af96:	d501      	bpl.n	800af9c <_vfiprintf_r+0x3c>
 800af98:	692b      	ldr	r3, [r5, #16]
 800af9a:	b9eb      	cbnz	r3, 800afd8 <_vfiprintf_r+0x78>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4630      	mov	r0, r6
 800afa0:	f000 f960 	bl	800b264 <__swsetup_r>
 800afa4:	b1c0      	cbz	r0, 800afd8 <_vfiprintf_r+0x78>
 800afa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa8:	07dc      	lsls	r4, r3, #31
 800afaa:	d50e      	bpl.n	800afca <_vfiprintf_r+0x6a>
 800afac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afb0:	b01d      	add	sp, #116	; 0x74
 800afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb6:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <_vfiprintf_r+0x244>)
 800afb8:	429d      	cmp	r5, r3
 800afba:	d101      	bne.n	800afc0 <_vfiprintf_r+0x60>
 800afbc:	68b5      	ldr	r5, [r6, #8]
 800afbe:	e7df      	b.n	800af80 <_vfiprintf_r+0x20>
 800afc0:	4b79      	ldr	r3, [pc, #484]	; (800b1a8 <_vfiprintf_r+0x248>)
 800afc2:	429d      	cmp	r5, r3
 800afc4:	bf08      	it	eq
 800afc6:	68f5      	ldreq	r5, [r6, #12]
 800afc8:	e7da      	b.n	800af80 <_vfiprintf_r+0x20>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	0598      	lsls	r0, r3, #22
 800afce:	d4ed      	bmi.n	800afac <_vfiprintf_r+0x4c>
 800afd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afd2:	f000 fb76 	bl	800b6c2 <__retarget_lock_release_recursive>
 800afd6:	e7e9      	b.n	800afac <_vfiprintf_r+0x4c>
 800afd8:	2300      	movs	r3, #0
 800afda:	9309      	str	r3, [sp, #36]	; 0x24
 800afdc:	2320      	movs	r3, #32
 800afde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800afe6:	2330      	movs	r3, #48	; 0x30
 800afe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1ac <_vfiprintf_r+0x24c>
 800afec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aff0:	f04f 0901 	mov.w	r9, #1
 800aff4:	4623      	mov	r3, r4
 800aff6:	469a      	mov	sl, r3
 800aff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800affc:	b10a      	cbz	r2, 800b002 <_vfiprintf_r+0xa2>
 800affe:	2a25      	cmp	r2, #37	; 0x25
 800b000:	d1f9      	bne.n	800aff6 <_vfiprintf_r+0x96>
 800b002:	ebba 0b04 	subs.w	fp, sl, r4
 800b006:	d00b      	beq.n	800b020 <_vfiprintf_r+0xc0>
 800b008:	465b      	mov	r3, fp
 800b00a:	4622      	mov	r2, r4
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff94 	bl	800af3c <__sfputs_r>
 800b014:	3001      	adds	r0, #1
 800b016:	f000 80aa 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b01a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b01c:	445a      	add	r2, fp
 800b01e:	9209      	str	r2, [sp, #36]	; 0x24
 800b020:	f89a 3000 	ldrb.w	r3, [sl]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a2 	beq.w	800b16e <_vfiprintf_r+0x20e>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b034:	f10a 0a01 	add.w	sl, sl, #1
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	9307      	str	r3, [sp, #28]
 800b03c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b040:	931a      	str	r3, [sp, #104]	; 0x68
 800b042:	4654      	mov	r4, sl
 800b044:	2205      	movs	r2, #5
 800b046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04a:	4858      	ldr	r0, [pc, #352]	; (800b1ac <_vfiprintf_r+0x24c>)
 800b04c:	f7f5 f8d0 	bl	80001f0 <memchr>
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	b9d8      	cbnz	r0, 800b08c <_vfiprintf_r+0x12c>
 800b054:	06d1      	lsls	r1, r2, #27
 800b056:	bf44      	itt	mi
 800b058:	2320      	movmi	r3, #32
 800b05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05e:	0713      	lsls	r3, r2, #28
 800b060:	bf44      	itt	mi
 800b062:	232b      	movmi	r3, #43	; 0x2b
 800b064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b068:	f89a 3000 	ldrb.w	r3, [sl]
 800b06c:	2b2a      	cmp	r3, #42	; 0x2a
 800b06e:	d015      	beq.n	800b09c <_vfiprintf_r+0x13c>
 800b070:	9a07      	ldr	r2, [sp, #28]
 800b072:	4654      	mov	r4, sl
 800b074:	2000      	movs	r0, #0
 800b076:	f04f 0c0a 	mov.w	ip, #10
 800b07a:	4621      	mov	r1, r4
 800b07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b080:	3b30      	subs	r3, #48	; 0x30
 800b082:	2b09      	cmp	r3, #9
 800b084:	d94e      	bls.n	800b124 <_vfiprintf_r+0x1c4>
 800b086:	b1b0      	cbz	r0, 800b0b6 <_vfiprintf_r+0x156>
 800b088:	9207      	str	r2, [sp, #28]
 800b08a:	e014      	b.n	800b0b6 <_vfiprintf_r+0x156>
 800b08c:	eba0 0308 	sub.w	r3, r0, r8
 800b090:	fa09 f303 	lsl.w	r3, r9, r3
 800b094:	4313      	orrs	r3, r2
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	46a2      	mov	sl, r4
 800b09a:	e7d2      	b.n	800b042 <_vfiprintf_r+0xe2>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1d19      	adds	r1, r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	9103      	str	r1, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfbb      	ittet	lt
 800b0a8:	425b      	neglt	r3, r3
 800b0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ae:	9307      	strge	r3, [sp, #28]
 800b0b0:	9307      	strlt	r3, [sp, #28]
 800b0b2:	bfb8      	it	lt
 800b0b4:	9204      	strlt	r2, [sp, #16]
 800b0b6:	7823      	ldrb	r3, [r4, #0]
 800b0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ba:	d10c      	bne.n	800b0d6 <_vfiprintf_r+0x176>
 800b0bc:	7863      	ldrb	r3, [r4, #1]
 800b0be:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c0:	d135      	bne.n	800b12e <_vfiprintf_r+0x1ce>
 800b0c2:	9b03      	ldr	r3, [sp, #12]
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	9203      	str	r2, [sp, #12]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	bfb8      	it	lt
 800b0ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0d2:	3402      	adds	r4, #2
 800b0d4:	9305      	str	r3, [sp, #20]
 800b0d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1bc <_vfiprintf_r+0x25c>
 800b0da:	7821      	ldrb	r1, [r4, #0]
 800b0dc:	2203      	movs	r2, #3
 800b0de:	4650      	mov	r0, sl
 800b0e0:	f7f5 f886 	bl	80001f0 <memchr>
 800b0e4:	b140      	cbz	r0, 800b0f8 <_vfiprintf_r+0x198>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	eba0 000a 	sub.w	r0, r0, sl
 800b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	4303      	orrs	r3, r0
 800b0f4:	3401      	adds	r4, #1
 800b0f6:	9304      	str	r3, [sp, #16]
 800b0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fc:	482c      	ldr	r0, [pc, #176]	; (800b1b0 <_vfiprintf_r+0x250>)
 800b0fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b102:	2206      	movs	r2, #6
 800b104:	f7f5 f874 	bl	80001f0 <memchr>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d03f      	beq.n	800b18c <_vfiprintf_r+0x22c>
 800b10c:	4b29      	ldr	r3, [pc, #164]	; (800b1b4 <_vfiprintf_r+0x254>)
 800b10e:	bb1b      	cbnz	r3, 800b158 <_vfiprintf_r+0x1f8>
 800b110:	9b03      	ldr	r3, [sp, #12]
 800b112:	3307      	adds	r3, #7
 800b114:	f023 0307 	bic.w	r3, r3, #7
 800b118:	3308      	adds	r3, #8
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11e:	443b      	add	r3, r7
 800b120:	9309      	str	r3, [sp, #36]	; 0x24
 800b122:	e767      	b.n	800aff4 <_vfiprintf_r+0x94>
 800b124:	fb0c 3202 	mla	r2, ip, r2, r3
 800b128:	460c      	mov	r4, r1
 800b12a:	2001      	movs	r0, #1
 800b12c:	e7a5      	b.n	800b07a <_vfiprintf_r+0x11a>
 800b12e:	2300      	movs	r3, #0
 800b130:	3401      	adds	r4, #1
 800b132:	9305      	str	r3, [sp, #20]
 800b134:	4619      	mov	r1, r3
 800b136:	f04f 0c0a 	mov.w	ip, #10
 800b13a:	4620      	mov	r0, r4
 800b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b140:	3a30      	subs	r2, #48	; 0x30
 800b142:	2a09      	cmp	r2, #9
 800b144:	d903      	bls.n	800b14e <_vfiprintf_r+0x1ee>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0c5      	beq.n	800b0d6 <_vfiprintf_r+0x176>
 800b14a:	9105      	str	r1, [sp, #20]
 800b14c:	e7c3      	b.n	800b0d6 <_vfiprintf_r+0x176>
 800b14e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b152:	4604      	mov	r4, r0
 800b154:	2301      	movs	r3, #1
 800b156:	e7f0      	b.n	800b13a <_vfiprintf_r+0x1da>
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4630      	mov	r0, r6
 800b164:	f7fc f84a 	bl	80071fc <_printf_float>
 800b168:	4607      	mov	r7, r0
 800b16a:	1c78      	adds	r0, r7, #1
 800b16c:	d1d6      	bne.n	800b11c <_vfiprintf_r+0x1bc>
 800b16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b170:	07d9      	lsls	r1, r3, #31
 800b172:	d405      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b174:	89ab      	ldrh	r3, [r5, #12]
 800b176:	059a      	lsls	r2, r3, #22
 800b178:	d402      	bmi.n	800b180 <_vfiprintf_r+0x220>
 800b17a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17c:	f000 faa1 	bl	800b6c2 <__retarget_lock_release_recursive>
 800b180:	89ab      	ldrh	r3, [r5, #12]
 800b182:	065b      	lsls	r3, r3, #25
 800b184:	f53f af12 	bmi.w	800afac <_vfiprintf_r+0x4c>
 800b188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b18a:	e711      	b.n	800afb0 <_vfiprintf_r+0x50>
 800b18c:	ab03      	add	r3, sp, #12
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	462a      	mov	r2, r5
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <_vfiprintf_r+0x258>)
 800b194:	a904      	add	r1, sp, #16
 800b196:	4630      	mov	r0, r6
 800b198:	f7fc fad4 	bl	8007744 <_printf_i>
 800b19c:	e7e4      	b.n	800b168 <_vfiprintf_r+0x208>
 800b19e:	bf00      	nop
 800b1a0:	0800bec4 	.word	0x0800bec4
 800b1a4:	0800bee4 	.word	0x0800bee4
 800b1a8:	0800bea4 	.word	0x0800bea4
 800b1ac:	0800be54 	.word	0x0800be54
 800b1b0:	0800be5e 	.word	0x0800be5e
 800b1b4:	080071fd 	.word	0x080071fd
 800b1b8:	0800af3d 	.word	0x0800af3d
 800b1bc:	0800be5a 	.word	0x0800be5a

0800b1c0 <__swbuf_r>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	460e      	mov	r6, r1
 800b1c4:	4614      	mov	r4, r2
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	b118      	cbz	r0, 800b1d2 <__swbuf_r+0x12>
 800b1ca:	6983      	ldr	r3, [r0, #24]
 800b1cc:	b90b      	cbnz	r3, 800b1d2 <__swbuf_r+0x12>
 800b1ce:	f000 f9d9 	bl	800b584 <__sinit>
 800b1d2:	4b21      	ldr	r3, [pc, #132]	; (800b258 <__swbuf_r+0x98>)
 800b1d4:	429c      	cmp	r4, r3
 800b1d6:	d12b      	bne.n	800b230 <__swbuf_r+0x70>
 800b1d8:	686c      	ldr	r4, [r5, #4]
 800b1da:	69a3      	ldr	r3, [r4, #24]
 800b1dc:	60a3      	str	r3, [r4, #8]
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	071a      	lsls	r2, r3, #28
 800b1e2:	d52f      	bpl.n	800b244 <__swbuf_r+0x84>
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	b36b      	cbz	r3, 800b244 <__swbuf_r+0x84>
 800b1e8:	6923      	ldr	r3, [r4, #16]
 800b1ea:	6820      	ldr	r0, [r4, #0]
 800b1ec:	1ac0      	subs	r0, r0, r3
 800b1ee:	6963      	ldr	r3, [r4, #20]
 800b1f0:	b2f6      	uxtb	r6, r6
 800b1f2:	4283      	cmp	r3, r0
 800b1f4:	4637      	mov	r7, r6
 800b1f6:	dc04      	bgt.n	800b202 <__swbuf_r+0x42>
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 f92e 	bl	800b45c <_fflush_r>
 800b200:	bb30      	cbnz	r0, 800b250 <__swbuf_r+0x90>
 800b202:	68a3      	ldr	r3, [r4, #8]
 800b204:	3b01      	subs	r3, #1
 800b206:	60a3      	str	r3, [r4, #8]
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	6022      	str	r2, [r4, #0]
 800b20e:	701e      	strb	r6, [r3, #0]
 800b210:	6963      	ldr	r3, [r4, #20]
 800b212:	3001      	adds	r0, #1
 800b214:	4283      	cmp	r3, r0
 800b216:	d004      	beq.n	800b222 <__swbuf_r+0x62>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	07db      	lsls	r3, r3, #31
 800b21c:	d506      	bpl.n	800b22c <__swbuf_r+0x6c>
 800b21e:	2e0a      	cmp	r6, #10
 800b220:	d104      	bne.n	800b22c <__swbuf_r+0x6c>
 800b222:	4621      	mov	r1, r4
 800b224:	4628      	mov	r0, r5
 800b226:	f000 f919 	bl	800b45c <_fflush_r>
 800b22a:	b988      	cbnz	r0, 800b250 <__swbuf_r+0x90>
 800b22c:	4638      	mov	r0, r7
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <__swbuf_r+0x9c>)
 800b232:	429c      	cmp	r4, r3
 800b234:	d101      	bne.n	800b23a <__swbuf_r+0x7a>
 800b236:	68ac      	ldr	r4, [r5, #8]
 800b238:	e7cf      	b.n	800b1da <__swbuf_r+0x1a>
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <__swbuf_r+0xa0>)
 800b23c:	429c      	cmp	r4, r3
 800b23e:	bf08      	it	eq
 800b240:	68ec      	ldreq	r4, [r5, #12]
 800b242:	e7ca      	b.n	800b1da <__swbuf_r+0x1a>
 800b244:	4621      	mov	r1, r4
 800b246:	4628      	mov	r0, r5
 800b248:	f000 f80c 	bl	800b264 <__swsetup_r>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d0cb      	beq.n	800b1e8 <__swbuf_r+0x28>
 800b250:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b254:	e7ea      	b.n	800b22c <__swbuf_r+0x6c>
 800b256:	bf00      	nop
 800b258:	0800bec4 	.word	0x0800bec4
 800b25c:	0800bee4 	.word	0x0800bee4
 800b260:	0800bea4 	.word	0x0800bea4

0800b264 <__swsetup_r>:
 800b264:	4b32      	ldr	r3, [pc, #200]	; (800b330 <__swsetup_r+0xcc>)
 800b266:	b570      	push	{r4, r5, r6, lr}
 800b268:	681d      	ldr	r5, [r3, #0]
 800b26a:	4606      	mov	r6, r0
 800b26c:	460c      	mov	r4, r1
 800b26e:	b125      	cbz	r5, 800b27a <__swsetup_r+0x16>
 800b270:	69ab      	ldr	r3, [r5, #24]
 800b272:	b913      	cbnz	r3, 800b27a <__swsetup_r+0x16>
 800b274:	4628      	mov	r0, r5
 800b276:	f000 f985 	bl	800b584 <__sinit>
 800b27a:	4b2e      	ldr	r3, [pc, #184]	; (800b334 <__swsetup_r+0xd0>)
 800b27c:	429c      	cmp	r4, r3
 800b27e:	d10f      	bne.n	800b2a0 <__swsetup_r+0x3c>
 800b280:	686c      	ldr	r4, [r5, #4]
 800b282:	89a3      	ldrh	r3, [r4, #12]
 800b284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b288:	0719      	lsls	r1, r3, #28
 800b28a:	d42c      	bmi.n	800b2e6 <__swsetup_r+0x82>
 800b28c:	06dd      	lsls	r5, r3, #27
 800b28e:	d411      	bmi.n	800b2b4 <__swsetup_r+0x50>
 800b290:	2309      	movs	r3, #9
 800b292:	6033      	str	r3, [r6, #0]
 800b294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b29e:	e03e      	b.n	800b31e <__swsetup_r+0xba>
 800b2a0:	4b25      	ldr	r3, [pc, #148]	; (800b338 <__swsetup_r+0xd4>)
 800b2a2:	429c      	cmp	r4, r3
 800b2a4:	d101      	bne.n	800b2aa <__swsetup_r+0x46>
 800b2a6:	68ac      	ldr	r4, [r5, #8]
 800b2a8:	e7eb      	b.n	800b282 <__swsetup_r+0x1e>
 800b2aa:	4b24      	ldr	r3, [pc, #144]	; (800b33c <__swsetup_r+0xd8>)
 800b2ac:	429c      	cmp	r4, r3
 800b2ae:	bf08      	it	eq
 800b2b0:	68ec      	ldreq	r4, [r5, #12]
 800b2b2:	e7e6      	b.n	800b282 <__swsetup_r+0x1e>
 800b2b4:	0758      	lsls	r0, r3, #29
 800b2b6:	d512      	bpl.n	800b2de <__swsetup_r+0x7a>
 800b2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ba:	b141      	cbz	r1, 800b2ce <__swsetup_r+0x6a>
 800b2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2c0:	4299      	cmp	r1, r3
 800b2c2:	d002      	beq.n	800b2ca <__swsetup_r+0x66>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f7ff fb27 	bl	800a918 <_free_r>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	f043 0308 	orr.w	r3, r3, #8
 800b2e4:	81a3      	strh	r3, [r4, #12]
 800b2e6:	6923      	ldr	r3, [r4, #16]
 800b2e8:	b94b      	cbnz	r3, 800b2fe <__swsetup_r+0x9a>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2f4:	d003      	beq.n	800b2fe <__swsetup_r+0x9a>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f000 fa09 	bl	800b710 <__smakebuf_r>
 800b2fe:	89a0      	ldrh	r0, [r4, #12]
 800b300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b304:	f010 0301 	ands.w	r3, r0, #1
 800b308:	d00a      	beq.n	800b320 <__swsetup_r+0xbc>
 800b30a:	2300      	movs	r3, #0
 800b30c:	60a3      	str	r3, [r4, #8]
 800b30e:	6963      	ldr	r3, [r4, #20]
 800b310:	425b      	negs	r3, r3
 800b312:	61a3      	str	r3, [r4, #24]
 800b314:	6923      	ldr	r3, [r4, #16]
 800b316:	b943      	cbnz	r3, 800b32a <__swsetup_r+0xc6>
 800b318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b31c:	d1ba      	bne.n	800b294 <__swsetup_r+0x30>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	0781      	lsls	r1, r0, #30
 800b322:	bf58      	it	pl
 800b324:	6963      	ldrpl	r3, [r4, #20]
 800b326:	60a3      	str	r3, [r4, #8]
 800b328:	e7f4      	b.n	800b314 <__swsetup_r+0xb0>
 800b32a:	2000      	movs	r0, #0
 800b32c:	e7f7      	b.n	800b31e <__swsetup_r+0xba>
 800b32e:	bf00      	nop
 800b330:	20000010 	.word	0x20000010
 800b334:	0800bec4 	.word	0x0800bec4
 800b338:	0800bee4 	.word	0x0800bee4
 800b33c:	0800bea4 	.word	0x0800bea4

0800b340 <abort>:
 800b340:	b508      	push	{r3, lr}
 800b342:	2006      	movs	r0, #6
 800b344:	f000 fa54 	bl	800b7f0 <raise>
 800b348:	2001      	movs	r0, #1
 800b34a:	f7f6 f9db 	bl	8001704 <_exit>
	...

0800b350 <__sflush_r>:
 800b350:	898a      	ldrh	r2, [r1, #12]
 800b352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b356:	4605      	mov	r5, r0
 800b358:	0710      	lsls	r0, r2, #28
 800b35a:	460c      	mov	r4, r1
 800b35c:	d458      	bmi.n	800b410 <__sflush_r+0xc0>
 800b35e:	684b      	ldr	r3, [r1, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	dc05      	bgt.n	800b370 <__sflush_r+0x20>
 800b364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	dc02      	bgt.n	800b370 <__sflush_r+0x20>
 800b36a:	2000      	movs	r0, #0
 800b36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b372:	2e00      	cmp	r6, #0
 800b374:	d0f9      	beq.n	800b36a <__sflush_r+0x1a>
 800b376:	2300      	movs	r3, #0
 800b378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b37c:	682f      	ldr	r7, [r5, #0]
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	d032      	beq.n	800b3e8 <__sflush_r+0x98>
 800b382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	075a      	lsls	r2, r3, #29
 800b388:	d505      	bpl.n	800b396 <__sflush_r+0x46>
 800b38a:	6863      	ldr	r3, [r4, #4]
 800b38c:	1ac0      	subs	r0, r0, r3
 800b38e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b390:	b10b      	cbz	r3, 800b396 <__sflush_r+0x46>
 800b392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b394:	1ac0      	subs	r0, r0, r3
 800b396:	2300      	movs	r3, #0
 800b398:	4602      	mov	r2, r0
 800b39a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b39c:	6a21      	ldr	r1, [r4, #32]
 800b39e:	4628      	mov	r0, r5
 800b3a0:	47b0      	blx	r6
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	d106      	bne.n	800b3b6 <__sflush_r+0x66>
 800b3a8:	6829      	ldr	r1, [r5, #0]
 800b3aa:	291d      	cmp	r1, #29
 800b3ac:	d82c      	bhi.n	800b408 <__sflush_r+0xb8>
 800b3ae:	4a2a      	ldr	r2, [pc, #168]	; (800b458 <__sflush_r+0x108>)
 800b3b0:	40ca      	lsrs	r2, r1
 800b3b2:	07d6      	lsls	r6, r2, #31
 800b3b4:	d528      	bpl.n	800b408 <__sflush_r+0xb8>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	6062      	str	r2, [r4, #4]
 800b3ba:	04d9      	lsls	r1, r3, #19
 800b3bc:	6922      	ldr	r2, [r4, #16]
 800b3be:	6022      	str	r2, [r4, #0]
 800b3c0:	d504      	bpl.n	800b3cc <__sflush_r+0x7c>
 800b3c2:	1c42      	adds	r2, r0, #1
 800b3c4:	d101      	bne.n	800b3ca <__sflush_r+0x7a>
 800b3c6:	682b      	ldr	r3, [r5, #0]
 800b3c8:	b903      	cbnz	r3, 800b3cc <__sflush_r+0x7c>
 800b3ca:	6560      	str	r0, [r4, #84]	; 0x54
 800b3cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ce:	602f      	str	r7, [r5, #0]
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	d0ca      	beq.n	800b36a <__sflush_r+0x1a>
 800b3d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3d8:	4299      	cmp	r1, r3
 800b3da:	d002      	beq.n	800b3e2 <__sflush_r+0x92>
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f7ff fa9b 	bl	800a918 <_free_r>
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	6360      	str	r0, [r4, #52]	; 0x34
 800b3e6:	e7c1      	b.n	800b36c <__sflush_r+0x1c>
 800b3e8:	6a21      	ldr	r1, [r4, #32]
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	47b0      	blx	r6
 800b3f0:	1c41      	adds	r1, r0, #1
 800b3f2:	d1c7      	bne.n	800b384 <__sflush_r+0x34>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0c4      	beq.n	800b384 <__sflush_r+0x34>
 800b3fa:	2b1d      	cmp	r3, #29
 800b3fc:	d001      	beq.n	800b402 <__sflush_r+0xb2>
 800b3fe:	2b16      	cmp	r3, #22
 800b400:	d101      	bne.n	800b406 <__sflush_r+0xb6>
 800b402:	602f      	str	r7, [r5, #0]
 800b404:	e7b1      	b.n	800b36a <__sflush_r+0x1a>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b40c:	81a3      	strh	r3, [r4, #12]
 800b40e:	e7ad      	b.n	800b36c <__sflush_r+0x1c>
 800b410:	690f      	ldr	r7, [r1, #16]
 800b412:	2f00      	cmp	r7, #0
 800b414:	d0a9      	beq.n	800b36a <__sflush_r+0x1a>
 800b416:	0793      	lsls	r3, r2, #30
 800b418:	680e      	ldr	r6, [r1, #0]
 800b41a:	bf08      	it	eq
 800b41c:	694b      	ldreq	r3, [r1, #20]
 800b41e:	600f      	str	r7, [r1, #0]
 800b420:	bf18      	it	ne
 800b422:	2300      	movne	r3, #0
 800b424:	eba6 0807 	sub.w	r8, r6, r7
 800b428:	608b      	str	r3, [r1, #8]
 800b42a:	f1b8 0f00 	cmp.w	r8, #0
 800b42e:	dd9c      	ble.n	800b36a <__sflush_r+0x1a>
 800b430:	6a21      	ldr	r1, [r4, #32]
 800b432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b434:	4643      	mov	r3, r8
 800b436:	463a      	mov	r2, r7
 800b438:	4628      	mov	r0, r5
 800b43a:	47b0      	blx	r6
 800b43c:	2800      	cmp	r0, #0
 800b43e:	dc06      	bgt.n	800b44e <__sflush_r+0xfe>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b446:	81a3      	strh	r3, [r4, #12]
 800b448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b44c:	e78e      	b.n	800b36c <__sflush_r+0x1c>
 800b44e:	4407      	add	r7, r0
 800b450:	eba8 0800 	sub.w	r8, r8, r0
 800b454:	e7e9      	b.n	800b42a <__sflush_r+0xda>
 800b456:	bf00      	nop
 800b458:	20400001 	.word	0x20400001

0800b45c <_fflush_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	690b      	ldr	r3, [r1, #16]
 800b460:	4605      	mov	r5, r0
 800b462:	460c      	mov	r4, r1
 800b464:	b913      	cbnz	r3, 800b46c <_fflush_r+0x10>
 800b466:	2500      	movs	r5, #0
 800b468:	4628      	mov	r0, r5
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	b118      	cbz	r0, 800b476 <_fflush_r+0x1a>
 800b46e:	6983      	ldr	r3, [r0, #24]
 800b470:	b90b      	cbnz	r3, 800b476 <_fflush_r+0x1a>
 800b472:	f000 f887 	bl	800b584 <__sinit>
 800b476:	4b14      	ldr	r3, [pc, #80]	; (800b4c8 <_fflush_r+0x6c>)
 800b478:	429c      	cmp	r4, r3
 800b47a:	d11b      	bne.n	800b4b4 <_fflush_r+0x58>
 800b47c:	686c      	ldr	r4, [r5, #4]
 800b47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0ef      	beq.n	800b466 <_fflush_r+0xa>
 800b486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b488:	07d0      	lsls	r0, r2, #31
 800b48a:	d404      	bmi.n	800b496 <_fflush_r+0x3a>
 800b48c:	0599      	lsls	r1, r3, #22
 800b48e:	d402      	bmi.n	800b496 <_fflush_r+0x3a>
 800b490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b492:	f000 f915 	bl	800b6c0 <__retarget_lock_acquire_recursive>
 800b496:	4628      	mov	r0, r5
 800b498:	4621      	mov	r1, r4
 800b49a:	f7ff ff59 	bl	800b350 <__sflush_r>
 800b49e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4a0:	07da      	lsls	r2, r3, #31
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	d4e0      	bmi.n	800b468 <_fflush_r+0xc>
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	059b      	lsls	r3, r3, #22
 800b4aa:	d4dd      	bmi.n	800b468 <_fflush_r+0xc>
 800b4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ae:	f000 f908 	bl	800b6c2 <__retarget_lock_release_recursive>
 800b4b2:	e7d9      	b.n	800b468 <_fflush_r+0xc>
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <_fflush_r+0x70>)
 800b4b6:	429c      	cmp	r4, r3
 800b4b8:	d101      	bne.n	800b4be <_fflush_r+0x62>
 800b4ba:	68ac      	ldr	r4, [r5, #8]
 800b4bc:	e7df      	b.n	800b47e <_fflush_r+0x22>
 800b4be:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <_fflush_r+0x74>)
 800b4c0:	429c      	cmp	r4, r3
 800b4c2:	bf08      	it	eq
 800b4c4:	68ec      	ldreq	r4, [r5, #12]
 800b4c6:	e7da      	b.n	800b47e <_fflush_r+0x22>
 800b4c8:	0800bec4 	.word	0x0800bec4
 800b4cc:	0800bee4 	.word	0x0800bee4
 800b4d0:	0800bea4 	.word	0x0800bea4

0800b4d4 <std>:
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	4604      	mov	r4, r0
 800b4da:	e9c0 3300 	strd	r3, r3, [r0]
 800b4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4e2:	6083      	str	r3, [r0, #8]
 800b4e4:	8181      	strh	r1, [r0, #12]
 800b4e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b4e8:	81c2      	strh	r2, [r0, #14]
 800b4ea:	6183      	str	r3, [r0, #24]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	2208      	movs	r2, #8
 800b4f0:	305c      	adds	r0, #92	; 0x5c
 800b4f2:	f7fb fddb 	bl	80070ac <memset>
 800b4f6:	4b05      	ldr	r3, [pc, #20]	; (800b50c <std+0x38>)
 800b4f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b4fa:	4b05      	ldr	r3, [pc, #20]	; (800b510 <std+0x3c>)
 800b4fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4fe:	4b05      	ldr	r3, [pc, #20]	; (800b514 <std+0x40>)
 800b500:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b502:	4b05      	ldr	r3, [pc, #20]	; (800b518 <std+0x44>)
 800b504:	6224      	str	r4, [r4, #32]
 800b506:	6323      	str	r3, [r4, #48]	; 0x30
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	bf00      	nop
 800b50c:	0800b829 	.word	0x0800b829
 800b510:	0800b84b 	.word	0x0800b84b
 800b514:	0800b883 	.word	0x0800b883
 800b518:	0800b8a7 	.word	0x0800b8a7

0800b51c <_cleanup_r>:
 800b51c:	4901      	ldr	r1, [pc, #4]	; (800b524 <_cleanup_r+0x8>)
 800b51e:	f000 b8af 	b.w	800b680 <_fwalk_reent>
 800b522:	bf00      	nop
 800b524:	0800b45d 	.word	0x0800b45d

0800b528 <__sfmoreglue>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	2268      	movs	r2, #104	; 0x68
 800b52c:	1e4d      	subs	r5, r1, #1
 800b52e:	4355      	muls	r5, r2
 800b530:	460e      	mov	r6, r1
 800b532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b536:	f7ff fa5b 	bl	800a9f0 <_malloc_r>
 800b53a:	4604      	mov	r4, r0
 800b53c:	b140      	cbz	r0, 800b550 <__sfmoreglue+0x28>
 800b53e:	2100      	movs	r1, #0
 800b540:	e9c0 1600 	strd	r1, r6, [r0]
 800b544:	300c      	adds	r0, #12
 800b546:	60a0      	str	r0, [r4, #8]
 800b548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b54c:	f7fb fdae 	bl	80070ac <memset>
 800b550:	4620      	mov	r0, r4
 800b552:	bd70      	pop	{r4, r5, r6, pc}

0800b554 <__sfp_lock_acquire>:
 800b554:	4801      	ldr	r0, [pc, #4]	; (800b55c <__sfp_lock_acquire+0x8>)
 800b556:	f000 b8b3 	b.w	800b6c0 <__retarget_lock_acquire_recursive>
 800b55a:	bf00      	nop
 800b55c:	20004c59 	.word	0x20004c59

0800b560 <__sfp_lock_release>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__sfp_lock_release+0x8>)
 800b562:	f000 b8ae 	b.w	800b6c2 <__retarget_lock_release_recursive>
 800b566:	bf00      	nop
 800b568:	20004c59 	.word	0x20004c59

0800b56c <__sinit_lock_acquire>:
 800b56c:	4801      	ldr	r0, [pc, #4]	; (800b574 <__sinit_lock_acquire+0x8>)
 800b56e:	f000 b8a7 	b.w	800b6c0 <__retarget_lock_acquire_recursive>
 800b572:	bf00      	nop
 800b574:	20004c5a 	.word	0x20004c5a

0800b578 <__sinit_lock_release>:
 800b578:	4801      	ldr	r0, [pc, #4]	; (800b580 <__sinit_lock_release+0x8>)
 800b57a:	f000 b8a2 	b.w	800b6c2 <__retarget_lock_release_recursive>
 800b57e:	bf00      	nop
 800b580:	20004c5a 	.word	0x20004c5a

0800b584 <__sinit>:
 800b584:	b510      	push	{r4, lr}
 800b586:	4604      	mov	r4, r0
 800b588:	f7ff fff0 	bl	800b56c <__sinit_lock_acquire>
 800b58c:	69a3      	ldr	r3, [r4, #24]
 800b58e:	b11b      	cbz	r3, 800b598 <__sinit+0x14>
 800b590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b594:	f7ff bff0 	b.w	800b578 <__sinit_lock_release>
 800b598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b59c:	6523      	str	r3, [r4, #80]	; 0x50
 800b59e:	4b13      	ldr	r3, [pc, #76]	; (800b5ec <__sinit+0x68>)
 800b5a0:	4a13      	ldr	r2, [pc, #76]	; (800b5f0 <__sinit+0x6c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	bf04      	itt	eq
 800b5aa:	2301      	moveq	r3, #1
 800b5ac:	61a3      	streq	r3, [r4, #24]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f000 f820 	bl	800b5f4 <__sfp>
 800b5b4:	6060      	str	r0, [r4, #4]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f000 f81c 	bl	800b5f4 <__sfp>
 800b5bc:	60a0      	str	r0, [r4, #8]
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 f818 	bl	800b5f4 <__sfp>
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	60e0      	str	r0, [r4, #12]
 800b5c8:	2104      	movs	r1, #4
 800b5ca:	6860      	ldr	r0, [r4, #4]
 800b5cc:	f7ff ff82 	bl	800b4d4 <std>
 800b5d0:	68a0      	ldr	r0, [r4, #8]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	2109      	movs	r1, #9
 800b5d6:	f7ff ff7d 	bl	800b4d4 <std>
 800b5da:	68e0      	ldr	r0, [r4, #12]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	2112      	movs	r1, #18
 800b5e0:	f7ff ff78 	bl	800b4d4 <std>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	61a3      	str	r3, [r4, #24]
 800b5e8:	e7d2      	b.n	800b590 <__sinit+0xc>
 800b5ea:	bf00      	nop
 800b5ec:	0800ba5c 	.word	0x0800ba5c
 800b5f0:	0800b51d 	.word	0x0800b51d

0800b5f4 <__sfp>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	f7ff ffac 	bl	800b554 <__sfp_lock_acquire>
 800b5fc:	4b1e      	ldr	r3, [pc, #120]	; (800b678 <__sfp+0x84>)
 800b5fe:	681e      	ldr	r6, [r3, #0]
 800b600:	69b3      	ldr	r3, [r6, #24]
 800b602:	b913      	cbnz	r3, 800b60a <__sfp+0x16>
 800b604:	4630      	mov	r0, r6
 800b606:	f7ff ffbd 	bl	800b584 <__sinit>
 800b60a:	3648      	adds	r6, #72	; 0x48
 800b60c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b610:	3b01      	subs	r3, #1
 800b612:	d503      	bpl.n	800b61c <__sfp+0x28>
 800b614:	6833      	ldr	r3, [r6, #0]
 800b616:	b30b      	cbz	r3, 800b65c <__sfp+0x68>
 800b618:	6836      	ldr	r6, [r6, #0]
 800b61a:	e7f7      	b.n	800b60c <__sfp+0x18>
 800b61c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b620:	b9d5      	cbnz	r5, 800b658 <__sfp+0x64>
 800b622:	4b16      	ldr	r3, [pc, #88]	; (800b67c <__sfp+0x88>)
 800b624:	60e3      	str	r3, [r4, #12]
 800b626:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b62a:	6665      	str	r5, [r4, #100]	; 0x64
 800b62c:	f000 f847 	bl	800b6be <__retarget_lock_init_recursive>
 800b630:	f7ff ff96 	bl	800b560 <__sfp_lock_release>
 800b634:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b63c:	6025      	str	r5, [r4, #0]
 800b63e:	61a5      	str	r5, [r4, #24]
 800b640:	2208      	movs	r2, #8
 800b642:	4629      	mov	r1, r5
 800b644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b648:	f7fb fd30 	bl	80070ac <memset>
 800b64c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b654:	4620      	mov	r0, r4
 800b656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b658:	3468      	adds	r4, #104	; 0x68
 800b65a:	e7d9      	b.n	800b610 <__sfp+0x1c>
 800b65c:	2104      	movs	r1, #4
 800b65e:	4638      	mov	r0, r7
 800b660:	f7ff ff62 	bl	800b528 <__sfmoreglue>
 800b664:	4604      	mov	r4, r0
 800b666:	6030      	str	r0, [r6, #0]
 800b668:	2800      	cmp	r0, #0
 800b66a:	d1d5      	bne.n	800b618 <__sfp+0x24>
 800b66c:	f7ff ff78 	bl	800b560 <__sfp_lock_release>
 800b670:	230c      	movs	r3, #12
 800b672:	603b      	str	r3, [r7, #0]
 800b674:	e7ee      	b.n	800b654 <__sfp+0x60>
 800b676:	bf00      	nop
 800b678:	0800ba5c 	.word	0x0800ba5c
 800b67c:	ffff0001 	.word	0xffff0001

0800b680 <_fwalk_reent>:
 800b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b684:	4606      	mov	r6, r0
 800b686:	4688      	mov	r8, r1
 800b688:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b68c:	2700      	movs	r7, #0
 800b68e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b692:	f1b9 0901 	subs.w	r9, r9, #1
 800b696:	d505      	bpl.n	800b6a4 <_fwalk_reent+0x24>
 800b698:	6824      	ldr	r4, [r4, #0]
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	d1f7      	bne.n	800b68e <_fwalk_reent+0xe>
 800b69e:	4638      	mov	r0, r7
 800b6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6a4:	89ab      	ldrh	r3, [r5, #12]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d907      	bls.n	800b6ba <_fwalk_reent+0x3a>
 800b6aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	d003      	beq.n	800b6ba <_fwalk_reent+0x3a>
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	47c0      	blx	r8
 800b6b8:	4307      	orrs	r7, r0
 800b6ba:	3568      	adds	r5, #104	; 0x68
 800b6bc:	e7e9      	b.n	800b692 <_fwalk_reent+0x12>

0800b6be <__retarget_lock_init_recursive>:
 800b6be:	4770      	bx	lr

0800b6c0 <__retarget_lock_acquire_recursive>:
 800b6c0:	4770      	bx	lr

0800b6c2 <__retarget_lock_release_recursive>:
 800b6c2:	4770      	bx	lr

0800b6c4 <__swhatbuf_r>:
 800b6c4:	b570      	push	{r4, r5, r6, lr}
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6cc:	2900      	cmp	r1, #0
 800b6ce:	b096      	sub	sp, #88	; 0x58
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	461d      	mov	r5, r3
 800b6d4:	da08      	bge.n	800b6e8 <__swhatbuf_r+0x24>
 800b6d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	602a      	str	r2, [r5, #0]
 800b6de:	061a      	lsls	r2, r3, #24
 800b6e0:	d410      	bmi.n	800b704 <__swhatbuf_r+0x40>
 800b6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6e6:	e00e      	b.n	800b706 <__swhatbuf_r+0x42>
 800b6e8:	466a      	mov	r2, sp
 800b6ea:	f000 f903 	bl	800b8f4 <_fstat_r>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	dbf1      	blt.n	800b6d6 <__swhatbuf_r+0x12>
 800b6f2:	9a01      	ldr	r2, [sp, #4]
 800b6f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b6f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b6fc:	425a      	negs	r2, r3
 800b6fe:	415a      	adcs	r2, r3
 800b700:	602a      	str	r2, [r5, #0]
 800b702:	e7ee      	b.n	800b6e2 <__swhatbuf_r+0x1e>
 800b704:	2340      	movs	r3, #64	; 0x40
 800b706:	2000      	movs	r0, #0
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	b016      	add	sp, #88	; 0x58
 800b70c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b710 <__smakebuf_r>:
 800b710:	898b      	ldrh	r3, [r1, #12]
 800b712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b714:	079d      	lsls	r5, r3, #30
 800b716:	4606      	mov	r6, r0
 800b718:	460c      	mov	r4, r1
 800b71a:	d507      	bpl.n	800b72c <__smakebuf_r+0x1c>
 800b71c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	2301      	movs	r3, #1
 800b726:	6163      	str	r3, [r4, #20]
 800b728:	b002      	add	sp, #8
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	ab01      	add	r3, sp, #4
 800b72e:	466a      	mov	r2, sp
 800b730:	f7ff ffc8 	bl	800b6c4 <__swhatbuf_r>
 800b734:	9900      	ldr	r1, [sp, #0]
 800b736:	4605      	mov	r5, r0
 800b738:	4630      	mov	r0, r6
 800b73a:	f7ff f959 	bl	800a9f0 <_malloc_r>
 800b73e:	b948      	cbnz	r0, 800b754 <__smakebuf_r+0x44>
 800b740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b744:	059a      	lsls	r2, r3, #22
 800b746:	d4ef      	bmi.n	800b728 <__smakebuf_r+0x18>
 800b748:	f023 0303 	bic.w	r3, r3, #3
 800b74c:	f043 0302 	orr.w	r3, r3, #2
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	e7e3      	b.n	800b71c <__smakebuf_r+0xc>
 800b754:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <__smakebuf_r+0x7c>)
 800b756:	62b3      	str	r3, [r6, #40]	; 0x28
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	6020      	str	r0, [r4, #0]
 800b75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	9b00      	ldr	r3, [sp, #0]
 800b764:	6163      	str	r3, [r4, #20]
 800b766:	9b01      	ldr	r3, [sp, #4]
 800b768:	6120      	str	r0, [r4, #16]
 800b76a:	b15b      	cbz	r3, 800b784 <__smakebuf_r+0x74>
 800b76c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b770:	4630      	mov	r0, r6
 800b772:	f000 f8d1 	bl	800b918 <_isatty_r>
 800b776:	b128      	cbz	r0, 800b784 <__smakebuf_r+0x74>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	81a3      	strh	r3, [r4, #12]
 800b784:	89a0      	ldrh	r0, [r4, #12]
 800b786:	4305      	orrs	r5, r0
 800b788:	81a5      	strh	r5, [r4, #12]
 800b78a:	e7cd      	b.n	800b728 <__smakebuf_r+0x18>
 800b78c:	0800b51d 	.word	0x0800b51d

0800b790 <_malloc_usable_size_r>:
 800b790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b794:	1f18      	subs	r0, r3, #4
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfbc      	itt	lt
 800b79a:	580b      	ldrlt	r3, [r1, r0]
 800b79c:	18c0      	addlt	r0, r0, r3
 800b79e:	4770      	bx	lr

0800b7a0 <_raise_r>:
 800b7a0:	291f      	cmp	r1, #31
 800b7a2:	b538      	push	{r3, r4, r5, lr}
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	d904      	bls.n	800b7b4 <_raise_r+0x14>
 800b7aa:	2316      	movs	r3, #22
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b7b6:	b112      	cbz	r2, 800b7be <_raise_r+0x1e>
 800b7b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7bc:	b94b      	cbnz	r3, 800b7d2 <_raise_r+0x32>
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 f830 	bl	800b824 <_getpid_r>
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ce:	f000 b817 	b.w	800b800 <_kill_r>
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d00a      	beq.n	800b7ec <_raise_r+0x4c>
 800b7d6:	1c59      	adds	r1, r3, #1
 800b7d8:	d103      	bne.n	800b7e2 <_raise_r+0x42>
 800b7da:	2316      	movs	r3, #22
 800b7dc:	6003      	str	r3, [r0, #0]
 800b7de:	2001      	movs	r0, #1
 800b7e0:	e7e7      	b.n	800b7b2 <_raise_r+0x12>
 800b7e2:	2400      	movs	r4, #0
 800b7e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	4798      	blx	r3
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e7e0      	b.n	800b7b2 <_raise_r+0x12>

0800b7f0 <raise>:
 800b7f0:	4b02      	ldr	r3, [pc, #8]	; (800b7fc <raise+0xc>)
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	6818      	ldr	r0, [r3, #0]
 800b7f6:	f7ff bfd3 	b.w	800b7a0 <_raise_r>
 800b7fa:	bf00      	nop
 800b7fc:	20000010 	.word	0x20000010

0800b800 <_kill_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d07      	ldr	r5, [pc, #28]	; (800b820 <_kill_r+0x20>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	4611      	mov	r1, r2
 800b80c:	602b      	str	r3, [r5, #0]
 800b80e:	f7f5 ff69 	bl	80016e4 <_kill>
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	d102      	bne.n	800b81c <_kill_r+0x1c>
 800b816:	682b      	ldr	r3, [r5, #0]
 800b818:	b103      	cbz	r3, 800b81c <_kill_r+0x1c>
 800b81a:	6023      	str	r3, [r4, #0]
 800b81c:	bd38      	pop	{r3, r4, r5, pc}
 800b81e:	bf00      	nop
 800b820:	20004c54 	.word	0x20004c54

0800b824 <_getpid_r>:
 800b824:	f7f5 bf56 	b.w	80016d4 <_getpid>

0800b828 <__sread>:
 800b828:	b510      	push	{r4, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	f000 f894 	bl	800b95c <_read_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	bfab      	itete	ge
 800b838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b83a:	89a3      	ldrhlt	r3, [r4, #12]
 800b83c:	181b      	addge	r3, r3, r0
 800b83e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b842:	bfac      	ite	ge
 800b844:	6563      	strge	r3, [r4, #84]	; 0x54
 800b846:	81a3      	strhlt	r3, [r4, #12]
 800b848:	bd10      	pop	{r4, pc}

0800b84a <__swrite>:
 800b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	461f      	mov	r7, r3
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	05db      	lsls	r3, r3, #23
 800b854:	4605      	mov	r5, r0
 800b856:	460c      	mov	r4, r1
 800b858:	4616      	mov	r6, r2
 800b85a:	d505      	bpl.n	800b868 <__swrite+0x1e>
 800b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b860:	2302      	movs	r3, #2
 800b862:	2200      	movs	r2, #0
 800b864:	f000 f868 	bl	800b938 <_lseek_r>
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b86e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	f000 b817 	b.w	800b8b0 <_write_r>

0800b882 <__sseek>:
 800b882:	b510      	push	{r4, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88a:	f000 f855 	bl	800b938 <_lseek_r>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	bf15      	itete	ne
 800b894:	6560      	strne	r0, [r4, #84]	; 0x54
 800b896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b89e:	81a3      	strheq	r3, [r4, #12]
 800b8a0:	bf18      	it	ne
 800b8a2:	81a3      	strhne	r3, [r4, #12]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <__sclose>:
 800b8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8aa:	f000 b813 	b.w	800b8d4 <_close_r>
	...

0800b8b0 <_write_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d07      	ldr	r5, [pc, #28]	; (800b8d0 <_write_r+0x20>)
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f7f5 ff47 	bl	8001752 <_write>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_write_r+0x1e>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_write_r+0x1e>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	20004c54 	.word	0x20004c54

0800b8d4 <_close_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d06      	ldr	r5, [pc, #24]	; (800b8f0 <_close_r+0x1c>)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4608      	mov	r0, r1
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	f7f5 ff53 	bl	800178a <_close>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d102      	bne.n	800b8ee <_close_r+0x1a>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b103      	cbz	r3, 800b8ee <_close_r+0x1a>
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	20004c54 	.word	0x20004c54

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	; (800b914 <_fstat_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f5 ff4e 	bl	80017a2 <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20004c54 	.word	0x20004c54

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	; (800b934 <_isatty_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f5 ff4d 	bl	80017c2 <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20004c54 	.word	0x20004c54

0800b938 <_lseek_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	; (800b958 <_lseek_r+0x20>)
 800b93c:	4604      	mov	r4, r0
 800b93e:	4608      	mov	r0, r1
 800b940:	4611      	mov	r1, r2
 800b942:	2200      	movs	r2, #0
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	f7f5 ff46 	bl	80017d8 <_lseek>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_lseek_r+0x1e>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_lseek_r+0x1e>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20004c54 	.word	0x20004c54

0800b95c <_read_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	; (800b97c <_read_r+0x20>)
 800b960:	4604      	mov	r4, r0
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f5 fed4 	bl	8001718 <_read>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_read_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_read_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	20004c54 	.word	0x20004c54

0800b980 <_init>:
 800b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b982:	bf00      	nop
 800b984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b986:	bc08      	pop	{r3}
 800b988:	469e      	mov	lr, r3
 800b98a:	4770      	bx	lr

0800b98c <_fini>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr
